
spi_dma_bno85_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800f1cc  0800f1cc  000101cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3f4  0800f3f4  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3f4  0800f3f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3fc  0800f3fc  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3fc  0800f3fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f400  0800f400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800f404  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fa8  200001e8  0800f5ec  000111e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003190  0800f5ec  00012190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206bc  00000000  00000000  00011211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000538a  00000000  00000000  000318cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00036c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001621  00000000  00000000  00038958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d566  00000000  00000000  00039f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021b86  00000000  00000000  000574df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ca7c  00000000  00000000  00079065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084f4  00000000  00000000  00115b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f1b4 	.word	0x0800f1b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800f1b4 	.word	0x0800f1b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpun>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__aeabi_fcmpun+0x14>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d108      	bne.n	800072e <__aeabi_fcmpun+0x26>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d102      	bne.n	8000728 <__aeabi_fcmpun+0x20>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d102      	bne.n	800072e <__aeabi_fcmpun+0x26>
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	f04f 0001 	mov.w	r0, #1
 8000732:	4770      	bx	lr

08000734 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	
//	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
//	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
//	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
	
	CHIP_SELECT(BNO080);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800073e:	4811      	ldr	r0, [pc, #68]	@ (8000784 <BNO080_GPIO_SPI_Initialization+0x50>)
 8000740:	f001 ff3f 	bl	80025c2 <HAL_GPIO_WritePin>
	WAKE_LOW();
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074a:	480f      	ldr	r0, [pc, #60]	@ (8000788 <BNO080_GPIO_SPI_Initialization+0x54>)
 800074c:	f001 ff39 	bl	80025c2 <HAL_GPIO_WritePin>
	RESET_LOW();
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000756:	480c      	ldr	r0, [pc, #48]	@ (8000788 <BNO080_GPIO_SPI_Initialization+0x54>)
 8000758:	f001 ff33 	bl	80025c2 <HAL_GPIO_WritePin>
	
	

	CHIP_DESELECT(BNO080);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000762:	4808      	ldr	r0, [pc, #32]	@ (8000784 <BNO080_GPIO_SPI_Initialization+0x50>)
 8000764:	f001 ff2d 	bl	80025c2 <HAL_GPIO_WritePin>
	WAKE_HIGH();
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <BNO080_GPIO_SPI_Initialization+0x54>)
 8000770:	f001 ff27 	bl	80025c2 <HAL_GPIO_WritePin>
	RESET_HIGH();
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077a:	4803      	ldr	r0, [pc, #12]	@ (8000788 <BNO080_GPIO_SPI_Initialization+0x54>)
 800077c:	f001 ff21 	bl	80025c2 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40010c00 	.word	0x40010c00
 8000788:	40010800 	.word	0x40010800

0800078c <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8000792:	f7ff ffcf 	bl	8000734 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8000796:	4830      	ldr	r0, [pc, #192]	@ (8000858 <BNO080_Initialization+0xcc>)
 8000798:	f00d fc0a 	bl	800dfb0 <iprintf>
	
	CHIP_DESELECT(BNO080);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a2:	482e      	ldr	r0, [pc, #184]	@ (800085c <BNO080_Initialization+0xd0>)
 80007a4:	f001 ff0d 	bl	80025c2 <HAL_GPIO_WritePin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ae:	482c      	ldr	r0, [pc, #176]	@ (8000860 <BNO080_Initialization+0xd4>)
 80007b0:	f001 ff07 	bl	80025c2 <HAL_GPIO_WritePin>
	RESET_LOW();	//Reset BNO080
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ba:	4829      	ldr	r0, [pc, #164]	@ (8000860 <BNO080_Initialization+0xd4>)
 80007bc:	f001 ff01 	bl	80025c2 <HAL_GPIO_WritePin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80007c0:	20c8      	movs	r0, #200	@ 0xc8
 80007c2:	f001 fa87 	bl	8001cd4 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007cc:	4824      	ldr	r0, [pc, #144]	@ (8000860 <BNO080_Initialization+0xd4>)
 80007ce:	f001 fef8 	bl	80025c2 <HAL_GPIO_WritePin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80007d2:	f000 fb05 	bl	8000de0 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80007d6:	f000 fb03 	bl	8000de0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80007da:	f000 fb25 	bl	8000e28 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80007de:	f000 faff 	bl	8000de0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80007e2:	f000 fb21 	bl	8000e28 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <BNO080_Initialization+0xd8>)
 80007e8:	22f9      	movs	r2, #249	@ 0xf9
 80007ea:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <BNO080_Initialization+0xd8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80007f2:	2102      	movs	r1, #2
 80007f4:	2002      	movs	r0, #2
 80007f6:	f000 fb89 	bl	8000f0c <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80007fa:	f000 faf1 	bl	8000de0 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80007fe:	f000 fb13 	bl	8000e28 <BNO080_receivePacket>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d11b      	bne.n	8000840 <BNO080_Initialization+0xb4>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <BNO080_Initialization+0xdc>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <BNO080_Initialization+0xdc>)
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	461a      	mov	r2, r3
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <BNO080_Initialization+0xdc>)
 8000816:	789b      	ldrb	r3, [r3, #2]
 8000818:	4618      	mov	r0, r3
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <BNO080_Initialization+0xdc>)
 800081c:	78db      	ldrb	r3, [r3, #3]
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	4603      	mov	r3, r0
 8000822:	4812      	ldr	r0, [pc, #72]	@ (800086c <BNO080_Initialization+0xe0>)
 8000824:	f00d fbc4 	bl	800dfb0 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <BNO080_Initialization+0xd8>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2bf8      	cmp	r3, #248	@ 0xf8
 800082e:	d107      	bne.n	8000840 <BNO080_Initialization+0xb4>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <BNO080_Initialization+0xd8>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <BNO080_Initialization+0xe4>)
 8000838:	f00d fbba 	bl	800dfb0 <iprintf>
			return (0);
 800083c:	2300      	movs	r3, #0
 800083e:	e007      	b.n	8000850 <BNO080_Initialization+0xc4>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <BNO080_Initialization+0xd8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	22f8      	movs	r2, #248	@ 0xf8
 8000846:	4619      	mov	r1, r3
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <BNO080_Initialization+0xe8>)
 800084a:	f00d fbb1 	bl	800dfb0 <iprintf>
	return (1); //Something went wrong
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	0800f1cc 	.word	0x0800f1cc
 800085c:	40010c00 	.word	0x40010c00
 8000860:	40010800 	.word	0x40010800
 8000864:	20000208 	.word	0x20000208
 8000868:	20000204 	.word	0x20000204
 800086c:	0800f1e0 	.word	0x0800f1e0
 8000870:	0800f1f8 	.word	0x0800f1f8
 8000874:	0800f218 	.word	0x0800f218

08000878 <SPI2_SendByte>:



unsigned char SPI2_SendByte(unsigned char data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    uint8_t rxData;

    // Transmit and receive data
    HAL_SPI_TransmitReceive(&hspi2, &data, &rxData, 1, HAL_MAX_DELAY);
 8000882:	f107 020f 	add.w	r2, r7, #15
 8000886:	1df9      	adds	r1, r7, #7
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2301      	movs	r3, #1
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <SPI2_SendByte+0x28>)
 8000892:	f004 f9b3 	bl	8004bfc <HAL_SPI_TransmitReceive>
    //HAL_SPI_TransmitReceive_DMA(&hspi2, &data, &rxData, 1);




    return rxData;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200002d8 	.word	0x200002d8

080008a4 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == GPIO_PIN_SET)
 80008a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ac:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <BNO080_dataAvailable+0x50>)
 80008ae:	f001 fe71 	bl	8002594 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d101      	bne.n	80008bc <BNO080_dataAvailable+0x18>
		return (0);
 80008b8:	2300      	movs	r3, #0
 80008ba:	e019      	b.n	80008f0 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80008bc:	f000 fab4 	bl	8000e28 <BNO080_receivePacket>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d113      	bne.n	80008ee <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <BNO080_dataAvailable+0x54>)
 80008c8:	789b      	ldrb	r3, [r3, #2]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d107      	bne.n	80008de <BNO080_dataAvailable+0x3a>
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <BNO080_dataAvailable+0x58>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2bfb      	cmp	r3, #251	@ 0xfb
 80008d4:	d103      	bne.n	80008de <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80008d6:	f000 f82d 	bl	8000934 <BNO080_parseInputReport>
			return (1);
 80008da:	2301      	movs	r3, #1
 80008dc:	e008      	b.n	80008f0 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <BNO080_dataAvailable+0x54>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d103      	bne.n	80008ee <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80008e6:	f000 f80b 	bl	8000900 <BNO080_parseCommandReport>
			return (1);
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40010800 	.word	0x40010800
 80008f8:	20000204 	.word	0x20000204
 80008fc:	20000208 	.word	0x20000208

08000900 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <BNO080_parseCommandReport+0x2c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2bf1      	cmp	r3, #241	@ 0xf1
 800090c:	d109      	bne.n	8000922 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <BNO080_parseCommandReport+0x2c>)
 8000910:	789b      	ldrb	r3, [r3, #2]
 8000912:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b07      	cmp	r3, #7
 8000918:	d103      	bne.n	8000922 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <BNO080_parseCommandReport+0x2c>)
 800091c:	795a      	ldrb	r2, [r3, #5]
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <BNO080_parseCommandReport+0x30>)
 8000920:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000208 	.word	0x20000208
 8000930:	200002c8 	.word	0x200002c8

08000934 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b087      	sub	sp, #28
 8000938:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800093a:	4b97      	ldr	r3, [pc, #604]	@ (8000b98 <BNO080_parseInputReport+0x264>)
 800093c:	785b      	ldrb	r3, [r3, #1]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	4b95      	ldr	r3, [pc, #596]	@ (8000b98 <BNO080_parseInputReport+0x264>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b21b      	sxth	r3, r3
 8000948:	4313      	orrs	r3, r2
 800094a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800094c:	8a3b      	ldrh	r3, [r7, #16]
 800094e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000952:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8000954:	8a3b      	ldrh	r3, [r7, #16]
 8000956:	3b04      	subs	r3, #4
 8000958:	b29b      	uxth	r3, r3
 800095a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 800095c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	061a      	lsls	r2, r3, #24
 8000962:	4b8e      	ldr	r3, [pc, #568]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000964:	78db      	ldrb	r3, [r3, #3]
 8000966:	041b      	lsls	r3, r3, #16
 8000968:	431a      	orrs	r2, r3
 800096a:	4b8c      	ldr	r3, [pc, #560]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 800096c:	789b      	ldrb	r3, [r3, #2]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	4313      	orrs	r3, r2
 8000972:	4a8a      	ldr	r2, [pc, #552]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000974:	7852      	ldrb	r2, [r2, #1]
 8000976:	4313      	orrs	r3, r2
 8000978:	4a89      	ldr	r2, [pc, #548]	@ (8000ba0 <BNO080_parseInputReport+0x26c>)
 800097a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 800097c:	4b87      	ldr	r3, [pc, #540]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 800097e:	79db      	ldrb	r3, [r3, #7]
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8000986:	4b85      	ldr	r3, [pc, #532]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000988:	7a9b      	ldrb	r3, [r3, #10]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	b21a      	sxth	r2, r3
 800098e:	4b83      	ldr	r3, [pc, #524]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000990:	7a5b      	ldrb	r3, [r3, #9]
 8000992:	b21b      	sxth	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	b21b      	sxth	r3, r3
 8000998:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800099a:	4b80      	ldr	r3, [pc, #512]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 800099c:	7b1b      	ldrb	r3, [r3, #12]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	4b7e      	ldr	r3, [pc, #504]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 80009a4:	7adb      	ldrb	r3, [r3, #11]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80009ae:	4b7b      	ldr	r3, [pc, #492]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 80009b0:	7b9b      	ldrb	r3, [r3, #14]
 80009b2:	021b      	lsls	r3, r3, #8
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	4b79      	ldr	r3, [pc, #484]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 80009b8:	7b5b      	ldrb	r3, [r3, #13]
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21b      	sxth	r3, r3
 80009c0:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80009ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009ce:	2b0e      	cmp	r3, #14
 80009d0:	dd09      	ble.n	80009e6 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80009d2:	4b72      	ldr	r3, [pc, #456]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 80009d4:	7c1b      	ldrb	r3, [r3, #16]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b21a      	sxth	r2, r3
 80009da:	4b70      	ldr	r3, [pc, #448]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 80009dc:	7bdb      	ldrb	r3, [r3, #15]
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80009e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009ea:	2b10      	cmp	r3, #16
 80009ec:	dd09      	ble.n	8000a02 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80009ee:	4b6b      	ldr	r3, [pc, #428]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 80009f0:	7c9b      	ldrb	r3, [r3, #18]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	4b69      	ldr	r3, [pc, #420]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 80009f8:	7c5b      	ldrb	r3, [r3, #17]
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8000a02:	4b66      	ldr	r3, [pc, #408]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000a04:	795b      	ldrb	r3, [r3, #5]
 8000a06:	2b1e      	cmp	r3, #30
 8000a08:	dc46      	bgt.n	8000a98 <BNO080_parseInputReport+0x164>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f340 80bf 	ble.w	8000b8e <BNO080_parseInputReport+0x25a>
 8000a10:	3b01      	subs	r3, #1
 8000a12:	2b1d      	cmp	r3, #29
 8000a14:	f200 80bb 	bhi.w	8000b8e <BNO080_parseInputReport+0x25a>
 8000a18:	a201      	add	r2, pc, #4	@ (adr r2, 8000a20 <BNO080_parseInputReport+0xec>)
 8000a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1e:	bf00      	nop
 8000a20:	08000a9f 	.word	0x08000a9f
 8000a24:	08000ad7 	.word	0x08000ad7
 8000a28:	08000af3 	.word	0x08000af3
 8000a2c:	08000abb 	.word	0x08000abb
 8000a30:	08000b0f 	.word	0x08000b0f
 8000a34:	08000b8f 	.word	0x08000b8f
 8000a38:	08000b8f 	.word	0x08000b8f
 8000a3c:	08000b0f 	.word	0x08000b0f
 8000a40:	08000b8f 	.word	0x08000b8f
 8000a44:	08000b8f 	.word	0x08000b8f
 8000a48:	08000b8f 	.word	0x08000b8f
 8000a4c:	08000b8f 	.word	0x08000b8f
 8000a50:	08000b8f 	.word	0x08000b8f
 8000a54:	08000b8f 	.word	0x08000b8f
 8000a58:	08000b8f 	.word	0x08000b8f
 8000a5c:	08000b8f 	.word	0x08000b8f
 8000a60:	08000b37 	.word	0x08000b37
 8000a64:	08000b8f 	.word	0x08000b8f
 8000a68:	08000b3f 	.word	0x08000b3f
 8000a6c:	08000b8f 	.word	0x08000b8f
 8000a70:	08000b8f 	.word	0x08000b8f
 8000a74:	08000b8f 	.word	0x08000b8f
 8000a78:	08000b8f 	.word	0x08000b8f
 8000a7c:	08000b8f 	.word	0x08000b8f
 8000a80:	08000b8f 	.word	0x08000b8f
 8000a84:	08000b8f 	.word	0x08000b8f
 8000a88:	08000b8f 	.word	0x08000b8f
 8000a8c:	08000b8f 	.word	0x08000b8f
 8000a90:	08000b8f 	.word	0x08000b8f
 8000a94:	08000b49 	.word	0x08000b49
 8000a98:	2bf1      	cmp	r3, #241	@ 0xf1
 8000a9a:	d06d      	beq.n	8000b78 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8000a9c:	e077      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b40      	ldr	r3, [pc, #256]	@ (8000ba4 <BNO080_parseInputReport+0x270>)
 8000aa4:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8000aa6:	4a40      	ldr	r2, [pc, #256]	@ (8000ba8 <BNO080_parseInputReport+0x274>)
 8000aa8:	89bb      	ldrh	r3, [r7, #12]
 8000aaa:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8000aac:	4a3f      	ldr	r2, [pc, #252]	@ (8000bac <BNO080_parseInputReport+0x278>)
 8000aae:	897b      	ldrh	r3, [r7, #10]
 8000ab0:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8000ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8000bb0 <BNO080_parseInputReport+0x27c>)
 8000ab4:	893b      	ldrh	r3, [r7, #8]
 8000ab6:	8013      	strh	r3, [r2, #0]
			break;
 8000ab8:	e069      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	4b3d      	ldr	r3, [pc, #244]	@ (8000bb4 <BNO080_parseInputReport+0x280>)
 8000ac0:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8000ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8000bb8 <BNO080_parseInputReport+0x284>)
 8000ac4:	89bb      	ldrh	r3, [r7, #12]
 8000ac6:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8000ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8000bbc <BNO080_parseInputReport+0x288>)
 8000aca:	897b      	ldrh	r3, [r7, #10]
 8000acc:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8000ace:	4a3c      	ldr	r2, [pc, #240]	@ (8000bc0 <BNO080_parseInputReport+0x28c>)
 8000ad0:	893b      	ldrh	r3, [r7, #8]
 8000ad2:	8013      	strh	r3, [r2, #0]
			break;
 8000ad4:	e05b      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b3a      	ldr	r3, [pc, #232]	@ (8000bc4 <BNO080_parseInputReport+0x290>)
 8000adc:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8000ade:	4a3a      	ldr	r2, [pc, #232]	@ (8000bc8 <BNO080_parseInputReport+0x294>)
 8000ae0:	89bb      	ldrh	r3, [r7, #12]
 8000ae2:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8000ae4:	4a39      	ldr	r2, [pc, #228]	@ (8000bcc <BNO080_parseInputReport+0x298>)
 8000ae6:	897b      	ldrh	r3, [r7, #10]
 8000ae8:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8000aea:	4a39      	ldr	r2, [pc, #228]	@ (8000bd0 <BNO080_parseInputReport+0x29c>)
 8000aec:	893b      	ldrh	r3, [r7, #8]
 8000aee:	8013      	strh	r3, [r2, #0]
			break;
 8000af0:	e04d      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b37      	ldr	r3, [pc, #220]	@ (8000bd4 <BNO080_parseInputReport+0x2a0>)
 8000af8:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8000afa:	4a37      	ldr	r2, [pc, #220]	@ (8000bd8 <BNO080_parseInputReport+0x2a4>)
 8000afc:	89bb      	ldrh	r3, [r7, #12]
 8000afe:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8000b00:	4a36      	ldr	r2, [pc, #216]	@ (8000bdc <BNO080_parseInputReport+0x2a8>)
 8000b02:	897b      	ldrh	r3, [r7, #10]
 8000b04:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8000b06:	4a36      	ldr	r2, [pc, #216]	@ (8000be0 <BNO080_parseInputReport+0x2ac>)
 8000b08:	893b      	ldrh	r3, [r7, #8]
 8000b0a:	8013      	strh	r3, [r2, #0]
			break;
 8000b0c:	e03f      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b34      	ldr	r3, [pc, #208]	@ (8000be4 <BNO080_parseInputReport+0x2b0>)
 8000b14:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8000b16:	4a34      	ldr	r2, [pc, #208]	@ (8000be8 <BNO080_parseInputReport+0x2b4>)
 8000b18:	89bb      	ldrh	r3, [r7, #12]
 8000b1a:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8000b1c:	4a33      	ldr	r2, [pc, #204]	@ (8000bec <BNO080_parseInputReport+0x2b8>)
 8000b1e:	897b      	ldrh	r3, [r7, #10]
 8000b20:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8000b22:	4a33      	ldr	r2, [pc, #204]	@ (8000bf0 <BNO080_parseInputReport+0x2bc>)
 8000b24:	893b      	ldrh	r3, [r7, #8]
 8000b26:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8000b28:	4a32      	ldr	r2, [pc, #200]	@ (8000bf4 <BNO080_parseInputReport+0x2c0>)
 8000b2a:	8afb      	ldrh	r3, [r7, #22]
 8000b2c:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8000b2e:	4a32      	ldr	r2, [pc, #200]	@ (8000bf8 <BNO080_parseInputReport+0x2c4>)
 8000b30:	8abb      	ldrh	r3, [r7, #20]
 8000b32:	8013      	strh	r3, [r2, #0]
			break;
 8000b34:	e02b      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8000b36:	4a31      	ldr	r2, [pc, #196]	@ (8000bfc <BNO080_parseInputReport+0x2c8>)
 8000b38:	893b      	ldrh	r3, [r7, #8]
 8000b3a:	8013      	strh	r3, [r2, #0]
			break;
 8000b3c:	e027      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000b40:	7a5a      	ldrb	r2, [r3, #9]
 8000b42:	4b2f      	ldr	r3, [pc, #188]	@ (8000c00 <BNO080_parseInputReport+0x2cc>)
 8000b44:	701a      	strb	r2, [r3, #0]
			break;
 8000b46:	e022      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000b4a:	7a9a      	ldrb	r2, [r3, #10]
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <BNO080_parseInputReport+0x2d0>)
 8000b4e:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8000b50:	2300      	movs	r3, #0
 8000b52:	74fb      	strb	r3, [r7, #19]
 8000b54:	e00c      	b.n	8000b70 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8000b56:	7cfb      	ldrb	r3, [r7, #19]
 8000b58:	f103 020b 	add.w	r2, r3, #11
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <BNO080_parseInputReport+0x2d4>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	7cfb      	ldrb	r3, [r7, #19]
 8000b62:	440b      	add	r3, r1
 8000b64:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000b66:	5c8a      	ldrb	r2, [r1, r2]
 8000b68:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8000b6a:	7cfb      	ldrb	r3, [r7, #19]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	74fb      	strb	r3, [r7, #19]
 8000b70:	7cfb      	ldrb	r3, [r7, #19]
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d9ef      	bls.n	8000b56 <BNO080_parseInputReport+0x222>
			break;
 8000b76:	e00a      	b.n	8000b8e <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000b7a:	79db      	ldrb	r3, [r3, #7]
 8000b7c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	d103      	bne.n	8000b8c <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <BNO080_parseInputReport+0x268>)
 8000b86:	7a9a      	ldrb	r2, [r3, #10]
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <BNO080_parseInputReport+0x2d8>)
 8000b8a:	701a      	strb	r2, [r3, #0]
			break;
 8000b8c:	bf00      	nop
}
 8000b8e:	bf00      	nop
 8000b90:	371c      	adds	r7, #28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000204 	.word	0x20000204
 8000b9c:	20000208 	.word	0x20000208
 8000ba0:	200002bc 	.word	0x200002bc
 8000ba4:	20000294 	.word	0x20000294
 8000ba8:	2000028e 	.word	0x2000028e
 8000bac:	20000290 	.word	0x20000290
 8000bb0:	20000292 	.word	0x20000292
 8000bb4:	2000029c 	.word	0x2000029c
 8000bb8:	20000296 	.word	0x20000296
 8000bbc:	20000298 	.word	0x20000298
 8000bc0:	2000029a 	.word	0x2000029a
 8000bc4:	200002a4 	.word	0x200002a4
 8000bc8:	2000029e 	.word	0x2000029e
 8000bcc:	200002a0 	.word	0x200002a0
 8000bd0:	200002a2 	.word	0x200002a2
 8000bd4:	200002ac 	.word	0x200002ac
 8000bd8:	200002a6 	.word	0x200002a6
 8000bdc:	200002a8 	.word	0x200002a8
 8000be0:	200002aa 	.word	0x200002aa
 8000be4:	200002b8 	.word	0x200002b8
 8000be8:	200002ae 	.word	0x200002ae
 8000bec:	200002b0 	.word	0x200002b0
 8000bf0:	200002b2 	.word	0x200002b2
 8000bf4:	200002b4 	.word	0x200002b4
 8000bf8:	200002b6 	.word	0x200002b6
 8000bfc:	200002ba 	.word	0x200002ba
 8000c00:	200002c0 	.word	0x200002c0
 8000c04:	200002c1 	.word	0x200002c1
 8000c08:	200002c4 	.word	0x200002c4
 8000c0c:	200002c8 	.word	0x200002c8

08000c10 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <BNO080_getQuatI+0x20>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4a06      	ldr	r2, [pc, #24]	@ (8000c34 <BNO080_getQuatI+0x24>)
 8000c1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f857 	bl	8000cd8 <BNO080_qToFloat>
 8000c2a:	4603      	mov	r3, r0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200002ae 	.word	0x200002ae
 8000c34:	20000000 	.word	0x20000000

08000c38 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <BNO080_getQuatJ+0x20>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <BNO080_getQuatJ+0x24>)
 8000c44:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f843 	bl	8000cd8 <BNO080_qToFloat>
 8000c52:	4603      	mov	r3, r0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200002b0 	.word	0x200002b0
 8000c5c:	20000000 	.word	0x20000000

08000c60 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <BNO080_getQuatK+0x20>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <BNO080_getQuatK+0x24>)
 8000c6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f82f 	bl	8000cd8 <BNO080_qToFloat>
 8000c7a:	4603      	mov	r3, r0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200002b2 	.word	0x200002b2
 8000c84:	20000000 	.word	0x20000000

08000c88 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <BNO080_getQuatReal+0x20>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <BNO080_getQuatReal+0x24>)
 8000c94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f81b 	bl	8000cd8 <BNO080_qToFloat>
 8000ca2:	4603      	mov	r3, r0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200002b4 	.word	0x200002b4
 8000cac:	20000000 	.word	0x20000000

08000cb0 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <BNO080_getQuatRadianAccuracy+0x20>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4a06      	ldr	r2, [pc, #24]	@ (8000cd4 <BNO080_getQuatRadianAccuracy+0x24>)
 8000cbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f807 	bl	8000cd8 <BNO080_qToFloat>
 8000cca:	4603      	mov	r3, r0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200002b6 	.word	0x200002b6
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	80fb      	strh	r3, [r7, #6]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8000ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff faf1 	bl	80002d4 <__aeabi_i2f>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff faeb 	bl	80002d4 <__aeabi_i2f>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000d06:	f00c f927 	bl	800cf58 <powf>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fb34 	bl	800037c <__aeabi_fmul>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}

08000d1e <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2005      	movs	r0, #5
 8000d30:	f000 f804 	bl	8000d3c <BNO080_setFeatureCommand>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8000d4a:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d4c:	22fd      	movs	r2, #253	@ 0xfd
 8000d4e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8000d50:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8000d62:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d6e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d78:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	0c1b      	lsrs	r3, r3, #16
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d82:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	0e1b      	lsrs	r3, r3, #24
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d8c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000dac:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000db6:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0c1b      	lsrs	r3, r3, #16
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000dc0:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0e1b      	lsrs	r3, r3, #24
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <BNO080_setFeatureCommand+0xa0>)
 8000dca:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8000dcc:	2111      	movs	r1, #17
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f000 f89c 	bl	8000f0c <BNO080_sendPacket>
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000208 	.word	0x20000208

08000de0 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	e00c      	b.n	8000e06 <BNO080_waitForSPI+0x26>
	{
		if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == GPIO_PIN_RESET)
 8000dec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df0:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <BNO080_waitForSPI+0x40>)
 8000df2:	f001 fbcf 	bl	8002594 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e00a      	b.n	8000e16 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d1ee      	bne.n	8000dec <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <BNO080_waitForSPI+0x44>)
 8000e10:	f00d f936 	bl	800e080 <puts>
	return (0);
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010800 	.word	0x40010800
 8000e24:	0800f264 	.word	0x0800f264

08000e28 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == GPIO_PIN_SET)
 8000e2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e32:	4832      	ldr	r0, [pc, #200]	@ (8000efc <BNO080_receivePacket+0xd4>)
 8000e34:	f001 fbae 	bl	8002594 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e058      	b.n	8000ef4 <BNO080_receivePacket+0xcc>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e48:	482d      	ldr	r0, [pc, #180]	@ (8000f00 <BNO080_receivePacket+0xd8>)
 8000e4a:	f001 fbba 	bl	80025c2 <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fd12 	bl	8000878 <SPI2_SendByte>
 8000e54:	4603      	mov	r3, r0
 8000e56:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fd0d 	bl	8000878 <SPI2_SendByte>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fd08 	bl	8000878 <SPI2_SendByte>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fd03 	bl	8000878 <SPI2_SendByte>
 8000e72:	4603      	mov	r3, r0
 8000e74:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8000e76:	4a23      	ldr	r2, [pc, #140]	@ (8000f04 <BNO080_receivePacket+0xdc>)
 8000e78:	7b7b      	ldrb	r3, [r7, #13]
 8000e7a:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8000e7c:	4a21      	ldr	r2, [pc, #132]	@ (8000f04 <BNO080_receivePacket+0xdc>)
 8000e7e:	7b3b      	ldrb	r3, [r7, #12]
 8000e80:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8000e82:	4a20      	ldr	r2, [pc, #128]	@ (8000f04 <BNO080_receivePacket+0xdc>)
 8000e84:	7afb      	ldrb	r3, [r7, #11]
 8000e86:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8000e88:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <BNO080_receivePacket+0xdc>)
 8000e8a:	7abb      	ldrb	r3, [r7, #10]
 8000e8c:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8000e8e:	7b3b      	ldrb	r3, [r7, #12]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7b7b      	ldrb	r3, [r7, #13]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8000e9c:	893b      	ldrh	r3, [r7, #8]
 8000e9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ea2:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8000ea4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8000eac:	2300      	movs	r3, #0
 8000eae:	e021      	b.n	8000ef4 <BNO080_receivePacket+0xcc>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8000eb0:	893b      	ldrh	r3, [r7, #8]
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	81fb      	strh	r3, [r7, #14]
 8000ebc:	e00e      	b.n	8000edc <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 8000ebe:	20ff      	movs	r0, #255	@ 0xff
 8000ec0:	f7ff fcda 	bl	8000878 <SPI2_SendByte>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ecc:	d803      	bhi.n	8000ed6 <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <BNO080_receivePacket+0xe0>)
 8000ed2:	79fa      	ldrb	r2, [r7, #7]
 8000ed4:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	81fb      	strh	r3, [r7, #14]
 8000edc:	89fa      	ldrh	r2, [r7, #14]
 8000ede:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbeb      	blt.n	8000ebe <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <BNO080_receivePacket+0xd8>)
 8000eee:	f001 fb68 	bl	80025c2 <HAL_GPIO_WritePin>
	return (1); //We're done!
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010800 	.word	0x40010800
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	20000204 	.word	0x20000204
 8000f08:	20000208 	.word	0x20000208

08000f0c <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8000f22:	f7ff ff5d 	bl	8000de0 <BNO080_waitForSPI>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e034      	b.n	8000f9a <BNO080_sendPacket+0x8e>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f36:	481b      	ldr	r0, [pc, #108]	@ (8000fa4 <BNO080_sendPacket+0x98>)
 8000f38:	f001 fb43 	bl	80025c2 <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fc9a 	bl	8000878 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	121b      	asrs	r3, r3, #8
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fc94 	bl	8000878 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc90 	bl	8000878 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <BNO080_sendPacket+0x9c>)
 8000f5c:	5cd2      	ldrb	r2, [r2, r3]
 8000f5e:	1c51      	adds	r1, r2, #1
 8000f60:	b2c8      	uxtb	r0, r1
 8000f62:	4911      	ldr	r1, [pc, #68]	@ (8000fa8 <BNO080_sendPacket+0x9c>)
 8000f64:	54c8      	strb	r0, [r1, r3]
 8000f66:	4610      	mov	r0, r2
 8000f68:	f7ff fc86 	bl	8000878 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e008      	b.n	8000f84 <BNO080_sendPacket+0x78>
	{
		SPI2_SendByte(shtpData[i]);
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <BNO080_sendPacket+0xa0>)
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fc7d 	bl	8000878 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3f2      	bcc.n	8000f72 <BNO080_sendPacket+0x66>
	}

	CHIP_DESELECT(BNO080);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <BNO080_sendPacket+0x98>)
 8000f94:	f001 fb15 	bl	80025c2 <HAL_GPIO_WritePin>

	return (1);
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	20000288 	.word	0x20000288
 8000fac:	20000208 	.word	0x20000208

08000fb0 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f7ff f9da 	bl	800037c <__aeabi_fmul>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461c      	mov	r4, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4610      	mov	r0, r2
 8000fdc:	f7ff f9ce 	bl	800037c <__aeabi_fmul>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff f8c1 	bl	800016c <__addsf3>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461c      	mov	r4, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3308      	adds	r3, #8
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	f7ff f9bd 	bl	800037c <__aeabi_fmul>
 8001002:	4603      	mov	r3, r0
 8001004:	4619      	mov	r1, r3
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff f8b0 	bl	800016c <__addsf3>
 800100c:	4603      	mov	r3, r0
 800100e:	461c      	mov	r4, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	330c      	adds	r3, #12
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	330c      	adds	r3, #12
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f7ff f9ac 	bl	800037c <__aeabi_fmul>
 8001024:	4603      	mov	r3, r0
 8001026:	4619      	mov	r1, r3
 8001028:	4620      	mov	r0, r4
 800102a:	f7ff f89f 	bl	800016c <__addsf3>
 800102e:	4603      	mov	r3, r0
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f931 	bl	8001298 <invSqrt>
 8001036:	61f8      	str	r0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	69f8      	ldr	r0, [r7, #28]
 8001040:	f7ff f99c 	bl	800037c <__aeabi_fmul>
 8001044:	4603      	mov	r3, r0
 8001046:	61bb      	str	r3, [r7, #24]
	q2 = q[1] * norm; //y
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3304      	adds	r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	69f8      	ldr	r0, [r7, #28]
 8001052:	f7ff f993 	bl	800037c <__aeabi_fmul>
 8001056:	4603      	mov	r3, r0
 8001058:	617b      	str	r3, [r7, #20]
	q3 = q[2] * norm; //z
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3308      	adds	r3, #8
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	69f8      	ldr	r0, [r7, #28]
 8001064:	f7ff f98a 	bl	800037c <__aeabi_fmul>
 8001068:	4603      	mov	r3, r0
 800106a:	613b      	str	r3, [r7, #16]
	q4 = q[3] * norm; //w
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	330c      	adds	r3, #12
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	69f8      	ldr	r0, [r7, #28]
 8001076:	f7ff f981 	bl	800037c <__aeabi_fmul>
 800107a:	4603      	mov	r3, r0
 800107c:	60fb      	str	r3, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 800107e:	6939      	ldr	r1, [r7, #16]
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f7ff f97b 	bl	800037c <__aeabi_fmul>
 8001086:	4603      	mov	r3, r0
 8001088:	461c      	mov	r4, r3
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	69b8      	ldr	r0, [r7, #24]
 800108e:	f7ff f975 	bl	800037c <__aeabi_fmul>
 8001092:	4603      	mov	r3, r0
 8001094:	4619      	mov	r1, r3
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff f868 	bl	800016c <__addsf3>
 800109c:	4603      	mov	r3, r0
 800109e:	4619      	mov	r1, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f863 	bl	800016c <__addsf3>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461c      	mov	r4, r3
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f7ff f965 	bl	800037c <__aeabi_fmul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461d      	mov	r5, r3
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f7ff f95f 	bl	800037c <__aeabi_fmul>
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	4628      	mov	r0, r5
 80010c4:	f7ff f852 	bl	800016c <__addsf3>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461d      	mov	r5, r3
 80010cc:	6939      	ldr	r1, [r7, #16]
 80010ce:	6938      	ldr	r0, [r7, #16]
 80010d0:	f7ff f954 	bl	800037c <__aeabi_fmul>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4628      	mov	r0, r5
 80010da:	f7ff f845 	bl	8000168 <__aeabi_fsub>
 80010de:	4603      	mov	r3, r0
 80010e0:	461d      	mov	r5, r3
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff f949 	bl	800037c <__aeabi_fmul>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4619      	mov	r1, r3
 80010ee:	4628      	mov	r0, r5
 80010f0:	f7ff f83a 	bl	8000168 <__aeabi_fsub>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4620      	mov	r0, r4
 80010fa:	f00b ff2b 	bl	800cf54 <atan2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a5f      	ldr	r2, [pc, #380]	@ (8001280 <Quaternion_Update+0x2d0>)
 8001102:	6013      	str	r3, [r2, #0]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8001104:	68f9      	ldr	r1, [r7, #12]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff f938 	bl	800037c <__aeabi_fmul>
 800110c:	4603      	mov	r3, r0
 800110e:	461c      	mov	r4, r3
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	69b8      	ldr	r0, [r7, #24]
 8001114:	f7ff f932 	bl	800037c <__aeabi_fmul>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff f823 	bl	8000168 <__aeabi_fsub>
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f820 	bl	800016c <__addsf3>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	f00b fef0 	bl	800cf14 <asinf>
 8001134:	4603      	mov	r3, r0
 8001136:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800113a:	4a52      	ldr	r2, [pc, #328]	@ (8001284 <Quaternion_Update+0x2d4>)
 800113c:	6013      	str	r3, [r2, #0]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 800113e:	6979      	ldr	r1, [r7, #20]
 8001140:	69b8      	ldr	r0, [r7, #24]
 8001142:	f7ff f91b 	bl	800037c <__aeabi_fmul>
 8001146:	4603      	mov	r3, r0
 8001148:	461c      	mov	r4, r3
 800114a:	68f9      	ldr	r1, [r7, #12]
 800114c:	6938      	ldr	r0, [r7, #16]
 800114e:	f7ff f915 	bl	800037c <__aeabi_fmul>
 8001152:	4603      	mov	r3, r0
 8001154:	4619      	mov	r1, r3
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff f808 	bl	800016c <__addsf3>
 800115c:	4603      	mov	r3, r0
 800115e:	4619      	mov	r1, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f803 	bl	800016c <__addsf3>
 8001166:	4603      	mov	r3, r0
 8001168:	461c      	mov	r4, r3
 800116a:	69b9      	ldr	r1, [r7, #24]
 800116c:	69b8      	ldr	r0, [r7, #24]
 800116e:	f7ff f905 	bl	800037c <__aeabi_fmul>
 8001172:	4603      	mov	r3, r0
 8001174:	461d      	mov	r5, r3
 8001176:	6979      	ldr	r1, [r7, #20]
 8001178:	6978      	ldr	r0, [r7, #20]
 800117a:	f7ff f8ff 	bl	800037c <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	4619      	mov	r1, r3
 8001182:	4628      	mov	r0, r5
 8001184:	f7fe fff0 	bl	8000168 <__aeabi_fsub>
 8001188:	4603      	mov	r3, r0
 800118a:	461d      	mov	r5, r3
 800118c:	6939      	ldr	r1, [r7, #16]
 800118e:	6938      	ldr	r0, [r7, #16]
 8001190:	f7ff f8f4 	bl	800037c <__aeabi_fmul>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	4628      	mov	r0, r5
 800119a:	f7fe ffe5 	bl	8000168 <__aeabi_fsub>
 800119e:	4603      	mov	r3, r0
 80011a0:	461d      	mov	r5, r3
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff f8e9 	bl	800037c <__aeabi_fmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4628      	mov	r0, r5
 80011b0:	f7fe ffdc 	bl	800016c <__addsf3>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4620      	mov	r0, r4
 80011ba:	f00b fecb 	bl	800cf54 <atan2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a31      	ldr	r2, [pc, #196]	@ (8001288 <Quaternion_Update+0x2d8>)
 80011c2:	6013      	str	r3, [r2, #0]

	BNO080_Pitch *= _180_DIV_PI;
 80011c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <Quaternion_Update+0x2d0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4930      	ldr	r1, [pc, #192]	@ (800128c <Quaternion_Update+0x2dc>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f8d6 	bl	800037c <__aeabi_fmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <Quaternion_Update+0x2d0>)
 80011d6:	601a      	str	r2, [r3, #0]
	BNO080_Roll  *= _180_DIV_PI;
 80011d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <Quaternion_Update+0x2d4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	492b      	ldr	r1, [pc, #172]	@ (800128c <Quaternion_Update+0x2dc>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f8cc 	bl	800037c <__aeabi_fmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <Quaternion_Update+0x2d4>)
 80011ea:	601a      	str	r2, [r3, #0]
	BNO080_Yaw   *= _180_DIV_PI;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <Quaternion_Update+0x2d8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4926      	ldr	r1, [pc, #152]	@ (800128c <Quaternion_Update+0x2dc>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f8c2 	bl	800037c <__aeabi_fmul>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <Quaternion_Update+0x2d8>)
 80011fe:	601a      	str	r2, [r3, #0]
	
	if(BNO080_Yaw>=0)
 8001200:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <Quaternion_Update+0x2d8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f04f 0100 	mov.w	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fa69 	bl	80006e0 <__aeabi_fcmpge>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00a      	beq.n	800122a <Quaternion_Update+0x27a>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <Quaternion_Update+0x2d8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	481d      	ldr	r0, [pc, #116]	@ (8001290 <Quaternion_Update+0x2e0>)
 800121c:	f7fe ffa4 	bl	8000168 <__aeabi_fsub>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <Quaternion_Update+0x2d8>)
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e005      	b.n	8001236 <Quaternion_Update+0x286>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <Quaternion_Update+0x2d8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001232:	4a15      	ldr	r2, [pc, #84]	@ (8001288 <Quaternion_Update+0x2d8>)
 8001234:	6013      	str	r3, [r2, #0]
	
	
	if(BNO080_Pitch>=0)
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <Quaternion_Update+0x2d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f04f 0100 	mov.w	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fa4e 	bl	80006e0 <__aeabi_fcmpge>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <Quaternion_Update+0x2b0>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <Quaternion_Update+0x2d0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	4810      	ldr	r0, [pc, #64]	@ (8001294 <Quaternion_Update+0x2e4>)
 8001252:	f7fe ff89 	bl	8000168 <__aeabi_fsub>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <Quaternion_Update+0x2d0>)
 800125c:	601a      	str	r2, [r3, #0]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 800125e:	e00a      	b.n	8001276 <Quaternion_Update+0x2c6>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <Quaternion_Update+0x2d0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	490b      	ldr	r1, [pc, #44]	@ (8001294 <Quaternion_Update+0x2e4>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ff80 	bl	800016c <__addsf3>
 800126c:	4603      	mov	r3, r0
 800126e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001272:	4a03      	ldr	r2, [pc, #12]	@ (8001280 <Quaternion_Update+0x2d0>)
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bdb0      	pop	{r4, r5, r7, pc}
 800127e:	bf00      	nop
 8001280:	200002d0 	.word	0x200002d0
 8001284:	200002cc 	.word	0x200002cc
 8001288:	200002d4 	.word	0x200002d4
 800128c:	42652ee1 	.word	0x42652ee1
 8001290:	43b40000 	.word	0x43b40000
 8001294:	43340000 	.word	0x43340000

08001298 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80012a0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff f869 	bl	800037c <__aeabi_fmul>
 80012aa:	4603      	mov	r3, r0
 80012ac:	617b      	str	r3, [r7, #20]
	float y = x;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	105a      	asrs	r2, r3, #1
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <invSqrt+0x74>)
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f853 	bl	800037c <__aeabi_fmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff f84c 	bl	800037c <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80012ec:	f7fe ff3c 	bl	8000168 <__aeabi_fsub>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4610      	mov	r0, r2
 80012fa:	f7ff f83f 	bl	800037c <__aeabi_fmul>
 80012fe:	4603      	mov	r3, r0
 8001300:	613b      	str	r3, [r7, #16]
	return y;
 8001302:	693b      	ldr	r3, [r7, #16]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	5f3759df 	.word	0x5f3759df

08001310 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

volatile int test_number = 0, test_number2 = 0, test_number3 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BNO_INT_Pin){
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001320:	d10a      	bne.n	8001338 <HAL_GPIO_EXTI_Callback+0x28>
		osThreadFlagsSet(BNO_85_Recive_DHandle, 1);
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <HAL_GPIO_EXTI_Callback+0x30>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2101      	movs	r1, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f008 fa41 	bl	80097b0 <osThreadFlagsSet>
		test_number++;
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_GPIO_EXTI_Callback+0x34>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a03      	ldr	r2, [pc, #12]	@ (8001344 <HAL_GPIO_EXTI_Callback+0x34>)
 8001336:	6013      	str	r3, [r2, #0]
	}
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003bc 	.word	0x200003bc
 8001344:	20000438 	.word	0x20000438

08001348 <sendStringOverUSB>:
	if(hspi->Instance == SPI2){
		//test_number3++;
	}
}

void sendStringOverUSB(char *str) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(str); // Get the length of the string
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7fe fefd 	bl	8000150 <strlen>
 8001356:	4603      	mov	r3, r0
 8001358:	81fb      	strh	r3, [r7, #14]
    CDC_Transmit_FS((uint8_t*)str, len); // Transmit the string over USB
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f00b f9fa 	bl	800c758 <CDC_Transmit_FS>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001370:	f000 fc7e 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001374:	f000 f840 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001378:	f000 f8f6 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 800137c:	f000 f8ce 	bl	800151c <MX_DMA_Init>
  MX_SPI2_Init();
 8001380:	f000 f896 	bl	80014b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  BNO080_Initialization();
 8001384:	f7ff fa02 	bl	800078c <BNO080_Initialization>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <main+0x70>)
 800138e:	f001 f930 	bl	80025f2 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 8001392:	2064      	movs	r0, #100	@ 0x64
 8001394:	f000 fc9e 	bl	8001cd4 <HAL_Delay>

  BNO080_enableRotationVector(2500); //enable rotation vector at 400Hz
 8001398:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800139c:	f7ff fcbf 	bl	8000d1e <BNO080_enableRotationVector>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a4:	480d      	ldr	r0, [pc, #52]	@ (80013dc <main+0x70>)
 80013a6:	f001 f924 	bl	80025f2 <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 80013aa:	2064      	movs	r0, #100	@ 0x64
 80013ac:	f000 fc92 	bl	8001cd4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013b0:	f008 f8c6 	bl	8009540 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013b4:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <main+0x74>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <main+0x78>)
 80013ba:	f008 f94f 	bl	800965c <osThreadNew>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <main+0x7c>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* creation of BNO_85_Recive_D */
  BNO_85_Recive_DHandle = osThreadNew(StartTask02, NULL, &BNO_85_Recive_D_attributes);
 80013c4:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <main+0x80>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <main+0x84>)
 80013ca:	f008 f947 	bl	800965c <osThreadNew>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <main+0x88>)
 80013d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013d4:	f008 f8e6 	bl	80095a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <main+0x6c>
 80013dc:	40011000 	.word	0x40011000
 80013e0:	0800f2fc 	.word	0x0800f2fc
 80013e4:	080016a1 	.word	0x080016a1
 80013e8:	200003b8 	.word	0x200003b8
 80013ec:	0800f320 	.word	0x0800f320
 80013f0:	080016b5 	.word	0x080016b5
 80013f4:	200003bc 	.word	0x200003bc

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	@ 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001402:	2228      	movs	r2, #40	@ 0x28
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00c ff3a 	bl	800e280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001436:	2301      	movs	r3, #1
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001442:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001444:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001448:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fe6e 	bl	8004130 <HAL_RCC_OscConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800145a:	f000 f983 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145e:	230f      	movs	r3, #15
 8001460:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f003 f8da 	bl	8004634 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001486:	f000 f96d 	bl	8001764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800148a:	2310      	movs	r3, #16
 800148c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800148e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001492:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fa76 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014a2:	f000 f95f 	bl	8001764 <Error_Handler>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3750      	adds	r7, #80	@ 0x50
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <MX_SPI2_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014e4:	2218      	movs	r2, #24
 80014e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <MX_SPI2_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MX_SPI2_Init+0x64>)
 8001502:	f003 faf7 	bl	8004af4 <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800150c:	f000 f92a 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002d8 	.word	0x200002d8
 8001518:	40003800 	.word	0x40003800

0800151c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <MX_DMA_Init+0x48>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a0f      	ldr	r2, [pc, #60]	@ (8001564 <MX_DMA_Init+0x48>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <MX_DMA_Init+0x48>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	200e      	movs	r0, #14
 8001540:	f000 fca1 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001544:	200e      	movs	r0, #14
 8001546:	f000 fcba 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2105      	movs	r1, #5
 800154e:	200f      	movs	r0, #15
 8001550:	f000 fc99 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001554:	200f      	movs	r0, #15
 8001556:	f000 fcb2 	bl	8001ebe <HAL_NVIC_EnableIRQ>

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	4b43      	ldr	r3, [pc, #268]	@ (800168c <MX_GPIO_Init+0x124>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a42      	ldr	r2, [pc, #264]	@ (800168c <MX_GPIO_Init+0x124>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b40      	ldr	r3, [pc, #256]	@ (800168c <MX_GPIO_Init+0x124>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001594:	4b3d      	ldr	r3, [pc, #244]	@ (800168c <MX_GPIO_Init+0x124>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a3c      	ldr	r2, [pc, #240]	@ (800168c <MX_GPIO_Init+0x124>)
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <MX_GPIO_Init+0x124>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ac:	4b37      	ldr	r3, [pc, #220]	@ (800168c <MX_GPIO_Init+0x124>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a36      	ldr	r2, [pc, #216]	@ (800168c <MX_GPIO_Init+0x124>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b34      	ldr	r3, [pc, #208]	@ (800168c <MX_GPIO_Init+0x124>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b31      	ldr	r3, [pc, #196]	@ (800168c <MX_GPIO_Init+0x124>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a30      	ldr	r2, [pc, #192]	@ (800168c <MX_GPIO_Init+0x124>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <MX_GPIO_Init+0x124>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e2:	482b      	ldr	r0, [pc, #172]	@ (8001690 <MX_GPIO_Init+0x128>)
 80015e4:	f000 ffed 	bl	80025c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_2_CS_GPIO_Port, SPI_2_CS_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015ee:	4829      	ldr	r0, [pc, #164]	@ (8001694 <MX_GPIO_Init+0x12c>)
 80015f0:	f000 ffe7 	bl	80025c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BNO_Weak_Pin|BNO_RST_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80015fa:	4827      	ldr	r0, [pc, #156]	@ (8001698 <MX_GPIO_Init+0x130>)
 80015fc:	f000 ffe1 	bl	80025c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001600:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4619      	mov	r1, r3
 8001618:	481d      	ldr	r0, [pc, #116]	@ (8001690 <MX_GPIO_Init+0x128>)
 800161a:	f000 fe37 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_2_CS_Pin */
  GPIO_InitStruct.Pin = SPI_2_CS_Pin;
 800161e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_2_CS_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4817      	ldr	r0, [pc, #92]	@ (8001694 <MX_GPIO_Init+0x12c>)
 8001638:	f000 fe28 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_Weak_Pin BNO_RST_Pin */
  GPIO_InitStruct.Pin = BNO_Weak_Pin|BNO_RST_Pin;
 800163c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2302      	movs	r3, #2
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4619      	mov	r1, r3
 8001654:	4810      	ldr	r0, [pc, #64]	@ (8001698 <MX_GPIO_Init+0x130>)
 8001656:	f000 fe19 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 800165a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_GPIO_Init+0x134>)
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	480a      	ldr	r0, [pc, #40]	@ (8001698 <MX_GPIO_Init+0x130>)
 8001670:	f000 fe0c 	bl	800228c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2105      	movs	r1, #5
 8001678:	2028      	movs	r0, #40	@ 0x28
 800167a:	f000 fc04 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800167e:	2028      	movs	r0, #40	@ 0x28
 8001680:	f000 fc1d 	bl	8001ebe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001684:	bf00      	nop
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000
 8001690:	40011000 	.word	0x40011000
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40010800 	.word	0x40010800
 800169c:	10210000 	.word	0x10210000

080016a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80016a8:	f00a ff98 	bl	800c5dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f008 f973 	bl	8009998 <osDelay>
 80016b2:	e7fb      	b.n	80016ac <StartDefaultTask+0xc>

080016b4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, 0, osWaitForever);
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	2100      	movs	r1, #0
 80016c2:	2001      	movs	r0, #1
 80016c4:	f008 f8d4 	bl	8009870 <osThreadFlagsWait>

	  TickType_t start_time = osKernelGetTickCount();
 80016c8:	f007 ffa0 	bl	800960c <osKernelGetTickCount>
 80016cc:	6178      	str	r0, [r7, #20]

	  if(BNO080_dataAvailable() == 1)
 80016ce:	f7ff f8e9 	bl	80008a4 <BNO080_dataAvailable>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d1f1      	bne.n	80016bc <StartTask02+0x8>
		  {


		  	  // End measuring time
		      TickType_t end_time = osKernelGetTickCount();
 80016d8:	f007 ff98 	bl	800960c <osKernelGetTickCount>
 80016dc:	6138      	str	r0, [r7, #16]

		      // Calculate elapsed time in milliseconds
		      TickType_t elapsed_time = end_time - start_time;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	60fb      	str	r3, [r7, #12]
		      sprintf(str, "%ld, ", elapsed_time);
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4911      	ldr	r1, [pc, #68]	@ (8001730 <StartTask02+0x7c>)
 80016ea:	4812      	ldr	r0, [pc, #72]	@ (8001734 <StartTask02+0x80>)
 80016ec:	f00c fcd0 	bl	800e090 <siprintf>
		      sendStringOverUSB(str);
 80016f0:	4810      	ldr	r0, [pc, #64]	@ (8001734 <StartTask02+0x80>)
 80016f2:	f7ff fe29 	bl	8001348 <sendStringOverUSB>


			  q[0] = BNO080_getQuatI();
 80016f6:	f7ff fa8b 	bl	8000c10 <BNO080_getQuatI>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001738 <StartTask02+0x84>)
 80016fe:	6013      	str	r3, [r2, #0]
			  q[1] = BNO080_getQuatJ();
 8001700:	f7ff fa9a 	bl	8000c38 <BNO080_getQuatJ>
 8001704:	4603      	mov	r3, r0
 8001706:	4a0c      	ldr	r2, [pc, #48]	@ (8001738 <StartTask02+0x84>)
 8001708:	6053      	str	r3, [r2, #4]
			  q[2] = BNO080_getQuatK();
 800170a:	f7ff faa9 	bl	8000c60 <BNO080_getQuatK>
 800170e:	4603      	mov	r3, r0
 8001710:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <StartTask02+0x84>)
 8001712:	6093      	str	r3, [r2, #8]
			  q[3] = BNO080_getQuatReal();
 8001714:	f7ff fab8 	bl	8000c88 <BNO080_getQuatReal>
 8001718:	4603      	mov	r3, r0
 800171a:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <StartTask02+0x84>)
 800171c:	60d3      	str	r3, [r2, #12]
			  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 800171e:	f7ff fac7 	bl	8000cb0 <BNO080_getQuatRadianAccuracy>
 8001722:	4603      	mov	r3, r0
 8001724:	4a05      	ldr	r2, [pc, #20]	@ (800173c <StartTask02+0x88>)
 8001726:	6013      	str	r3, [r2, #0]
			  Quaternion_Update(&q[0]);
 8001728:	4803      	ldr	r0, [pc, #12]	@ (8001738 <StartTask02+0x84>)
 800172a:	f7ff fc41 	bl	8000fb0 <Quaternion_Update>
  {
 800172e:	e7c5      	b.n	80016bc <StartTask02+0x8>
 8001730:	0800f294 	.word	0x0800f294
 8001734:	200003d4 	.word	0x200003d4
 8001738:	200003c0 	.word	0x200003c0
 800173c:	200003d0 	.word	0x200003d0

08001740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001752:	f000 faa3 	bl	8001c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40000800 	.word	0x40000800

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001776:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HAL_MspInit+0x68>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <HAL_MspInit+0x68>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_MspInit+0x68>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_MspInit+0x68>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a11      	ldr	r2, [pc, #68]	@ (80017d8 <HAL_MspInit+0x68>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_MspInit+0x68>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	210f      	movs	r1, #15
 80017aa:	f06f 0001 	mvn.w	r0, #1
 80017ae:	f000 fb6a 	bl	8001e86 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <HAL_MspInit+0x6c>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_MspInit+0x6c>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000

080017e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a47      	ldr	r2, [pc, #284]	@ (8001918 <HAL_SPI_MspInit+0x138>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	f040 8086 	bne.w	800190e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001802:	4b46      	ldr	r3, [pc, #280]	@ (800191c <HAL_SPI_MspInit+0x13c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a45      	ldr	r2, [pc, #276]	@ (800191c <HAL_SPI_MspInit+0x13c>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b43      	ldr	r3, [pc, #268]	@ (800191c <HAL_SPI_MspInit+0x13c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b40      	ldr	r3, [pc, #256]	@ (800191c <HAL_SPI_MspInit+0x13c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a3f      	ldr	r2, [pc, #252]	@ (800191c <HAL_SPI_MspInit+0x13c>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <HAL_SPI_MspInit+0x13c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001832:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	4836      	ldr	r0, [pc, #216]	@ (8001920 <HAL_SPI_MspInit+0x140>)
 8001848:	f000 fd20 	bl	800228c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800184c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	4619      	mov	r1, r3
 8001860:	482f      	ldr	r0, [pc, #188]	@ (8001920 <HAL_SPI_MspInit+0x140>)
 8001862:	f000 fd13 	bl	800228c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001866:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 8001868:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <HAL_SPI_MspInit+0x148>)
 800186a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186c:	4b2d      	ldr	r3, [pc, #180]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001872:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001878:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187e:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001890:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001896:	4823      	ldr	r0, [pc, #140]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 8001898:	f000 fb20 	bl	8001edc <HAL_DMA_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80018a2:	f7ff ff5f 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 80018aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_SPI_MspInit+0x144>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <HAL_SPI_MspInit+0x150>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018ba:	2210      	movs	r2, #16
 80018bc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018c6:	2280      	movs	r2, #128	@ 0x80
 80018c8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d0:	4b16      	ldr	r3, [pc, #88]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80018e2:	4812      	ldr	r0, [pc, #72]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018e4:	f000 fafa 	bl	8001edc <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80018ee:	f7ff ff39 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018f6:	649a      	str	r2, [r3, #72]	@ 0x48
 80018f8:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <HAL_SPI_MspInit+0x14c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2105      	movs	r1, #5
 8001902:	2024      	movs	r0, #36	@ 0x24
 8001904:	f000 fabf 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001908:	2024      	movs	r0, #36	@ 0x24
 800190a:	f000 fad8 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40003800 	.word	0x40003800
 800191c:	40021000 	.word	0x40021000
 8001920:	40010c00 	.word	0x40010c00
 8001924:	20000330 	.word	0x20000330
 8001928:	40020044 	.word	0x40020044
 800192c:	20000374 	.word	0x20000374
 8001930:	40020058 	.word	0x40020058

08001934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800194a:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_InitTick+0xe8>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a33      	ldr	r2, [pc, #204]	@ (8001a1c <HAL_InitTick+0xe8>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b31      	ldr	r3, [pc, #196]	@ (8001a1c <HAL_InitTick+0xe8>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001962:	f107 0210 	add.w	r2, r7, #16
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f002 ffbd 	bl	80048ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001978:	2b00      	cmp	r3, #0
 800197a:	d103      	bne.n	8001984 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800197c:	f002 ffa2 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8001980:	6378      	str	r0, [r7, #52]	@ 0x34
 8001982:	e004      	b.n	800198e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001984:	f002 ff9e 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8001988:	4603      	mov	r3, r0
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800198e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001990:	4a23      	ldr	r2, [pc, #140]	@ (8001a20 <HAL_InitTick+0xec>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0c9b      	lsrs	r3, r3, #18
 8001998:	3b01      	subs	r3, #1
 800199a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800199c:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <HAL_InitTick+0xf0>)
 800199e:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <HAL_InitTick+0xf4>)
 80019a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019a8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ae:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80019c2:	4818      	ldr	r0, [pc, #96]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019c4:	f003 fc6c 	bl	80052a0 <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11b      	bne.n	8001a0e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80019d6:	4813      	ldr	r0, [pc, #76]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019d8:	f003 fcba 	bl	8005350 <HAL_TIM_Base_Start_IT>
 80019dc:	4603      	mov	r3, r0
 80019de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d111      	bne.n	8001a0e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019ea:	201e      	movs	r0, #30
 80019ec:	f000 fa67 	bl	8001ebe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	d808      	bhi.n	8001a08 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80019f6:	2200      	movs	r2, #0
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	201e      	movs	r0, #30
 80019fc:	f000 fa43 	bl	8001e86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a00:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <HAL_InitTick+0xf8>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e002      	b.n	8001a0e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3738      	adds	r7, #56	@ 0x38
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	2000043c 	.word	0x2000043c
 8001a28:	40000800 	.word	0x40000800
 8001a2c:	20000008 	.word	0x20000008

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <NMI_Handler+0x4>

08001a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <MemManage_Handler+0x4>

08001a48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <DMA1_Channel4_IRQHandler+0x10>)
 8001a6a:	f000 fb09 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000330 	.word	0x20000330

08001a78 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <DMA1_Channel5_IRQHandler+0x10>)
 8001a7e:	f000 faff 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000374 	.word	0x20000374

08001a8c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001a92:	f000 ff04 	bl	800289e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20002b34 	.word	0x20002b34

08001aa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <TIM4_IRQHandler+0x10>)
 8001aa6:	f003 fca5 	bl	80053f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000043c 	.word	0x2000043c

08001ab4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <SPI2_IRQHandler+0x10>)
 8001aba:	f003 fa4f 	bl	8004f5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200002d8 	.word	0x200002d8

08001ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO_INT_Pin);
 8001acc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ad0:	f000 fda8 	bl	8002624 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e00a      	b.n	8001b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aea:	f3af 8000 	nop.w
 8001aee:	4601      	mov	r1, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <_read+0x12>
  }

  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf1      	blt.n	8001b24 <_write+0x12>
  }
  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b70:	605a      	str	r2, [r3, #4]
  return 0;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <_isatty>:

int _isatty(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f00c fbf4 	bl	800e3c8 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20005000 	.word	0x20005000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	20000484 	.word	0x20000484
 8001c14:	20003190 	.word	0x20003190

08001c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c24:	f7ff fff8 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c2a:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c40:	4c09      	ldr	r4, [pc, #36]	@ (8001c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f00c fbc1 	bl	800e3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c52:	f7ff fb8b 	bl	800136c <main>
  bx lr
 8001c56:	4770      	bx	lr
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c60:	0800f404 	.word	0x0800f404
  ldr r2, =_sbss
 8001c64:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c68:	20003190 	.word	0x20003190

08001c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC1_2_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <HAL_Init+0x28>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <HAL_Init+0x28>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 f8f5 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	200f      	movs	r0, #15
 8001c88:	f7ff fe54 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff fd70 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_IncTick+0x1c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_IncTick+0x20>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a03      	ldr	r2, [pc, #12]	@ (8001cbc <HAL_IncTick+0x20>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	20000488 	.word	0x20000488

08001cc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <HAL_GetTick+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000488 	.word	0x20000488

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffe0 	bl	8001cc0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000000c 	.word	0x2000000c

08001d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <__NVIC_SetPriorityGrouping+0x44>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d68:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <__NVIC_GetPriorityGrouping+0x18>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	f003 0307 	and.w	r3, r3, #7
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db0b      	blt.n	8001daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4906      	ldr	r1, [pc, #24]	@ (8001db4 <__NVIC_EnableIRQ+0x34>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2001      	movs	r0, #1
 8001da2:	fa00 f202 	lsl.w	r2, r0, r2
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	@ (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff4f 	bl	8001d1c <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff64 	bl	8001d64 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ffb2 	bl	8001e0c <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff81 	bl	8001db8 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff57 	bl	8001d80 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e043      	b.n	8001f7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <HAL_DMA_Init+0xa8>)
 8001efa:	4413      	add	r3, r2
 8001efc:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <HAL_DMA_Init+0xac>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	009a      	lsls	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_DMA_Init+0xb0>)
 8001f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	bffdfff8 	.word	0xbffdfff8
 8001f88:	cccccccd 	.word	0xcccccccd
 8001f8c:	40020000 	.word	0x40020000

08001f90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d005      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2204      	movs	r2, #4
 8001fac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e051      	b.n	8002058 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020e 	bic.w	r2, r2, #14
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <HAL_DMA_Abort_IT+0xd4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d029      	beq.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <HAL_DMA_Abort_IT+0xd8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_Abort_IT+0x9e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_DMA_Abort_IT+0xdc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01a      	beq.n	8002028 <HAL_DMA_Abort_IT+0x98>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8002070 <HAL_DMA_Abort_IT+0xe0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_Abort_IT+0x92>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	@ (8002074 <HAL_DMA_Abort_IT+0xe4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00a      	beq.n	800201c <HAL_DMA_Abort_IT+0x8c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_DMA_Abort_IT+0xe8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d102      	bne.n	8002016 <HAL_DMA_Abort_IT+0x86>
 8002010:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002014:	e00e      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800201a:	e00b      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 800201c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002020:	e008      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002026:	e005      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	e002      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 800202e:	2310      	movs	r3, #16
 8002030:	e000      	b.n	8002034 <HAL_DMA_Abort_IT+0xa4>
 8002032:	2301      	movs	r3, #1
 8002034:	4a11      	ldr	r2, [pc, #68]	@ (800207c <HAL_DMA_Abort_IT+0xec>)
 8002036:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
    } 
  }
  return status;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40020008 	.word	0x40020008
 8002068:	4002001c 	.word	0x4002001c
 800206c:	40020030 	.word	0x40020030
 8002070:	40020044 	.word	0x40020044
 8002074:	40020058 	.word	0x40020058
 8002078:	4002006c 	.word	0x4002006c
 800207c:	40020000 	.word	0x40020000

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	2204      	movs	r2, #4
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d04f      	beq.n	8002148 <HAL_DMA_IRQHandler+0xc8>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d04a      	beq.n	8002148 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a66      	ldr	r2, [pc, #408]	@ (8002270 <HAL_DMA_IRQHandler+0x1f0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d029      	beq.n	800212e <HAL_DMA_IRQHandler+0xae>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a65      	ldr	r2, [pc, #404]	@ (8002274 <HAL_DMA_IRQHandler+0x1f4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d022      	beq.n	800212a <HAL_DMA_IRQHandler+0xaa>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a63      	ldr	r2, [pc, #396]	@ (8002278 <HAL_DMA_IRQHandler+0x1f8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01a      	beq.n	8002124 <HAL_DMA_IRQHandler+0xa4>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a62      	ldr	r2, [pc, #392]	@ (800227c <HAL_DMA_IRQHandler+0x1fc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d012      	beq.n	800211e <HAL_DMA_IRQHandler+0x9e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a60      	ldr	r2, [pc, #384]	@ (8002280 <HAL_DMA_IRQHandler+0x200>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00a      	beq.n	8002118 <HAL_DMA_IRQHandler+0x98>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a5f      	ldr	r2, [pc, #380]	@ (8002284 <HAL_DMA_IRQHandler+0x204>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d102      	bne.n	8002112 <HAL_DMA_IRQHandler+0x92>
 800210c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002110:	e00e      	b.n	8002130 <HAL_DMA_IRQHandler+0xb0>
 8002112:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002116:	e00b      	b.n	8002130 <HAL_DMA_IRQHandler+0xb0>
 8002118:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800211c:	e008      	b.n	8002130 <HAL_DMA_IRQHandler+0xb0>
 800211e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002122:	e005      	b.n	8002130 <HAL_DMA_IRQHandler+0xb0>
 8002124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002128:	e002      	b.n	8002130 <HAL_DMA_IRQHandler+0xb0>
 800212a:	2340      	movs	r3, #64	@ 0x40
 800212c:	e000      	b.n	8002130 <HAL_DMA_IRQHandler+0xb0>
 800212e:	2304      	movs	r3, #4
 8002130:	4a55      	ldr	r2, [pc, #340]	@ (8002288 <HAL_DMA_IRQHandler+0x208>)
 8002132:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8094 	beq.w	8002266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002146:	e08e      	b.n	8002266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	2202      	movs	r2, #2
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d056      	beq.n	8002206 <HAL_DMA_IRQHandler+0x186>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d051      	beq.n	8002206 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10b      	bne.n	8002188 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 020a 	bic.w	r2, r2, #10
 800217e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a38      	ldr	r2, [pc, #224]	@ (8002270 <HAL_DMA_IRQHandler+0x1f0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d029      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x166>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a37      	ldr	r2, [pc, #220]	@ (8002274 <HAL_DMA_IRQHandler+0x1f4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x162>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a35      	ldr	r2, [pc, #212]	@ (8002278 <HAL_DMA_IRQHandler+0x1f8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01a      	beq.n	80021dc <HAL_DMA_IRQHandler+0x15c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a34      	ldr	r2, [pc, #208]	@ (800227c <HAL_DMA_IRQHandler+0x1fc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d012      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a32      	ldr	r2, [pc, #200]	@ (8002280 <HAL_DMA_IRQHandler+0x200>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x150>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a31      	ldr	r2, [pc, #196]	@ (8002284 <HAL_DMA_IRQHandler+0x204>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d102      	bne.n	80021ca <HAL_DMA_IRQHandler+0x14a>
 80021c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80021c8:	e00e      	b.n	80021e8 <HAL_DMA_IRQHandler+0x168>
 80021ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ce:	e00b      	b.n	80021e8 <HAL_DMA_IRQHandler+0x168>
 80021d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d4:	e008      	b.n	80021e8 <HAL_DMA_IRQHandler+0x168>
 80021d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021da:	e005      	b.n	80021e8 <HAL_DMA_IRQHandler+0x168>
 80021dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021e0:	e002      	b.n	80021e8 <HAL_DMA_IRQHandler+0x168>
 80021e2:	2320      	movs	r3, #32
 80021e4:	e000      	b.n	80021e8 <HAL_DMA_IRQHandler+0x168>
 80021e6:	2302      	movs	r3, #2
 80021e8:	4a27      	ldr	r2, [pc, #156]	@ (8002288 <HAL_DMA_IRQHandler+0x208>)
 80021ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d034      	beq.n	8002266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002204:	e02f      	b.n	8002266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	2208      	movs	r2, #8
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d028      	beq.n	8002268 <HAL_DMA_IRQHandler+0x1e8>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d023      	beq.n	8002268 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 020e 	bic.w	r2, r2, #14
 800222e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
    }
  }
  return;
 8002266:	bf00      	nop
 8002268:	bf00      	nop
}
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40020008 	.word	0x40020008
 8002274:	4002001c 	.word	0x4002001c
 8002278:	40020030 	.word	0x40020030
 800227c:	40020044 	.word	0x40020044
 8002280:	40020058 	.word	0x40020058
 8002284:	4002006c 	.word	0x4002006c
 8002288:	40020000 	.word	0x40020000

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b08b      	sub	sp, #44	@ 0x2c
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	e169      	b.n	8002574 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022a0:	2201      	movs	r2, #1
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f040 8158 	bne.w	800256e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a9a      	ldr	r2, [pc, #616]	@ (800252c <HAL_GPIO_Init+0x2a0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d05e      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022c8:	4a98      	ldr	r2, [pc, #608]	@ (800252c <HAL_GPIO_Init+0x2a0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d875      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022ce:	4a98      	ldr	r2, [pc, #608]	@ (8002530 <HAL_GPIO_Init+0x2a4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d058      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022d4:	4a96      	ldr	r2, [pc, #600]	@ (8002530 <HAL_GPIO_Init+0x2a4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d86f      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022da:	4a96      	ldr	r2, [pc, #600]	@ (8002534 <HAL_GPIO_Init+0x2a8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d052      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022e0:	4a94      	ldr	r2, [pc, #592]	@ (8002534 <HAL_GPIO_Init+0x2a8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d869      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022e6:	4a94      	ldr	r2, [pc, #592]	@ (8002538 <HAL_GPIO_Init+0x2ac>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d04c      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022ec:	4a92      	ldr	r2, [pc, #584]	@ (8002538 <HAL_GPIO_Init+0x2ac>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d863      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022f2:	4a92      	ldr	r2, [pc, #584]	@ (800253c <HAL_GPIO_Init+0x2b0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d046      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
 80022f8:	4a90      	ldr	r2, [pc, #576]	@ (800253c <HAL_GPIO_Init+0x2b0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d85d      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 80022fe:	2b12      	cmp	r3, #18
 8002300:	d82a      	bhi.n	8002358 <HAL_GPIO_Init+0xcc>
 8002302:	2b12      	cmp	r3, #18
 8002304:	d859      	bhi.n	80023ba <HAL_GPIO_Init+0x12e>
 8002306:	a201      	add	r2, pc, #4	@ (adr r2, 800230c <HAL_GPIO_Init+0x80>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	08002387 	.word	0x08002387
 8002310:	08002361 	.word	0x08002361
 8002314:	08002373 	.word	0x08002373
 8002318:	080023b5 	.word	0x080023b5
 800231c:	080023bb 	.word	0x080023bb
 8002320:	080023bb 	.word	0x080023bb
 8002324:	080023bb 	.word	0x080023bb
 8002328:	080023bb 	.word	0x080023bb
 800232c:	080023bb 	.word	0x080023bb
 8002330:	080023bb 	.word	0x080023bb
 8002334:	080023bb 	.word	0x080023bb
 8002338:	080023bb 	.word	0x080023bb
 800233c:	080023bb 	.word	0x080023bb
 8002340:	080023bb 	.word	0x080023bb
 8002344:	080023bb 	.word	0x080023bb
 8002348:	080023bb 	.word	0x080023bb
 800234c:	080023bb 	.word	0x080023bb
 8002350:	08002369 	.word	0x08002369
 8002354:	0800237d 	.word	0x0800237d
 8002358:	4a79      	ldr	r2, [pc, #484]	@ (8002540 <HAL_GPIO_Init+0x2b4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800235e:	e02c      	b.n	80023ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	623b      	str	r3, [r7, #32]
          break;
 8002366:	e029      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	3304      	adds	r3, #4
 800236e:	623b      	str	r3, [r7, #32]
          break;
 8002370:	e024      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	3308      	adds	r3, #8
 8002378:	623b      	str	r3, [r7, #32]
          break;
 800237a:	e01f      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	330c      	adds	r3, #12
 8002382:	623b      	str	r3, [r7, #32]
          break;
 8002384:	e01a      	b.n	80023bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800238e:	2304      	movs	r3, #4
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e013      	b.n	80023bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	611a      	str	r2, [r3, #16]
          break;
 80023a6:	e009      	b.n	80023bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a8:	2308      	movs	r3, #8
 80023aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	615a      	str	r2, [r3, #20]
          break;
 80023b2:	e003      	b.n	80023bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x130>
          break;
 80023ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2bff      	cmp	r3, #255	@ 0xff
 80023c0:	d801      	bhi.n	80023c6 <HAL_GPIO_Init+0x13a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	e001      	b.n	80023ca <HAL_GPIO_Init+0x13e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2bff      	cmp	r3, #255	@ 0xff
 80023d0:	d802      	bhi.n	80023d8 <HAL_GPIO_Init+0x14c>
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x152>
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	3b08      	subs	r3, #8
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	210f      	movs	r1, #15
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	401a      	ands	r2, r3
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	431a      	orrs	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80b1 	beq.w	800256e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800240c:	4b4d      	ldr	r3, [pc, #308]	@ (8002544 <HAL_GPIO_Init+0x2b8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a4c      	ldr	r2, [pc, #304]	@ (8002544 <HAL_GPIO_Init+0x2b8>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b4a      	ldr	r3, [pc, #296]	@ (8002544 <HAL_GPIO_Init+0x2b8>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002424:	4a48      	ldr	r2, [pc, #288]	@ (8002548 <HAL_GPIO_Init+0x2bc>)
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002430:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	220f      	movs	r2, #15
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a40      	ldr	r2, [pc, #256]	@ (800254c <HAL_GPIO_Init+0x2c0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <HAL_GPIO_Init+0x1ec>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3f      	ldr	r2, [pc, #252]	@ (8002550 <HAL_GPIO_Init+0x2c4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00d      	beq.n	8002474 <HAL_GPIO_Init+0x1e8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3e      	ldr	r2, [pc, #248]	@ (8002554 <HAL_GPIO_Init+0x2c8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <HAL_GPIO_Init+0x1e4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3d      	ldr	r2, [pc, #244]	@ (8002558 <HAL_GPIO_Init+0x2cc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_GPIO_Init+0x1e0>
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 800246c:	2304      	movs	r3, #4
 800246e:	e004      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002470:	2302      	movs	r3, #2
 8002472:	e002      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_GPIO_Init+0x1ee>
 8002478:	2300      	movs	r3, #0
 800247a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800248a:	492f      	ldr	r1, [pc, #188]	@ (8002548 <HAL_GPIO_Init+0x2bc>)
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024a4:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	492c      	ldr	r1, [pc, #176]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4928      	ldr	r1, [pc, #160]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024cc:	4b23      	ldr	r3, [pc, #140]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4922      	ldr	r1, [pc, #136]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	491e      	ldr	r1, [pc, #120]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4918      	ldr	r1, [pc, #96]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002502:	4b16      	ldr	r3, [pc, #88]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	43db      	mvns	r3, r3
 800250a:	4914      	ldr	r1, [pc, #80]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 800250c:	4013      	ands	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d021      	beq.n	8002560 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	490e      	ldr	r1, [pc, #56]	@ (800255c <HAL_GPIO_Init+0x2d0>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e021      	b.n	800256e <HAL_GPIO_Init+0x2e2>
 800252a:	bf00      	nop
 800252c:	10320000 	.word	0x10320000
 8002530:	10310000 	.word	0x10310000
 8002534:	10220000 	.word	0x10220000
 8002538:	10210000 	.word	0x10210000
 800253c:	10120000 	.word	0x10120000
 8002540:	10110000 	.word	0x10110000
 8002544:	40021000 	.word	0x40021000
 8002548:	40010000 	.word	0x40010000
 800254c:	40010800 	.word	0x40010800
 8002550:	40010c00 	.word	0x40010c00
 8002554:	40011000 	.word	0x40011000
 8002558:	40011400 	.word	0x40011400
 800255c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_GPIO_Init+0x304>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	43db      	mvns	r3, r3
 8002568:	4909      	ldr	r1, [pc, #36]	@ (8002590 <HAL_GPIO_Init+0x304>)
 800256a:	4013      	ands	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	f47f ae8e 	bne.w	80022a0 <HAL_GPIO_Init+0x14>
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	372c      	adds	r7, #44	@ 0x2c
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]
 80025ce:	4613      	mov	r3, r2
 80025d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d2:	787b      	ldrb	r3, [r7, #1]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d8:	887a      	ldrh	r2, [r7, #2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025de:	e003      	b.n	80025e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	041a      	lsls	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	611a      	str	r2, [r3, #16]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002604:	887a      	ldrh	r2, [r7, #2]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	041a      	lsls	r2, r3, #16
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43d9      	mvns	r1, r3
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	400b      	ands	r3, r1
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fe64 	bl	8001310 <HAL_GPIO_EXTI_Callback>
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	b08b      	sub	sp, #44	@ 0x2c
 8002658:	af06      	add	r7, sp, #24
 800265a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0f1      	b.n	800284a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f00a f9a0 	bl	800c9c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2203      	movs	r2, #3
 8002684:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f877 	bl	8005780 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	687e      	ldr	r6, [r7, #4]
 800269a:	466d      	mov	r5, sp
 800269c:	f106 0410 	add.w	r4, r6, #16
 80026a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	602b      	str	r3, [r5, #0]
 80026a8:	1d33      	adds	r3, r6, #4
 80026aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	f003 f841 	bl	8005734 <USB_CoreInit>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0c2      	b.n	800284a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 f872 	bl	80057b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e040      	b.n	8002758 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	3301      	adds	r3, #1
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	3303      	adds	r3, #3
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	3338      	adds	r3, #56	@ 0x38
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	333c      	adds	r3, #60	@ 0x3c
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	3340      	adds	r3, #64	@ 0x40
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3301      	adds	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d3b9      	bcc.n	80026d6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e044      	b.n	80027f2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	3301      	adds	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3b5      	bcc.n	8002768 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	687e      	ldr	r6, [r7, #4]
 8002804:	466d      	mov	r5, sp
 8002806:	f106 0410 	add.w	r4, r6, #16
 800280a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	602b      	str	r3, [r5, #0]
 8002812:	1d33      	adds	r3, r6, #4
 8002814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f002 ffd8 	bl	80057cc <USB_DevInit>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00d      	b.n	800284a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f005 fa59 	bl	8007cfa <USB_DevDisconnect>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_PCD_Start+0x16>
 8002864:	2302      	movs	r3, #2
 8002866:	e016      	b.n	8002896 <HAL_PCD_Start+0x44>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 ff6d 	bl	8005754 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800287a:	2101      	movs	r1, #1
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f00a fb12 	bl	800cea6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f005 fa2d 	bl	8007ce6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b088      	sub	sp, #32
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f005 fa2f 	bl	8007d0e <USB_ReadInterrupts>
 80028b0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fb1b 	bl	8002ef8 <PCD_EP_ISR_Handler>

    return;
 80028c2:	e119      	b.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d013      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e0:	b292      	uxth	r2, r2
 80028e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f00a f8e5 	bl	800cab6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80028ec:	2100      	movs	r1, #0
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f905 	bl	8002afe <HAL_PCD_SetAddress>

    return;
 80028f4:	e100      	b.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00c      	beq.n	800291a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002912:	b292      	uxth	r2, r2
 8002914:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002918:	e0ee      	b.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00c      	beq.n	800293e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002936:	b292      	uxth	r2, r2
 8002938:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800293c:	e0dc      	b.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d027      	beq.n	8002998 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0204 	bic.w	r2, r2, #4
 800295a:	b292      	uxth	r2, r2
 800295c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002968:	b29a      	uxth	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0208 	bic.w	r2, r2, #8
 8002972:	b292      	uxth	r2, r2
 8002974:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f00a f8d5 	bl	800cb28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002986:	b29a      	uxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002990:	b292      	uxth	r2, r2
 8002992:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002996:	e0af      	b.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8083 	beq.w	8002aaa <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e010      	b.n	80029cc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	7ffb      	ldrb	r3, [r7, #31]
 80029b8:	8812      	ldrh	r2, [r2, #0]
 80029ba:	b292      	uxth	r2, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	3320      	adds	r3, #32
 80029c0:	443b      	add	r3, r7
 80029c2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	3301      	adds	r3, #1
 80029ca:	77fb      	strb	r3, [r7, #31]
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	2b07      	cmp	r3, #7
 80029d0:	d9eb      	bls.n	80029aa <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	b292      	uxth	r2, r2
 80029e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	b292      	uxth	r2, r2
 80029fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a02:	bf00      	nop
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f6      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	77fb      	strb	r3, [r7, #31]
 8002a32:	e00f      	b.n	8002a54 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a34:	7ffb      	ldrb	r3, [r7, #31]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	7ffa      	ldrb	r2, [r7, #31]
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	440a      	add	r2, r1
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	3320      	adds	r3, #32
 8002a46:	443b      	add	r3, r7
 8002a48:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002a4c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	3301      	adds	r3, #1
 8002a52:	77fb      	strb	r3, [r7, #31]
 8002a54:	7ffb      	ldrb	r3, [r7, #31]
 8002a56:	2b07      	cmp	r3, #7
 8002a58:	d9ec      	bls.n	8002a34 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0208 	orr.w	r2, r2, #8
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a84:	b292      	uxth	r2, r2
 8002a86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0204 	orr.w	r2, r2, #4
 8002a9c:	b292      	uxth	r2, r2
 8002a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f00a f826 	bl	800caf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002aa8:	e026      	b.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00f      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f009 ffe4 	bl	800ca9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ad2:	e011      	b.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af0:	b292      	uxth	r2, r2
 8002af2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002af6:	bf00      	nop
  }
}
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_PCD_SetAddress+0x1a>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e013      	b.n	8002b40 <HAL_PCD_SetAddress+0x42>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f005 f8c5 	bl	8007cc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	70fb      	strb	r3, [r7, #3]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	803b      	strh	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da0e      	bge.n	8002b8c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	705a      	strb	r2, [r3, #1]
 8002b8a:	e00e      	b.n	8002baa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	f003 0207 	and.w	r2, r3, #7
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bb6:	883a      	ldrh	r2, [r7, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	78ba      	ldrb	r2, [r7, #2]
 8002bc0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bc2:	78bb      	ldrb	r3, [r7, #2]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_PCD_EP_Open+0x94>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e00e      	b.n	8002bfa <HAL_PCD_EP_Open+0xb2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 fe0e 	bl	800580c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da0e      	bge.n	8002c34 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	705a      	strb	r2, [r3, #1]
 8002c32:	e00e      	b.n	8002c52 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 0207 	and.w	r2, r3, #7
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_EP_Close+0x6a>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e00e      	b.n	8002c8a <HAL_PCD_EP_Close+0x88>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 f986 	bl	8005f8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	f003 0207 	and.w	r2, r3, #7
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6979      	ldr	r1, [r7, #20]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 fb3d 	bl	8006364 <USB_EPStartXfer>

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 0207 	and.w	r2, r3, #7
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6e:	7afb      	ldrb	r3, [r7, #11]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 faef 	bl	8006364 <USB_EPStartXfer>

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 0207 	and.w	r2, r3, #7
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d901      	bls.n	8002dae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e04c      	b.n	8002e48 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da0e      	bge.n	8002dd4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	705a      	strb	r2, [r3, #1]
 8002dd2:	e00c      	b.n	8002dee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_PCD_EP_SetStall+0x7e>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e01c      	b.n	8002e48 <HAL_PCD_EP_SetStall+0xb8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fe52 	bl	8007ac6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f004 ff77 	bl	8007d2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d901      	bls.n	8002e6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e040      	b.n	8002ef0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	da0e      	bge.n	8002e94 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	705a      	strb	r2, [r3, #1]
 8002e92:	e00e      	b.n	8002eb2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 0207 	and.w	r2, r3, #7
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_PCD_EP_ClrStall+0x82>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e00e      	b.n	8002ef0 <HAL_PCD_EP_ClrStall+0xa0>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 fe40 	bl	8007b66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b096      	sub	sp, #88	@ 0x58
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f00:	e3be      	b.n	8003680 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f0a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002f1c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8178 	bne.w	8003216 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d151      	bne.n	8002fd6 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f42:	81fb      	strh	r3, [r7, #14]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	89fb      	ldrh	r3, [r7, #14]
 8002f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3328      	adds	r3, #40	@ 0x28
 8002f5a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3302      	adds	r3, #2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	441a      	add	r2, r3
 8002f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f96:	2100      	movs	r1, #0
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f009 fd64 	bl	800ca66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 836a 	beq.w	8003680 <PCD_EP_ISR_Handler+0x788>
 8002fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 8365 	bne.w	8003680 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fd4:	e354      	b.n	8003680 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002fdc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002fe8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d034      	beq.n	800305e <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	3306      	adds	r3, #6
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800301c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 800302a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800302e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003030:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003032:	b29b      	uxth	r3, r3
 8003034:	f004 feca 	bl	8007dcc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29a      	uxth	r2, r3
 8003040:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003044:	4013      	ands	r3, r2
 8003046:	823b      	strh	r3, [r7, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	8a3a      	ldrh	r2, [r7, #16]
 800304e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003052:	b292      	uxth	r2, r2
 8003054:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f009 fcd8 	bl	800ca0c <HAL_PCD_SetupStageCallback>
 800305c:	e310      	b.n	8003680 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800305e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003062:	2b00      	cmp	r3, #0
 8003064:	f280 830c 	bge.w	8003680 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29a      	uxth	r2, r3
 8003070:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003074:	4013      	ands	r3, r2
 8003076:	83fb      	strh	r3, [r7, #30]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	8bfa      	ldrh	r2, [r7, #30]
 800307e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003082:	b292      	uxth	r2, r2
 8003084:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	3306      	adds	r3, #6
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d019      	beq.n	80030ee <PCD_EP_ISR_Handler+0x1f6>
 80030ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c8:	6959      	ldr	r1, [r3, #20]
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80030ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f004 fe7a 	bl	8007dcc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80030d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	441a      	add	r2, r3
 80030e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030e6:	2100      	movs	r1, #0
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f009 fca1 	bl	800ca30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80030f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 82bd 	bne.w	8003680 <PCD_EP_ISR_Handler+0x788>
 8003106:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800310a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800310e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003112:	f000 82b5 	beq.w	8003680 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003140:	b29a      	uxth	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b3e      	cmp	r3, #62	@ 0x3e
 800314c:	d91d      	bls.n	800318a <PCD_EP_ISR_Handler+0x292>
 800314e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	647b      	str	r3, [r7, #68]	@ 0x44
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <PCD_EP_ISR_Handler+0x270>
 8003162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003164:	3b01      	subs	r3, #1
 8003166:	647b      	str	r3, [r7, #68]	@ 0x44
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29a      	uxth	r2, r3
 800316e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003170:	b29b      	uxth	r3, r3
 8003172:	029b      	lsls	r3, r3, #10
 8003174:	b29b      	uxth	r3, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003182:	b29a      	uxth	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	801a      	strh	r2, [r3, #0]
 8003188:	e026      	b.n	80031d8 <PCD_EP_ISR_Handler+0x2e0>
 800318a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <PCD_EP_ISR_Handler+0x2b0>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	e017      	b.n	80031d8 <PCD_EP_ISR_Handler+0x2e0>
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <PCD_EP_ISR_Handler+0x2ca>
 80031bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031be:	3301      	adds	r3, #1
 80031c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e8:	827b      	strh	r3, [r7, #18]
 80031ea:	8a7b      	ldrh	r3, [r7, #18]
 80031ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80031f0:	827b      	strh	r3, [r7, #18]
 80031f2:	8a7b      	ldrh	r3, [r7, #18]
 80031f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80031f8:	827b      	strh	r3, [r7, #18]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	8a7b      	ldrh	r3, [r7, #18]
 8003200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800320c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003210:	b29b      	uxth	r3, r3
 8003212:	8013      	strh	r3, [r2, #0]
 8003214:	e234      	b.n	8003680 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800322a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800322e:	2b00      	cmp	r3, #0
 8003230:	f280 80fc 	bge.w	800342c <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29a      	uxth	r2, r3
 8003246:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800324a:	4013      	ands	r3, r2
 800324c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003262:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003266:	b292      	uxth	r2, r2
 8003268:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800326a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003282:	7b1b      	ldrb	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d125      	bne.n	80032d4 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	3306      	adds	r3, #6
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80032b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8092 	beq.w	80033e2 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c4:	6959      	ldr	r1, [r3, #20]
 80032c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c8:	88da      	ldrh	r2, [r3, #6]
 80032ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032ce:	f004 fd7d 	bl	8007dcc <USB_ReadPMA>
 80032d2:	e086      	b.n	80033e2 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	78db      	ldrb	r3, [r3, #3]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d10a      	bne.n	80032f2 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80032dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032e0:	461a      	mov	r2, r3
 80032e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f9d9 	bl	800369c <HAL_PCD_EP_DB_Receive>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80032f0:	e077      	b.n	80033e2 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800332a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800332e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d024      	beq.n	800339a <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	3302      	adds	r3, #2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003378:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800337c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02e      	beq.n	80033e2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338a:	6959      	ldr	r1, [r3, #20]
 800338c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338e:	891a      	ldrh	r2, [r3, #8]
 8003390:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003394:	f004 fd1a 	bl	8007dcc <USB_ReadPMA>
 8003398:	e023      	b.n	80033e2 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	3306      	adds	r3, #6
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80033c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	6959      	ldr	r1, [r3, #20]
 80033d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d8:	895a      	ldrh	r2, [r3, #10]
 80033da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033de:	f004 fcf5 	bl	8007dcc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80033e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e4:	69da      	ldr	r2, [r3, #28]
 80033e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033ea:	441a      	add	r2, r3
 80033ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80033f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033f8:	441a      	add	r2, r3
 80033fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <PCD_EP_ISR_Handler+0x51a>
 8003406:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	429a      	cmp	r2, r3
 8003410:	d206      	bcs.n	8003420 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f009 fb09 	bl	800ca30 <HAL_PCD_DataOutStageCallback>
 800341e:	e005      	b.n	800342c <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003426:	4618      	mov	r0, r3
 8003428:	f002 ff9c 	bl	8006364 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800342c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8123 	beq.w	8003680 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 800343a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003468:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800347e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003486:	b29b      	uxth	r3, r3
 8003488:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800348a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348c:	78db      	ldrb	r3, [r3, #3]
 800348e:	2b01      	cmp	r3, #1
 8003490:	f040 80a2 	bne.w	80035d8 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8003494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	7b1b      	ldrb	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8093 	beq.w	80035ca <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d046      	beq.n	800353e <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d126      	bne.n	8003506 <PCD_EP_ISR_Handler+0x60e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	4413      	add	r3, r2
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	011a      	lsls	r2, r3, #4
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	4413      	add	r3, r2
 80034da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	801a      	strh	r2, [r3, #0]
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034fe:	b29a      	uxth	r2, r3
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	801a      	strh	r2, [r3, #0]
 8003504:	e061      	b.n	80035ca <PCD_EP_ISR_Handler+0x6d2>
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d15d      	bne.n	80035ca <PCD_EP_ISR_Handler+0x6d2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800351c:	b29b      	uxth	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003522:	4413      	add	r3, r2
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	011a      	lsls	r2, r3, #4
 800352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352e:	4413      	add	r3, r2
 8003530:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003538:	2200      	movs	r2, #0
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	e045      	b.n	80035ca <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	785b      	ldrb	r3, [r3, #1]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d126      	bne.n	800359a <PCD_EP_ISR_Handler+0x6a2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003560:	4413      	add	r3, r2
 8003562:	637b      	str	r3, [r7, #52]	@ 0x34
 8003564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	011a      	lsls	r2, r3, #4
 800356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356c:	4413      	add	r3, r2
 800356e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003572:	633b      	str	r3, [r7, #48]	@ 0x30
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357e:	b29a      	uxth	r2, r3
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	801a      	strh	r2, [r3, #0]
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800358e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003592:	b29a      	uxth	r2, r3
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	801a      	strh	r2, [r3, #0]
 8003598:	e017      	b.n	80035ca <PCD_EP_ISR_Handler+0x6d2>
 800359a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d113      	bne.n	80035ca <PCD_EP_ISR_Handler+0x6d2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b0:	4413      	add	r3, r2
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	011a      	lsls	r2, r3, #4
 80035ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035bc:	4413      	add	r3, r2
 80035be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f009 fa48 	bl	800ca66 <HAL_PCD_DataInStageCallback>
 80035d6:	e053      	b.n	8003680 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80035d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d146      	bne.n	8003672 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	3302      	adds	r3, #2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800360c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003618:	429a      	cmp	r2, r3
 800361a:	d907      	bls.n	800362c <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 800361c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003624:	1ad2      	subs	r2, r2, r3
 8003626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003628:	619a      	str	r2, [r3, #24]
 800362a:	e002      	b.n	8003632 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 800362c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362e:	2200      	movs	r2, #0
 8003630:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800363a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f009 fa10 	bl	800ca66 <HAL_PCD_DataInStageCallback>
 8003646:	e01b      	b.n	8003680 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003650:	441a      	add	r2, r3
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800365e:	441a      	add	r2, r3
 8003660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003662:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800366a:	4618      	mov	r0, r3
 800366c:	f002 fe7a 	bl	8006364 <USB_EPStartXfer>
 8003670:	e006      	b.n	8003680 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003672:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003676:	461a      	mov	r2, r3
 8003678:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f91b 	bl	80038b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003688:	b29b      	uxth	r3, r3
 800368a:	b21b      	sxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	f6ff ac38 	blt.w	8002f02 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3758      	adds	r7, #88	@ 0x58
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d07e      	beq.n	80037b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036bc:	b29b      	uxth	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	3302      	adds	r3, #2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	8b7b      	ldrh	r3, [r7, #26]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d306      	bcc.n	80036f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	8b7b      	ldrh	r3, [r7, #26]
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	619a      	str	r2, [r3, #24]
 80036f4:	e002      	b.n	80036fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d123      	bne.n	800374c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800371a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371e:	833b      	strh	r3, [r7, #24]
 8003720:	8b3b      	ldrh	r3, [r7, #24]
 8003722:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003726:	833b      	strh	r3, [r7, #24]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	8b3b      	ldrh	r3, [r7, #24]
 8003738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800373c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003748:	b29b      	uxth	r3, r3
 800374a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01f      	beq.n	8003796 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800376c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003770:	82fb      	strh	r3, [r7, #22]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	441a      	add	r2, r3
 8003780:	8afb      	ldrh	r3, [r7, #22]
 8003782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800378a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800378e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003792:	b29b      	uxth	r3, r3
 8003794:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003796:	8b7b      	ldrh	r3, [r7, #26]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8087 	beq.w	80038ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6959      	ldr	r1, [r3, #20]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	891a      	ldrh	r2, [r3, #8]
 80037aa:	8b7b      	ldrh	r3, [r7, #26]
 80037ac:	f004 fb0e 	bl	8007dcc <USB_ReadPMA>
 80037b0:	e07c      	b.n	80038ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	3306      	adds	r3, #6
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	8b7b      	ldrh	r3, [r7, #26]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d306      	bcc.n	80037f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	8b7b      	ldrh	r3, [r7, #26]
 80037ec:	1ad2      	subs	r2, r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	619a      	str	r2, [r3, #24]
 80037f2:	e002      	b.n	80037fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d123      	bne.n	800384a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381c:	83fb      	strh	r3, [r7, #30]
 800381e:	8bfb      	ldrh	r3, [r7, #30]
 8003820:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003824:	83fb      	strh	r3, [r7, #30]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	441a      	add	r2, r3
 8003834:	8bfb      	ldrh	r3, [r7, #30]
 8003836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800383a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800383e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003846:	b29b      	uxth	r3, r3
 8003848:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11f      	bne.n	8003894 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800386a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386e:	83bb      	strh	r3, [r7, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	8bbb      	ldrh	r3, [r7, #28]
 8003880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800388c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003890:	b29b      	uxth	r3, r3
 8003892:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003894:	8b7b      	ldrh	r3, [r7, #26]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6959      	ldr	r1, [r3, #20]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	895a      	ldrh	r2, [r3, #10]
 80038a6:	8b7b      	ldrh	r3, [r7, #26]
 80038a8:	f004 fa90 	bl	8007dcc <USB_ReadPMA>
    }
  }

  return count;
 80038ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b0a4      	sub	sp, #144	@ 0x90
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 81dd 	beq.w	8003c8a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038d8:	b29b      	uxth	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	3302      	adds	r3, #2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003904:	429a      	cmp	r2, r3
 8003906:	d907      	bls.n	8003918 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003910:	1ad2      	subs	r2, r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	619a      	str	r2, [r3, #24]
 8003916:	e002      	b.n	800391e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 80b9 	bne.w	8003a9a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d126      	bne.n	800397e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003944:	4413      	add	r3, r2
 8003946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	011a      	lsls	r2, r3, #4
 800394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003950:	4413      	add	r3, r2
 8003952:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003962:	b29a      	uxth	r2, r3
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003976:	b29a      	uxth	r2, r3
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e01a      	b.n	80039b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	785b      	ldrb	r3, [r3, #1]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d116      	bne.n	80039b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399a:	4413      	add	r3, r2
 800399c:	637b      	str	r3, [r7, #52]	@ 0x34
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	011a      	lsls	r2, r3, #4
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	4413      	add	r3, r2
 80039a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	2200      	movs	r2, #0
 80039b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d126      	bne.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x15a>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	011a      	lsls	r2, r3, #4
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e017      	b.n	8003a40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d113      	bne.n	8003a40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	4413      	add	r3, r2
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	011a      	lsls	r2, r3, #4
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	4413      	add	r3, r2
 8003a34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4619      	mov	r1, r3
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f009 f80d 	bl	800ca66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 82fc 	beq.w	8004050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	82fb      	strh	r3, [r7, #22]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	8afb      	ldrh	r3, [r7, #22]
 8003a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	8013      	strh	r3, [r2, #0]
 8003a98:	e2da      	b.n	8004050 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003abe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	f040 82ae 	bne.w	8004050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003afc:	441a      	add	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b0a:	441a      	add	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6a1a      	ldr	r2, [r3, #32]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d30b      	bcc.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	621a      	str	r2, [r3, #32]
 8003b32:	e017      	b.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d108      	bne.n	8003b4e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003b3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b4c:	e00a      	b.n	8003b64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2200      	movs	r2, #0
 8003b62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d165      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x382>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b80:	4413      	add	r3, r2
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	011a      	lsls	r2, r3, #4
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	801a      	strh	r2, [r3, #0]
 8003ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ba8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003baa:	d91d      	bls.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x332>
 8003bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x310>
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	029b      	lsls	r3, r3, #10
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	e044      	b.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x350>
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	e035      	b.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e01c      	b.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d118      	bne.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c54:	4413      	add	r3, r2
 8003c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	011a      	lsls	r2, r3, #4
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c60:	4413      	add	r3, r2
 8003c62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6959      	ldr	r1, [r3, #20]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	891a      	ldrh	r2, [r3, #8]
 8003c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f004 f85d 	bl	8007d42 <USB_WritePMA>
 8003c88:	e1e2      	b.n	8004050 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3306      	adds	r3, #6
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d307      	bcc.n	8003cd2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cca:	1ad2      	subs	r2, r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	619a      	str	r2, [r3, #24]
 8003cd0:	e002      	b.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 80c0 	bne.w	8003e62 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d126      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x482>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cfe:	4413      	add	r3, r2
 8003d00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	011a      	lsls	r2, r3, #4
 8003d08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e01a      	b.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d116      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d54:	4413      	add	r3, r2
 8003d56:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	011a      	lsls	r2, r3, #4
 8003d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d60:	4413      	add	r3, r2
 8003d62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d12b      	bne.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d90:	4413      	add	r3, r2
 8003d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	011a      	lsls	r2, r3, #4
 8003d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003da2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e017      	b.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d113      	bne.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dea:	4413      	add	r3, r2
 8003dec:	677b      	str	r3, [r7, #116]	@ 0x74
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	011a      	lsls	r2, r3, #4
 8003df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e00:	2200      	movs	r2, #0
 8003e02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f008 fe2b 	bl	800ca66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 811a 	bne.w	8004050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e36:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	441a      	add	r2, r3
 8003e48:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	8013      	strh	r3, [r2, #0]
 8003e60:	e0f6      	b.n	8004050 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d121      	bne.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	441a      	add	r2, r3
 8003e98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ea4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	f040 80ca 	bne.w	8004050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ed2:	441a      	add	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6a1a      	ldr	r2, [r3, #32]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d30b      	bcc.n	8003efc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef4:	1ad2      	subs	r2, r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	621a      	str	r2, [r3, #32]
 8003efa:	e017      	b.n	8003f2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f14:	e00a      	b.n	8003f2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d165      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x750>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f4e:	4413      	add	r3, r2
 8003f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	011a      	lsls	r2, r3, #4
 8003f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f76:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f78:	d91d      	bls.n	8003fb6 <HAL_PCD_EP_DB_Transmit+0x700>
 8003f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f90:	3b01      	subs	r3, #1
 8003f92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e041      	b.n	800403a <HAL_PCD_EP_DB_Transmit+0x784>
 8003fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	e032      	b.n	800403a <HAL_PCD_EP_DB_Transmit+0x784>
 8003fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_PCD_EP_DB_Transmit+0x738>
 8003fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fea:	3301      	adds	r3, #1
 8003fec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	029b      	lsls	r3, r3, #10
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e019      	b.n	800403a <HAL_PCD_EP_DB_Transmit+0x784>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d115      	bne.n	800403a <HAL_PCD_EP_DB_Transmit+0x784>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401c:	4413      	add	r3, r2
 800401e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	011a      	lsls	r2, r3, #4
 8004026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004028:	4413      	add	r3, r2
 800402a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800402e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004034:	b29a      	uxth	r2, r3
 8004036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004038:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6959      	ldr	r1, [r3, #20]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	895a      	ldrh	r2, [r3, #10]
 8004046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800404a:	b29b      	uxth	r3, r3
 800404c:	f003 fe79 	bl	8007d42 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800406a:	82bb      	strh	r3, [r7, #20]
 800406c:	8abb      	ldrh	r3, [r7, #20]
 800406e:	f083 0310 	eor.w	r3, r3, #16
 8004072:	82bb      	strh	r3, [r7, #20]
 8004074:	8abb      	ldrh	r3, [r7, #20]
 8004076:	f083 0320 	eor.w	r3, r3, #32
 800407a:	82bb      	strh	r3, [r7, #20]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	8abb      	ldrh	r3, [r7, #20]
 800408c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800409c:	b29b      	uxth	r3, r3
 800409e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3790      	adds	r7, #144	@ 0x90
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	817b      	strh	r3, [r7, #10]
 80040b8:	4613      	mov	r3, r2
 80040ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e009      	b.n	80040f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040e0:	897a      	ldrh	r2, [r7, #10]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80040f4:	893b      	ldrh	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d107      	bne.n	800410a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	b29a      	uxth	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	80da      	strh	r2, [r3, #6]
 8004108:	e00b      	b.n	8004122 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2201      	movs	r2, #1
 800410e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	b29a      	uxth	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	0c1b      	lsrs	r3, r3, #16
 800411c:	b29a      	uxth	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
	...

08004130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e272      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8087 	beq.w	800425e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004150:	4b92      	ldr	r3, [pc, #584]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b04      	cmp	r3, #4
 800415a:	d00c      	beq.n	8004176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800415c:	4b8f      	ldr	r3, [pc, #572]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d112      	bne.n	800418e <HAL_RCC_OscConfig+0x5e>
 8004168:	4b8c      	ldr	r3, [pc, #560]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004174:	d10b      	bne.n	800418e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004176:	4b89      	ldr	r3, [pc, #548]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d06c      	beq.n	800425c <HAL_RCC_OscConfig+0x12c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d168      	bne.n	800425c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e24c      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x76>
 8004198:	4b80      	ldr	r3, [pc, #512]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a7f      	ldr	r2, [pc, #508]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 800419e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	e02e      	b.n	8004204 <HAL_RCC_OscConfig+0xd4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x98>
 80041ae:	4b7b      	ldr	r3, [pc, #492]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7a      	ldr	r2, [pc, #488]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b78      	ldr	r3, [pc, #480]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a77      	ldr	r2, [pc, #476]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e01d      	b.n	8004204 <HAL_RCC_OscConfig+0xd4>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0xbc>
 80041d2:	4b72      	ldr	r3, [pc, #456]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a71      	ldr	r2, [pc, #452]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b6f      	ldr	r3, [pc, #444]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6e      	ldr	r2, [pc, #440]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0xd4>
 80041ec:	4b6b      	ldr	r3, [pc, #428]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a6a      	ldr	r2, [pc, #424]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	4b68      	ldr	r3, [pc, #416]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a67      	ldr	r2, [pc, #412]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80041fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fd fd58 	bl	8001cc0 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004214:	f7fd fd54 	bl	8001cc0 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	@ 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e200      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b5d      	ldr	r3, [pc, #372]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0xe4>
 8004232:	e014      	b.n	800425e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004234:	f7fd fd44 	bl	8001cc0 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800423c:	f7fd fd40 	bl	8001cc0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	@ 0x64
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e1ec      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424e:	4b53      	ldr	r3, [pc, #332]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x10c>
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d063      	beq.n	8004332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800426a:	4b4c      	ldr	r3, [pc, #304]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004276:	4b49      	ldr	r3, [pc, #292]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b08      	cmp	r3, #8
 8004280:	d11c      	bne.n	80042bc <HAL_RCC_OscConfig+0x18c>
 8004282:	4b46      	ldr	r3, [pc, #280]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d116      	bne.n	80042bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428e:	4b43      	ldr	r3, [pc, #268]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_RCC_OscConfig+0x176>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d001      	beq.n	80042a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e1c0      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a6:	4b3d      	ldr	r3, [pc, #244]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4939      	ldr	r1, [pc, #228]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ba:	e03a      	b.n	8004332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c4:	4b36      	ldr	r3, [pc, #216]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fd fcf9 	bl	8001cc0 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d2:	f7fd fcf5 	bl	8001cc0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1a1      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	4b2d      	ldr	r3, [pc, #180]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f0:	4b2a      	ldr	r3, [pc, #168]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4927      	ldr	r1, [pc, #156]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]
 8004304:	e015      	b.n	8004332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004306:	4b26      	ldr	r3, [pc, #152]	@ (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fd fcd8 	bl	8001cc0 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004314:	f7fd fcd4 	bl	8001cc0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e180      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d03a      	beq.n	80043b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d019      	beq.n	800437a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004346:	4b17      	ldr	r3, [pc, #92]	@ (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434c:	f7fd fcb8 	bl	8001cc0 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004354:	f7fd fcb4 	bl	8001cc0 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e160      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <HAL_RCC_OscConfig+0x26c>)
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004372:	2001      	movs	r0, #1
 8004374:	f000 faea 	bl	800494c <RCC_Delay>
 8004378:	e01c      	b.n	80043b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437a:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <HAL_RCC_OscConfig+0x274>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004380:	f7fd fc9e 	bl	8001cc0 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004386:	e00f      	b.n	80043a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004388:	f7fd fc9a 	bl	8001cc0 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d908      	bls.n	80043a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e146      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	42420000 	.word	0x42420000
 80043a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	4b92      	ldr	r3, [pc, #584]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e9      	bne.n	8004388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a6 	beq.w	800450e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b8b      	ldr	r3, [pc, #556]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4a87      	ldr	r2, [pc, #540]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	61d3      	str	r3, [r2, #28]
 80043de:	4b85      	ldr	r3, [pc, #532]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	4b82      	ldr	r3, [pc, #520]	@ (80045f8 <HAL_RCC_OscConfig+0x4c8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d118      	bne.n	800442c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fa:	4b7f      	ldr	r3, [pc, #508]	@ (80045f8 <HAL_RCC_OscConfig+0x4c8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7e      	ldr	r2, [pc, #504]	@ (80045f8 <HAL_RCC_OscConfig+0x4c8>)
 8004400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004406:	f7fd fc5b 	bl	8001cc0 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440e:	f7fd fc57 	bl	8001cc0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b64      	cmp	r3, #100	@ 0x64
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e103      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	4b75      	ldr	r3, [pc, #468]	@ (80045f8 <HAL_RCC_OscConfig+0x4c8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x312>
 8004434:	4b6f      	ldr	r3, [pc, #444]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4a6e      	ldr	r2, [pc, #440]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6213      	str	r3, [r2, #32]
 8004440:	e02d      	b.n	800449e <HAL_RCC_OscConfig+0x36e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x334>
 800444a:	4b6a      	ldr	r3, [pc, #424]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	4a69      	ldr	r2, [pc, #420]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6213      	str	r3, [r2, #32]
 8004456:	4b67      	ldr	r3, [pc, #412]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4a66      	ldr	r2, [pc, #408]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800445c:	f023 0304 	bic.w	r3, r3, #4
 8004460:	6213      	str	r3, [r2, #32]
 8004462:	e01c      	b.n	800449e <HAL_RCC_OscConfig+0x36e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b05      	cmp	r3, #5
 800446a:	d10c      	bne.n	8004486 <HAL_RCC_OscConfig+0x356>
 800446c:	4b61      	ldr	r3, [pc, #388]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	4a60      	ldr	r2, [pc, #384]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	6213      	str	r3, [r2, #32]
 8004478:	4b5e      	ldr	r3, [pc, #376]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4a5d      	ldr	r2, [pc, #372]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6213      	str	r3, [r2, #32]
 8004484:	e00b      	b.n	800449e <HAL_RCC_OscConfig+0x36e>
 8004486:	4b5b      	ldr	r3, [pc, #364]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	4a5a      	ldr	r2, [pc, #360]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	6213      	str	r3, [r2, #32]
 8004492:	4b58      	ldr	r3, [pc, #352]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4a57      	ldr	r2, [pc, #348]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	f023 0304 	bic.w	r3, r3, #4
 800449c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d015      	beq.n	80044d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fd fc0b 	bl	8001cc0 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fd fc07 	bl	8001cc0 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0b1      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	4b4b      	ldr	r3, [pc, #300]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ee      	beq.n	80044ae <HAL_RCC_OscConfig+0x37e>
 80044d0:	e014      	b.n	80044fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d2:	f7fd fbf5 	bl	8001cc0 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fd fbf1 	bl	8001cc0 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e09b      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f0:	4b40      	ldr	r3, [pc, #256]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ee      	bne.n	80044da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004502:	4b3c      	ldr	r3, [pc, #240]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	4a3b      	ldr	r2, [pc, #236]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8087 	beq.w	8004626 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004518:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b08      	cmp	r3, #8
 8004522:	d061      	beq.n	80045e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d146      	bne.n	80045ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452c:	4b33      	ldr	r3, [pc, #204]	@ (80045fc <HAL_RCC_OscConfig+0x4cc>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004532:	f7fd fbc5 	bl	8001cc0 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453a:	f7fd fbc1 	bl	8001cc0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e06d      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800454c:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004560:	d108      	bne.n	8004574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4921      	ldr	r1, [pc, #132]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004574:	4b1f      	ldr	r3, [pc, #124]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a19      	ldr	r1, [r3, #32]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	430b      	orrs	r3, r1
 8004586:	491b      	ldr	r1, [pc, #108]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b1b      	ldr	r3, [pc, #108]	@ (80045fc <HAL_RCC_OscConfig+0x4cc>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fd fb95 	bl	8001cc0 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459a:	f7fd fb91 	bl	8001cc0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e03d      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x46a>
 80045b8:	e035      	b.n	8004626 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCC_OscConfig+0x4cc>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fd fb7e 	bl	8001cc0 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fd fb7a 	bl	8001cc0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e026      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x498>
 80045e6:	e01e      	b.n	8004626 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e019      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_OscConfig+0x500>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	429a      	cmp	r2, r3
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000

08004634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0d0      	b.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004648:	4b6a      	ldr	r3, [pc, #424]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d910      	bls.n	8004678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b67      	ldr	r3, [pc, #412]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 0207 	bic.w	r2, r3, #7
 800465e:	4965      	ldr	r1, [pc, #404]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b63      	ldr	r3, [pc, #396]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0b8      	b.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004690:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4a58      	ldr	r2, [pc, #352]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800469a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a8:	4b53      	ldr	r3, [pc, #332]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a52      	ldr	r2, [pc, #328]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80046b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b50      	ldr	r3, [pc, #320]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	494d      	ldr	r1, [pc, #308]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d040      	beq.n	8004754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	4b47      	ldr	r3, [pc, #284]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d115      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e07f      	b.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e073      	b.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004702:	4b3d      	ldr	r3, [pc, #244]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e06b      	b.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004712:	4b39      	ldr	r3, [pc, #228]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f023 0203 	bic.w	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4936      	ldr	r1, [pc, #216]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	4313      	orrs	r3, r2
 8004722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004724:	f7fd facc 	bl	8001cc0 <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	e00a      	b.n	8004742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472c:	f7fd fac8 	bl	8001cc0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e053      	b.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	4b2d      	ldr	r3, [pc, #180]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 020c 	and.w	r2, r3, #12
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	429a      	cmp	r2, r3
 8004752:	d1eb      	bne.n	800472c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004754:	4b27      	ldr	r3, [pc, #156]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d210      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 0207 	bic.w	r2, r3, #7
 800476a:	4922      	ldr	r1, [pc, #136]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b20      	ldr	r3, [pc, #128]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e032      	b.n	80047ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004790:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4916      	ldr	r1, [pc, #88]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047ae:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	490e      	ldr	r1, [pc, #56]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047c2:	f000 f821 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 80047c6:	4602      	mov	r2, r0
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	490a      	ldr	r1, [pc, #40]	@ (80047fc <HAL_RCC_ClockConfig+0x1c8>)
 80047d4:	5ccb      	ldrb	r3, [r1, r3]
 80047d6:	fa22 f303 	lsr.w	r3, r2, r3
 80047da:	4a09      	ldr	r2, [pc, #36]	@ (8004800 <HAL_RCC_ClockConfig+0x1cc>)
 80047dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047de:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <HAL_RCC_ClockConfig+0x1d0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd f8a6 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40022000 	.word	0x40022000
 80047f8:	40021000 	.word	0x40021000
 80047fc:	0800f344 	.word	0x0800f344
 8004800:	20000004 	.word	0x20000004
 8004804:	20000008 	.word	0x20000008

08004808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004822:	4b1e      	ldr	r3, [pc, #120]	@ (800489c <HAL_RCC_GetSysClockFreq+0x94>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d002      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x30>
 8004832:	2b08      	cmp	r3, #8
 8004834:	d003      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x36>
 8004836:	e027      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004838:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800483a:	613b      	str	r3, [r7, #16]
      break;
 800483c:	e027      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	0c9b      	lsrs	r3, r3, #18
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004848:	5cd3      	ldrb	r3, [r2, r3]
 800484a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d010      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004856:	4b11      	ldr	r3, [pc, #68]	@ (800489c <HAL_RCC_GetSysClockFreq+0x94>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	0c5b      	lsrs	r3, r3, #17
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	4a11      	ldr	r2, [pc, #68]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004862:	5cd3      	ldrb	r3, [r2, r3]
 8004864:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a0d      	ldr	r2, [pc, #52]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800486a:	fb03 f202 	mul.w	r2, r3, r2
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e004      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a0c      	ldr	r2, [pc, #48]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	613b      	str	r3, [r7, #16]
      break;
 8004886:	e002      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800488a:	613b      	str	r3, [r7, #16]
      break;
 800488c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800488e:	693b      	ldr	r3, [r7, #16]
}
 8004890:	4618      	mov	r0, r3
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	007a1200 	.word	0x007a1200
 80048a4:	0800f35c 	.word	0x0800f35c
 80048a8:	0800f36c 	.word	0x0800f36c
 80048ac:	003d0900 	.word	0x003d0900

080048b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b4:	4b02      	ldr	r3, [pc, #8]	@ (80048c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80048b6:	681b      	ldr	r3, [r3, #0]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	20000004 	.word	0x20000004

080048c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048c8:	f7ff fff2 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	@ (80048e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	0800f354 	.word	0x0800f354

080048ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	220f      	movs	r2, #15
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048fc:	4b11      	ldr	r3, [pc, #68]	@ (8004944 <HAL_RCC_GetClockConfig+0x58>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0203 	and.w	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004908:	4b0e      	ldr	r3, [pc, #56]	@ (8004944 <HAL_RCC_GetClockConfig+0x58>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_RCC_GetClockConfig+0x58>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004920:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <HAL_RCC_GetClockConfig+0x58>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0207 	and.w	r2, r3, #7
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40021000 	.word	0x40021000
 8004948:	40022000 	.word	0x40022000

0800494c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004954:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <RCC_Delay+0x34>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <RCC_Delay+0x38>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0a5b      	lsrs	r3, r3, #9
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004968:	bf00      	nop
  }
  while (Delay --);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	60fa      	str	r2, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f9      	bne.n	8004968 <RCC_Delay+0x1c>
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr
 8004980:	20000004 	.word	0x20000004
 8004984:	10624dd3 	.word	0x10624dd3

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d07d      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10d      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b4:	4b4c      	ldr	r3, [pc, #304]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049be:	61d3      	str	r3, [r2, #28]
 80049c0:	4b49      	ldr	r3, [pc, #292]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049cc:	2301      	movs	r3, #1
 80049ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	4b46      	ldr	r3, [pc, #280]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d118      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049dc:	4b43      	ldr	r3, [pc, #268]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a42      	ldr	r2, [pc, #264]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e8:	f7fd f96a 	bl	8001cc0 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7fd f966 	bl	8001cc0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e06d      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a02:	4b3a      	ldr	r3, [pc, #232]	@ (8004aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d02e      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d027      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a36:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a42:	4a29      	ldr	r2, [pc, #164]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d014      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fd f935 	bl	8001cc0 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fd f931 	bl	8001cc0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e036      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0ee      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4917      	ldr	r1, [pc, #92]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a94:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4a13      	ldr	r2, [pc, #76]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aac:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	490b      	ldr	r1, [pc, #44]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aca:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	4904      	ldr	r1, [pc, #16]	@ (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
 8004af0:	42420440 	.word	0x42420440

08004af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e076      	b.n	8004bf4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b16:	d009      	beq.n	8004b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	61da      	str	r2, [r3, #28]
 8004b1e:	e005      	b.n	8004b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fe4a 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb0:	ea42 0103 	orr.w	r1, r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	0c1a      	lsrs	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f002 0204 	and.w	r2, r2, #4
 8004bd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	@ 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x26>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e198      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x358>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c2a:	f7fd f849 	bl	8001cc0 <HAL_GetTick>
 8004c2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d00f      	beq.n	8004c6c <HAL_SPI_TransmitReceive+0x70>
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c52:	d107      	bne.n	8004c64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <HAL_SPI_TransmitReceive+0x68>
 8004c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d003      	beq.n	8004c6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
 8004c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c6a:	e16d      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x82>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x82>
 8004c78:	887b      	ldrh	r3, [r7, #2]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c84:	e160      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d003      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2205      	movs	r2, #5
 8004c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	887a      	ldrh	r2, [r7, #2]
 8004caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b40      	cmp	r3, #64	@ 0x40
 8004cdc:	d007      	beq.n	8004cee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf6:	d17c      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x10a>
 8004d00:	8b7b      	ldrh	r3, [r7, #26]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d16a      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0a:	881a      	ldrh	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2a:	e057      	b.n	8004ddc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d11b      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x176>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x176>
 8004d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d113      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	881a      	ldrh	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5a:	1c9a      	adds	r2, r3, #2
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d119      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x1b8>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d014      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	b292      	uxth	r2, r2
 8004d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	1c9a      	adds	r2, r3, #2
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004db4:	f7fc ff84 	bl	8001cc0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d80b      	bhi.n	8004ddc <HAL_SPI_TransmitReceive+0x1e0>
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d007      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004dda:	e0b5      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1a2      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x130>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d19d      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x130>
 8004df0:	e080      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x204>
 8004dfa:	8b7b      	ldrh	r3, [r7, #26]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d16f      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	7812      	ldrb	r2, [r2, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e26:	e05b      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d11c      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x274>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d017      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x274>
 8004e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d114      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d119      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x2b6>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d014      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb2:	f7fc ff05 	bl	8001cc0 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d803      	bhi.n	8004eca <HAL_SPI_TransmitReceive+0x2ce>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x2d4>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004ede:	e033      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d19e      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x22c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d199      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f9b3 	bl	8005264 <SPI_EndRxTxTransaction>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d006      	beq.n	8004f12 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f10:	e01a      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3e:	e003      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3730      	adds	r7, #48	@ 0x30
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10e      	bne.n	8004f9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
    return;
 8004f9a:	e0b7      	b.n	800510c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <HAL_SPI_IRQHandler+0x5e>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
    return;
 8004fb8:	e0a8      	b.n	800510c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <HAL_SPI_IRQHandler+0x74>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 809e 	beq.w	800510c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8098 	beq.w	800510c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d023      	beq.n	800502e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d011      	beq.n	8005016 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff6:	f043 0204 	orr.w	r2, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	e00b      	b.n	800502e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	693b      	ldr	r3, [r7, #16]
        return;
 800502c:	e06e      	b.n	800510c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d014      	beq.n	8005062 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503c:	f043 0201 	orr.w	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005066:	2b00      	cmp	r3, #0
 8005068:	d04f      	beq.n	800510a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005078:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <HAL_SPI_IRQHandler+0x13a>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d034      	beq.n	8005100 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0203 	bic.w	r2, r2, #3
 80050a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b2:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <HAL_SPI_IRQHandler+0x1b8>)
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fc ff68 	bl	8001f90 <HAL_DMA_Abort_IT>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050de:	4a0d      	ldr	r2, [pc, #52]	@ (8005114 <HAL_SPI_IRQHandler+0x1b8>)
 80050e0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fc ff52 	bl	8001f90 <HAL_DMA_Abort_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80050fe:	e003      	b.n	8005108 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f809 	bl	8005118 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005106:	e000      	b.n	800510a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005108:	bf00      	nop
    return;
 800510a:	bf00      	nop
  }
}
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	0800512b 	.word	0x0800512b

08005118 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ffe7 	bl	8005118 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005164:	f7fc fdac 	bl	8001cc0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4413      	add	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005174:	f7fc fda4 	bl	8001cc0 <HAL_GetTick>
 8005178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800517a:	4b39      	ldr	r3, [pc, #228]	@ (8005260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	015b      	lsls	r3, r3, #5
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518a:	e054      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d050      	beq.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005194:	f7fc fd94 	bl	8001cc0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d902      	bls.n	80051aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d13d      	bne.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051c2:	d111      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051cc:	d004      	beq.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d107      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f0:	d10f      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e017      	b.n	8005256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3b01      	subs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d19b      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000004 	.word	0x20000004

08005264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	2180      	movs	r1, #128	@ 0x80
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff ff6a 	bl	8005154 <SPI_WaitFlagStateUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e000      	b.n	8005298 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e041      	b.n	8005336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f839 	bl	800533e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 f9b4 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d001      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e03a      	b.n	80053de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a18      	ldr	r2, [pc, #96]	@ (80053e8 <HAL_TIM_Base_Start_IT+0x98>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x58>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005392:	d009      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x58>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a14      	ldr	r2, [pc, #80]	@ (80053ec <HAL_TIM_Base_Start_IT+0x9c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x58>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a13      	ldr	r2, [pc, #76]	@ (80053f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d111      	bne.n	80053cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d010      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e007      	b.n	80053dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800

080053f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0202 	mvn.w	r2, #2
 8005420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8ed 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f8e0 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8ef 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0204 	mvn.w	r2, #4
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f8c3 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8b6 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8c5 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0208 	mvn.w	r2, #8
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2204      	movs	r2, #4
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f899 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f88c 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f89b 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0210 	mvn.w	r2, #16
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2208      	movs	r2, #8
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f86f 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f862 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f871 	bl	8005628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0201 	mvn.w	r2, #1
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc f8e4 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005582:	2b80      	cmp	r3, #128	@ 0x80
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005590:	2b80      	cmp	r3, #128	@ 0x80
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f8bf 	bl	8005722 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ae:	2b40      	cmp	r3, #64	@ 0x40
 80055b0:	d10e      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	d107      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f835 	bl	800563a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0220 	mvn.w	r2, #32
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f88a 	bl	8005710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a29      	ldr	r2, [pc, #164]	@ (8005704 <TIM_Base_SetConfig+0xb8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00b      	beq.n	800567c <TIM_Base_SetConfig+0x30>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566a:	d007      	beq.n	800567c <TIM_Base_SetConfig+0x30>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a26      	ldr	r2, [pc, #152]	@ (8005708 <TIM_Base_SetConfig+0xbc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_Base_SetConfig+0x30>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a25      	ldr	r2, [pc, #148]	@ (800570c <TIM_Base_SetConfig+0xc0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d108      	bne.n	800568e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <TIM_Base_SetConfig+0xb8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0x62>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0x62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a19      	ldr	r2, [pc, #100]	@ (8005708 <TIM_Base_SetConfig+0xbc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0x62>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a18      	ldr	r2, [pc, #96]	@ (800570c <TIM_Base_SetConfig+0xc0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a07      	ldr	r2, [pc, #28]	@ (8005704 <TIM_Base_SetConfig+0xb8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d103      	bne.n	80056f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	615a      	str	r2, [r3, #20]
}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800

08005710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr

08005722 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005734:	b084      	sub	sp, #16
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	f107 0014 	add.w	r0, r7, #20
 8005742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	b004      	add	sp, #16
 8005752:	4770      	bx	lr

08005754 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005764:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005768:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005788:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800578c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	b29b      	uxth	r3, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	b29b      	uxth	r3, r3
 800579e:	4013      	ands	r3, r2
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057cc:	b084      	sub	sp, #16
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	f107 0014 	add.w	r0, r7, #20
 80057da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	b004      	add	sp, #16
 800580a:	4770      	bx	lr

0800580c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800580c:	b480      	push	{r7}
 800580e:	b09d      	sub	sp, #116	@ 0x74
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800582e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005832:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	78db      	ldrb	r3, [r3, #3]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d81f      	bhi.n	800587e <USB_ActivateEndpoint+0x72>
 800583e:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <USB_ActivateEndpoint+0x38>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005855 	.word	0x08005855
 8005848:	08005871 	.word	0x08005871
 800584c:	08005887 	.word	0x08005887
 8005850:	08005863 	.word	0x08005863
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005854:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005858:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800585c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005860:	e012      	b.n	8005888 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005862:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005866:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800586a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800586e:	e00b      	b.n	8005888 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005870:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005874:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005878:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800587c:	e004      	b.n	8005888 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005884:	e000      	b.n	8005888 <USB_ActivateEndpoint+0x7c>
      break;
 8005886:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800589a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800589e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	441a      	add	r2, r3
 80058d6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80058da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	7b1b      	ldrb	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 8178 	bne.w	8005be8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8084 	beq.w	8005a0a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	61bb      	str	r3, [r7, #24]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800590c:	b29b      	uxth	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	4413      	add	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	88db      	ldrh	r3, [r3, #6]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	827b      	strh	r3, [r7, #18]
 8005944:	8a7b      	ldrh	r3, [r7, #18]
 8005946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01b      	beq.n	8005986 <USB_ActivateEndpoint+0x17a>
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005964:	823b      	strh	r3, [r7, #16]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	8a3b      	ldrh	r3, [r7, #16]
 8005972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800597a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800597e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005982:	b29b      	uxth	r3, r3
 8005984:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	78db      	ldrb	r3, [r3, #3]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d020      	beq.n	80059d0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059a4:	81bb      	strh	r3, [r7, #12]
 80059a6:	89bb      	ldrh	r3, [r7, #12]
 80059a8:	f083 0320 	eor.w	r3, r3, #32
 80059ac:	81bb      	strh	r3, [r7, #12]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	89bb      	ldrh	r3, [r7, #12]
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e2d5      	b.n	8005f7c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e6:	81fb      	strh	r3, [r7, #14]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	89fb      	ldrh	r3, [r7, #14]
 80059f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	8013      	strh	r3, [r2, #0]
 8005a08:	e2b8      	b.n	8005f7c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	4413      	add	r3, r2
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	011a      	lsls	r2, r3, #4
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	88db      	ldrh	r3, [r3, #6]
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	4413      	add	r3, r2
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	011a      	lsls	r2, r3, #4
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a78:	d91d      	bls.n	8005ab6 <USB_ActivateEndpoint+0x2aa>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d102      	bne.n	8005a94 <USB_ActivateEndpoint+0x288>
 8005a8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a90:	3b01      	subs	r3, #1
 8005a92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	029b      	lsls	r3, r3, #10
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e026      	b.n	8005b04 <USB_ActivateEndpoint+0x2f8>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <USB_ActivateEndpoint+0x2c8>
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e017      	b.n	8005b04 <USB_ActivateEndpoint+0x2f8>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <USB_ActivateEndpoint+0x2e2>
 8005ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aea:	3301      	adds	r3, #1
 8005aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <USB_ActivateEndpoint+0x348>
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b32:	843b      	strh	r3, [r7, #32]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	441a      	add	r2, r3
 8005b3e:	8c3b      	ldrh	r3, [r7, #32]
 8005b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d124      	bne.n	8005ba6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b72:	83bb      	strh	r3, [r7, #28]
 8005b74:	8bbb      	ldrh	r3, [r7, #28]
 8005b76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b7a:	83bb      	strh	r3, [r7, #28]
 8005b7c:	8bbb      	ldrh	r3, [r7, #28]
 8005b7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b82:	83bb      	strh	r3, [r7, #28]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	8bbb      	ldrh	r3, [r7, #28]
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]
 8005ba4:	e1ea      	b.n	8005f7c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bbc:	83fb      	strh	r3, [r7, #30]
 8005bbe:	8bfb      	ldrh	r3, [r7, #30]
 8005bc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005bc4:	83fb      	strh	r3, [r7, #30]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	8bfb      	ldrh	r3, [r7, #30]
 8005bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	8013      	strh	r3, [r2, #0]
 8005be6:	e1c9      	b.n	8005f7c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	78db      	ldrb	r3, [r3, #3]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d11e      	bne.n	8005c2e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c20:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
 8005c2c:	e01d      	b.n	8005c6a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c44:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c7a:	4413      	add	r3, r2
 8005c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	011a      	lsls	r2, r3, #4
 8005c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	891b      	ldrh	r3, [r3, #8]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cae:	4413      	add	r3, r2
 8005cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	011a      	lsls	r2, r3, #4
 8005cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	895b      	ldrh	r3, [r3, #10]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f040 8093 	bne.w	8005e02 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005cec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <USB_ActivateEndpoint+0x524>
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	441a      	add	r2, r3
 8005d1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005d1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005d3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <USB_ActivateEndpoint+0x574>
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d96:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d98:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d9a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d9e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005da0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005da2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005da6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dde:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]
 8005e00:	e0bc      	b.n	8005f7c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01d      	beq.n	8005e5a <USB_ActivateEndpoint+0x64e>
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e34:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01d      	beq.n	8005eb2 <USB_ActivateEndpoint+0x6a6>
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	78db      	ldrb	r3, [r3, #3]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d024      	beq.n	8005f04 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ed4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005ed8:	f083 0320 	eor.w	r3, r3, #32
 8005edc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
 8005f02:	e01d      	b.n	8005f40 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441a      	add	r2, r3
 8005f64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f7c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3774      	adds	r7, #116	@ 0x74
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop

08005f8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08d      	sub	sp, #52	@ 0x34
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	7b1b      	ldrb	r3, [r3, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f040 808e 	bne.w	80060bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d044      	beq.n	8006032 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	81bb      	strh	r3, [r7, #12]
 8005fb6:	89bb      	ldrh	r3, [r7, #12]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <USB_DeactivateEndpoint+0x6c>
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd6:	817b      	strh	r3, [r7, #10]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	897b      	ldrh	r3, [r7, #10]
 8005fe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800600a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800600e:	813b      	strh	r3, [r7, #8]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	893b      	ldrh	r3, [r7, #8]
 800601c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602c:	b29b      	uxth	r3, r3
 800602e:	8013      	strh	r3, [r2, #0]
 8006030:	e192      	b.n	8006358 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	827b      	strh	r3, [r7, #18]
 8006040:	8a7b      	ldrh	r3, [r7, #18]
 8006042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01b      	beq.n	8006082 <USB_DeactivateEndpoint+0xf6>
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006060:	823b      	strh	r3, [r7, #16]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	441a      	add	r2, r3
 800606c:	8a3b      	ldrh	r3, [r7, #16]
 800606e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006076:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800607a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607e:	b29b      	uxth	r3, r3
 8006080:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006098:	81fb      	strh	r3, [r7, #14]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	441a      	add	r2, r3
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]
 80060ba:	e14d      	b.n	8006358 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f040 80a5 	bne.w	8006210 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	843b      	strh	r3, [r7, #32]
 80060d4:	8c3b      	ldrh	r3, [r7, #32]
 80060d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01b      	beq.n	8006116 <USB_DeactivateEndpoint+0x18a>
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f4:	83fb      	strh	r3, [r7, #30]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	8bfb      	ldrh	r3, [r7, #30]
 8006102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800610a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800610e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006112:	b29b      	uxth	r3, r3
 8006114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	83bb      	strh	r3, [r7, #28]
 8006124:	8bbb      	ldrh	r3, [r7, #28]
 8006126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01b      	beq.n	8006166 <USB_DeactivateEndpoint+0x1da>
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006144:	837b      	strh	r3, [r7, #26]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	8b7b      	ldrh	r3, [r7, #26]
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800615a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800615e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617c:	833b      	strh	r3, [r7, #24]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	8b3b      	ldrh	r3, [r7, #24]
 800618a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006196:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b4:	82fb      	strh	r3, [r7, #22]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	441a      	add	r2, r3
 80061c0:	8afb      	ldrh	r3, [r7, #22]
 80061c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ec:	82bb      	strh	r3, [r7, #20]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	441a      	add	r2, r3
 80061f8:	8abb      	ldrh	r3, [r7, #20]
 80061fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620a:	b29b      	uxth	r3, r3
 800620c:	8013      	strh	r3, [r2, #0]
 800620e:	e0a3      	b.n	8006358 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800621e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <USB_DeactivateEndpoint+0x2d4>
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800624c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006254:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625c:	b29b      	uxth	r3, r3
 800625e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800626e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01b      	beq.n	80062b0 <USB_DeactivateEndpoint+0x324>
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006336:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006354:	b29b      	uxth	r3, r3
 8006356:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3734      	adds	r7, #52	@ 0x34
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr

08006364 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b0c2      	sub	sp, #264	@ 0x108
 8006368:	af00      	add	r7, sp, #0
 800636a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006372:	6018      	str	r0, [r3, #0]
 8006374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b01      	cmp	r3, #1
 800638c:	f040 86b7 	bne.w	80070fe <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d908      	bls.n	80063be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80063bc:	e007      	b.n	80063ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	7b1b      	ldrb	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d13a      	bne.n	8006454 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6959      	ldr	r1, [r3, #20]
 80063ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	88da      	ldrh	r2, [r3, #6]
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006400:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	f001 fc9c 	bl	8007d42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	011a      	lsls	r2, r3, #4
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	f000 be1f 	b.w	8007092 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	78db      	ldrb	r3, [r3, #3]
 8006460:	2b02      	cmp	r3, #2
 8006462:	f040 8462 	bne.w	8006d2a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	429a      	cmp	r2, r3
 8006480:	f240 83df 	bls.w	8006c42 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064aa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80064ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	441a      	add	r2, r3
 80064c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80064cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80064d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064dc:	b29b      	uxth	r3, r3
 80064de:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 81c7 	beq.w	80068b4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	633b      	str	r3, [r7, #48]	@ 0x30
 8006532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d177      	bne.n	8006632 <USB_EPStartXfer+0x2ce>
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800654e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006562:	4413      	add	r3, r2
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	011a      	lsls	r2, r3, #4
 8006574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006576:	4413      	add	r3, r2
 8006578:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006588:	b29a      	uxth	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006592:	2b3e      	cmp	r3, #62	@ 0x3e
 8006594:	d921      	bls.n	80065da <USB_EPStartXfer+0x276>
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <USB_EPStartXfer+0x252>
 80065ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065b0:	3b01      	subs	r3, #1
 80065b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	029b      	lsls	r3, r3, #10
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	4313      	orrs	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	e050      	b.n	800667c <USB_EPStartXfer+0x318>
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <USB_EPStartXfer+0x294>
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	801a      	strh	r2, [r3, #0]
 80065f6:	e041      	b.n	800667c <USB_EPStartXfer+0x318>
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <USB_EPStartXfer+0x2b4>
 800660e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006612:	3301      	adds	r3, #1
 8006614:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29a      	uxth	r2, r3
 800661e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006622:	b29b      	uxth	r3, r3
 8006624:	029b      	lsls	r3, r3, #10
 8006626:	b29b      	uxth	r3, r3
 8006628:	4313      	orrs	r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e024      	b.n	800667c <USB_EPStartXfer+0x318>
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d11c      	bne.n	800667c <USB_EPStartXfer+0x318>
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006650:	b29b      	uxth	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	4413      	add	r3, r2
 8006658:	633b      	str	r3, [r7, #48]	@ 0x30
 800665a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	011a      	lsls	r2, r3, #4
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	4413      	add	r3, r2
 800666c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006676:	b29a      	uxth	r2, r3
 8006678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	895b      	ldrh	r3, [r3, #10]
 8006688:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6959      	ldr	r1, [r3, #20]
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669c:	b29b      	uxth	r3, r3
 800669e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	f001 fb49 	bl	8007d42 <USB_WritePMA>
            ep->xfer_buff += len;
 80066b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	441a      	add	r2, r3
 80066c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d90f      	bls.n	800670a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6a1a      	ldr	r2, [r3, #32]
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	621a      	str	r2, [r3, #32]
 8006708:	e00e      	b.n	8006728 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800670a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2200      	movs	r2, #0
 8006726:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d177      	bne.n	8006828 <USB_EPStartXfer+0x4c4>
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006752:	b29b      	uxth	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4413      	add	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	011a      	lsls	r2, r3, #4
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	4413      	add	r3, r2
 800676e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800677e:	b29a      	uxth	r2, r3
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006788:	2b3e      	cmp	r3, #62	@ 0x3e
 800678a:	d921      	bls.n	80067d0 <USB_EPStartXfer+0x46c>
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <USB_EPStartXfer+0x448>
 80067a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067a6:	3b01      	subs	r3, #1
 80067a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	029b      	lsls	r3, r3, #10
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4313      	orrs	r3, r2
 80067be:	b29b      	uxth	r3, r3
 80067c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e056      	b.n	800687e <USB_EPStartXfer+0x51a>
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <USB_EPStartXfer+0x48a>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e047      	b.n	800687e <USB_EPStartXfer+0x51a>
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <USB_EPStartXfer+0x4aa>
 8006804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006808:	3301      	adds	r3, #1
 800680a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29a      	uxth	r2, r3
 8006814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29b      	uxth	r3, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	e02a      	b.n	800687e <USB_EPStartXfer+0x51a>
 8006828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d122      	bne.n	800687e <USB_EPStartXfer+0x51a>
 8006838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006852:	b29b      	uxth	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	4413      	add	r3, r2
 800685a:	623b      	str	r3, [r7, #32]
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	011a      	lsls	r2, r3, #4
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	4413      	add	r3, r2
 800686e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	b29a      	uxth	r2, r3
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800687e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	891b      	ldrh	r3, [r3, #8]
 800688a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800688e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6959      	ldr	r1, [r3, #20]
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068ac:	6800      	ldr	r0, [r0, #0]
 80068ae:	f001 fa48 	bl	8007d42 <USB_WritePMA>
 80068b2:	e3ee      	b.n	8007092 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d177      	bne.n	80069b4 <USB_EPStartXfer+0x650>
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068de:	b29b      	uxth	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e4:	4413      	add	r3, r2
 80068e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	011a      	lsls	r2, r3, #4
 80068f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800690a:	b29a      	uxth	r2, r3
 800690c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006914:	2b3e      	cmp	r3, #62	@ 0x3e
 8006916:	d921      	bls.n	800695c <USB_EPStartXfer+0x5f8>
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <USB_EPStartXfer+0x5d4>
 800692e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006932:	3b01      	subs	r3, #1
 8006934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29a      	uxth	r2, r3
 800693e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006942:	b29b      	uxth	r3, r3
 8006944:	029b      	lsls	r3, r3, #10
 8006946:	b29b      	uxth	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b29b      	uxth	r3, r3
 800694c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006954:	b29a      	uxth	r2, r3
 8006956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006958:	801a      	strh	r2, [r3, #0]
 800695a:	e056      	b.n	8006a0a <USB_EPStartXfer+0x6a6>
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <USB_EPStartXfer+0x616>
 8006964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e047      	b.n	8006a0a <USB_EPStartXfer+0x6a6>
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <USB_EPStartXfer+0x636>
 8006990:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006994:	3301      	adds	r3, #1
 8006996:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800699a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	029b      	lsls	r3, r3, #10
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4313      	orrs	r3, r2
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	e02a      	b.n	8006a0a <USB_EPStartXfer+0x6a6>
 80069b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d122      	bne.n	8006a0a <USB_EPStartXfer+0x6a6>
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80069d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069de:	b29b      	uxth	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e4:	4413      	add	r3, r2
 80069e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	011a      	lsls	r2, r3, #4
 80069f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069f8:	4413      	add	r3, r2
 80069fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	891b      	ldrh	r3, [r3, #8]
 8006a16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6959      	ldr	r1, [r3, #20]
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a38:	6800      	ldr	r0, [r0, #0]
 8006a3a:	f001 f982 	bl	8007d42 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695a      	ldr	r2, [r3, #20]
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	441a      	add	r2, r3
 8006a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a1a      	ldr	r2, [r3, #32]
 8006a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d90f      	bls.n	8006a98 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	1ad2      	subs	r2, r2, r3
 8006a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	621a      	str	r2, [r3, #32]
 8006a96:	e00e      	b.n	8006ab6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d177      	bne.n	8006bc2 <USB_EPStartXfer+0x85e>
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af2:	4413      	add	r3, r2
 8006af4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	011a      	lsls	r2, r3, #4
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	4413      	add	r3, r2
 8006b08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	801a      	strh	r2, [r3, #0]
 8006b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b22:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b24:	d921      	bls.n	8006b6a <USB_EPStartXfer+0x806>
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <USB_EPStartXfer+0x7e2>
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b40:	3b01      	subs	r3, #1
 8006b42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	029b      	lsls	r3, r3, #10
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	4313      	orrs	r3, r2
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	e050      	b.n	8006c0c <USB_EPStartXfer+0x8a8>
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <USB_EPStartXfer+0x824>
 8006b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b84:	801a      	strh	r2, [r3, #0]
 8006b86:	e041      	b.n	8006c0c <USB_EPStartXfer+0x8a8>
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <USB_EPStartXfer+0x844>
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	029b      	lsls	r3, r3, #10
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	e024      	b.n	8006c0c <USB_EPStartXfer+0x8a8>
 8006bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d11c      	bne.n	8006c0c <USB_EPStartXfer+0x8a8>
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be6:	4413      	add	r3, r2
 8006be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	011a      	lsls	r2, r3, #4
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	895b      	ldrh	r3, [r3, #10]
 8006c18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6959      	ldr	r1, [r3, #20]
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	f001 f881 	bl	8007d42 <USB_WritePMA>
 8006c40:	e227      	b.n	8007092 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c78:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cce:	4413      	add	r3, r2
 8006cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	011a      	lsls	r2, r3, #4
 8006ce0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cf2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	891b      	ldrh	r3, [r3, #8]
 8006d00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	6959      	ldr	r1, [r3, #20]
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d1e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d22:	6800      	ldr	r0, [r0, #0]
 8006d24:	f001 f80d 	bl	8007d42 <USB_WritePMA>
 8006d28:	e1b3      	b.n	8007092 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80c6 	beq.w	8006efc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d177      	bne.n	8006e7c <USB_EPStartXfer+0xb18>
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dac:	4413      	add	r3, r2
 8006dae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	011a      	lsls	r2, r3, #4
 8006dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ddc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dde:	d921      	bls.n	8006e24 <USB_EPStartXfer+0xac0>
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <USB_EPStartXfer+0xa9c>
 8006df6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	029b      	lsls	r3, r3, #10
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e20:	801a      	strh	r2, [r3, #0]
 8006e22:	e050      	b.n	8006ec6 <USB_EPStartXfer+0xb62>
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <USB_EPStartXfer+0xade>
 8006e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	e041      	b.n	8006ec6 <USB_EPStartXfer+0xb62>
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <USB_EPStartXfer+0xafe>
 8006e58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	029b      	lsls	r3, r3, #10
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	e024      	b.n	8006ec6 <USB_EPStartXfer+0xb62>
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d11c      	bne.n	8006ec6 <USB_EPStartXfer+0xb62>
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ea0:	4413      	add	r3, r2
 8006ea2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	011a      	lsls	r2, r3, #4
 8006eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	895b      	ldrh	r3, [r3, #10]
 8006ed2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6959      	ldr	r1, [r3, #20]
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006eec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ef0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ef4:	6800      	ldr	r0, [r0, #0]
 8006ef6:	f000 ff24 	bl	8007d42 <USB_WritePMA>
 8006efa:	e0ca      	b.n	8007092 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d177      	bne.n	8006ffc <USB_EPStartXfer+0xc98>
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f2c:	4413      	add	r3, r2
 8006f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	011a      	lsls	r2, r3, #4
 8006f3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f56:	801a      	strh	r2, [r3, #0]
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f5e:	d921      	bls.n	8006fa4 <USB_EPStartXfer+0xc40>
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <USB_EPStartXfer+0xc1c>
 8006f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	029b      	lsls	r3, r3, #10
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	4313      	orrs	r3, r2
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	e05c      	b.n	800705e <USB_EPStartXfer+0xcfa>
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <USB_EPStartXfer+0xc5e>
 8006fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	e04d      	b.n	800705e <USB_EPStartXfer+0xcfa>
 8006fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <USB_EPStartXfer+0xc7e>
 8006fd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fe2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	029b      	lsls	r3, r3, #10
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e030      	b.n	800705e <USB_EPStartXfer+0xcfa>
 8006ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d128      	bne.n	800705e <USB_EPStartXfer+0xcfa>
 800700c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800701a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007028:	b29b      	uxth	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007030:	4413      	add	r3, r2
 8007032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	011a      	lsls	r2, r3, #4
 8007044:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007048:	4413      	add	r3, r2
 800704a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800704e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007056:	b29a      	uxth	r2, r3
 8007058:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800705c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	891b      	ldrh	r3, [r3, #8]
 800706a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6959      	ldr	r1, [r3, #20]
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707e:	b29b      	uxth	r3, r3
 8007080:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007084:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007088:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f000 fe58 	bl	8007d42 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b8:	817b      	strh	r3, [r7, #10]
 80070ba:	897b      	ldrh	r3, [r7, #10]
 80070bc:	f083 0310 	eor.w	r3, r3, #16
 80070c0:	817b      	strh	r3, [r7, #10]
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	f083 0320 	eor.w	r3, r3, #32
 80070c8:	817b      	strh	r3, [r7, #10]
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	897b      	ldrh	r3, [r7, #10]
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
 80070fa:	f000 bcde 	b.w	8007aba <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	7b1b      	ldrb	r3, [r3, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f040 80bb 	bne.w	8007286 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	429a      	cmp	r2, r3
 800712a:	d917      	bls.n	800715c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	699a      	ldr	r2, [r3, #24]
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714c:	1ad2      	subs	r2, r2, r3
 800714e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	619a      	str	r2, [r3, #24]
 800715a:	e00e      	b.n	800717a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800717a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800719e:	4413      	add	r3, r2
 80071a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80071b6:	4413      	add	r3, r2
 80071b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80071c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80071da:	d924      	bls.n	8007226 <USB_EPStartXfer+0xec2>
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <USB_EPStartXfer+0xe98>
 80071f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071f6:	3b01      	subs	r3, #1
 80071f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007208:	b29b      	uxth	r3, r3
 800720a:	029b      	lsls	r3, r3, #10
 800720c:	b29b      	uxth	r3, r3
 800720e:	4313      	orrs	r3, r2
 8007210:	b29b      	uxth	r3, r3
 8007212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721a:	b29a      	uxth	r2, r3
 800721c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	f000 bc10 	b.w	8007a46 <USB_EPStartXfer+0x16e2>
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10c      	bne.n	8007248 <USB_EPStartXfer+0xee4>
 800722e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723e:	b29a      	uxth	r2, r3
 8007240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	e3fe      	b.n	8007a46 <USB_EPStartXfer+0x16e2>
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <USB_EPStartXfer+0xf04>
 800725e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007262:	3301      	adds	r3, #1
 8007264:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007268:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29a      	uxth	r2, r3
 8007270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007274:	b29b      	uxth	r3, r3
 8007276:	029b      	lsls	r3, r3, #10
 8007278:	b29b      	uxth	r3, r3
 800727a:	4313      	orrs	r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	e3df      	b.n	8007a46 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	78db      	ldrb	r3, [r3, #3]
 8007292:	2b02      	cmp	r3, #2
 8007294:	f040 8218 	bne.w	80076c8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 809d 	bne.w	80073e4 <USB_EPStartXfer+0x1080>
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ce:	4413      	add	r3, r2
 80072d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072e6:	4413      	add	r3, r2
 80072e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b3e      	cmp	r3, #62	@ 0x3e
 8007312:	d92b      	bls.n	800736c <USB_EPStartXfer+0x1008>
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <USB_EPStartXfer+0xfe0>
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733e:	3b01      	subs	r3, #1
 8007340:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29a      	uxth	r2, r3
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	b29b      	uxth	r3, r3
 8007352:	029b      	lsls	r3, r3, #10
 8007354:	b29b      	uxth	r3, r3
 8007356:	4313      	orrs	r3, r2
 8007358:	b29b      	uxth	r3, r3
 800735a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e070      	b.n	800744e <USB_EPStartXfer+0x10ea>
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10c      	bne.n	8007396 <USB_EPStartXfer+0x1032>
 800737c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738c:	b29a      	uxth	r2, r3
 800738e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	e05b      	b.n	800744e <USB_EPStartXfer+0x10ea>
 8007396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <USB_EPStartXfer+0x1062>
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c0:	3301      	adds	r3, #1
 80073c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	029b      	lsls	r3, r3, #10
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4313      	orrs	r3, r2
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	e034      	b.n	800744e <USB_EPStartXfer+0x10ea>
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d12c      	bne.n	800744e <USB_EPStartXfer+0x10ea>
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007418:	4413      	add	r3, r2
 800741a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800741e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	011a      	lsls	r2, r3, #4
 800742c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007430:	4413      	add	r3, r2
 8007432:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800743a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800745c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	785b      	ldrb	r3, [r3, #1]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f040 809d 	bne.w	80075a8 <USB_EPStartXfer+0x1244>
 800746e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007492:	4413      	add	r3, r2
 8007494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	011a      	lsls	r2, r3, #4
 80074a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074aa:	4413      	add	r3, r2
 80074ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80074d6:	d92b      	bls.n	8007530 <USB_EPStartXfer+0x11cc>
 80074d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	095b      	lsrs	r3, r3, #5
 80074e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <USB_EPStartXfer+0x11a4>
 80074fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007502:	3b01      	subs	r3, #1
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007514:	b29b      	uxth	r3, r3
 8007516:	029b      	lsls	r3, r3, #10
 8007518:	b29b      	uxth	r3, r3
 800751a:	4313      	orrs	r3, r2
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e069      	b.n	8007604 <USB_EPStartXfer+0x12a0>
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <USB_EPStartXfer+0x11f6>
 8007540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007550:	b29a      	uxth	r2, r3
 8007552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e054      	b.n	8007604 <USB_EPStartXfer+0x12a0>
 800755a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d004      	beq.n	800758a <USB_EPStartXfer+0x1226>
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007584:	3301      	adds	r3, #1
 8007586:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800758a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29a      	uxth	r2, r3
 8007592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007596:	b29b      	uxth	r3, r3
 8007598:	029b      	lsls	r3, r3, #10
 800759a:	b29b      	uxth	r3, r3
 800759c:	4313      	orrs	r3, r2
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	e02d      	b.n	8007604 <USB_EPStartXfer+0x12a0>
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d125      	bne.n	8007604 <USB_EPStartXfer+0x12a0>
 80075b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075ce:	4413      	add	r3, r2
 80075d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	011a      	lsls	r2, r3, #4
 80075e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075e6:	4413      	add	r3, r2
 80075e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007602:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8218 	beq.w	8007a46 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007636:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800763a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <USB_EPStartXfer+0x12ea>
 8007642:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10d      	bne.n	800766a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800764e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 81f5 	bne.w	8007a46 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800765c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 81ee 	bne.w	8007a46 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800766a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800768c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007690:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	441a      	add	r2, r3
 80076ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80076b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	8013      	strh	r3, [r2, #0]
 80076c6:	e1be      	b.n	8007a46 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	78db      	ldrb	r3, [r3, #3]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	f040 81b4 	bne.w	8007a42 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80076da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d917      	bls.n	8007726 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	619a      	str	r2, [r3, #24]
 8007724:	e00e      	b.n	8007744 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2200      	movs	r2, #0
 8007742:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 8085 	bne.w	8007860 <USB_EPStartXfer+0x14fc>
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007772:	b29b      	uxth	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800777a:	4413      	add	r3, r2
 800777c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	011a      	lsls	r2, r3, #4
 800778e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007792:	4413      	add	r3, r2
 8007794:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007798:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800779c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80077b6:	d923      	bls.n	8007800 <USB_EPStartXfer+0x149c>
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d104      	bne.n	80077d8 <USB_EPStartXfer+0x1474>
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d2:	3b01      	subs	r3, #1
 80077d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	029b      	lsls	r3, r3, #10
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077fc:	801a      	strh	r2, [r3, #0]
 80077fe:	e060      	b.n	80078c2 <USB_EPStartXfer+0x155e>
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10c      	bne.n	8007822 <USB_EPStartXfer+0x14be>
 8007808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007818:	b29a      	uxth	r2, r3
 800781a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	e04f      	b.n	80078c2 <USB_EPStartXfer+0x155e>
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <USB_EPStartXfer+0x14de>
 8007838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800783c:	3301      	adds	r3, #1
 800783e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29a      	uxth	r2, r3
 800784a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800784e:	b29b      	uxth	r3, r3
 8007850:	029b      	lsls	r3, r3, #10
 8007852:	b29b      	uxth	r3, r3
 8007854:	4313      	orrs	r3, r2
 8007856:	b29a      	uxth	r2, r3
 8007858:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e030      	b.n	80078c2 <USB_EPStartXfer+0x155e>
 8007860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d128      	bne.n	80078c2 <USB_EPStartXfer+0x155e>
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800787e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800788c:	b29b      	uxth	r3, r3
 800788e:	461a      	mov	r2, r3
 8007890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007894:	4413      	add	r3, r2
 8007896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800789a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	011a      	lsls	r2, r3, #4
 80078a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8085 	bne.w	80079ec <USB_EPStartXfer+0x1688>
 80078e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007906:	4413      	add	r3, r2
 8007908:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	011a      	lsls	r2, r3, #4
 800791a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800791e:	4413      	add	r3, r2
 8007920:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800793a:	801a      	strh	r2, [r3, #0]
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007940:	2b3e      	cmp	r3, #62	@ 0x3e
 8007942:	d923      	bls.n	800798c <USB_EPStartXfer+0x1628>
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800794e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <USB_EPStartXfer+0x1600>
 800795a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800795e:	3b01      	subs	r3, #1
 8007960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007964:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007970:	b29b      	uxth	r3, r3
 8007972:	029b      	lsls	r3, r3, #10
 8007974:	b29b      	uxth	r3, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	b29b      	uxth	r3, r3
 800797a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007982:	b29a      	uxth	r2, r3
 8007984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e05c      	b.n	8007a46 <USB_EPStartXfer+0x16e2>
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10c      	bne.n	80079ae <USB_EPStartXfer+0x164a>
 8007994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e04b      	b.n	8007a46 <USB_EPStartXfer+0x16e2>
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <USB_EPStartXfer+0x166a>
 80079c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079c8:	3301      	adds	r3, #1
 80079ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079da:	b29b      	uxth	r3, r3
 80079dc:	029b      	lsls	r3, r3, #10
 80079de:	b29b      	uxth	r3, r3
 80079e0:	4313      	orrs	r3, r2
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079e8:	801a      	strh	r2, [r3, #0]
 80079ea:	e02c      	b.n	8007a46 <USB_EPStartXfer+0x16e2>
 80079ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d124      	bne.n	8007a46 <USB_EPStartXfer+0x16e2>
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a12:	4413      	add	r3, r2
 8007a14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	011a      	lsls	r2, r3, #4
 8007a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	e001      	b.n	8007a46 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e03a      	b.n	8007abc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a74:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	441a      	add	r2, r3
 8007aa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d020      	beq.n	8007b1a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aee:	81bb      	strh	r3, [r7, #12]
 8007af0:	89bb      	ldrh	r3, [r7, #12]
 8007af2:	f083 0310 	eor.w	r3, r3, #16
 8007af6:	81bb      	strh	r3, [r7, #12]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	89bb      	ldrh	r3, [r7, #12]
 8007b04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8013      	strh	r3, [r2, #0]
 8007b18:	e01f      	b.n	8007b5a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b30:	81fb      	strh	r3, [r7, #14]
 8007b32:	89fb      	ldrh	r3, [r7, #14]
 8007b34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b38:	81fb      	strh	r3, [r7, #14]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	441a      	add	r2, r3
 8007b44:	89fb      	ldrh	r3, [r7, #14]
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr

08007b66 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b087      	sub	sp, #28
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	7b1b      	ldrb	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f040 809d 	bne.w	8007cb4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d04c      	beq.n	8007c1c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	823b      	strh	r3, [r7, #16]
 8007b90:	8a3b      	ldrh	r3, [r7, #16]
 8007b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01b      	beq.n	8007bd2 <USB_EPClearStall+0x6c>
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb0:	81fb      	strh	r3, [r7, #14]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
 8007bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	78db      	ldrb	r3, [r3, #3]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d06c      	beq.n	8007cb4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bf0:	81bb      	strh	r3, [r7, #12]
 8007bf2:	89bb      	ldrh	r3, [r7, #12]
 8007bf4:	f083 0320 	eor.w	r3, r3, #32
 8007bf8:	81bb      	strh	r3, [r7, #12]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	441a      	add	r2, r3
 8007c04:	89bb      	ldrh	r3, [r7, #12]
 8007c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	8013      	strh	r3, [r2, #0]
 8007c1a:	e04b      	b.n	8007cb4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	82fb      	strh	r3, [r7, #22]
 8007c2a:	8afb      	ldrh	r3, [r7, #22]
 8007c2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01b      	beq.n	8007c6c <USB_EPClearStall+0x106>
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4a:	82bb      	strh	r3, [r7, #20]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	441a      	add	r2, r3
 8007c56:	8abb      	ldrh	r3, [r7, #20]
 8007c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c82:	827b      	strh	r3, [r7, #18]
 8007c84:	8a7b      	ldrh	r3, [r7, #18]
 8007c86:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c8a:	827b      	strh	r3, [r7, #18]
 8007c8c:	8a7b      	ldrh	r3, [r7, #18]
 8007c8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c92:	827b      	strh	r3, [r7, #18]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	441a      	add	r2, r3
 8007c9e:	8a7b      	ldrh	r3, [r7, #18]
 8007ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2280      	movs	r2, #128	@ 0x80
 8007cd6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr

08007cfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d20:	68fb      	ldr	r3, [r7, #12]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr

08007d42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b08b      	sub	sp, #44	@ 0x2c
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	461a      	mov	r2, r3
 8007d50:	460b      	mov	r3, r1
 8007d52:	80fb      	strh	r3, [r7, #6]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d58:	88bb      	ldrh	r3, [r7, #4]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	085b      	lsrs	r3, r3, #1
 8007d5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d68:	88fb      	ldrh	r3, [r7, #6]
 8007d6a:	005a      	lsls	r2, r3, #1
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d74:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d7a:	e01e      	b.n	8007dba <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3301      	adds	r3, #1
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	021b      	lsls	r3, r3, #8
 8007d8a:	b21a      	sxth	r2, r3
 8007d8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	b21b      	sxth	r3, r3
 8007d94:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	8a7a      	ldrh	r2, [r7, #18]
 8007d9a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	3302      	adds	r3, #2
 8007da0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	3302      	adds	r3, #2
 8007da6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	3301      	adds	r3, #1
 8007dac:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	3301      	adds	r3, #1
 8007db2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db6:	3b01      	subs	r3, #1
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1dd      	bne.n	8007d7c <USB_WritePMA+0x3a>
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	372c      	adds	r7, #44	@ 0x2c
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b08b      	sub	sp, #44	@ 0x2c
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	460b      	mov	r3, r1
 8007ddc:	80fb      	strh	r3, [r7, #6]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007de2:	88bb      	ldrh	r3, [r7, #4]
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007df2:	88fb      	ldrh	r3, [r7, #6]
 8007df4:	005a      	lsls	r2, r3, #1
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dfe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e04:	e01b      	b.n	8007e3e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	3302      	adds	r3, #2
 8007e12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	3302      	adds	r3, #2
 8007e36:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e0      	bne.n	8007e06 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e44:	88bb      	ldrh	r3, [r7, #4]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d007      	beq.n	8007e60 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	701a      	strb	r2, [r3, #0]
  }
}
 8007e60:	bf00      	nop
 8007e62:	372c      	adds	r7, #44	@ 0x2c
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr

08007e6a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7c1b      	ldrb	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d115      	bne.n	8007eae <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e86:	2202      	movs	r2, #2
 8007e88:	2181      	movs	r1, #129	@ 0x81
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f004 fecf 	bl	800cc2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f004 fec5 	bl	800cc2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007eac:	e012      	b.n	8007ed4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007eae:	2340      	movs	r3, #64	@ 0x40
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	2181      	movs	r1, #129	@ 0x81
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f004 feba 	bl	800cc2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ec0:	2340      	movs	r3, #64	@ 0x40
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f004 feb1 	bl	800cc2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	2182      	movs	r1, #130	@ 0x82
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f004 fea7 	bl	800cc2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ee6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007eea:	f004 ffc7 	bl	800ce7c <USBD_static_malloc>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]
 8007f04:	e026      	b.n	8007f54 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f0c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	7c1b      	ldrb	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d109      	bne.n	8007f44 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f004 ff67 	bl	800ce10 <USBD_LL_PrepareReceive>
 8007f42:	e007      	b.n	8007f54 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f4a:	2340      	movs	r3, #64	@ 0x40
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f004 ff5e 	bl	800ce10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f6e:	2181      	movs	r1, #129	@ 0x81
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f004 fe82 	bl	800cc7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f004 fe7b 	bl	800cc7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f8c:	2182      	movs	r1, #130	@ 0x82
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f004 fe73 	bl	800cc7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00e      	beq.n	8007fc2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f004 ff6d 	bl	800ce94 <USBD_static_free>
    pdev->pClassData = NULL;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fdc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d039      	beq.n	800806a <USBD_CDC_Setup+0x9e>
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d17f      	bne.n	80080fa <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88db      	ldrh	r3, [r3, #6]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d029      	beq.n	8008056 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	b25b      	sxtb	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	da11      	bge.n	8008030 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008018:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	88d2      	ldrh	r2, [r2, #6]
 800801e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008020:	6939      	ldr	r1, [r7, #16]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	461a      	mov	r2, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 fa05 	bl	8009438 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800802e:	e06b      	b.n	8008108 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	785a      	ldrb	r2, [r3, #1]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	88db      	ldrh	r3, [r3, #6]
 800803e:	b2da      	uxtb	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008046:	6939      	ldr	r1, [r7, #16]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	88db      	ldrh	r3, [r3, #6]
 800804c:	461a      	mov	r2, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fa20 	bl	8009494 <USBD_CtlPrepareRx>
      break;
 8008054:	e058      	b.n	8008108 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	7850      	ldrb	r0, [r2, #1]
 8008062:	2200      	movs	r2, #0
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	4798      	blx	r3
      break;
 8008068:	e04e      	b.n	8008108 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b0b      	cmp	r3, #11
 8008070:	d02e      	beq.n	80080d0 <USBD_CDC_Setup+0x104>
 8008072:	2b0b      	cmp	r3, #11
 8008074:	dc38      	bgt.n	80080e8 <USBD_CDC_Setup+0x11c>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <USBD_CDC_Setup+0xb4>
 800807a:	2b0a      	cmp	r3, #10
 800807c:	d014      	beq.n	80080a8 <USBD_CDC_Setup+0xdc>
 800807e:	e033      	b.n	80080e8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008086:	2b03      	cmp	r3, #3
 8008088:	d107      	bne.n	800809a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800808a:	f107 030c 	add.w	r3, r7, #12
 800808e:	2202      	movs	r2, #2
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 f9d0 	bl	8009438 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008098:	e02e      	b.n	80080f8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f961 	bl	8009364 <USBD_CtlError>
            ret = USBD_FAIL;
 80080a2:	2302      	movs	r3, #2
 80080a4:	75fb      	strb	r3, [r7, #23]
          break;
 80080a6:	e027      	b.n	80080f8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d107      	bne.n	80080c2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80080b2:	f107 030f 	add.w	r3, r7, #15
 80080b6:	2201      	movs	r2, #1
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 f9bc 	bl	8009438 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080c0:	e01a      	b.n	80080f8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f94d 	bl	8009364 <USBD_CtlError>
            ret = USBD_FAIL;
 80080ca:	2302      	movs	r3, #2
 80080cc:	75fb      	strb	r3, [r7, #23]
          break;
 80080ce:	e013      	b.n	80080f8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d00d      	beq.n	80080f6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 f941 	bl	8009364 <USBD_CtlError>
            ret = USBD_FAIL;
 80080e2:	2302      	movs	r3, #2
 80080e4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080e6:	e006      	b.n	80080f6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f93a 	bl	8009364 <USBD_CtlError>
          ret = USBD_FAIL;
 80080f0:	2302      	movs	r3, #2
 80080f2:	75fb      	strb	r3, [r7, #23]
          break;
 80080f4:	e000      	b.n	80080f8 <USBD_CDC_Setup+0x12c>
          break;
 80080f6:	bf00      	nop
      }
      break;
 80080f8:	e006      	b.n	8008108 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f931 	bl	8009364 <USBD_CtlError>
      ret = USBD_FAIL;
 8008102:	2302      	movs	r3, #2
 8008104:	75fb      	strb	r3, [r7, #23]
      break;
 8008106:	bf00      	nop
  }

  return ret;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008124:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800812c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d03a      	beq.n	80081ae <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	331c      	adds	r3, #28
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d029      	beq.n	80081a2 <USBD_CDC_DataIn+0x90>
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	440b      	add	r3, r1
 800815c:	331c      	adds	r3, #28
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	78f9      	ldrb	r1, [r7, #3]
 8008162:	68b8      	ldr	r0, [r7, #8]
 8008164:	460b      	mov	r3, r1
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	4403      	add	r3, r0
 800816e:	3338      	adds	r3, #56	@ 0x38
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	fbb2 f1f3 	udiv	r1, r2, r3
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d110      	bne.n	80081a2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	331c      	adds	r3, #28
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008194:	78f9      	ldrb	r1, [r7, #3]
 8008196:	2300      	movs	r3, #0
 8008198:	2200      	movs	r2, #0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f004 fe15 	bl	800cdca <USBD_LL_Transmit>
 80081a0:	e003      	b.n	80081aa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	e000      	b.n	80081b0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80081ae:	2302      	movs	r3, #2
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f004 fe40 	bl	800ce56 <USBD_LL_GetRxDataSize>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00d      	beq.n	8008204 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80081fc:	4611      	mov	r1, r2
 80081fe:	4798      	blx	r3

    return USBD_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e000      	b.n	8008206 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008204:	2302      	movs	r3, #2
  }
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008224:	2b00      	cmp	r3, #0
 8008226:	d014      	beq.n	8008252 <USBD_CDC_EP0_RxReady+0x44>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800822e:	2bff      	cmp	r3, #255	@ 0xff
 8008230:	d00f      	beq.n	8008252 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008240:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008248:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	22ff      	movs	r2, #255	@ 0xff
 800824e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2243      	movs	r2, #67	@ 0x43
 8008268:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800826a:	4b03      	ldr	r3, [pc, #12]	@ (8008278 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20000098 	.word	0x20000098

0800827c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2243      	movs	r2, #67	@ 0x43
 8008288:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800828a:	4b03      	ldr	r3, [pc, #12]	@ (8008298 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000054 	.word	0x20000054

0800829c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2243      	movs	r2, #67	@ 0x43
 80082a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80082aa:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	200000dc 	.word	0x200000dc

080082bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	220a      	movs	r2, #10
 80082c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80082ca:	4b03      	ldr	r3, [pc, #12]	@ (80082d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000010 	.word	0x20000010

080082dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082e6:	2302      	movs	r3, #2
 80082e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800831c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr

0800833a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800834a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr

08008360 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800836e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01c      	beq.n	80083b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008380:	2b00      	cmp	r3, #0
 8008382:	d115      	bne.n	80083b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2181      	movs	r1, #129	@ 0x81
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f004 fd0f 	bl	800cdca <USBD_LL_Transmit>

      return USBD_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e002      	b.n	80083b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80083b4:	2302      	movs	r3, #2
  }
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d017      	beq.n	8008408 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	7c1b      	ldrb	r3, [r3, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d109      	bne.n	80083f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083ea:	2101      	movs	r1, #1
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f004 fd0f 	bl	800ce10 <USBD_LL_PrepareReceive>
 80083f2:	e007      	b.n	8008404 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083fa:	2340      	movs	r3, #64	@ 0x40
 80083fc:	2101      	movs	r1, #1
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f004 fd06 	bl	800ce10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008408:	2302      	movs	r3, #2
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	4613      	mov	r3, r2
 800841e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008426:	2302      	movs	r3, #2
 8008428:	e01a      	b.n	8008460 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	79fa      	ldrb	r2, [r7, #7]
 8008456:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f004 fb73 	bl	800cb44 <USBD_LL_Init>

  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
 8008488:	e001      	b.n	800848e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800848a:	2302      	movs	r3, #2
 800848c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	bc80      	pop	{r7}
 8008498:	4770      	bx	lr

0800849a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f004 fba8 	bl	800cbf8 <USBD_LL_Start>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr

080084c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084d2:	2302      	movs	r3, #2
 80084d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00c      	beq.n	80084fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4611      	mov	r1, r2
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	78fa      	ldrb	r2, [r7, #3]
 800851a:	4611      	mov	r1, r2
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4798      	blx	r3

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fed8 	bl	80092f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008550:	461a      	mov	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	2b02      	cmp	r3, #2
 8008564:	d016      	beq.n	8008594 <USBD_LL_SetupStage+0x6a>
 8008566:	2b02      	cmp	r3, #2
 8008568:	d81c      	bhi.n	80085a4 <USBD_LL_SetupStage+0x7a>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <USBD_LL_SetupStage+0x4a>
 800856e:	2b01      	cmp	r3, #1
 8008570:	d008      	beq.n	8008584 <USBD_LL_SetupStage+0x5a>
 8008572:	e017      	b.n	80085a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f9cb 	bl	8008918 <USBD_StdDevReq>
      break;
 8008582:	e01a      	b.n	80085ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fa2d 	bl	80089ec <USBD_StdItfReq>
      break;
 8008592:	e012      	b.n	80085ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa6d 	bl	8008a7c <USBD_StdEPReq>
      break;
 80085a2:	e00a      	b.n	80085ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80085aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f004 fb80 	bl	800ccb8 <USBD_LL_StallEP>
      break;
 80085b8:	bf00      	nop
  }

  return USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	460b      	mov	r3, r1
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d14b      	bne.n	8008670 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80085de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d134      	bne.n	8008654 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d919      	bls.n	800862a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800860c:	429a      	cmp	r2, r3
 800860e:	d203      	bcs.n	8008618 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008614:	b29b      	uxth	r3, r3
 8008616:	e002      	b.n	800861e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800861c:	b29b      	uxth	r3, r3
 800861e:	461a      	mov	r2, r3
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 ff54 	bl	80094d0 <USBD_CtlContinueRx>
 8008628:	e038      	b.n	800869c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800863c:	2b03      	cmp	r3, #3
 800863e:	d105      	bne.n	800864c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 ff51 	bl	80094f4 <USBD_CtlSendStatus>
 8008652:	e023      	b.n	800869c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800865a:	2b05      	cmp	r3, #5
 800865c:	d11e      	bne.n	800869c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008666:	2100      	movs	r1, #0
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f004 fb25 	bl	800ccb8 <USBD_LL_StallEP>
 800866e:	e015      	b.n	800869c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00d      	beq.n	8008698 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008682:	2b03      	cmp	r3, #3
 8008684:	d108      	bne.n	8008698 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	7afa      	ldrb	r2, [r7, #11]
 8008690:	4611      	mov	r1, r2
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3
 8008696:	e001      	b.n	800869c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008698:	2302      	movs	r3, #2
 800869a:	e000      	b.n	800869e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b086      	sub	sp, #24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	460b      	mov	r3, r1
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d17f      	bne.n	80087ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3314      	adds	r3, #20
 80086be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d15c      	bne.n	8008784 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d915      	bls.n	8008702 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	1ad2      	subs	r2, r2, r3
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	461a      	mov	r2, r3
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 febe 	bl	8009470 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086f4:	2300      	movs	r3, #0
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f004 fb88 	bl	800ce10 <USBD_LL_PrepareReceive>
 8008700:	e04e      	b.n	80087a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	6912      	ldr	r2, [r2, #16]
 800870a:	fbb3 f1f2 	udiv	r1, r3, r2
 800870e:	fb01 f202 	mul.w	r2, r1, r2
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11c      	bne.n	8008752 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008720:	429a      	cmp	r2, r3
 8008722:	d316      	bcc.n	8008752 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800872e:	429a      	cmp	r2, r3
 8008730:	d20f      	bcs.n	8008752 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008732:	2200      	movs	r2, #0
 8008734:	2100      	movs	r1, #0
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fe9a 	bl	8009470 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008744:	2300      	movs	r3, #0
 8008746:	2200      	movs	r2, #0
 8008748:	2100      	movs	r1, #0
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f004 fb60 	bl	800ce10 <USBD_LL_PrepareReceive>
 8008750:	e026      	b.n	80087a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008764:	2b03      	cmp	r3, #3
 8008766:	d105      	bne.n	8008774 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008774:	2180      	movs	r1, #128	@ 0x80
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f004 fa9e 	bl	800ccb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fecc 	bl	800951a <USBD_CtlReceiveStatus>
 8008782:	e00d      	b.n	80087a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800878a:	2b04      	cmp	r3, #4
 800878c:	d004      	beq.n	8008798 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008798:	2180      	movs	r1, #128	@ 0x80
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f004 fa8c 	bl	800ccb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d11d      	bne.n	80087e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7ff fe81 	bl	80084b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80087b8:	e015      	b.n	80087e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00d      	beq.n	80087e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d108      	bne.n	80087e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	7afa      	ldrb	r2, [r7, #11]
 80087da:	4611      	mov	r1, r2
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	4798      	blx	r3
 80087e0:	e001      	b.n	80087e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087e2:	2302      	movs	r3, #2
 80087e4:	e000      	b.n	80087e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087f8:	2340      	movs	r3, #64	@ 0x40
 80087fa:	2200      	movs	r2, #0
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f004 fa15 	bl	800cc2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2240      	movs	r2, #64	@ 0x40
 8008810:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008814:	2340      	movs	r3, #64	@ 0x40
 8008816:	2200      	movs	r2, #0
 8008818:	2180      	movs	r1, #128	@ 0x80
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f004 fa07 	bl	800cc2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2240      	movs	r2, #64	@ 0x40
 800882a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d009      	beq.n	8008868 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	6852      	ldr	r2, [r2, #4]
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	4611      	mov	r1, r2
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	4798      	blx	r3
  }

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr

08008890 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d105      	bne.n	80088d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d10b      	bne.n	800890c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800892e:	2b40      	cmp	r3, #64	@ 0x40
 8008930:	d005      	beq.n	800893e <USBD_StdDevReq+0x26>
 8008932:	2b40      	cmp	r3, #64	@ 0x40
 8008934:	d84f      	bhi.n	80089d6 <USBD_StdDevReq+0xbe>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <USBD_StdDevReq+0x36>
 800893a:	2b20      	cmp	r3, #32
 800893c:	d14b      	bne.n	80089d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3
      break;
 800894c:	e048      	b.n	80089e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	785b      	ldrb	r3, [r3, #1]
 8008952:	2b09      	cmp	r3, #9
 8008954:	d839      	bhi.n	80089ca <USBD_StdDevReq+0xb2>
 8008956:	a201      	add	r2, pc, #4	@ (adr r2, 800895c <USBD_StdDevReq+0x44>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	080089ad 	.word	0x080089ad
 8008960:	080089c1 	.word	0x080089c1
 8008964:	080089cb 	.word	0x080089cb
 8008968:	080089b7 	.word	0x080089b7
 800896c:	080089cb 	.word	0x080089cb
 8008970:	0800898f 	.word	0x0800898f
 8008974:	08008985 	.word	0x08008985
 8008978:	080089cb 	.word	0x080089cb
 800897c:	080089a3 	.word	0x080089a3
 8008980:	08008999 	.word	0x08008999
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f9dc 	bl	8008d44 <USBD_GetDescriptor>
          break;
 800898c:	e022      	b.n	80089d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fb3f 	bl	8009014 <USBD_SetAddress>
          break;
 8008996:	e01d      	b.n	80089d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fb7e 	bl	800909c <USBD_SetConfig>
          break;
 80089a0:	e018      	b.n	80089d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc07 	bl	80091b8 <USBD_GetConfig>
          break;
 80089aa:	e013      	b.n	80089d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fc37 	bl	8009222 <USBD_GetStatus>
          break;
 80089b4:	e00e      	b.n	80089d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fc65 	bl	8009288 <USBD_SetFeature>
          break;
 80089be:	e009      	b.n	80089d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fc74 	bl	80092b0 <USBD_ClrFeature>
          break;
 80089c8:	e004      	b.n	80089d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fcc9 	bl	8009364 <USBD_CtlError>
          break;
 80089d2:	bf00      	nop
      }
      break;
 80089d4:	e004      	b.n	80089e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fcc3 	bl	8009364 <USBD_CtlError>
      break;
 80089de:	bf00      	nop
  }

  return ret;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop

080089ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a02:	2b40      	cmp	r3, #64	@ 0x40
 8008a04:	d005      	beq.n	8008a12 <USBD_StdItfReq+0x26>
 8008a06:	2b40      	cmp	r3, #64	@ 0x40
 8008a08:	d82e      	bhi.n	8008a68 <USBD_StdItfReq+0x7c>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <USBD_StdItfReq+0x26>
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d12a      	bne.n	8008a68 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d81d      	bhi.n	8008a5a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	889b      	ldrh	r3, [r3, #4]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d813      	bhi.n	8008a50 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d110      	bne.n	8008a64 <USBD_StdItfReq+0x78>
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10d      	bne.n	8008a64 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fd53 	bl	80094f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a4e:	e009      	b.n	8008a64 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc86 	bl	8009364 <USBD_CtlError>
          break;
 8008a58:	e004      	b.n	8008a64 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc81 	bl	8009364 <USBD_CtlError>
          break;
 8008a62:	e000      	b.n	8008a66 <USBD_StdItfReq+0x7a>
          break;
 8008a64:	bf00      	nop
      }
      break;
 8008a66:	e004      	b.n	8008a72 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fc7a 	bl	8009364 <USBD_CtlError>
      break;
 8008a70:	bf00      	nop
  }

  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	889b      	ldrh	r3, [r3, #4]
 8008a8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a98:	2b40      	cmp	r3, #64	@ 0x40
 8008a9a:	d007      	beq.n	8008aac <USBD_StdEPReq+0x30>
 8008a9c:	2b40      	cmp	r3, #64	@ 0x40
 8008a9e:	f200 8146 	bhi.w	8008d2e <USBD_StdEPReq+0x2b2>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <USBD_StdEPReq+0x40>
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	f040 8141 	bne.w	8008d2e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
      break;
 8008aba:	e13d      	b.n	8008d38 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	d10a      	bne.n	8008ade <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	4798      	blx	r3
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	e12d      	b.n	8008d3a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	785b      	ldrb	r3, [r3, #1]
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d007      	beq.n	8008af6 <USBD_StdEPReq+0x7a>
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	f300 811b 	bgt.w	8008d22 <USBD_StdEPReq+0x2a6>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d072      	beq.n	8008bd6 <USBD_StdEPReq+0x15a>
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d03a      	beq.n	8008b6a <USBD_StdEPReq+0xee>
 8008af4:	e115      	b.n	8008d22 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d002      	beq.n	8008b06 <USBD_StdEPReq+0x8a>
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d015      	beq.n	8008b30 <USBD_StdEPReq+0xb4>
 8008b04:	e02b      	b.n	8008b5e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00c      	beq.n	8008b26 <USBD_StdEPReq+0xaa>
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b80      	cmp	r3, #128	@ 0x80
 8008b10:	d009      	beq.n	8008b26 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f004 f8ce 	bl	800ccb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b1c:	2180      	movs	r1, #128	@ 0x80
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f004 f8ca 	bl	800ccb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b24:	e020      	b.n	8008b68 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc1b 	bl	8009364 <USBD_CtlError>
              break;
 8008b2e:	e01b      	b.n	8008b68 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	885b      	ldrh	r3, [r3, #2]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10e      	bne.n	8008b56 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00b      	beq.n	8008b56 <USBD_StdEPReq+0xda>
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b80      	cmp	r3, #128	@ 0x80
 8008b42:	d008      	beq.n	8008b56 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	88db      	ldrh	r3, [r3, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f004 f8b1 	bl	800ccb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fccc 	bl	80094f4 <USBD_CtlSendStatus>

              break;
 8008b5c:	e004      	b.n	8008b68 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbff 	bl	8009364 <USBD_CtlError>
              break;
 8008b66:	bf00      	nop
          }
          break;
 8008b68:	e0e0      	b.n	8008d2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d002      	beq.n	8008b7a <USBD_StdEPReq+0xfe>
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d015      	beq.n	8008ba4 <USBD_StdEPReq+0x128>
 8008b78:	e026      	b.n	8008bc8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00c      	beq.n	8008b9a <USBD_StdEPReq+0x11e>
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b80      	cmp	r3, #128	@ 0x80
 8008b84:	d009      	beq.n	8008b9a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f004 f894 	bl	800ccb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b90:	2180      	movs	r1, #128	@ 0x80
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f004 f890 	bl	800ccb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b98:	e01c      	b.n	8008bd4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fbe1 	bl	8009364 <USBD_CtlError>
              break;
 8008ba2:	e017      	b.n	8008bd4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	885b      	ldrh	r3, [r3, #2]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d112      	bne.n	8008bd2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f004 f89b 	bl	800ccf6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fc97 	bl	80094f4 <USBD_CtlSendStatus>
              }
              break;
 8008bc6:	e004      	b.n	8008bd2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fbca 	bl	8009364 <USBD_CtlError>
              break;
 8008bd0:	e000      	b.n	8008bd4 <USBD_StdEPReq+0x158>
              break;
 8008bd2:	bf00      	nop
          }
          break;
 8008bd4:	e0aa      	b.n	8008d2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d002      	beq.n	8008be6 <USBD_StdEPReq+0x16a>
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d032      	beq.n	8008c4a <USBD_StdEPReq+0x1ce>
 8008be4:	e097      	b.n	8008d16 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d007      	beq.n	8008bfc <USBD_StdEPReq+0x180>
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b80      	cmp	r3, #128	@ 0x80
 8008bf0:	d004      	beq.n	8008bfc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fbb5 	bl	8009364 <USBD_CtlError>
                break;
 8008bfa:	e091      	b.n	8008d20 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da0b      	bge.n	8008c1c <USBD_StdEPReq+0x1a0>
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	3310      	adds	r3, #16
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4413      	add	r3, r2
 8008c18:	3304      	adds	r3, #4
 8008c1a:	e00b      	b.n	8008c34 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	4413      	add	r3, r2
 8008c32:	3304      	adds	r3, #4
 8008c34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fbf8 	bl	8009438 <USBD_CtlSendData>
              break;
 8008c48:	e06a      	b.n	8008d20 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	da11      	bge.n	8008c76 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	3318      	adds	r3, #24
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d117      	bne.n	8008c9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb78 	bl	8009364 <USBD_CtlError>
                  break;
 8008c74:	e054      	b.n	8008d20 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fb65 	bl	8009364 <USBD_CtlError>
                  break;
 8008c9a:	e041      	b.n	8008d20 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da0b      	bge.n	8008cbc <USBD_StdEPReq+0x240>
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	3310      	adds	r3, #16
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	e00b      	b.n	8008cd4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <USBD_StdEPReq+0x266>
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	2b80      	cmp	r3, #128	@ 0x80
 8008ce0:	d103      	bne.n	8008cea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e00e      	b.n	8008d08 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f004 f820 	bl	800cd34 <USBD_LL_IsStallEP>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e002      	b.n	8008d08 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fb92 	bl	8009438 <USBD_CtlSendData>
              break;
 8008d14:	e004      	b.n	8008d20 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fb23 	bl	8009364 <USBD_CtlError>
              break;
 8008d1e:	bf00      	nop
          }
          break;
 8008d20:	e004      	b.n	8008d2c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fb1d 	bl	8009364 <USBD_CtlError>
          break;
 8008d2a:	bf00      	nop
      }
      break;
 8008d2c:	e004      	b.n	8008d38 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb17 	bl	8009364 <USBD_CtlError>
      break;
 8008d36:	bf00      	nop
  }

  return ret;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	885b      	ldrh	r3, [r3, #2]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b06      	cmp	r3, #6
 8008d66:	f200 8128 	bhi.w	8008fba <USBD_GetDescriptor+0x276>
 8008d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <USBD_GetDescriptor+0x2c>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008d8d 	.word	0x08008d8d
 8008d74:	08008da5 	.word	0x08008da5
 8008d78:	08008de5 	.word	0x08008de5
 8008d7c:	08008fbb 	.word	0x08008fbb
 8008d80:	08008fbb 	.word	0x08008fbb
 8008d84:	08008f5b 	.word	0x08008f5b
 8008d88:	08008f87 	.word	0x08008f87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
      break;
 8008da2:	e112      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7c1b      	ldrb	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10d      	bne.n	8008dc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db4:	f107 0208 	add.w	r2, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dc6:	e100      	b.n	8008fca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	2202      	movs	r2, #2
 8008de0:	701a      	strb	r2, [r3, #0]
      break;
 8008de2:	e0f2      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	f200 80ac 	bhi.w	8008f48 <USBD_GetDescriptor+0x204>
 8008df0:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <USBD_GetDescriptor+0xb4>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e79 	.word	0x08008e79
 8008e04:	08008ead 	.word	0x08008ead
 8008e08:	08008ee1 	.word	0x08008ee1
 8008e0c:	08008f15 	.word	0x08008f15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7c12      	ldrb	r2, [r2, #16]
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e32:	e091      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa94 	bl	8009364 <USBD_CtlError>
            err++;
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	72fb      	strb	r3, [r7, #11]
          break;
 8008e42:	e089      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	7c12      	ldrb	r2, [r2, #16]
 8008e5c:	f107 0108 	add.w	r1, r7, #8
 8008e60:	4610      	mov	r0, r2
 8008e62:	4798      	blx	r3
 8008e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e66:	e077      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa7a 	bl	8009364 <USBD_CtlError>
            err++;
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	3301      	adds	r3, #1
 8008e74:	72fb      	strb	r3, [r7, #11]
          break;
 8008e76:	e06f      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	7c12      	ldrb	r2, [r2, #16]
 8008e90:	f107 0108 	add.w	r1, r7, #8
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
 8008e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e9a:	e05d      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa60 	bl	8009364 <USBD_CtlError>
            err++;
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eaa:	e055      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7c12      	ldrb	r2, [r2, #16]
 8008ec4:	f107 0108 	add.w	r1, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ece:	e043      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa46 	bl	8009364 <USBD_CtlError>
            err++;
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	3301      	adds	r3, #1
 8008edc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ede:	e03b      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	7c12      	ldrb	r2, [r2, #16]
 8008ef8:	f107 0108 	add.w	r1, r7, #8
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
 8008f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f02:	e029      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa2c 	bl	8009364 <USBD_CtlError>
            err++;
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	72fb      	strb	r3, [r7, #11]
          break;
 8008f12:	e021      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7c12      	ldrb	r2, [r2, #16]
 8008f2c:	f107 0108 	add.w	r1, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f36:	e00f      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa12 	bl	8009364 <USBD_CtlError>
            err++;
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	3301      	adds	r3, #1
 8008f44:	72fb      	strb	r3, [r7, #11]
          break;
 8008f46:	e007      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa0a 	bl	8009364 <USBD_CtlError>
          err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f56:	e038      	b.n	8008fca <USBD_GetDescriptor+0x286>
 8008f58:	e037      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7c1b      	ldrb	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6a:	f107 0208 	add.w	r2, r7, #8
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4798      	blx	r3
 8008f72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f74:	e029      	b.n	8008fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f9f3 	bl	8009364 <USBD_CtlError>
        err++;
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	3301      	adds	r3, #1
 8008f82:	72fb      	strb	r3, [r7, #11]
      break;
 8008f84:	e021      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7c1b      	ldrb	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f96:	f107 0208 	add.w	r2, r7, #8
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4798      	blx	r3
 8008f9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	2207      	movs	r2, #7
 8008fa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fa8:	e00f      	b.n	8008fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9d9 	bl	8009364 <USBD_CtlError>
        err++;
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb8:	e007      	b.n	8008fca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9d1 	bl	8009364 <USBD_CtlError>
      err++;
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc8:	bf00      	nop
  }

  if (err != 0U)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11c      	bne.n	800900a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008fd0:	893b      	ldrh	r3, [r7, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d011      	beq.n	8008ffa <USBD_GetDescriptor+0x2b6>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	88db      	ldrh	r3, [r3, #6]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00d      	beq.n	8008ffa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	88da      	ldrh	r2, [r3, #6]
 8008fe2:	893b      	ldrh	r3, [r7, #8]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	bf28      	it	cs
 8008fe8:	4613      	movcs	r3, r2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fee:	893b      	ldrh	r3, [r7, #8]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fa1f 	bl	8009438 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	88db      	ldrh	r3, [r3, #6]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d104      	bne.n	800900c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa76 	bl	80094f4 <USBD_CtlSendStatus>
 8009008:	e000      	b.n	800900c <USBD_GetDescriptor+0x2c8>
    return;
 800900a:	bf00      	nop
    }
  }
}
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop

08009014 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	889b      	ldrh	r3, [r3, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d130      	bne.n	8009088 <USBD_SetAddress+0x74>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	88db      	ldrh	r3, [r3, #6]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d12c      	bne.n	8009088 <USBD_SetAddress+0x74>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	885b      	ldrh	r3, [r3, #2]
 8009032:	2b7f      	cmp	r3, #127	@ 0x7f
 8009034:	d828      	bhi.n	8009088 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	885b      	ldrh	r3, [r3, #2]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009040:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009048:	2b03      	cmp	r3, #3
 800904a:	d104      	bne.n	8009056 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f988 	bl	8009364 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009054:	e01d      	b.n	8009092 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	7bfa      	ldrb	r2, [r7, #15]
 800905a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f003 fe92 	bl	800cd8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa43 	bl	80094f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907c:	e009      	b.n	8009092 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009086:	e004      	b.n	8009092 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f96a 	bl	8009364 <USBD_CtlError>
  }
}
 8009090:	bf00      	nop
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	885b      	ldrh	r3, [r3, #2]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	4b41      	ldr	r3, [pc, #260]	@ (80091b4 <USBD_SetConfig+0x118>)
 80090ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b0:	4b40      	ldr	r3, [pc, #256]	@ (80091b4 <USBD_SetConfig+0x118>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d904      	bls.n	80090c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f952 	bl	8009364 <USBD_CtlError>
 80090c0:	e075      	b.n	80091ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d002      	beq.n	80090d2 <USBD_SetConfig+0x36>
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d023      	beq.n	8009118 <USBD_SetConfig+0x7c>
 80090d0:	e062      	b.n	8009198 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80090d2:	4b38      	ldr	r3, [pc, #224]	@ (80091b4 <USBD_SetConfig+0x118>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d01a      	beq.n	8009110 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80090da:	4b36      	ldr	r3, [pc, #216]	@ (80091b4 <USBD_SetConfig+0x118>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2203      	movs	r2, #3
 80090e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090ec:	4b31      	ldr	r3, [pc, #196]	@ (80091b4 <USBD_SetConfig+0x118>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff f9e7 	bl	80084c6 <USBD_SetClassConfig>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d104      	bne.n	8009108 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f92f 	bl	8009364 <USBD_CtlError>
            return;
 8009106:	e052      	b.n	80091ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9f3 	bl	80094f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800910e:	e04e      	b.n	80091ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f9ef 	bl	80094f4 <USBD_CtlSendStatus>
        break;
 8009116:	e04a      	b.n	80091ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009118:	4b26      	ldr	r3, [pc, #152]	@ (80091b4 <USBD_SetConfig+0x118>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d112      	bne.n	8009146 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009128:	4b22      	ldr	r3, [pc, #136]	@ (80091b4 <USBD_SetConfig+0x118>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009132:	4b20      	ldr	r3, [pc, #128]	@ (80091b4 <USBD_SetConfig+0x118>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff f9e3 	bl	8008504 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f9d8 	bl	80094f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009144:	e033      	b.n	80091ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009146:	4b1b      	ldr	r3, [pc, #108]	@ (80091b4 <USBD_SetConfig+0x118>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	d01d      	beq.n	8009190 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff f9d1 	bl	8008504 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009162:	4b14      	ldr	r3, [pc, #80]	@ (80091b4 <USBD_SetConfig+0x118>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800916c:	4b11      	ldr	r3, [pc, #68]	@ (80091b4 <USBD_SetConfig+0x118>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff f9a7 	bl	80084c6 <USBD_SetClassConfig>
 8009178:	4603      	mov	r3, r0
 800917a:	2b02      	cmp	r3, #2
 800917c:	d104      	bne.n	8009188 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f8ef 	bl	8009364 <USBD_CtlError>
            return;
 8009186:	e012      	b.n	80091ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f9b3 	bl	80094f4 <USBD_CtlSendStatus>
        break;
 800918e:	e00e      	b.n	80091ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f9af 	bl	80094f4 <USBD_CtlSendStatus>
        break;
 8009196:	e00a      	b.n	80091ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f8e2 	bl	8009364 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091a0:	4b04      	ldr	r3, [pc, #16]	@ (80091b4 <USBD_SetConfig+0x118>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff f9ac 	bl	8008504 <USBD_ClrClassConfig>
        break;
 80091ac:	bf00      	nop
    }
  }
}
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	2000048c 	.word	0x2000048c

080091b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	88db      	ldrh	r3, [r3, #6]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d004      	beq.n	80091d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f8c9 	bl	8009364 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091d2:	e022      	b.n	800921a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091da:	2b02      	cmp	r3, #2
 80091dc:	dc02      	bgt.n	80091e4 <USBD_GetConfig+0x2c>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dc03      	bgt.n	80091ea <USBD_GetConfig+0x32>
 80091e2:	e015      	b.n	8009210 <USBD_GetConfig+0x58>
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d00b      	beq.n	8009200 <USBD_GetConfig+0x48>
 80091e8:	e012      	b.n	8009210 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3308      	adds	r3, #8
 80091f4:	2201      	movs	r2, #1
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f91d 	bl	8009438 <USBD_CtlSendData>
        break;
 80091fe:	e00c      	b.n	800921a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	2201      	movs	r2, #1
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f915 	bl	8009438 <USBD_CtlSendData>
        break;
 800920e:	e004      	b.n	800921a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f8a6 	bl	8009364 <USBD_CtlError>
        break;
 8009218:	bf00      	nop
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009232:	3b01      	subs	r3, #1
 8009234:	2b02      	cmp	r3, #2
 8009236:	d81e      	bhi.n	8009276 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	88db      	ldrh	r3, [r3, #6]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d004      	beq.n	800924a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f88e 	bl	8009364 <USBD_CtlError>
        break;
 8009248:	e01a      	b.n	8009280 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f043 0202 	orr.w	r2, r3, #2
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	330c      	adds	r3, #12
 800926a:	2202      	movs	r2, #2
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f8e2 	bl	8009438 <USBD_CtlSendData>
      break;
 8009274:	e004      	b.n	8009280 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f873 	bl	8009364 <USBD_CtlError>
      break;
 800927e:	bf00      	nop
  }
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d106      	bne.n	80092a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f926 	bl	80094f4 <USBD_CtlSendStatus>
  }
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c0:	3b01      	subs	r3, #1
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d80b      	bhi.n	80092de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	885b      	ldrh	r3, [r3, #2]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d10c      	bne.n	80092e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f90c 	bl	80094f4 <USBD_CtlSendStatus>
      }
      break;
 80092dc:	e004      	b.n	80092e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f83f 	bl	8009364 <USBD_CtlError>
      break;
 80092e6:	e000      	b.n	80092ea <USBD_ClrFeature+0x3a>
      break;
 80092e8:	bf00      	nop
  }
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785a      	ldrb	r2, [r3, #1]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	3302      	adds	r3, #2
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	3303      	adds	r3, #3
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	021b      	lsls	r3, r3, #8
 800931c:	b29b      	uxth	r3, r3
 800931e:	4413      	add	r3, r2
 8009320:	b29a      	uxth	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	3304      	adds	r3, #4
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	3305      	adds	r3, #5
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	021b      	lsls	r3, r3, #8
 8009336:	b29b      	uxth	r3, r3
 8009338:	4413      	add	r3, r2
 800933a:	b29a      	uxth	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	3306      	adds	r3, #6
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	3307      	adds	r3, #7
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	b29b      	uxth	r3, r3
 8009352:	4413      	add	r3, r2
 8009354:	b29a      	uxth	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	80da      	strh	r2, [r3, #6]

}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr

08009364 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800936e:	2180      	movs	r1, #128	@ 0x80
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f003 fca1 	bl	800ccb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009376:	2100      	movs	r1, #0
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f003 fc9d 	bl	800ccb8 <USBD_LL_StallEP>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b086      	sub	sp, #24
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d032      	beq.n	8009402 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f834 	bl	800940a <USBD_GetLen>
 80093a2:	4603      	mov	r3, r0
 80093a4:	3301      	adds	r3, #1
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	75fa      	strb	r2, [r7, #23]
 80093b6:	461a      	mov	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4413      	add	r3, r2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	7812      	ldrb	r2, [r2, #0]
 80093c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	1c5a      	adds	r2, r3, #1
 80093c6:	75fa      	strb	r2, [r7, #23]
 80093c8:	461a      	mov	r2, r3
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	2203      	movs	r2, #3
 80093d0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80093d2:	e012      	b.n	80093fa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	60fa      	str	r2, [r7, #12]
 80093da:	7dfa      	ldrb	r2, [r7, #23]
 80093dc:	1c51      	adds	r1, r2, #1
 80093de:	75f9      	strb	r1, [r7, #23]
 80093e0:	4611      	mov	r1, r2
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	440a      	add	r2, r1
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	75fa      	strb	r2, [r7, #23]
 80093f0:	461a      	mov	r2, r3
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	4413      	add	r3, r2
 80093f6:	2200      	movs	r2, #0
 80093f8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e8      	bne.n	80093d4 <USBD_GetString+0x4e>
    }
  }
}
 8009402:	bf00      	nop
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009416:	e005      	b.n	8009424 <USBD_GetLen+0x1a>
  {
    len++;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	3301      	adds	r3, #1
 800941c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3301      	adds	r3, #1
 8009422:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1f5      	bne.n	8009418 <USBD_GetLen+0xe>
  }

  return len;
 800942c:	7bfb      	ldrb	r3, [r7, #15]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr

08009438 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2202      	movs	r2, #2
 800944a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009454:	88fa      	ldrh	r2, [r7, #6]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800945a:	88fb      	ldrh	r3, [r7, #6]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	2100      	movs	r1, #0
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f003 fcb2 	bl	800cdca <USBD_LL_Transmit>

  return USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800947e:	88fb      	ldrh	r3, [r7, #6]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f003 fca0 	bl	800cdca <USBD_LL_Transmit>

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4613      	mov	r3, r2
 80094a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2203      	movs	r2, #3
 80094a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80094aa:	88fa      	ldrh	r2, [r7, #6]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80094b2:	88fa      	ldrh	r2, [r7, #6]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094ba:	88fb      	ldrh	r3, [r7, #6]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	2100      	movs	r1, #0
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f003 fca5 	bl	800ce10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	4613      	mov	r3, r2
 80094dc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	2100      	movs	r1, #0
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f003 fc93 	bl	800ce10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2204      	movs	r2, #4
 8009500:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009504:	2300      	movs	r3, #0
 8009506:	2200      	movs	r2, #0
 8009508:	2100      	movs	r1, #0
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f003 fc5d 	bl	800cdca <USBD_LL_Transmit>

  return USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2205      	movs	r2, #5
 8009526:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952a:	2300      	movs	r3, #0
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f003 fc6d 	bl	800ce10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009546:	f3ef 8305 	mrs	r3, IPSR
 800954a:	60bb      	str	r3, [r7, #8]
  return(result);
 800954c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10f      	bne.n	8009572 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009552:	f3ef 8310 	mrs	r3, PRIMASK
 8009556:	607b      	str	r3, [r7, #4]
  return(result);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <osKernelInitialize+0x32>
 800955e:	4b10      	ldr	r3, [pc, #64]	@ (80095a0 <osKernelInitialize+0x60>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d109      	bne.n	800957a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009566:	f3ef 8311 	mrs	r3, BASEPRI
 800956a:	603b      	str	r3, [r7, #0]
  return(result);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009572:	f06f 0305 	mvn.w	r3, #5
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e00c      	b.n	8009594 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800957a:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <osKernelInitialize+0x60>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d105      	bne.n	800958e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009582:	4b07      	ldr	r3, [pc, #28]	@ (80095a0 <osKernelInitialize+0x60>)
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e002      	b.n	8009594 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800958e:	f04f 33ff 	mov.w	r3, #4294967295
 8009592:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009594:	68fb      	ldr	r3, [r7, #12]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	bc80      	pop	{r7}
 800959e:	4770      	bx	lr
 80095a0:	20000490 	.word	0x20000490

080095a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095aa:	f3ef 8305 	mrs	r3, IPSR
 80095ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80095b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10f      	bne.n	80095d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095b6:	f3ef 8310 	mrs	r3, PRIMASK
 80095ba:	607b      	str	r3, [r7, #4]
  return(result);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <osKernelStart+0x32>
 80095c2:	4b11      	ldr	r3, [pc, #68]	@ (8009608 <osKernelStart+0x64>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d109      	bne.n	80095de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095ca:	f3ef 8311 	mrs	r3, BASEPRI
 80095ce:	603b      	str	r3, [r7, #0]
  return(result);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <osKernelStart+0x3a>
    stat = osErrorISR;
 80095d6:	f06f 0305 	mvn.w	r3, #5
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	e00e      	b.n	80095fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80095de:	4b0a      	ldr	r3, [pc, #40]	@ (8009608 <osKernelStart+0x64>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d107      	bne.n	80095f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80095e6:	4b08      	ldr	r3, [pc, #32]	@ (8009608 <osKernelStart+0x64>)
 80095e8:	2202      	movs	r2, #2
 80095ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80095ec:	f001 f9c4 	bl	800a978 <vTaskStartScheduler>
      stat = osOK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e002      	b.n	80095fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80095f6:	f04f 33ff 	mov.w	r3, #4294967295
 80095fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80095fc:	68fb      	ldr	r3, [r7, #12]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20000490 	.word	0x20000490

0800960c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009612:	f3ef 8305 	mrs	r3, IPSR
 8009616:	60bb      	str	r3, [r7, #8]
  return(result);
 8009618:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10f      	bne.n	800963e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800961e:	f3ef 8310 	mrs	r3, PRIMASK
 8009622:	607b      	str	r3, [r7, #4]
  return(result);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d109      	bne.n	800963e <osKernelGetTickCount+0x32>
 800962a:	4b0b      	ldr	r3, [pc, #44]	@ (8009658 <osKernelGetTickCount+0x4c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d109      	bne.n	8009646 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009632:	f3ef 8311 	mrs	r3, BASEPRI
 8009636:	603b      	str	r3, [r7, #0]
  return(result);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800963e:	f001 fac5 	bl	800abcc <xTaskGetTickCountFromISR>
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	e002      	b.n	800964c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009646:	f001 fab3 	bl	800abb0 <xTaskGetTickCount>
 800964a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800964c:	68fb      	ldr	r3, [r7, #12]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000490 	.word	0x20000490

0800965c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800965c:	b580      	push	{r7, lr}
 800965e:	b092      	sub	sp, #72	@ 0x48
 8009660:	af04      	add	r7, sp, #16
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009668:	2300      	movs	r3, #0
 800966a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800966c:	f3ef 8305 	mrs	r3, IPSR
 8009670:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009674:	2b00      	cmp	r3, #0
 8009676:	f040 8094 	bne.w	80097a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967a:	f3ef 8310 	mrs	r3, PRIMASK
 800967e:	623b      	str	r3, [r7, #32]
  return(result);
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f040 808d 	bne.w	80097a2 <osThreadNew+0x146>
 8009688:	4b48      	ldr	r3, [pc, #288]	@ (80097ac <osThreadNew+0x150>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d106      	bne.n	800969e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009690:	f3ef 8311 	mrs	r3, BASEPRI
 8009694:	61fb      	str	r3, [r7, #28]
  return(result);
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f040 8082 	bne.w	80097a2 <osThreadNew+0x146>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d07e      	beq.n	80097a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80096a4:	2380      	movs	r3, #128	@ 0x80
 80096a6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80096a8:	2318      	movs	r3, #24
 80096aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80096ac:	2300      	movs	r3, #0
 80096ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80096b0:	f107 031b 	add.w	r3, r7, #27
 80096b4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80096b6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d045      	beq.n	800974e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <osThreadNew+0x74>
        name = attr->name;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d008      	beq.n	80096f6 <osThreadNew+0x9a>
 80096e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e6:	2b38      	cmp	r3, #56	@ 0x38
 80096e8:	d805      	bhi.n	80096f6 <osThreadNew+0x9a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <osThreadNew+0x9e>
        return (NULL);
 80096f6:	2300      	movs	r3, #0
 80096f8:	e054      	b.n	80097a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	089b      	lsrs	r3, r3, #2
 8009708:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00e      	beq.n	8009730 <osThreadNew+0xd4>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	2ba7      	cmp	r3, #167	@ 0xa7
 8009718:	d90a      	bls.n	8009730 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800971e:	2b00      	cmp	r3, #0
 8009720:	d006      	beq.n	8009730 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <osThreadNew+0xd4>
        mem = 1;
 800972a:	2301      	movs	r3, #1
 800972c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800972e:	e010      	b.n	8009752 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10c      	bne.n	8009752 <osThreadNew+0xf6>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d108      	bne.n	8009752 <osThreadNew+0xf6>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d104      	bne.n	8009752 <osThreadNew+0xf6>
          mem = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800974c:	e001      	b.n	8009752 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	2b01      	cmp	r3, #1
 8009756:	d110      	bne.n	800977a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009760:	9202      	str	r2, [sp, #8]
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800976c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 ff18 	bl	800a5a4 <xTaskCreateStatic>
 8009774:	4603      	mov	r3, r0
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	e013      	b.n	80097a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800977a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977c:	2b00      	cmp	r3, #0
 800977e:	d110      	bne.n	80097a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009782:	b29a      	uxth	r2, r3
 8009784:	f107 0314 	add.w	r3, r7, #20
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 ff65 	bl	800a662 <xTaskCreate>
 8009798:	4603      	mov	r3, r0
 800979a:	2b01      	cmp	r3, #1
 800979c:	d001      	beq.n	80097a2 <osThreadNew+0x146>
          hTask = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097a2:	697b      	ldr	r3, [r7, #20]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3738      	adds	r7, #56	@ 0x38
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20000490 	.word	0x20000490

080097b0 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08a      	sub	sp, #40	@ 0x28
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <osThreadFlagsSet+0x1a>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	da03      	bge.n	80097d2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80097ca:	f06f 0303 	mvn.w	r3, #3
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e045      	b.n	800985e <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 80097d2:	f04f 33ff 	mov.w	r3, #4294967295
 80097d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d8:	f3ef 8305 	mrs	r3, IPSR
 80097dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80097de:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10f      	bne.n	8009804 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e4:	f3ef 8310 	mrs	r3, PRIMASK
 80097e8:	617b      	str	r3, [r7, #20]
  return(result);
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d109      	bne.n	8009804 <osThreadFlagsSet+0x54>
 80097f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009868 <osThreadFlagsSet+0xb8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d125      	bne.n	8009844 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097f8:	f3ef 8311 	mrs	r3, BASEPRI
 80097fc:	613b      	str	r3, [r7, #16]
  return(result);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01f      	beq.n	8009844 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8009804:	2300      	movs	r3, #0
 8009806:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009808:	f107 0308 	add.w	r3, r7, #8
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	2300      	movs	r3, #0
 8009810:	2201      	movs	r2, #1
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	69f8      	ldr	r0, [r7, #28]
 8009816:	f001 fec7 	bl	800b5a8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800981a:	f107 030c 	add.w	r3, r7, #12
 800981e:	2200      	movs	r2, #0
 8009820:	9200      	str	r2, [sp, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	2100      	movs	r1, #0
 8009826:	69f8      	ldr	r0, [r7, #28]
 8009828:	f001 febe 	bl	800b5a8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d015      	beq.n	800985e <osThreadFlagsSet+0xae>
 8009832:	4b0e      	ldr	r3, [pc, #56]	@ (800986c <osThreadFlagsSet+0xbc>)
 8009834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	e00c      	b.n	800985e <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009844:	2300      	movs	r3, #0
 8009846:	2201      	movs	r2, #1
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	69f8      	ldr	r0, [r7, #28]
 800984c:	f001 fdfe 	bl	800b44c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009850:	f107 030c 	add.w	r3, r7, #12
 8009854:	2200      	movs	r2, #0
 8009856:	2100      	movs	r1, #0
 8009858:	69f8      	ldr	r0, [r7, #28]
 800985a:	f001 fdf7 	bl	800b44c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800985e:	68fb      	ldr	r3, [r7, #12]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3720      	adds	r7, #32
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20000490 	.word	0x20000490
 800986c:	e000ed04 	.word	0xe000ed04

08009870 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009870:	b580      	push	{r7, lr}
 8009872:	b08e      	sub	sp, #56	@ 0x38
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800987c:	f3ef 8305 	mrs	r3, IPSR
 8009880:	61fb      	str	r3, [r7, #28]
  return(result);
 8009882:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10f      	bne.n	80098a8 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009888:	f3ef 8310 	mrs	r3, PRIMASK
 800988c:	61bb      	str	r3, [r7, #24]
  return(result);
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <osThreadFlagsWait+0x38>
 8009894:	4b3f      	ldr	r3, [pc, #252]	@ (8009994 <osThreadFlagsWait+0x124>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b02      	cmp	r3, #2
 800989a:	d109      	bne.n	80098b0 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800989c:	f3ef 8311 	mrs	r3, BASEPRI
 80098a0:	617b      	str	r3, [r7, #20]
  return(result);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80098a8:	f06f 0305 	mvn.w	r3, #5
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ae:	e06b      	b.n	8009988 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da03      	bge.n	80098be <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80098b6:	f06f 0303 	mvn.w	r3, #3
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80098bc:	e064      	b.n	8009988 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f003 0302 	and.w	r3, r3, #2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <osThreadFlagsWait+0x5e>
      clear = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80098cc:	e001      	b.n	80098d2 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    rflags = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
    tout   = timeout;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    t0 = xTaskGetTickCount();
 80098da:	f001 f969 	bl	800abb0 <xTaskGetTickCount>
 80098de:	62b8      	str	r0, [r7, #40]	@ 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80098e0:	f107 0210 	add.w	r2, r7, #16
 80098e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098e8:	2000      	movs	r0, #0
 80098ea:	f001 fd4f 	bl	800b38c <xTaskNotifyWait>
 80098ee:	6278      	str	r0, [r7, #36]	@ 0x24

      if (rval == pdPASS) {
 80098f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d137      	bne.n	8009966 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80098f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4013      	ands	r3, r2
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34
        rflags |= nval;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009902:	4313      	orrs	r3, r2
 8009904:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00c      	beq.n	800992a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009914:	4013      	ands	r3, r2
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	429a      	cmp	r2, r3
 800991a:	d032      	beq.n	8009982 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10f      	bne.n	8009942 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8009922:	f06f 0302 	mvn.w	r3, #2
 8009926:	637b      	str	r3, [r7, #52]	@ 0x34
              break;
 8009928:	e02e      	b.n	8009988 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800992e:	4013      	ands	r3, r2
 8009930:	2b00      	cmp	r3, #0
 8009932:	d128      	bne.n	8009986 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d103      	bne.n	8009942 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800993a:	f06f 0302 	mvn.w	r3, #2
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
              break;
 8009940:	e022      	b.n	8009988 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009942:	f001 f935 	bl	800abb0 <xTaskGetTickCount>
 8009946:	4602      	mov	r2, r0
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800994e:	6a3a      	ldr	r2, [r7, #32]
 8009950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009952:	429a      	cmp	r2, r3
 8009954:	d902      	bls.n	800995c <osThreadFlagsWait+0xec>
          tout  = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800995a:	e00e      	b.n	800997a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800995c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009964:	e009      	b.n	800997a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d103      	bne.n	8009974 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800996c:	f06f 0302 	mvn.w	r3, #2
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
 8009972:	e002      	b.n	800997a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009974:	f06f 0301 	mvn.w	r3, #1
 8009978:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1af      	bne.n	80098e0 <osThreadFlagsWait+0x70>
 8009980:	e002      	b.n	8009988 <osThreadFlagsWait+0x118>
            break;
 8009982:	bf00      	nop
 8009984:	e000      	b.n	8009988 <osThreadFlagsWait+0x118>
            break;
 8009986:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800998a:	4618      	mov	r0, r3
 800998c:	3738      	adds	r7, #56	@ 0x38
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000490 	.word	0x20000490

08009998 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a0:	f3ef 8305 	mrs	r3, IPSR
 80099a4:	613b      	str	r3, [r7, #16]
  return(result);
 80099a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10f      	bne.n	80099cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ac:	f3ef 8310 	mrs	r3, PRIMASK
 80099b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d109      	bne.n	80099cc <osDelay+0x34>
 80099b8:	4b0d      	ldr	r3, [pc, #52]	@ (80099f0 <osDelay+0x58>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d109      	bne.n	80099d4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099c0:	f3ef 8311 	mrs	r3, BASEPRI
 80099c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <osDelay+0x3c>
    stat = osErrorISR;
 80099cc:	f06f 0305 	mvn.w	r3, #5
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e007      	b.n	80099e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 ff94 	bl	800a90c <vTaskDelay>
    }
  }

  return (stat);
 80099e4:	697b      	ldr	r3, [r7, #20]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000490 	.word	0x20000490

080099f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4a06      	ldr	r2, [pc, #24]	@ (8009a1c <vApplicationGetIdleTaskMemory+0x28>)
 8009a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	4a05      	ldr	r2, [pc, #20]	@ (8009a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2280      	movs	r2, #128	@ 0x80
 8009a10:	601a      	str	r2, [r3, #0]
}
 8009a12:	bf00      	nop
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bc80      	pop	{r7}
 8009a1a:	4770      	bx	lr
 8009a1c:	20000494 	.word	0x20000494
 8009a20:	2000053c 	.word	0x2000053c

08009a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4a07      	ldr	r2, [pc, #28]	@ (8009a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	4a06      	ldr	r2, [pc, #24]	@ (8009a54 <vApplicationGetTimerTaskMemory+0x30>)
 8009a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	bf00      	nop
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bc80      	pop	{r7}
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	2000073c 	.word	0x2000073c
 8009a54:	200007e4 	.word	0x200007e4

08009a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f103 0208 	add.w	r2, r3, #8
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f103 0208 	add.w	r2, r3, #8
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f103 0208 	add.w	r2, r3, #8
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr

08009a96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr

08009aae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	601a      	str	r2, [r3, #0]
}
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bc80      	pop	{r7}
 8009af2:	4770      	bx	lr

08009af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0a:	d103      	bne.n	8009b14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	e00c      	b.n	8009b2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3308      	adds	r3, #8
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	e002      	b.n	8009b22 <vListInsert+0x2e>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d2f6      	bcs.n	8009b1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	6892      	ldr	r2, [r2, #8]
 8009b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6852      	ldr	r2, [r2, #4]
 8009b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d103      	bne.n	8009b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	1e5a      	subs	r2, r3, #1
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bc80      	pop	{r7}
 8009bb4:	4770      	bx	lr
	...

08009bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10b      	bne.n	8009be4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bde:	bf00      	nop
 8009be0:	bf00      	nop
 8009be2:	e7fd      	b.n	8009be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009be4:	f002 fa1a 	bl	800c01c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bf4:	fb01 f303 	mul.w	r3, r1, r3
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c14:	3b01      	subs	r3, #1
 8009c16:	68f9      	ldr	r1, [r7, #12]
 8009c18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c1a:	fb01 f303 	mul.w	r3, r1, r3
 8009c1e:	441a      	add	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	22ff      	movs	r2, #255	@ 0xff
 8009c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	22ff      	movs	r2, #255	@ 0xff
 8009c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d114      	bne.n	8009c64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d01a      	beq.n	8009c78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3310      	adds	r3, #16
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 f948 	bl	800aedc <xTaskRemoveFromEventList>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d012      	beq.n	8009c78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <xQueueGenericReset+0xd0>)
 8009c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	e009      	b.n	8009c78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3310      	adds	r3, #16
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff fef5 	bl	8009a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3324      	adds	r3, #36	@ 0x24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff fef0 	bl	8009a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c78:	f002 fa00 	bl	800c07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c7c:	2301      	movs	r3, #1
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	@ 0x38
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10b      	bne.n	8009cb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <xQueueGenericCreateStatic+0x56>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <xQueueGenericCreateStatic+0x5a>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <xQueueGenericCreateStatic+0x5c>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10b      	bne.n	8009d04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	623b      	str	r3, [r7, #32]
}
 8009cfe:	bf00      	nop
 8009d00:	bf00      	nop
 8009d02:	e7fd      	b.n	8009d00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <xQueueGenericCreateStatic+0x84>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <xQueueGenericCreateStatic+0x88>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <xQueueGenericCreateStatic+0x8a>
 8009d14:	2300      	movs	r3, #0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10b      	bne.n	8009d32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	61fb      	str	r3, [r7, #28]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d32:	2350      	movs	r3, #80	@ 0x50
 8009d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b50      	cmp	r3, #80	@ 0x50
 8009d3a:	d00b      	beq.n	8009d54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	61bb      	str	r3, [r7, #24]
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	e7fd      	b.n	8009d50 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00d      	beq.n	8009d7a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d66:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f000 f805 	bl	8009d84 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3730      	adds	r7, #48	@ 0x30
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009db2:	2101      	movs	r1, #1
 8009db4:	69b8      	ldr	r0, [r7, #24]
 8009db6:	f7ff feff 	bl	8009bb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dc2:	bf00      	nop
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08e      	sub	sp, #56	@ 0x38
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10b      	bne.n	8009e00 <xQueueGenericSend+0x34>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d103      	bne.n	8009e0e <xQueueGenericSend+0x42>
 8009e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <xQueueGenericSend+0x46>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e000      	b.n	8009e14 <xQueueGenericSend+0x48>
 8009e12:	2300      	movs	r3, #0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10b      	bne.n	8009e30 <xQueueGenericSend+0x64>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e2a:	bf00      	nop
 8009e2c:	bf00      	nop
 8009e2e:	e7fd      	b.n	8009e2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d103      	bne.n	8009e3e <xQueueGenericSend+0x72>
 8009e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <xQueueGenericSend+0x76>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <xQueueGenericSend+0x78>
 8009e42:	2300      	movs	r3, #0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10b      	bne.n	8009e60 <xQueueGenericSend+0x94>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	623b      	str	r3, [r7, #32]
}
 8009e5a:	bf00      	nop
 8009e5c:	bf00      	nop
 8009e5e:	e7fd      	b.n	8009e5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e60:	f001 fa06 	bl	800b270 <xTaskGetSchedulerState>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <xQueueGenericSend+0xa4>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <xQueueGenericSend+0xa8>
 8009e70:	2301      	movs	r3, #1
 8009e72:	e000      	b.n	8009e76 <xQueueGenericSend+0xaa>
 8009e74:	2300      	movs	r3, #0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10b      	bne.n	8009e92 <xQueueGenericSend+0xc6>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	61fb      	str	r3, [r7, #28]
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	e7fd      	b.n	8009e8e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e92:	f002 f8c3 	bl	800c01c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d302      	bcc.n	8009ea8 <xQueueGenericSend+0xdc>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d129      	bne.n	8009efc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009eae:	f000 fa0d 	bl	800a2cc <prvCopyDataToQueue>
 8009eb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d010      	beq.n	8009ede <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	3324      	adds	r3, #36	@ 0x24
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f001 f80b 	bl	800aedc <xTaskRemoveFromEventList>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d013      	beq.n	8009ef4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8009fcc <xQueueGenericSend+0x200>)
 8009ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	e00a      	b.n	8009ef4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d007      	beq.n	8009ef4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ee4:	4b39      	ldr	r3, [pc, #228]	@ (8009fcc <xQueueGenericSend+0x200>)
 8009ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ef4:	f002 f8c2 	bl	800c07c <vPortExitCritical>
				return pdPASS;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e063      	b.n	8009fc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f02:	f002 f8bb 	bl	800c07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e05c      	b.n	8009fc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	4618      	mov	r0, r3
 8009f16:	f001 f845 	bl	800afa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f1e:	f002 f8ad 	bl	800c07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f22:	f000 fd99 	bl	800aa58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f26:	f002 f879 	bl	800c01c <vPortEnterCritical>
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f30:	b25b      	sxtb	r3, r3
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f36:	d103      	bne.n	8009f40 <xQueueGenericSend+0x174>
 8009f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f46:	b25b      	sxtb	r3, r3
 8009f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4c:	d103      	bne.n	8009f56 <xQueueGenericSend+0x18a>
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f56:	f002 f891 	bl	800c07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f5a:	1d3a      	adds	r2, r7, #4
 8009f5c:	f107 0314 	add.w	r3, r7, #20
 8009f60:	4611      	mov	r1, r2
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 f834 	bl	800afd0 <xTaskCheckForTimeOut>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d124      	bne.n	8009fb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f70:	f000 faa4 	bl	800a4bc <prvIsQueueFull>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d018      	beq.n	8009fac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7c:	3310      	adds	r3, #16
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	4611      	mov	r1, r2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 ff58 	bl	800ae38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f8a:	f000 fa2f 	bl	800a3ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f8e:	f000 fd71 	bl	800aa74 <xTaskResumeAll>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f47f af7c 	bne.w	8009e92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009fcc <xQueueGenericSend+0x200>)
 8009f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	e772      	b.n	8009e92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fae:	f000 fa1d 	bl	800a3ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fb2:	f000 fd5f 	bl	800aa74 <xTaskResumeAll>
 8009fb6:	e76c      	b.n	8009e92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fba:	f000 fa17 	bl	800a3ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fbe:	f000 fd59 	bl	800aa74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fc2:	2300      	movs	r3, #0
		}
	}
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3738      	adds	r7, #56	@ 0x38
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	e000ed04 	.word	0xe000ed04

08009fd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08e      	sub	sp, #56	@ 0x38
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	e7fd      	b.n	8009ffc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d103      	bne.n	800a00e <xQueueGenericSendFromISR+0x3e>
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <xQueueGenericSendFromISR+0x42>
 800a00e:	2301      	movs	r3, #1
 800a010:	e000      	b.n	800a014 <xQueueGenericSendFromISR+0x44>
 800a012:	2300      	movs	r3, #0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10b      	bne.n	800a030 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	623b      	str	r3, [r7, #32]
}
 800a02a:	bf00      	nop
 800a02c:	bf00      	nop
 800a02e:	e7fd      	b.n	800a02c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b02      	cmp	r3, #2
 800a034:	d103      	bne.n	800a03e <xQueueGenericSendFromISR+0x6e>
 800a036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d101      	bne.n	800a042 <xQueueGenericSendFromISR+0x72>
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <xQueueGenericSendFromISR+0x74>
 800a042:	2300      	movs	r3, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10b      	bne.n	800a060 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	61fb      	str	r3, [r7, #28]
}
 800a05a:	bf00      	nop
 800a05c:	bf00      	nop
 800a05e:	e7fd      	b.n	800a05c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a060:	f002 f89e 	bl	800c1a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a064:	f3ef 8211 	mrs	r2, BASEPRI
 800a068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	61ba      	str	r2, [r7, #24]
 800a07a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a07c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a088:	429a      	cmp	r2, r3
 800a08a:	d302      	bcc.n	800a092 <xQueueGenericSendFromISR+0xc2>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d12c      	bne.n	800a0ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0a2:	f000 f913 	bl	800a2cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	d112      	bne.n	800a0d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d016      	beq.n	800a0e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	3324      	adds	r3, #36	@ 0x24
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 ff0d 	bl	800aedc <xTaskRemoveFromEventList>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00e      	beq.n	800a0e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00b      	beq.n	800a0e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e007      	b.n	800a0e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0da:	3301      	adds	r3, #1
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	b25a      	sxtb	r2, r3
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a0ea:	e001      	b.n	800a0f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3738      	adds	r7, #56	@ 0x38
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08c      	sub	sp, #48	@ 0x30
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a114:	2300      	movs	r3, #0
 800a116:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <xQueueReceive+0x32>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	623b      	str	r3, [r7, #32]
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	e7fd      	b.n	800a136 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d103      	bne.n	800a148 <xQueueReceive+0x40>
 800a140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <xQueueReceive+0x44>
 800a148:	2301      	movs	r3, #1
 800a14a:	e000      	b.n	800a14e <xQueueReceive+0x46>
 800a14c:	2300      	movs	r3, #0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <xQueueReceive+0x62>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	61fb      	str	r3, [r7, #28]
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	e7fd      	b.n	800a166 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a16a:	f001 f881 	bl	800b270 <xTaskGetSchedulerState>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d102      	bne.n	800a17a <xQueueReceive+0x72>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <xQueueReceive+0x76>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e000      	b.n	800a180 <xQueueReceive+0x78>
 800a17e:	2300      	movs	r3, #0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10b      	bne.n	800a19c <xQueueReceive+0x94>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	61bb      	str	r3, [r7, #24]
}
 800a196:	bf00      	nop
 800a198:	bf00      	nop
 800a19a:	e7fd      	b.n	800a198 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a19c:	f001 ff3e 	bl	800c01c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01f      	beq.n	800a1ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b0:	f000 f8f6 	bl	800a3a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	1e5a      	subs	r2, r3, #1
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00f      	beq.n	800a1e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 fe87 	bl	800aedc <xTaskRemoveFromEventList>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1d4:	4b3c      	ldr	r3, [pc, #240]	@ (800a2c8 <xQueueReceive+0x1c0>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1e4:	f001 ff4a 	bl	800c07c <vPortExitCritical>
				return pdPASS;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e069      	b.n	800a2c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f2:	f001 ff43 	bl	800c07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e062      	b.n	800a2c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a200:	f107 0310 	add.w	r3, r7, #16
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fecd 	bl	800afa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a20e:	f001 ff35 	bl	800c07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a212:	f000 fc21 	bl	800aa58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a216:	f001 ff01 	bl	800c01c <vPortEnterCritical>
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a220:	b25b      	sxtb	r3, r3
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d103      	bne.n	800a230 <xQueueReceive+0x128>
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a236:	b25b      	sxtb	r3, r3
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d103      	bne.n	800a246 <xQueueReceive+0x13e>
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a246:	f001 ff19 	bl	800c07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a24a:	1d3a      	adds	r2, r7, #4
 800a24c:	f107 0310 	add.w	r3, r7, #16
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f000 febc 	bl	800afd0 <xTaskCheckForTimeOut>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d123      	bne.n	800a2a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a25e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a260:	f000 f916 	bl	800a490 <prvIsQueueEmpty>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d017      	beq.n	800a29a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	3324      	adds	r3, #36	@ 0x24
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fde0 	bl	800ae38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a27a:	f000 f8b7 	bl	800a3ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f000 fbf9 	bl	800aa74 <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d189      	bne.n	800a19c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a288:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c8 <xQueueReceive+0x1c0>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	e780      	b.n	800a19c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a29c:	f000 f8a6 	bl	800a3ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2a0:	f000 fbe8 	bl	800aa74 <xTaskResumeAll>
 800a2a4:	e77a      	b.n	800a19c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2a8:	f000 f8a0 	bl	800a3ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ac:	f000 fbe2 	bl	800aa74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2b2:	f000 f8ed 	bl	800a490 <prvIsQueueEmpty>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f43f af6f 	beq.w	800a19c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3730      	adds	r7, #48	@ 0x30
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10d      	bne.n	800a306 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d14d      	bne.n	800a38e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 ffd8 	bl	800b2ac <xTaskPriorityDisinherit>
 800a2fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	605a      	str	r2, [r3, #4]
 800a304:	e043      	b.n	800a38e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d119      	bne.n	800a340 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6898      	ldr	r0, [r3, #8]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a314:	461a      	mov	r2, r3
 800a316:	68b9      	ldr	r1, [r7, #8]
 800a318:	f004 f883 	bl	800e422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	689a      	ldr	r2, [r3, #8]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	429a      	cmp	r2, r3
 800a334:	d32b      	bcc.n	800a38e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	609a      	str	r2, [r3, #8]
 800a33e:	e026      	b.n	800a38e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68d8      	ldr	r0, [r3, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a348:	461a      	mov	r2, r3
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	f004 f869 	bl	800e422 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a358:	425b      	negs	r3, r3
 800a35a:	441a      	add	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d207      	bcs.n	800a37c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a374:	425b      	negs	r3, r3
 800a376:	441a      	add	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d105      	bne.n	800a38e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a396:	697b      	ldr	r3, [r7, #20]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d018      	beq.n	800a3e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ba:	441a      	add	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d303      	bcc.n	800a3d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68d9      	ldr	r1, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6838      	ldr	r0, [r7, #0]
 800a3e0:	f004 f81f 	bl	800e422 <memcpy>
	}
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3f4:	f001 fe12 	bl	800c01c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a400:	e011      	b.n	800a426 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d012      	beq.n	800a430 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3324      	adds	r3, #36	@ 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fd64 	bl	800aedc <xTaskRemoveFromEventList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a41a:	f000 fe3d 	bl	800b098 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3b01      	subs	r3, #1
 800a422:	b2db      	uxtb	r3, r3
 800a424:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dce9      	bgt.n	800a402 <prvUnlockQueue+0x16>
 800a42e:	e000      	b.n	800a432 <prvUnlockQueue+0x46>
					break;
 800a430:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	22ff      	movs	r2, #255	@ 0xff
 800a436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a43a:	f001 fe1f 	bl	800c07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a43e:	f001 fded 	bl	800c01c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a448:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a44a:	e011      	b.n	800a470 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d012      	beq.n	800a47a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3310      	adds	r3, #16
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fd3f 	bl	800aedc <xTaskRemoveFromEventList>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a464:	f000 fe18 	bl	800b098 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a474:	2b00      	cmp	r3, #0
 800a476:	dce9      	bgt.n	800a44c <prvUnlockQueue+0x60>
 800a478:	e000      	b.n	800a47c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a47a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	22ff      	movs	r2, #255	@ 0xff
 800a480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a484:	f001 fdfa 	bl	800c07c <vPortExitCritical>
}
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a498:	f001 fdc0 	bl	800c01c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	e001      	b.n	800a4ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4ae:	f001 fde5 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4c4:	f001 fdaa 	bl	800c01c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d102      	bne.n	800a4da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e001      	b.n	800a4de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4de:	f001 fdcd 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	e014      	b.n	800a526 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4fc:	4a0e      	ldr	r2, [pc, #56]	@ (800a538 <vQueueAddToRegistry+0x4c>)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10b      	bne.n	800a520 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a508:	490b      	ldr	r1, [pc, #44]	@ (800a538 <vQueueAddToRegistry+0x4c>)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a512:	4a09      	ldr	r2, [pc, #36]	@ (800a538 <vQueueAddToRegistry+0x4c>)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	4413      	add	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a51e:	e006      	b.n	800a52e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	3301      	adds	r3, #1
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b07      	cmp	r3, #7
 800a52a:	d9e7      	bls.n	800a4fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a52c:	bf00      	nop
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	bc80      	pop	{r7}
 800a536:	4770      	bx	lr
 800a538:	20000be4 	.word	0x20000be4

0800a53c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a54c:	f001 fd66 	bl	800c01c <vPortEnterCritical>
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a556:	b25b      	sxtb	r3, r3
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d103      	bne.n	800a566 <vQueueWaitForMessageRestricted+0x2a>
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a56c:	b25b      	sxtb	r3, r3
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a572:	d103      	bne.n	800a57c <vQueueWaitForMessageRestricted+0x40>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a57c:	f001 fd7e 	bl	800c07c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a584:	2b00      	cmp	r3, #0
 800a586:	d106      	bne.n	800a596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	3324      	adds	r3, #36	@ 0x24
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	4618      	mov	r0, r3
 800a592:	f000 fc77 	bl	800ae84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a596:	6978      	ldr	r0, [r7, #20]
 800a598:	f7ff ff28 	bl	800a3ec <prvUnlockQueue>
	}
 800a59c:	bf00      	nop
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b08e      	sub	sp, #56	@ 0x38
 800a5a8:	af04      	add	r7, sp, #16
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10b      	bne.n	800a5d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	623b      	str	r3, [r7, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	bf00      	nop
 800a5ce:	e7fd      	b.n	800a5cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <xTaskCreateStatic+0x4a>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	61fb      	str	r3, [r7, #28]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5ee:	23a8      	movs	r3, #168	@ 0xa8
 800a5f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2ba8      	cmp	r3, #168	@ 0xa8
 800a5f6:	d00b      	beq.n	800a610 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	61bb      	str	r3, [r7, #24]
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	2b00      	cmp	r3, #0
 800a614:	d01e      	beq.n	800a654 <xTaskCreateStatic+0xb0>
 800a616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01b      	beq.n	800a654 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a624:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a628:	2202      	movs	r2, #2
 800a62a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a62e:	2300      	movs	r3, #0
 800a630:	9303      	str	r3, [sp, #12]
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	9302      	str	r3, [sp, #8]
 800a636:	f107 0314 	add.w	r3, r7, #20
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 f850 	bl	800a6ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a64c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a64e:	f000 f8ed 	bl	800a82c <prvAddNewTaskToReadyList>
 800a652:	e001      	b.n	800a658 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800a654:	2300      	movs	r3, #0
 800a656:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a658:	697b      	ldr	r3, [r7, #20]
	}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3728      	adds	r7, #40	@ 0x28
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a662:	b580      	push	{r7, lr}
 800a664:	b08c      	sub	sp, #48	@ 0x30
 800a666:	af04      	add	r7, sp, #16
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	603b      	str	r3, [r7, #0]
 800a66e:	4613      	mov	r3, r2
 800a670:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4618      	mov	r0, r3
 800a678:	f001 fdd2 	bl	800c220 <pvPortMalloc>
 800a67c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00e      	beq.n	800a6a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a684:	20a8      	movs	r0, #168	@ 0xa8
 800a686:	f001 fdcb 	bl	800c220 <pvPortMalloc>
 800a68a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	631a      	str	r2, [r3, #48]	@ 0x30
 800a698:	e005      	b.n	800a6a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a69a:	6978      	ldr	r0, [r7, #20]
 800a69c:	f001 fe88 	bl	800c3b0 <vPortFree>
 800a6a0:	e001      	b.n	800a6a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d017      	beq.n	800a6dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6b4:	88fa      	ldrh	r2, [r7, #6]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	9303      	str	r3, [sp, #12]
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	9302      	str	r3, [sp, #8]
 800a6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 f80e 	bl	800a6ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6d0:	69f8      	ldr	r0, [r7, #28]
 800a6d2:	f000 f8ab 	bl	800a82c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	61bb      	str	r3, [r7, #24]
 800a6da:	e002      	b.n	800a6e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
	}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3720      	adds	r7, #32
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	461a      	mov	r2, r3
 800a704:	21a5      	movs	r1, #165	@ 0xa5
 800a706:	f003 fdbb 	bl	800e280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a714:	3b01      	subs	r3, #1
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	f023 0307 	bic.w	r3, r3, #7
 800a722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	617b      	str	r3, [r7, #20]
}
 800a740:	bf00      	nop
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
 800a74a:	e012      	b.n	800a772 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	4413      	add	r3, r2
 800a752:	7819      	ldrb	r1, [r3, #0]
 800a754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	4413      	add	r3, r2
 800a75a:	3334      	adds	r3, #52	@ 0x34
 800a75c:	460a      	mov	r2, r1
 800a75e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	4413      	add	r3, r2
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d006      	beq.n	800a77a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	3301      	adds	r3, #1
 800a770:	61fb      	str	r3, [r7, #28]
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	2b0f      	cmp	r3, #15
 800a776:	d9e9      	bls.n	800a74c <prvInitialiseNewTask+0x60>
 800a778:	e000      	b.n	800a77c <prvInitialiseNewTask+0x90>
		{
			break;
 800a77a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a786:	2b37      	cmp	r3, #55	@ 0x37
 800a788:	d901      	bls.n	800a78e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a78a:	2337      	movs	r3, #55	@ 0x37
 800a78c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a792:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a798:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	2200      	movs	r2, #0
 800a79e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff f976 	bl	8009a96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	3318      	adds	r3, #24
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff f971 	bl	8009a96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	3354      	adds	r3, #84	@ 0x54
 800a7de:	224c      	movs	r2, #76	@ 0x4c
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f003 fd4c 	bl	800e280 <memset>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ea:	4a0d      	ldr	r2, [pc, #52]	@ (800a820 <prvInitialiseNewTask+0x134>)
 800a7ec:	659a      	str	r2, [r3, #88]	@ 0x58
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f0:	4a0c      	ldr	r2, [pc, #48]	@ (800a824 <prvInitialiseNewTask+0x138>)
 800a7f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a828 <prvInitialiseNewTask+0x13c>)
 800a7f8:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	68f9      	ldr	r1, [r7, #12]
 800a7fe:	69b8      	ldr	r0, [r7, #24]
 800a800:	f001 fb18 	bl	800be34 <pxPortInitialiseStack>
 800a804:	4602      	mov	r2, r0
 800a806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a808:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a816:	bf00      	nop
 800a818:	3720      	adds	r7, #32
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20003044 	.word	0x20003044
 800a824:	200030ac 	.word	0x200030ac
 800a828:	20003114 	.word	0x20003114

0800a82c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a834:	f001 fbf2 	bl	800c01c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a838:	4b2d      	ldr	r3, [pc, #180]	@ (800a8f0 <prvAddNewTaskToReadyList+0xc4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	4a2c      	ldr	r2, [pc, #176]	@ (800a8f0 <prvAddNewTaskToReadyList+0xc4>)
 800a840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a842:	4b2c      	ldr	r3, [pc, #176]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc8>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d109      	bne.n	800a85e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a84a:	4a2a      	ldr	r2, [pc, #168]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc8>)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a850:	4b27      	ldr	r3, [pc, #156]	@ (800a8f0 <prvAddNewTaskToReadyList+0xc4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d110      	bne.n	800a87a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a858:	f000 fc42 	bl	800b0e0 <prvInitialiseTaskLists>
 800a85c:	e00d      	b.n	800a87a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a85e:	4b26      	ldr	r3, [pc, #152]	@ (800a8f8 <prvAddNewTaskToReadyList+0xcc>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a866:	4b23      	ldr	r3, [pc, #140]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a870:	429a      	cmp	r2, r3
 800a872:	d802      	bhi.n	800a87a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a874:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc8>)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a87a:	4b20      	ldr	r3, [pc, #128]	@ (800a8fc <prvAddNewTaskToReadyList+0xd0>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3301      	adds	r3, #1
 800a880:	4a1e      	ldr	r2, [pc, #120]	@ (800a8fc <prvAddNewTaskToReadyList+0xd0>)
 800a882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a884:	4b1d      	ldr	r3, [pc, #116]	@ (800a8fc <prvAddNewTaskToReadyList+0xd0>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a890:	4b1b      	ldr	r3, [pc, #108]	@ (800a900 <prvAddNewTaskToReadyList+0xd4>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d903      	bls.n	800a8a0 <prvAddNewTaskToReadyList+0x74>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89c:	4a18      	ldr	r2, [pc, #96]	@ (800a900 <prvAddNewTaskToReadyList+0xd4>)
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4a15      	ldr	r2, [pc, #84]	@ (800a904 <prvAddNewTaskToReadyList+0xd8>)
 800a8ae:	441a      	add	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	f7ff f8f9 	bl	8009aae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8bc:	f001 fbde 	bl	800c07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f8 <prvAddNewTaskToReadyList+0xcc>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00e      	beq.n	800a8e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc8>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d207      	bcs.n	800a8e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a908 <prvAddNewTaskToReadyList+0xdc>)
 800a8d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	200010f8 	.word	0x200010f8
 800a8f4:	20000c24 	.word	0x20000c24
 800a8f8:	20001104 	.word	0x20001104
 800a8fc:	20001114 	.word	0x20001114
 800a900:	20001100 	.word	0x20001100
 800a904:	20000c28 	.word	0x20000c28
 800a908:	e000ed04 	.word	0xe000ed04

0800a90c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d018      	beq.n	800a950 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a91e:	4b14      	ldr	r3, [pc, #80]	@ (800a970 <vTaskDelay+0x64>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00b      	beq.n	800a93e <vTaskDelay+0x32>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60bb      	str	r3, [r7, #8]
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a93e:	f000 f88b 	bl	800aa58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a942:	2100      	movs	r1, #0
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 ff01 	bl	800b74c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a94a:	f000 f893 	bl	800aa74 <xTaskResumeAll>
 800a94e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d107      	bne.n	800a966 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a956:	4b07      	ldr	r3, [pc, #28]	@ (800a974 <vTaskDelay+0x68>)
 800a958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	20001120 	.word	0x20001120
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	@ 0x28
 800a97c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a982:	2300      	movs	r3, #0
 800a984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a986:	463a      	mov	r2, r7
 800a988:	1d39      	adds	r1, r7, #4
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff f830 	bl	80099f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	9202      	str	r2, [sp, #8]
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	460a      	mov	r2, r1
 800a9a6:	4924      	ldr	r1, [pc, #144]	@ (800aa38 <vTaskStartScheduler+0xc0>)
 800a9a8:	4824      	ldr	r0, [pc, #144]	@ (800aa3c <vTaskStartScheduler+0xc4>)
 800a9aa:	f7ff fdfb 	bl	800a5a4 <xTaskCreateStatic>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	4a23      	ldr	r2, [pc, #140]	@ (800aa40 <vTaskStartScheduler+0xc8>)
 800a9b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9b4:	4b22      	ldr	r3, [pc, #136]	@ (800aa40 <vTaskStartScheduler+0xc8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	e001      	b.n	800a9c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d102      	bne.n	800a9d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9cc:	f000 ff12 	bl	800b7f4 <xTimerCreateTimerTask>
 800a9d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d11b      	bne.n	800aa10 <vTaskStartScheduler+0x98>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	613b      	str	r3, [r7, #16]
}
 800a9ea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9ec:	4b15      	ldr	r3, [pc, #84]	@ (800aa44 <vTaskStartScheduler+0xcc>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3354      	adds	r3, #84	@ 0x54
 800a9f2:	4a15      	ldr	r2, [pc, #84]	@ (800aa48 <vTaskStartScheduler+0xd0>)
 800a9f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9f6:	4b15      	ldr	r3, [pc, #84]	@ (800aa4c <vTaskStartScheduler+0xd4>)
 800a9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9fe:	4b14      	ldr	r3, [pc, #80]	@ (800aa50 <vTaskStartScheduler+0xd8>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aa04:	4b13      	ldr	r3, [pc, #76]	@ (800aa54 <vTaskStartScheduler+0xdc>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa0a:	f001 fa95 	bl	800bf38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa0e:	e00f      	b.n	800aa30 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa16:	d10b      	bne.n	800aa30 <vTaskStartScheduler+0xb8>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	60fb      	str	r3, [r7, #12]
}
 800aa2a:	bf00      	nop
 800aa2c:	bf00      	nop
 800aa2e:	e7fd      	b.n	800aa2c <vTaskStartScheduler+0xb4>
}
 800aa30:	bf00      	nop
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	0800f29c 	.word	0x0800f29c
 800aa3c:	0800b0b1 	.word	0x0800b0b1
 800aa40:	2000111c 	.word	0x2000111c
 800aa44:	20000c24 	.word	0x20000c24
 800aa48:	20000198 	.word	0x20000198
 800aa4c:	20001118 	.word	0x20001118
 800aa50:	20001104 	.word	0x20001104
 800aa54:	200010fc 	.word	0x200010fc

0800aa58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aa5c:	4b04      	ldr	r3, [pc, #16]	@ (800aa70 <vTaskSuspendAll+0x18>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4a03      	ldr	r2, [pc, #12]	@ (800aa70 <vTaskSuspendAll+0x18>)
 800aa64:	6013      	str	r3, [r2, #0]
}
 800aa66:	bf00      	nop
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bc80      	pop	{r7}
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20001120 	.word	0x20001120

0800aa74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa82:	4b42      	ldr	r3, [pc, #264]	@ (800ab8c <xTaskResumeAll+0x118>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10b      	bne.n	800aaa2 <xTaskResumeAll+0x2e>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	603b      	str	r3, [r7, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	e7fd      	b.n	800aa9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaa2:	f001 fabb 	bl	800c01c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aaa6:	4b39      	ldr	r3, [pc, #228]	@ (800ab8c <xTaskResumeAll+0x118>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	4a37      	ldr	r2, [pc, #220]	@ (800ab8c <xTaskResumeAll+0x118>)
 800aaae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab0:	4b36      	ldr	r3, [pc, #216]	@ (800ab8c <xTaskResumeAll+0x118>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d162      	bne.n	800ab7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aab8:	4b35      	ldr	r3, [pc, #212]	@ (800ab90 <xTaskResumeAll+0x11c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d05e      	beq.n	800ab7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aac0:	e02f      	b.n	800ab22 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aac2:	4b34      	ldr	r3, [pc, #208]	@ (800ab94 <xTaskResumeAll+0x120>)
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3318      	adds	r3, #24
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff f848 	bl	8009b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3304      	adds	r3, #4
 800aad8:	4618      	mov	r0, r3
 800aada:	f7ff f843 	bl	8009b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae2:	4b2d      	ldr	r3, [pc, #180]	@ (800ab98 <xTaskResumeAll+0x124>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d903      	bls.n	800aaf2 <xTaskResumeAll+0x7e>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	4a2a      	ldr	r2, [pc, #168]	@ (800ab98 <xTaskResumeAll+0x124>)
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4a27      	ldr	r2, [pc, #156]	@ (800ab9c <xTaskResumeAll+0x128>)
 800ab00:	441a      	add	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f7fe ffd0 	bl	8009aae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab12:	4b23      	ldr	r3, [pc, #140]	@ (800aba0 <xTaskResumeAll+0x12c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d302      	bcc.n	800ab22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ab1c:	4b21      	ldr	r3, [pc, #132]	@ (800aba4 <xTaskResumeAll+0x130>)
 800ab1e:	2201      	movs	r2, #1
 800ab20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab22:	4b1c      	ldr	r3, [pc, #112]	@ (800ab94 <xTaskResumeAll+0x120>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1cb      	bne.n	800aac2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab30:	f000 fb7a 	bl	800b228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab34:	4b1c      	ldr	r3, [pc, #112]	@ (800aba8 <xTaskResumeAll+0x134>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab40:	f000 f856 	bl	800abf0 <xTaskIncrementTick>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ab4a:	4b16      	ldr	r3, [pc, #88]	@ (800aba4 <xTaskResumeAll+0x130>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3b01      	subs	r3, #1
 800ab54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1f1      	bne.n	800ab40 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ab5c:	4b12      	ldr	r3, [pc, #72]	@ (800aba8 <xTaskResumeAll+0x134>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab62:	4b10      	ldr	r3, [pc, #64]	@ (800aba4 <xTaskResumeAll+0x130>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab6e:	4b0f      	ldr	r3, [pc, #60]	@ (800abac <xTaskResumeAll+0x138>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab7e:	f001 fa7d 	bl	800c07c <vPortExitCritical>

	return xAlreadyYielded;
 800ab82:	68bb      	ldr	r3, [r7, #8]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20001120 	.word	0x20001120
 800ab90:	200010f8 	.word	0x200010f8
 800ab94:	200010b8 	.word	0x200010b8
 800ab98:	20001100 	.word	0x20001100
 800ab9c:	20000c28 	.word	0x20000c28
 800aba0:	20000c24 	.word	0x20000c24
 800aba4:	2000110c 	.word	0x2000110c
 800aba8:	20001108 	.word	0x20001108
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abb6:	4b04      	ldr	r3, [pc, #16]	@ (800abc8 <xTaskGetTickCount+0x18>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abbc:	687b      	ldr	r3, [r7, #4]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr
 800abc8:	200010fc 	.word	0x200010fc

0800abcc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abd2:	f001 fae5 	bl	800c1a0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800abd6:	2300      	movs	r3, #0
 800abd8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800abda:	4b04      	ldr	r3, [pc, #16]	@ (800abec <xTaskGetTickCountFromISR+0x20>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abe0:	683b      	ldr	r3, [r7, #0]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	200010fc 	.word	0x200010fc

0800abf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abfa:	4b52      	ldr	r3, [pc, #328]	@ (800ad44 <xTaskIncrementTick+0x154>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f040 808f 	bne.w	800ad22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac04:	4b50      	ldr	r3, [pc, #320]	@ (800ad48 <xTaskIncrementTick+0x158>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac0c:	4a4e      	ldr	r2, [pc, #312]	@ (800ad48 <xTaskIncrementTick+0x158>)
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d121      	bne.n	800ac5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac18:	4b4c      	ldr	r3, [pc, #304]	@ (800ad4c <xTaskIncrementTick+0x15c>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	603b      	str	r3, [r7, #0]
}
 800ac34:	bf00      	nop
 800ac36:	bf00      	nop
 800ac38:	e7fd      	b.n	800ac36 <xTaskIncrementTick+0x46>
 800ac3a:	4b44      	ldr	r3, [pc, #272]	@ (800ad4c <xTaskIncrementTick+0x15c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	4b43      	ldr	r3, [pc, #268]	@ (800ad50 <xTaskIncrementTick+0x160>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a41      	ldr	r2, [pc, #260]	@ (800ad4c <xTaskIncrementTick+0x15c>)
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	4a41      	ldr	r2, [pc, #260]	@ (800ad50 <xTaskIncrementTick+0x160>)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	4b41      	ldr	r3, [pc, #260]	@ (800ad54 <xTaskIncrementTick+0x164>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3301      	adds	r3, #1
 800ac54:	4a3f      	ldr	r2, [pc, #252]	@ (800ad54 <xTaskIncrementTick+0x164>)
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	f000 fae6 	bl	800b228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac5c:	4b3e      	ldr	r3, [pc, #248]	@ (800ad58 <xTaskIncrementTick+0x168>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d34e      	bcc.n	800ad04 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac66:	4b39      	ldr	r3, [pc, #228]	@ (800ad4c <xTaskIncrementTick+0x15c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <xTaskIncrementTick+0x84>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e000      	b.n	800ac76 <xTaskIncrementTick+0x86>
 800ac74:	2300      	movs	r3, #0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d004      	beq.n	800ac84 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7a:	4b37      	ldr	r3, [pc, #220]	@ (800ad58 <xTaskIncrementTick+0x168>)
 800ac7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac80:	601a      	str	r2, [r3, #0]
					break;
 800ac82:	e03f      	b.n	800ad04 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ac84:	4b31      	ldr	r3, [pc, #196]	@ (800ad4c <xTaskIncrementTick+0x15c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d203      	bcs.n	800aca4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac9c:	4a2e      	ldr	r2, [pc, #184]	@ (800ad58 <xTaskIncrementTick+0x168>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6013      	str	r3, [r2, #0]
						break;
 800aca2:	e02f      	b.n	800ad04 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe ff5b 	bl	8009b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d004      	beq.n	800acc0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	3318      	adds	r3, #24
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fe ff52 	bl	8009b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc4:	4b25      	ldr	r3, [pc, #148]	@ (800ad5c <xTaskIncrementTick+0x16c>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d903      	bls.n	800acd4 <xTaskIncrementTick+0xe4>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd0:	4a22      	ldr	r2, [pc, #136]	@ (800ad5c <xTaskIncrementTick+0x16c>)
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acd8:	4613      	mov	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4a1f      	ldr	r2, [pc, #124]	@ (800ad60 <xTaskIncrementTick+0x170>)
 800ace2:	441a      	add	r2, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7fe fedf 	bl	8009aae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf4:	4b1b      	ldr	r3, [pc, #108]	@ (800ad64 <xTaskIncrementTick+0x174>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d3b3      	bcc.n	800ac66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad02:	e7b0      	b.n	800ac66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad04:	4b17      	ldr	r3, [pc, #92]	@ (800ad64 <xTaskIncrementTick+0x174>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad0a:	4915      	ldr	r1, [pc, #84]	@ (800ad60 <xTaskIncrementTick+0x170>)
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d907      	bls.n	800ad2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	e004      	b.n	800ad2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad22:	4b11      	ldr	r3, [pc, #68]	@ (800ad68 <xTaskIncrementTick+0x178>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3301      	adds	r3, #1
 800ad28:	4a0f      	ldr	r2, [pc, #60]	@ (800ad68 <xTaskIncrementTick+0x178>)
 800ad2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad6c <xTaskIncrementTick+0x17c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800ad34:	2301      	movs	r3, #1
 800ad36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad38:	697b      	ldr	r3, [r7, #20]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20001120 	.word	0x20001120
 800ad48:	200010fc 	.word	0x200010fc
 800ad4c:	200010b0 	.word	0x200010b0
 800ad50:	200010b4 	.word	0x200010b4
 800ad54:	20001110 	.word	0x20001110
 800ad58:	20001118 	.word	0x20001118
 800ad5c:	20001100 	.word	0x20001100
 800ad60:	20000c28 	.word	0x20000c28
 800ad64:	20000c24 	.word	0x20000c24
 800ad68:	20001108 	.word	0x20001108
 800ad6c:	2000110c 	.word	0x2000110c

0800ad70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad76:	4b2a      	ldr	r3, [pc, #168]	@ (800ae20 <vTaskSwitchContext+0xb0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad7e:	4b29      	ldr	r3, [pc, #164]	@ (800ae24 <vTaskSwitchContext+0xb4>)
 800ad80:	2201      	movs	r2, #1
 800ad82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad84:	e047      	b.n	800ae16 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ad86:	4b27      	ldr	r3, [pc, #156]	@ (800ae24 <vTaskSwitchContext+0xb4>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ad8c:	4b26      	ldr	r3, [pc, #152]	@ (800ae28 <vTaskSwitchContext+0xb8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e011      	b.n	800adb8 <vTaskSwitchContext+0x48>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <vTaskSwitchContext+0x42>
	__asm volatile
 800ad9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	607b      	str	r3, [r7, #4]
}
 800adac:	bf00      	nop
 800adae:	bf00      	nop
 800adb0:	e7fd      	b.n	800adae <vTaskSwitchContext+0x3e>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	60fb      	str	r3, [r7, #12]
 800adb8:	491c      	ldr	r1, [pc, #112]	@ (800ae2c <vTaskSwitchContext+0xbc>)
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	440b      	add	r3, r1
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d0e3      	beq.n	800ad94 <vTaskSwitchContext+0x24>
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4a15      	ldr	r2, [pc, #84]	@ (800ae2c <vTaskSwitchContext+0xbc>)
 800add8:	4413      	add	r3, r2
 800adda:	60bb      	str	r3, [r7, #8]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	605a      	str	r2, [r3, #4]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	3308      	adds	r3, #8
 800adee:	429a      	cmp	r2, r3
 800adf0:	d104      	bne.n	800adfc <vTaskSwitchContext+0x8c>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	605a      	str	r2, [r3, #4]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	4a0b      	ldr	r2, [pc, #44]	@ (800ae30 <vTaskSwitchContext+0xc0>)
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	4a08      	ldr	r2, [pc, #32]	@ (800ae28 <vTaskSwitchContext+0xb8>)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae0c:	4b08      	ldr	r3, [pc, #32]	@ (800ae30 <vTaskSwitchContext+0xc0>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3354      	adds	r3, #84	@ 0x54
 800ae12:	4a08      	ldr	r2, [pc, #32]	@ (800ae34 <vTaskSwitchContext+0xc4>)
 800ae14:	6013      	str	r3, [r2, #0]
}
 800ae16:	bf00      	nop
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bc80      	pop	{r7}
 800ae1e:	4770      	bx	lr
 800ae20:	20001120 	.word	0x20001120
 800ae24:	2000110c 	.word	0x2000110c
 800ae28:	20001100 	.word	0x20001100
 800ae2c:	20000c28 	.word	0x20000c28
 800ae30:	20000c24 	.word	0x20000c24
 800ae34:	20000198 	.word	0x20000198

0800ae38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10b      	bne.n	800ae60 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	60fb      	str	r3, [r7, #12]
}
 800ae5a:	bf00      	nop
 800ae5c:	bf00      	nop
 800ae5e:	e7fd      	b.n	800ae5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae60:	4b07      	ldr	r3, [pc, #28]	@ (800ae80 <vTaskPlaceOnEventList+0x48>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3318      	adds	r3, #24
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7fe fe43 	bl	8009af4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae6e:	2101      	movs	r1, #1
 800ae70:	6838      	ldr	r0, [r7, #0]
 800ae72:	f000 fc6b 	bl	800b74c <prvAddCurrentTaskToDelayedList>
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20000c24 	.word	0x20000c24

0800ae84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10b      	bne.n	800aeae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	617b      	str	r3, [r7, #20]
}
 800aea8:	bf00      	nop
 800aeaa:	bf00      	nop
 800aeac:	e7fd      	b.n	800aeaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeae:	4b0a      	ldr	r3, [pc, #40]	@ (800aed8 <vTaskPlaceOnEventListRestricted+0x54>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3318      	adds	r3, #24
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7fe fdf9 	bl	8009aae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aec2:	f04f 33ff 	mov.w	r3, #4294967295
 800aec6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	68b8      	ldr	r0, [r7, #8]
 800aecc:	f000 fc3e 	bl	800b74c <prvAddCurrentTaskToDelayedList>
	}
 800aed0:	bf00      	nop
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20000c24 	.word	0x20000c24

0800aedc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	60fb      	str	r3, [r7, #12]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	3318      	adds	r3, #24
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe fe28 	bl	8009b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af14:	4b1d      	ldr	r3, [pc, #116]	@ (800af8c <xTaskRemoveFromEventList+0xb0>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d11d      	bne.n	800af58 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	3304      	adds	r3, #4
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe fe1f 	bl	8009b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af2a:	4b19      	ldr	r3, [pc, #100]	@ (800af90 <xTaskRemoveFromEventList+0xb4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d903      	bls.n	800af3a <xTaskRemoveFromEventList+0x5e>
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af36:	4a16      	ldr	r2, [pc, #88]	@ (800af90 <xTaskRemoveFromEventList+0xb4>)
 800af38:	6013      	str	r3, [r2, #0]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af3e:	4613      	mov	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4a13      	ldr	r2, [pc, #76]	@ (800af94 <xTaskRemoveFromEventList+0xb8>)
 800af48:	441a      	add	r2, r3
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	3304      	adds	r3, #4
 800af4e:	4619      	mov	r1, r3
 800af50:	4610      	mov	r0, r2
 800af52:	f7fe fdac 	bl	8009aae <vListInsertEnd>
 800af56:	e005      	b.n	800af64 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	3318      	adds	r3, #24
 800af5c:	4619      	mov	r1, r3
 800af5e:	480e      	ldr	r0, [pc, #56]	@ (800af98 <xTaskRemoveFromEventList+0xbc>)
 800af60:	f7fe fda5 	bl	8009aae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af68:	4b0c      	ldr	r3, [pc, #48]	@ (800af9c <xTaskRemoveFromEventList+0xc0>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6e:	429a      	cmp	r2, r3
 800af70:	d905      	bls.n	800af7e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af72:	2301      	movs	r3, #1
 800af74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af76:	4b0a      	ldr	r3, [pc, #40]	@ (800afa0 <xTaskRemoveFromEventList+0xc4>)
 800af78:	2201      	movs	r2, #1
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	e001      	b.n	800af82 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800af82:	697b      	ldr	r3, [r7, #20]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3718      	adds	r7, #24
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	20001120 	.word	0x20001120
 800af90:	20001100 	.word	0x20001100
 800af94:	20000c28 	.word	0x20000c28
 800af98:	200010b8 	.word	0x200010b8
 800af9c:	20000c24 	.word	0x20000c24
 800afa0:	2000110c 	.word	0x2000110c

0800afa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afac:	4b06      	ldr	r3, [pc, #24]	@ (800afc8 <vTaskInternalSetTimeOutState+0x24>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afb4:	4b05      	ldr	r3, [pc, #20]	@ (800afcc <vTaskInternalSetTimeOutState+0x28>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	605a      	str	r2, [r3, #4]
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bc80      	pop	{r7}
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	20001110 	.word	0x20001110
 800afcc:	200010fc 	.word	0x200010fc

0800afd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b088      	sub	sp, #32
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10b      	bne.n	800aff8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	613b      	str	r3, [r7, #16]
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	e7fd      	b.n	800aff4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10b      	bne.n	800b016 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	60fb      	str	r3, [r7, #12]
}
 800b010:	bf00      	nop
 800b012:	bf00      	nop
 800b014:	e7fd      	b.n	800b012 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b016:	f001 f801 	bl	800c01c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b01a:	4b1d      	ldr	r3, [pc, #116]	@ (800b090 <xTaskCheckForTimeOut+0xc0>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b032:	d102      	bne.n	800b03a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b034:	2300      	movs	r3, #0
 800b036:	61fb      	str	r3, [r7, #28]
 800b038:	e023      	b.n	800b082 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	4b15      	ldr	r3, [pc, #84]	@ (800b094 <xTaskCheckForTimeOut+0xc4>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	429a      	cmp	r2, r3
 800b044:	d007      	beq.n	800b056 <xTaskCheckForTimeOut+0x86>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d302      	bcc.n	800b056 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b050:	2301      	movs	r3, #1
 800b052:	61fb      	str	r3, [r7, #28]
 800b054:	e015      	b.n	800b082 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d20b      	bcs.n	800b078 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff ff99 	bl	800afa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b072:	2300      	movs	r3, #0
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	e004      	b.n	800b082 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b07e:	2301      	movs	r3, #1
 800b080:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b082:	f000 fffb 	bl	800c07c <vPortExitCritical>

	return xReturn;
 800b086:	69fb      	ldr	r3, [r7, #28]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3720      	adds	r7, #32
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	200010fc 	.word	0x200010fc
 800b094:	20001110 	.word	0x20001110

0800b098 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b09c:	4b03      	ldr	r3, [pc, #12]	@ (800b0ac <vTaskMissedYield+0x14>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]
}
 800b0a2:	bf00      	nop
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bc80      	pop	{r7}
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	2000110c 	.word	0x2000110c

0800b0b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0b8:	f000 f852 	bl	800b160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0bc:	4b06      	ldr	r3, [pc, #24]	@ (800b0d8 <prvIdleTask+0x28>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d9f9      	bls.n	800b0b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0c4:	4b05      	ldr	r3, [pc, #20]	@ (800b0dc <prvIdleTask+0x2c>)
 800b0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ca:	601a      	str	r2, [r3, #0]
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0d4:	e7f0      	b.n	800b0b8 <prvIdleTask+0x8>
 800b0d6:	bf00      	nop
 800b0d8:	20000c28 	.word	0x20000c28
 800b0dc:	e000ed04 	.word	0xe000ed04

0800b0e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	607b      	str	r3, [r7, #4]
 800b0ea:	e00c      	b.n	800b106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4a12      	ldr	r2, [pc, #72]	@ (800b140 <prvInitialiseTaskLists+0x60>)
 800b0f8:	4413      	add	r3, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe fcac 	bl	8009a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3301      	adds	r3, #1
 800b104:	607b      	str	r3, [r7, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b37      	cmp	r3, #55	@ 0x37
 800b10a:	d9ef      	bls.n	800b0ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b10c:	480d      	ldr	r0, [pc, #52]	@ (800b144 <prvInitialiseTaskLists+0x64>)
 800b10e:	f7fe fca3 	bl	8009a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b112:	480d      	ldr	r0, [pc, #52]	@ (800b148 <prvInitialiseTaskLists+0x68>)
 800b114:	f7fe fca0 	bl	8009a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b118:	480c      	ldr	r0, [pc, #48]	@ (800b14c <prvInitialiseTaskLists+0x6c>)
 800b11a:	f7fe fc9d 	bl	8009a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b11e:	480c      	ldr	r0, [pc, #48]	@ (800b150 <prvInitialiseTaskLists+0x70>)
 800b120:	f7fe fc9a 	bl	8009a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b124:	480b      	ldr	r0, [pc, #44]	@ (800b154 <prvInitialiseTaskLists+0x74>)
 800b126:	f7fe fc97 	bl	8009a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b12a:	4b0b      	ldr	r3, [pc, #44]	@ (800b158 <prvInitialiseTaskLists+0x78>)
 800b12c:	4a05      	ldr	r2, [pc, #20]	@ (800b144 <prvInitialiseTaskLists+0x64>)
 800b12e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b130:	4b0a      	ldr	r3, [pc, #40]	@ (800b15c <prvInitialiseTaskLists+0x7c>)
 800b132:	4a05      	ldr	r2, [pc, #20]	@ (800b148 <prvInitialiseTaskLists+0x68>)
 800b134:	601a      	str	r2, [r3, #0]
}
 800b136:	bf00      	nop
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000c28 	.word	0x20000c28
 800b144:	20001088 	.word	0x20001088
 800b148:	2000109c 	.word	0x2000109c
 800b14c:	200010b8 	.word	0x200010b8
 800b150:	200010cc 	.word	0x200010cc
 800b154:	200010e4 	.word	0x200010e4
 800b158:	200010b0 	.word	0x200010b0
 800b15c:	200010b4 	.word	0x200010b4

0800b160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b166:	e019      	b.n	800b19c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b168:	f000 ff58 	bl	800c01c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b16c:	4b10      	ldr	r3, [pc, #64]	@ (800b1b0 <prvCheckTasksWaitingTermination+0x50>)
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3304      	adds	r3, #4
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe fcf3 	bl	8009b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b17e:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b4 <prvCheckTasksWaitingTermination+0x54>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3b01      	subs	r3, #1
 800b184:	4a0b      	ldr	r2, [pc, #44]	@ (800b1b4 <prvCheckTasksWaitingTermination+0x54>)
 800b186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b188:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b8 <prvCheckTasksWaitingTermination+0x58>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b8 <prvCheckTasksWaitingTermination+0x58>)
 800b190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b192:	f000 ff73 	bl	800c07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f810 	bl	800b1bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b19c:	4b06      	ldr	r3, [pc, #24]	@ (800b1b8 <prvCheckTasksWaitingTermination+0x58>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e1      	bne.n	800b168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	200010cc 	.word	0x200010cc
 800b1b4:	200010f8 	.word	0x200010f8
 800b1b8:	200010e0 	.word	0x200010e0

0800b1bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3354      	adds	r3, #84	@ 0x54
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f003 f871 	bl	800e2b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d108      	bne.n	800b1ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 f8e7 	bl	800c3b0 <vPortFree>
				vPortFree( pxTCB );
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f001 f8e4 	bl	800c3b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1e8:	e019      	b.n	800b21e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d103      	bne.n	800b1fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f001 f8db 	bl	800c3b0 <vPortFree>
	}
 800b1fa:	e010      	b.n	800b21e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b202:	2b02      	cmp	r3, #2
 800b204:	d00b      	beq.n	800b21e <prvDeleteTCB+0x62>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	60fb      	str	r3, [r7, #12]
}
 800b218:	bf00      	nop
 800b21a:	bf00      	nop
 800b21c:	e7fd      	b.n	800b21a <prvDeleteTCB+0x5e>
	}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b22e:	4b0e      	ldr	r3, [pc, #56]	@ (800b268 <prvResetNextTaskUnblockTime+0x40>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <prvResetNextTaskUnblockTime+0x14>
 800b238:	2301      	movs	r3, #1
 800b23a:	e000      	b.n	800b23e <prvResetNextTaskUnblockTime+0x16>
 800b23c:	2300      	movs	r3, #0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d004      	beq.n	800b24c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b242:	4b0a      	ldr	r3, [pc, #40]	@ (800b26c <prvResetNextTaskUnblockTime+0x44>)
 800b244:	f04f 32ff 	mov.w	r2, #4294967295
 800b248:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b24a:	e008      	b.n	800b25e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b24c:	4b06      	ldr	r3, [pc, #24]	@ (800b268 <prvResetNextTaskUnblockTime+0x40>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	4a04      	ldr	r2, [pc, #16]	@ (800b26c <prvResetNextTaskUnblockTime+0x44>)
 800b25c:	6013      	str	r3, [r2, #0]
}
 800b25e:	bf00      	nop
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	bc80      	pop	{r7}
 800b266:	4770      	bx	lr
 800b268:	200010b0 	.word	0x200010b0
 800b26c:	20001118 	.word	0x20001118

0800b270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b276:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a4 <xTaskGetSchedulerState+0x34>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d102      	bne.n	800b284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b27e:	2301      	movs	r3, #1
 800b280:	607b      	str	r3, [r7, #4]
 800b282:	e008      	b.n	800b296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b284:	4b08      	ldr	r3, [pc, #32]	@ (800b2a8 <xTaskGetSchedulerState+0x38>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b28c:	2302      	movs	r3, #2
 800b28e:	607b      	str	r3, [r7, #4]
 800b290:	e001      	b.n	800b296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b296:	687b      	ldr	r3, [r7, #4]
	}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bc80      	pop	{r7}
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	20001104 	.word	0x20001104
 800b2a8:	20001120 	.word	0x20001120

0800b2ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d058      	beq.n	800b374 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b380 <xTaskPriorityDisinherit+0xd4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d00b      	beq.n	800b2e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	60fb      	str	r3, [r7, #12]
}
 800b2de:	bf00      	nop
 800b2e0:	bf00      	nop
 800b2e2:	e7fd      	b.n	800b2e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	60bb      	str	r3, [r7, #8]
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	e7fd      	b.n	800b300 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b308:	1e5a      	subs	r2, r3, #1
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b316:	429a      	cmp	r2, r3
 800b318:	d02c      	beq.n	800b374 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d128      	bne.n	800b374 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	3304      	adds	r3, #4
 800b326:	4618      	mov	r0, r3
 800b328:	f7fe fc1c 	bl	8009b64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b338:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b344:	4b0f      	ldr	r3, [pc, #60]	@ (800b384 <xTaskPriorityDisinherit+0xd8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d903      	bls.n	800b354 <xTaskPriorityDisinherit+0xa8>
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	4a0c      	ldr	r2, [pc, #48]	@ (800b384 <xTaskPriorityDisinherit+0xd8>)
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4a09      	ldr	r2, [pc, #36]	@ (800b388 <xTaskPriorityDisinherit+0xdc>)
 800b362:	441a      	add	r2, r3
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	3304      	adds	r3, #4
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f7fe fb9f 	bl	8009aae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b370:	2301      	movs	r3, #1
 800b372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b374:	697b      	ldr	r3, [r7, #20]
	}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	20000c24 	.word	0x20000c24
 800b384:	20001100 	.word	0x20001100
 800b388:	20000c28 	.word	0x20000c28

0800b38c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b39a:	f000 fe3f 	bl	800c01c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b39e:	4b29      	ldr	r3, [pc, #164]	@ (800b444 <xTaskNotifyWait+0xb8>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d01c      	beq.n	800b3e6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b3ac:	4b25      	ldr	r3, [pc, #148]	@ (800b444 <xTaskNotifyWait+0xb8>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	43d2      	mvns	r2, r2
 800b3b8:	400a      	ands	r2, r1
 800b3ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b3be:	4b21      	ldr	r3, [pc, #132]	@ (800b444 <xTaskNotifyWait+0xb8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	6838      	ldr	r0, [r7, #0]
 800b3d2:	f000 f9bb 	bl	800b74c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b3d6:	4b1c      	ldr	r3, [pc, #112]	@ (800b448 <xTaskNotifyWait+0xbc>)
 800b3d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b3e6:	f000 fe49 	bl	800c07c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b3ea:	f000 fe17 	bl	800c01c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b3f4:	4b13      	ldr	r3, [pc, #76]	@ (800b444 <xTaskNotifyWait+0xb8>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b400:	4b10      	ldr	r3, [pc, #64]	@ (800b444 <xTaskNotifyWait+0xb8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d002      	beq.n	800b414 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	e00a      	b.n	800b42a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b414:	4b0b      	ldr	r3, [pc, #44]	@ (800b444 <xTaskNotifyWait+0xb8>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	43d2      	mvns	r2, r2
 800b420:	400a      	ands	r2, r1
 800b422:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800b426:	2301      	movs	r3, #1
 800b428:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b42a:	4b06      	ldr	r3, [pc, #24]	@ (800b444 <xTaskNotifyWait+0xb8>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b434:	f000 fe22 	bl	800c07c <vPortExitCritical>

		return xReturn;
 800b438:	697b      	ldr	r3, [r7, #20]
	}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3718      	adds	r7, #24
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20000c24 	.word	0x20000c24
 800b448:	e000ed04 	.word	0xe000ed04

0800b44c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08a      	sub	sp, #40	@ 0x28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	4613      	mov	r3, r2
 800b45a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b45c:	2301      	movs	r3, #1
 800b45e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10b      	bne.n	800b47e <xTaskGenericNotify+0x32>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	61bb      	str	r3, [r7, #24]
}
 800b478:	bf00      	nop
 800b47a:	bf00      	nop
 800b47c:	e7fd      	b.n	800b47a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b482:	f000 fdcb 	bl	800c01c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b49c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	d82e      	bhi.n	800b50a <xTaskGenericNotify+0xbe>
 800b4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b4 <xTaskGenericNotify+0x68>)
 800b4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b2:	bf00      	nop
 800b4b4:	0800b50b 	.word	0x0800b50b
 800b4b8:	0800b4c9 	.word	0x0800b4c9
 800b4bc:	0800b4db 	.word	0x0800b4db
 800b4c0:	0800b4eb 	.word	0x0800b4eb
 800b4c4:	0800b4f5 	.word	0x0800b4f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b4d8:	e017      	b.n	800b50a <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b4e8:	e00f      	b.n	800b50a <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b4f2:	e00a      	b.n	800b50a <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b4f4:	7ffb      	ldrb	r3, [r7, #31]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d004      	beq.n	800b504 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b502:	e001      	b.n	800b508 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 800b504:	2300      	movs	r3, #0
 800b506:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b508:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b50a:	7ffb      	ldrb	r3, [r7, #31]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d13b      	bne.n	800b588 <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	3304      	adds	r3, #4
 800b514:	4618      	mov	r0, r3
 800b516:	f7fe fb25 	bl	8009b64 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b51e:	4b1e      	ldr	r3, [pc, #120]	@ (800b598 <xTaskGenericNotify+0x14c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d903      	bls.n	800b52e <xTaskGenericNotify+0xe2>
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52a:	4a1b      	ldr	r2, [pc, #108]	@ (800b598 <xTaskGenericNotify+0x14c>)
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4a18      	ldr	r2, [pc, #96]	@ (800b59c <xTaskGenericNotify+0x150>)
 800b53c:	441a      	add	r2, r3
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	3304      	adds	r3, #4
 800b542:	4619      	mov	r1, r3
 800b544:	4610      	mov	r0, r2
 800b546:	f7fe fab2 	bl	8009aae <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00b      	beq.n	800b56a <xTaskGenericNotify+0x11e>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	617b      	str	r3, [r7, #20]
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop
 800b568:	e7fd      	b.n	800b566 <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b56a:	6a3b      	ldr	r3, [r7, #32]
 800b56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b56e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a0 <xTaskGenericNotify+0x154>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b574:	429a      	cmp	r2, r3
 800b576:	d907      	bls.n	800b588 <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b578:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a4 <xTaskGenericNotify+0x158>)
 800b57a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b588:	f000 fd78 	bl	800c07c <vPortExitCritical>

		return xReturn;
 800b58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b58e:	4618      	mov	r0, r3
 800b590:	3728      	adds	r7, #40	@ 0x28
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20001100 	.word	0x20001100
 800b59c:	20000c28 	.word	0x20000c28
 800b5a0:	20000c24 	.word	0x20000c24
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08e      	sub	sp, #56	@ 0x38
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10b      	bne.n	800b5da <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	e7fd      	b.n	800b5d6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5da:	f000 fde1 	bl	800c1a0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800b5e2:	f3ef 8211 	mrs	r2, BASEPRI
 800b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	623a      	str	r2, [r7, #32]
 800b5f8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b5fa:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b606:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61a:	2202      	movs	r2, #2
 800b61c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	2b04      	cmp	r3, #4
 800b624:	d82e      	bhi.n	800b684 <xTaskGenericNotifyFromISR+0xdc>
 800b626:	a201      	add	r2, pc, #4	@ (adr r2, 800b62c <xTaskGenericNotifyFromISR+0x84>)
 800b628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62c:	0800b685 	.word	0x0800b685
 800b630:	0800b641 	.word	0x0800b641
 800b634:	0800b653 	.word	0x0800b653
 800b638:	0800b663 	.word	0x0800b663
 800b63c:	0800b66d 	.word	0x0800b66d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b642:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	431a      	orrs	r2, r3
 800b64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b650:	e018      	b.n	800b684 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b654:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b660:	e010      	b.n	800b684 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800b66a:	e00b      	b.n	800b684 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b66c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b670:	2b02      	cmp	r3, #2
 800b672:	d004      	beq.n	800b67e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b67c:	e001      	b.n	800b682 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800b67e:	2300      	movs	r3, #0
 800b680:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800b682:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b684:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d148      	bne.n	800b71e <xTaskGenericNotifyFromISR+0x176>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00b      	beq.n	800b6ac <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	61bb      	str	r3, [r7, #24]
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	e7fd      	b.n	800b6a8 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ac:	4b21      	ldr	r3, [pc, #132]	@ (800b734 <xTaskGenericNotifyFromISR+0x18c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11d      	bne.n	800b6f0 <xTaskGenericNotifyFromISR+0x148>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe fa53 	bl	8009b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b738 <xTaskGenericNotifyFromISR+0x190>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d903      	bls.n	800b6d2 <xTaskGenericNotifyFromISR+0x12a>
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ce:	4a1a      	ldr	r2, [pc, #104]	@ (800b738 <xTaskGenericNotifyFromISR+0x190>)
 800b6d0:	6013      	str	r3, [r2, #0]
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4a17      	ldr	r2, [pc, #92]	@ (800b73c <xTaskGenericNotifyFromISR+0x194>)
 800b6e0:	441a      	add	r2, r3
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f7fe f9e0 	bl	8009aae <vListInsertEnd>
 800b6ee:	e005      	b.n	800b6fc <xTaskGenericNotifyFromISR+0x154>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	3318      	adds	r3, #24
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4812      	ldr	r0, [pc, #72]	@ (800b740 <xTaskGenericNotifyFromISR+0x198>)
 800b6f8:	f7fe f9d9 	bl	8009aae <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b700:	4b10      	ldr	r3, [pc, #64]	@ (800b744 <xTaskGenericNotifyFromISR+0x19c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b706:	429a      	cmp	r2, r3
 800b708:	d909      	bls.n	800b71e <xTaskGenericNotifyFromISR+0x176>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b70a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <xTaskGenericNotifyFromISR+0x170>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b712:	2201      	movs	r2, #1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e002      	b.n	800b71e <xTaskGenericNotifyFromISR+0x176>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b718:	4b0b      	ldr	r3, [pc, #44]	@ (800b748 <xTaskGenericNotifyFromISR+0x1a0>)
 800b71a:	2201      	movs	r2, #1
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b720:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f383 8811 	msr	BASEPRI, r3
}
 800b728:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3738      	adds	r7, #56	@ 0x38
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	20001120 	.word	0x20001120
 800b738:	20001100 	.word	0x20001100
 800b73c:	20000c28 	.word	0x20000c28
 800b740:	200010b8 	.word	0x200010b8
 800b744:	20000c24 	.word	0x20000c24
 800b748:	2000110c 	.word	0x2000110c

0800b74c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b756:	4b21      	ldr	r3, [pc, #132]	@ (800b7dc <prvAddCurrentTaskToDelayedList+0x90>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b75c:	4b20      	ldr	r3, [pc, #128]	@ (800b7e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3304      	adds	r3, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7fe f9fe 	bl	8009b64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d10a      	bne.n	800b786 <prvAddCurrentTaskToDelayedList+0x3a>
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d007      	beq.n	800b786 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b776:	4b1a      	ldr	r3, [pc, #104]	@ (800b7e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4619      	mov	r1, r3
 800b77e:	4819      	ldr	r0, [pc, #100]	@ (800b7e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b780:	f7fe f995 	bl	8009aae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b784:	e026      	b.n	800b7d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4413      	add	r3, r2
 800b78c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b78e:	4b14      	ldr	r3, [pc, #80]	@ (800b7e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d209      	bcs.n	800b7b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b79e:	4b12      	ldr	r3, [pc, #72]	@ (800b7e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f7fe f9a2 	bl	8009af4 <vListInsert>
}
 800b7b0:	e010      	b.n	800b7d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ec <prvAddCurrentTaskToDelayedList+0xa0>)
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f7fe f998 	bl	8009af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d202      	bcs.n	800b7d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7ce:	4a08      	ldr	r2, [pc, #32]	@ (800b7f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6013      	str	r3, [r2, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	200010fc 	.word	0x200010fc
 800b7e0:	20000c24 	.word	0x20000c24
 800b7e4:	200010e4 	.word	0x200010e4
 800b7e8:	200010b4 	.word	0x200010b4
 800b7ec:	200010b0 	.word	0x200010b0
 800b7f0:	20001118 	.word	0x20001118

0800b7f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08a      	sub	sp, #40	@ 0x28
 800b7f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7fe:	f000 fad9 	bl	800bdb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b802:	4b1d      	ldr	r3, [pc, #116]	@ (800b878 <xTimerCreateTimerTask+0x84>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d021      	beq.n	800b84e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b80e:	2300      	movs	r3, #0
 800b810:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b812:	1d3a      	adds	r2, r7, #4
 800b814:	f107 0108 	add.w	r1, r7, #8
 800b818:	f107 030c 	add.w	r3, r7, #12
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fe f901 	bl	8009a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	9202      	str	r2, [sp, #8]
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	2302      	movs	r3, #2
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	2300      	movs	r3, #0
 800b832:	460a      	mov	r2, r1
 800b834:	4911      	ldr	r1, [pc, #68]	@ (800b87c <xTimerCreateTimerTask+0x88>)
 800b836:	4812      	ldr	r0, [pc, #72]	@ (800b880 <xTimerCreateTimerTask+0x8c>)
 800b838:	f7fe feb4 	bl	800a5a4 <xTaskCreateStatic>
 800b83c:	4603      	mov	r3, r0
 800b83e:	4a11      	ldr	r2, [pc, #68]	@ (800b884 <xTimerCreateTimerTask+0x90>)
 800b840:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b842:	4b10      	ldr	r3, [pc, #64]	@ (800b884 <xTimerCreateTimerTask+0x90>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b84a:	2301      	movs	r3, #1
 800b84c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10b      	bne.n	800b86c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	613b      	str	r3, [r7, #16]
}
 800b866:	bf00      	nop
 800b868:	bf00      	nop
 800b86a:	e7fd      	b.n	800b868 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b86c:	697b      	ldr	r3, [r7, #20]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20001154 	.word	0x20001154
 800b87c:	0800f2a4 	.word	0x0800f2a4
 800b880:	0800b9a9 	.word	0x0800b9a9
 800b884:	20001158 	.word	0x20001158

0800b888 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08a      	sub	sp, #40	@ 0x28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b896:	2300      	movs	r3, #0
 800b898:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10b      	bne.n	800b8b8 <xTimerGenericCommand+0x30>
	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	623b      	str	r3, [r7, #32]
}
 800b8b2:	bf00      	nop
 800b8b4:	bf00      	nop
 800b8b6:	e7fd      	b.n	800b8b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b8b8:	4b19      	ldr	r3, [pc, #100]	@ (800b920 <xTimerGenericCommand+0x98>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d02a      	beq.n	800b916 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b05      	cmp	r3, #5
 800b8d0:	dc18      	bgt.n	800b904 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b8d2:	f7ff fccd 	bl	800b270 <xTaskGetSchedulerState>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d109      	bne.n	800b8f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8dc:	4b10      	ldr	r3, [pc, #64]	@ (800b920 <xTimerGenericCommand+0x98>)
 800b8de:	6818      	ldr	r0, [r3, #0]
 800b8e0:	f107 0110 	add.w	r1, r7, #16
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8e8:	f7fe fa70 	bl	8009dcc <xQueueGenericSend>
 800b8ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800b8ee:	e012      	b.n	800b916 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b920 <xTimerGenericCommand+0x98>)
 800b8f2:	6818      	ldr	r0, [r3, #0]
 800b8f4:	f107 0110 	add.w	r1, r7, #16
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f7fe fa66 	bl	8009dcc <xQueueGenericSend>
 800b900:	6278      	str	r0, [r7, #36]	@ 0x24
 800b902:	e008      	b.n	800b916 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b904:	4b06      	ldr	r3, [pc, #24]	@ (800b920 <xTimerGenericCommand+0x98>)
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	f107 0110 	add.w	r1, r7, #16
 800b90c:	2300      	movs	r3, #0
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	f7fe fb5e 	bl	8009fd0 <xQueueGenericSendFromISR>
 800b914:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3728      	adds	r7, #40	@ 0x28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20001154 	.word	0x20001154

0800b924 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b088      	sub	sp, #32
 800b928:	af02      	add	r7, sp, #8
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b92e:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a4 <prvProcessExpiredTimer+0x80>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	3304      	adds	r3, #4
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe f911 	bl	8009b64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	69db      	ldr	r3, [r3, #28]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d123      	bne.n	800b992 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	699a      	ldr	r2, [r3, #24]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	18d1      	adds	r1, r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	6978      	ldr	r0, [r7, #20]
 800b958:	f000 f8cc 	bl	800baf4 <prvInsertTimerInActiveList>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d017      	beq.n	800b992 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b962:	2300      	movs	r3, #0
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	2300      	movs	r3, #0
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	2100      	movs	r1, #0
 800b96c:	6978      	ldr	r0, [r7, #20]
 800b96e:	f7ff ff8b 	bl	800b888 <xTimerGenericCommand>
 800b972:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10b      	bne.n	800b992 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	60fb      	str	r3, [r7, #12]
}
 800b98c:	bf00      	nop
 800b98e:	bf00      	nop
 800b990:	e7fd      	b.n	800b98e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b996:	6978      	ldr	r0, [r7, #20]
 800b998:	4798      	blx	r3
}
 800b99a:	bf00      	nop
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	2000114c 	.word	0x2000114c

0800b9a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9b0:	f107 0308 	add.w	r3, r7, #8
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 f859 	bl	800ba6c <prvGetNextExpireTime>
 800b9ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	4619      	mov	r1, r3
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 f805 	bl	800b9d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9c6:	f000 f8d7 	bl	800bb78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9ca:	bf00      	nop
 800b9cc:	e7f0      	b.n	800b9b0 <prvTimerTask+0x8>
	...

0800b9d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9da:	f7ff f83d 	bl	800aa58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9de:	f107 0308 	add.w	r3, r7, #8
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f866 	bl	800bab4 <prvSampleTimeNow>
 800b9e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d130      	bne.n	800ba52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <prvProcessTimerOrBlockTask+0x3c>
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d806      	bhi.n	800ba0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9fe:	f7ff f839 	bl	800aa74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba02:	68f9      	ldr	r1, [r7, #12]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff ff8d 	bl	800b924 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba0a:	e024      	b.n	800ba56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d008      	beq.n	800ba24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba12:	4b13      	ldr	r3, [pc, #76]	@ (800ba60 <prvProcessTimerOrBlockTask+0x90>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bf0c      	ite	eq
 800ba1c:	2301      	moveq	r3, #1
 800ba1e:	2300      	movne	r3, #0
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba24:	4b0f      	ldr	r3, [pc, #60]	@ (800ba64 <prvProcessTimerOrBlockTask+0x94>)
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4619      	mov	r1, r3
 800ba32:	f7fe fd83 	bl	800a53c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba36:	f7ff f81d 	bl	800aa74 <xTaskResumeAll>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba40:	4b09      	ldr	r3, [pc, #36]	@ (800ba68 <prvProcessTimerOrBlockTask+0x98>)
 800ba42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	f3bf 8f6f 	isb	sy
}
 800ba50:	e001      	b.n	800ba56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba52:	f7ff f80f 	bl	800aa74 <xTaskResumeAll>
}
 800ba56:	bf00      	nop
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20001150 	.word	0x20001150
 800ba64:	20001154 	.word	0x20001154
 800ba68:	e000ed04 	.word	0xe000ed04

0800ba6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba74:	4b0e      	ldr	r3, [pc, #56]	@ (800bab0 <prvGetNextExpireTime+0x44>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bf0c      	ite	eq
 800ba7e:	2301      	moveq	r3, #1
 800ba80:	2300      	movne	r3, #0
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d105      	bne.n	800ba9e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba92:	4b07      	ldr	r3, [pc, #28]	@ (800bab0 <prvGetNextExpireTime+0x44>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	e001      	b.n	800baa2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800baa2:	68fb      	ldr	r3, [r7, #12]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bc80      	pop	{r7}
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	2000114c 	.word	0x2000114c

0800bab4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800babc:	f7ff f878 	bl	800abb0 <xTaskGetTickCount>
 800bac0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bac2:	4b0b      	ldr	r3, [pc, #44]	@ (800baf0 <prvSampleTimeNow+0x3c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d205      	bcs.n	800bad8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bacc:	f000 f910 	bl	800bcf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	e002      	b.n	800bade <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bade:	4a04      	ldr	r2, [pc, #16]	@ (800baf0 <prvSampleTimeNow+0x3c>)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bae4:	68fb      	ldr	r3, [r7, #12]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	2000115c 	.word	0x2000115c

0800baf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
 800bb00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d812      	bhi.n	800bb40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	1ad2      	subs	r2, r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d302      	bcc.n	800bb2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	617b      	str	r3, [r7, #20]
 800bb2c:	e01b      	b.n	800bb66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb2e:	4b10      	ldr	r3, [pc, #64]	@ (800bb70 <prvInsertTimerInActiveList+0x7c>)
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3304      	adds	r3, #4
 800bb36:	4619      	mov	r1, r3
 800bb38:	4610      	mov	r0, r2
 800bb3a:	f7fd ffdb 	bl	8009af4 <vListInsert>
 800bb3e:	e012      	b.n	800bb66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d206      	bcs.n	800bb56 <prvInsertTimerInActiveList+0x62>
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d302      	bcc.n	800bb56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb50:	2301      	movs	r3, #1
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	e007      	b.n	800bb66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb56:	4b07      	ldr	r3, [pc, #28]	@ (800bb74 <prvInsertTimerInActiveList+0x80>)
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	4619      	mov	r1, r3
 800bb60:	4610      	mov	r0, r2
 800bb62:	f7fd ffc7 	bl	8009af4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb66:	697b      	ldr	r3, [r7, #20]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20001150 	.word	0x20001150
 800bb74:	2000114c 	.word	0x2000114c

0800bb78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b08e      	sub	sp, #56	@ 0x38
 800bb7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb7e:	e0a5      	b.n	800bccc <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	da19      	bge.n	800bbba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb86:	1d3b      	adds	r3, r7, #4
 800bb88:	3304      	adds	r3, #4
 800bb8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	61fb      	str	r3, [r7, #28]
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	e7fd      	b.n	800bba6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbb0:	6850      	ldr	r0, [r2, #4]
 800bbb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbb4:	6892      	ldr	r2, [r2, #8]
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f2c0 8085 	blt.w	800bccc <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d004      	beq.n	800bbd8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fd ffc6 	bl	8009b64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbd8:	463b      	mov	r3, r7
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff ff6a 	bl	800bab4 <prvSampleTimeNow>
 800bbe0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b09      	cmp	r3, #9
 800bbe6:	d86c      	bhi.n	800bcc2 <prvProcessReceivedCommands+0x14a>
 800bbe8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf0 <prvProcessReceivedCommands+0x78>)
 800bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbee:	bf00      	nop
 800bbf0:	0800bc19 	.word	0x0800bc19
 800bbf4:	0800bc19 	.word	0x0800bc19
 800bbf8:	0800bc19 	.word	0x0800bc19
 800bbfc:	0800bcc3 	.word	0x0800bcc3
 800bc00:	0800bc77 	.word	0x0800bc77
 800bc04:	0800bcb1 	.word	0x0800bcb1
 800bc08:	0800bc19 	.word	0x0800bc19
 800bc0c:	0800bc19 	.word	0x0800bc19
 800bc10:	0800bcc3 	.word	0x0800bcc3
 800bc14:	0800bc77 	.word	0x0800bc77
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	18d1      	adds	r1, r2, r3
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc26:	f7ff ff65 	bl	800baf4 <prvInsertTimerInActiveList>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d04a      	beq.n	800bcc6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc36:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d142      	bne.n	800bcc6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	441a      	add	r2, r3
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc52:	f7ff fe19 	bl	800b888 <xTimerGenericCommand>
 800bc56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d133      	bne.n	800bcc6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	61bb      	str	r3, [r7, #24]
}
 800bc70:	bf00      	nop
 800bc72:	bf00      	nop
 800bc74:	e7fd      	b.n	800bc72 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10b      	bne.n	800bc9c <prvProcessReceivedCommands+0x124>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	617b      	str	r3, [r7, #20]
}
 800bc96:	bf00      	nop
 800bc98:	bf00      	nop
 800bc9a:	e7fd      	b.n	800bc98 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9e:	699a      	ldr	r2, [r3, #24]
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	18d1      	adds	r1, r2, r3
 800bca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcaa:	f7ff ff23 	bl	800baf4 <prvInsertTimerInActiveList>
					break;
 800bcae:	e00d      	b.n	800bccc <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d107      	bne.n	800bcca <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800bcba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcbc:	f000 fb78 	bl	800c3b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bcc0:	e003      	b.n	800bcca <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800bcc2:	bf00      	nop
 800bcc4:	e002      	b.n	800bccc <prvProcessReceivedCommands+0x154>
					break;
 800bcc6:	bf00      	nop
 800bcc8:	e000      	b.n	800bccc <prvProcessReceivedCommands+0x154>
					break;
 800bcca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bccc:	4b07      	ldr	r3, [pc, #28]	@ (800bcec <prvProcessReceivedCommands+0x174>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	1d39      	adds	r1, r7, #4
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe fa17 	bl	800a108 <xQueueReceive>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f47f af4f 	bne.w	800bb80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	3730      	adds	r7, #48	@ 0x30
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20001154 	.word	0x20001154

0800bcf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcf6:	e046      	b.n	800bd86 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcf8:	4b2c      	ldr	r3, [pc, #176]	@ (800bdac <prvSwitchTimerLists+0xbc>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd02:	4b2a      	ldr	r3, [pc, #168]	@ (800bdac <prvSwitchTimerLists+0xbc>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fd ff27 	bl	8009b64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d12f      	bne.n	800bd86 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d90e      	bls.n	800bd56 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd44:	4b19      	ldr	r3, [pc, #100]	@ (800bdac <prvSwitchTimerLists+0xbc>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7fd fed0 	bl	8009af4 <vListInsert>
 800bd54:	e017      	b.n	800bd86 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd56:	2300      	movs	r3, #0
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	2100      	movs	r1, #0
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f7ff fd91 	bl	800b888 <xTimerGenericCommand>
 800bd66:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10b      	bne.n	800bd86 <prvSwitchTimerLists+0x96>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	603b      	str	r3, [r7, #0]
}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	e7fd      	b.n	800bd82 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd86:	4b09      	ldr	r3, [pc, #36]	@ (800bdac <prvSwitchTimerLists+0xbc>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1b3      	bne.n	800bcf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd90:	4b06      	ldr	r3, [pc, #24]	@ (800bdac <prvSwitchTimerLists+0xbc>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd96:	4b06      	ldr	r3, [pc, #24]	@ (800bdb0 <prvSwitchTimerLists+0xc0>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a04      	ldr	r2, [pc, #16]	@ (800bdac <prvSwitchTimerLists+0xbc>)
 800bd9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd9e:	4a04      	ldr	r2, [pc, #16]	@ (800bdb0 <prvSwitchTimerLists+0xc0>)
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	6013      	str	r3, [r2, #0]
}
 800bda4:	bf00      	nop
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	2000114c 	.word	0x2000114c
 800bdb0:	20001150 	.word	0x20001150

0800bdb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdba:	f000 f92f 	bl	800c01c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdbe:	4b15      	ldr	r3, [pc, #84]	@ (800be14 <prvCheckForValidListAndQueue+0x60>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d120      	bne.n	800be08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bdc6:	4814      	ldr	r0, [pc, #80]	@ (800be18 <prvCheckForValidListAndQueue+0x64>)
 800bdc8:	f7fd fe46 	bl	8009a58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bdcc:	4813      	ldr	r0, [pc, #76]	@ (800be1c <prvCheckForValidListAndQueue+0x68>)
 800bdce:	f7fd fe43 	bl	8009a58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdd2:	4b13      	ldr	r3, [pc, #76]	@ (800be20 <prvCheckForValidListAndQueue+0x6c>)
 800bdd4:	4a10      	ldr	r2, [pc, #64]	@ (800be18 <prvCheckForValidListAndQueue+0x64>)
 800bdd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bdd8:	4b12      	ldr	r3, [pc, #72]	@ (800be24 <prvCheckForValidListAndQueue+0x70>)
 800bdda:	4a10      	ldr	r2, [pc, #64]	@ (800be1c <prvCheckForValidListAndQueue+0x68>)
 800bddc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bdde:	2300      	movs	r3, #0
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	4b11      	ldr	r3, [pc, #68]	@ (800be28 <prvCheckForValidListAndQueue+0x74>)
 800bde4:	4a11      	ldr	r2, [pc, #68]	@ (800be2c <prvCheckForValidListAndQueue+0x78>)
 800bde6:	2110      	movs	r1, #16
 800bde8:	200a      	movs	r0, #10
 800bdea:	f7fd ff4f 	bl	8009c8c <xQueueGenericCreateStatic>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	4a08      	ldr	r2, [pc, #32]	@ (800be14 <prvCheckForValidListAndQueue+0x60>)
 800bdf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bdf4:	4b07      	ldr	r3, [pc, #28]	@ (800be14 <prvCheckForValidListAndQueue+0x60>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d005      	beq.n	800be08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bdfc:	4b05      	ldr	r3, [pc, #20]	@ (800be14 <prvCheckForValidListAndQueue+0x60>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	490b      	ldr	r1, [pc, #44]	@ (800be30 <prvCheckForValidListAndQueue+0x7c>)
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fb72 	bl	800a4ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be08:	f000 f938 	bl	800c07c <vPortExitCritical>
}
 800be0c:	bf00      	nop
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	20001154 	.word	0x20001154
 800be18:	20001124 	.word	0x20001124
 800be1c:	20001138 	.word	0x20001138
 800be20:	2000114c 	.word	0x2000114c
 800be24:	20001150 	.word	0x20001150
 800be28:	20001200 	.word	0x20001200
 800be2c:	20001160 	.word	0x20001160
 800be30:	0800f2ac 	.word	0x0800f2ac

0800be34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3b04      	subs	r3, #4
 800be44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3b04      	subs	r3, #4
 800be52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	f023 0201 	bic.w	r2, r3, #1
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3b04      	subs	r3, #4
 800be62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be64:	4a08      	ldr	r2, [pc, #32]	@ (800be88 <pxPortInitialiseStack+0x54>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3b14      	subs	r3, #20
 800be6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	3b20      	subs	r3, #32
 800be7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be7c:	68fb      	ldr	r3, [r7, #12]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	bc80      	pop	{r7}
 800be86:	4770      	bx	lr
 800be88:	0800be8d 	.word	0x0800be8d

0800be8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800be92:	2300      	movs	r3, #0
 800be94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be96:	4b12      	ldr	r3, [pc, #72]	@ (800bee0 <prvTaskExitError+0x54>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9e:	d00b      	beq.n	800beb8 <prvTaskExitError+0x2c>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	60fb      	str	r3, [r7, #12]
}
 800beb2:	bf00      	nop
 800beb4:	bf00      	nop
 800beb6:	e7fd      	b.n	800beb4 <prvTaskExitError+0x28>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	60bb      	str	r3, [r7, #8]
}
 800beca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800becc:	bf00      	nop
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d0fc      	beq.n	800bece <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	bc80      	pop	{r7}
 800bede:	4770      	bx	lr
 800bee0:	20000120 	.word	0x20000120
	...

0800bef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bef0:	4b07      	ldr	r3, [pc, #28]	@ (800bf10 <pxCurrentTCBConst2>)
 800bef2:	6819      	ldr	r1, [r3, #0]
 800bef4:	6808      	ldr	r0, [r1, #0]
 800bef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800befa:	f380 8809 	msr	PSP, r0
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f04f 0000 	mov.w	r0, #0
 800bf06:	f380 8811 	msr	BASEPRI, r0
 800bf0a:	f04e 0e0d 	orr.w	lr, lr, #13
 800bf0e:	4770      	bx	lr

0800bf10 <pxCurrentTCBConst2>:
 800bf10:	20000c24 	.word	0x20000c24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop

0800bf18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800bf18:	4806      	ldr	r0, [pc, #24]	@ (800bf34 <prvPortStartFirstTask+0x1c>)
 800bf1a:	6800      	ldr	r0, [r0, #0]
 800bf1c:	6800      	ldr	r0, [r0, #0]
 800bf1e:	f380 8808 	msr	MSP, r0
 800bf22:	b662      	cpsie	i
 800bf24:	b661      	cpsie	f
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	df00      	svc	0
 800bf30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf32:	bf00      	nop
 800bf34:	e000ed08 	.word	0xe000ed08

0800bf38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf3e:	4b32      	ldr	r3, [pc, #200]	@ (800c008 <xPortStartScheduler+0xd0>)
 800bf40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	22ff      	movs	r2, #255	@ 0xff
 800bf4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	4b2a      	ldr	r3, [pc, #168]	@ (800c00c <xPortStartScheduler+0xd4>)
 800bf64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf66:	4b2a      	ldr	r3, [pc, #168]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bf68:	2207      	movs	r2, #7
 800bf6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf6c:	e009      	b.n	800bf82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bf6e:	4b28      	ldr	r3, [pc, #160]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3b01      	subs	r3, #1
 800bf74:	4a26      	ldr	r2, [pc, #152]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bf76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf78:	78fb      	ldrb	r3, [r7, #3]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf82:	78fb      	ldrb	r3, [r7, #3]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf8a:	2b80      	cmp	r3, #128	@ 0x80
 800bf8c:	d0ef      	beq.n	800bf6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf8e:	4b20      	ldr	r3, [pc, #128]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f1c3 0307 	rsb	r3, r3, #7
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d00b      	beq.n	800bfb2 <xPortStartScheduler+0x7a>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	60bb      	str	r3, [r7, #8]
}
 800bfac:	bf00      	nop
 800bfae:	bf00      	nop
 800bfb0:	e7fd      	b.n	800bfae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfb2:	4b17      	ldr	r3, [pc, #92]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	021b      	lsls	r3, r3, #8
 800bfb8:	4a15      	ldr	r2, [pc, #84]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bfba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfbc:	4b14      	ldr	r3, [pc, #80]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bfc4:	4a12      	ldr	r2, [pc, #72]	@ (800c010 <xPortStartScheduler+0xd8>)
 800bfc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfd0:	4b10      	ldr	r3, [pc, #64]	@ (800c014 <xPortStartScheduler+0xdc>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a0f      	ldr	r2, [pc, #60]	@ (800c014 <xPortStartScheduler+0xdc>)
 800bfd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bfda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfdc:	4b0d      	ldr	r3, [pc, #52]	@ (800c014 <xPortStartScheduler+0xdc>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a0c      	ldr	r2, [pc, #48]	@ (800c014 <xPortStartScheduler+0xdc>)
 800bfe2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bfe6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfe8:	f000 f8b8 	bl	800c15c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfec:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <xPortStartScheduler+0xe0>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bff2:	f7ff ff91 	bl	800bf18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bff6:	f7fe febb 	bl	800ad70 <vTaskSwitchContext>
	prvTaskExitError();
 800bffa:	f7ff ff47 	bl	800be8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	e000e400 	.word	0xe000e400
 800c00c:	20001250 	.word	0x20001250
 800c010:	20001254 	.word	0x20001254
 800c014:	e000ed20 	.word	0xe000ed20
 800c018:	20000120 	.word	0x20000120

0800c01c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	607b      	str	r3, [r7, #4]
}
 800c034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c036:	4b0f      	ldr	r3, [pc, #60]	@ (800c074 <vPortEnterCritical+0x58>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3301      	adds	r3, #1
 800c03c:	4a0d      	ldr	r2, [pc, #52]	@ (800c074 <vPortEnterCritical+0x58>)
 800c03e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c040:	4b0c      	ldr	r3, [pc, #48]	@ (800c074 <vPortEnterCritical+0x58>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d110      	bne.n	800c06a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c048:	4b0b      	ldr	r3, [pc, #44]	@ (800c078 <vPortEnterCritical+0x5c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00b      	beq.n	800c06a <vPortEnterCritical+0x4e>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	603b      	str	r3, [r7, #0]
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop
 800c068:	e7fd      	b.n	800c066 <vPortEnterCritical+0x4a>
	}
}
 800c06a:	bf00      	nop
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	bc80      	pop	{r7}
 800c072:	4770      	bx	lr
 800c074:	20000120 	.word	0x20000120
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c082:	4b12      	ldr	r3, [pc, #72]	@ (800c0cc <vPortExitCritical+0x50>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10b      	bne.n	800c0a2 <vPortExitCritical+0x26>
	__asm volatile
 800c08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	607b      	str	r3, [r7, #4]
}
 800c09c:	bf00      	nop
 800c09e:	bf00      	nop
 800c0a0:	e7fd      	b.n	800c09e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c0cc <vPortExitCritical+0x50>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	4a08      	ldr	r2, [pc, #32]	@ (800c0cc <vPortExitCritical+0x50>)
 800c0aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0ac:	4b07      	ldr	r3, [pc, #28]	@ (800c0cc <vPortExitCritical+0x50>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d105      	bne.n	800c0c0 <vPortExitCritical+0x44>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	f383 8811 	msr	BASEPRI, r3
}
 800c0be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bc80      	pop	{r7}
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	20000120 	.word	0x20000120

0800c0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0d0:	f3ef 8009 	mrs	r0, PSP
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	4b0d      	ldr	r3, [pc, #52]	@ (800c110 <pxCurrentTCBConst>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c0e0:	6010      	str	r0, [r2, #0]
 800c0e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c0e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0ea:	f380 8811 	msr	BASEPRI, r0
 800c0ee:	f7fe fe3f 	bl	800ad70 <vTaskSwitchContext>
 800c0f2:	f04f 0000 	mov.w	r0, #0
 800c0f6:	f380 8811 	msr	BASEPRI, r0
 800c0fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c0fe:	6819      	ldr	r1, [r3, #0]
 800c100:	6808      	ldr	r0, [r1, #0]
 800c102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c106:	f380 8809 	msr	PSP, r0
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	4770      	bx	lr

0800c110 <pxCurrentTCBConst>:
 800c110:	20000c24 	.word	0x20000c24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop

0800c118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	607b      	str	r3, [r7, #4]
}
 800c130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c132:	f7fe fd5d 	bl	800abf0 <xTaskIncrementTick>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c13c:	4b06      	ldr	r3, [pc, #24]	@ (800c158 <SysTick_Handler+0x40>)
 800c13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	2300      	movs	r3, #0
 800c146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	f383 8811 	msr	BASEPRI, r3
}
 800c14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c15c:	b480      	push	{r7}
 800c15e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c160:	4b0a      	ldr	r3, [pc, #40]	@ (800c18c <vPortSetupTimerInterrupt+0x30>)
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c166:	4b0a      	ldr	r3, [pc, #40]	@ (800c190 <vPortSetupTimerInterrupt+0x34>)
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c16c:	4b09      	ldr	r3, [pc, #36]	@ (800c194 <vPortSetupTimerInterrupt+0x38>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a09      	ldr	r2, [pc, #36]	@ (800c198 <vPortSetupTimerInterrupt+0x3c>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	099b      	lsrs	r3, r3, #6
 800c178:	4a08      	ldr	r2, [pc, #32]	@ (800c19c <vPortSetupTimerInterrupt+0x40>)
 800c17a:	3b01      	subs	r3, #1
 800c17c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c17e:	4b03      	ldr	r3, [pc, #12]	@ (800c18c <vPortSetupTimerInterrupt+0x30>)
 800c180:	2207      	movs	r2, #7
 800c182:	601a      	str	r2, [r3, #0]
}
 800c184:	bf00      	nop
 800c186:	46bd      	mov	sp, r7
 800c188:	bc80      	pop	{r7}
 800c18a:	4770      	bx	lr
 800c18c:	e000e010 	.word	0xe000e010
 800c190:	e000e018 	.word	0xe000e018
 800c194:	20000004 	.word	0x20000004
 800c198:	10624dd3 	.word	0x10624dd3
 800c19c:	e000e014 	.word	0xe000e014

0800c1a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1a6:	f3ef 8305 	mrs	r3, IPSR
 800c1aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b0f      	cmp	r3, #15
 800c1b0:	d915      	bls.n	800c1de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1b2:	4a17      	ldr	r2, [pc, #92]	@ (800c210 <vPortValidateInterruptPriority+0x70>)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1bc:	4b15      	ldr	r3, [pc, #84]	@ (800c214 <vPortValidateInterruptPriority+0x74>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	7afa      	ldrb	r2, [r7, #11]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d20b      	bcs.n	800c1de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	607b      	str	r3, [r7, #4]
}
 800c1d8:	bf00      	nop
 800c1da:	bf00      	nop
 800c1dc:	e7fd      	b.n	800c1da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1de:	4b0e      	ldr	r3, [pc, #56]	@ (800c218 <vPortValidateInterruptPriority+0x78>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c21c <vPortValidateInterruptPriority+0x7c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d90b      	bls.n	800c206 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	603b      	str	r3, [r7, #0]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <vPortValidateInterruptPriority+0x62>
	}
 800c206:	bf00      	nop
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bc80      	pop	{r7}
 800c20e:	4770      	bx	lr
 800c210:	e000e3f0 	.word	0xe000e3f0
 800c214:	20001250 	.word	0x20001250
 800c218:	e000ed0c 	.word	0xe000ed0c
 800c21c:	20001254 	.word	0x20001254

0800c220 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08a      	sub	sp, #40	@ 0x28
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c228:	2300      	movs	r3, #0
 800c22a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c22c:	f7fe fc14 	bl	800aa58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c230:	4b5a      	ldr	r3, [pc, #360]	@ (800c39c <pvPortMalloc+0x17c>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d101      	bne.n	800c23c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c238:	f000 f916 	bl	800c468 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c23c:	4b58      	ldr	r3, [pc, #352]	@ (800c3a0 <pvPortMalloc+0x180>)
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4013      	ands	r3, r2
 800c244:	2b00      	cmp	r3, #0
 800c246:	f040 8090 	bne.w	800c36a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d01e      	beq.n	800c28e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c250:	2208      	movs	r2, #8
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4413      	add	r3, r2
 800c256:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f003 0307 	and.w	r3, r3, #7
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d015      	beq.n	800c28e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f023 0307 	bic.w	r3, r3, #7
 800c268:	3308      	adds	r3, #8
 800c26a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f003 0307 	and.w	r3, r3, #7
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00b      	beq.n	800c28e <pvPortMalloc+0x6e>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	617b      	str	r3, [r7, #20]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d06a      	beq.n	800c36a <pvPortMalloc+0x14a>
 800c294:	4b43      	ldr	r3, [pc, #268]	@ (800c3a4 <pvPortMalloc+0x184>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d865      	bhi.n	800c36a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c29e:	4b42      	ldr	r3, [pc, #264]	@ (800c3a8 <pvPortMalloc+0x188>)
 800c2a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2a2:	4b41      	ldr	r3, [pc, #260]	@ (800c3a8 <pvPortMalloc+0x188>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2a8:	e004      	b.n	800c2b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d903      	bls.n	800c2c6 <pvPortMalloc+0xa6>
 800c2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1f1      	bne.n	800c2aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2c6:	4b35      	ldr	r3, [pc, #212]	@ (800c39c <pvPortMalloc+0x17c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d04c      	beq.n	800c36a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2d0:	6a3b      	ldr	r3, [r7, #32]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2208      	movs	r2, #8
 800c2d6:	4413      	add	r3, r2
 800c2d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	1ad2      	subs	r2, r2, r3
 800c2ea:	2308      	movs	r3, #8
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d920      	bls.n	800c334 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4413      	add	r3, r2
 800c2f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	f003 0307 	and.w	r3, r3, #7
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00b      	beq.n	800c31c <pvPortMalloc+0xfc>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	613b      	str	r3, [r7, #16]
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	e7fd      	b.n	800c318 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	1ad2      	subs	r2, r2, r3
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c32e:	69b8      	ldr	r0, [r7, #24]
 800c330:	f000 f8fc 	bl	800c52c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c334:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a4 <pvPortMalloc+0x184>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	4a19      	ldr	r2, [pc, #100]	@ (800c3a4 <pvPortMalloc+0x184>)
 800c340:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c342:	4b18      	ldr	r3, [pc, #96]	@ (800c3a4 <pvPortMalloc+0x184>)
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	4b19      	ldr	r3, [pc, #100]	@ (800c3ac <pvPortMalloc+0x18c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d203      	bcs.n	800c356 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c34e:	4b15      	ldr	r3, [pc, #84]	@ (800c3a4 <pvPortMalloc+0x184>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a16      	ldr	r2, [pc, #88]	@ (800c3ac <pvPortMalloc+0x18c>)
 800c354:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	4b11      	ldr	r3, [pc, #68]	@ (800c3a0 <pvPortMalloc+0x180>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	431a      	orrs	r2, r3
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c36a:	f7fe fb83 	bl	800aa74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	f003 0307 	and.w	r3, r3, #7
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <pvPortMalloc+0x170>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	60fb      	str	r3, [r7, #12]
}
 800c38a:	bf00      	nop
 800c38c:	bf00      	nop
 800c38e:	e7fd      	b.n	800c38c <pvPortMalloc+0x16c>
	return pvReturn;
 800c390:	69fb      	ldr	r3, [r7, #28]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3728      	adds	r7, #40	@ 0x28
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20001e60 	.word	0x20001e60
 800c3a0:	20001e6c 	.word	0x20001e6c
 800c3a4:	20001e64 	.word	0x20001e64
 800c3a8:	20001e58 	.word	0x20001e58
 800c3ac:	20001e68 	.word	0x20001e68

0800c3b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d04a      	beq.n	800c458 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3c2:	2308      	movs	r3, #8
 800c3c4:	425b      	negs	r3, r3
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	4b22      	ldr	r3, [pc, #136]	@ (800c460 <vPortFree+0xb0>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4013      	ands	r3, r2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10b      	bne.n	800c3f6 <vPortFree+0x46>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	60fb      	str	r3, [r7, #12]
}
 800c3f0:	bf00      	nop
 800c3f2:	bf00      	nop
 800c3f4:	e7fd      	b.n	800c3f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00b      	beq.n	800c416 <vPortFree+0x66>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	60bb      	str	r3, [r7, #8]
}
 800c410:	bf00      	nop
 800c412:	bf00      	nop
 800c414:	e7fd      	b.n	800c412 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	685a      	ldr	r2, [r3, #4]
 800c41a:	4b11      	ldr	r3, [pc, #68]	@ (800c460 <vPortFree+0xb0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4013      	ands	r3, r2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d019      	beq.n	800c458 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d115      	bne.n	800c458 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	685a      	ldr	r2, [r3, #4]
 800c430:	4b0b      	ldr	r3, [pc, #44]	@ (800c460 <vPortFree+0xb0>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	43db      	mvns	r3, r3
 800c436:	401a      	ands	r2, r3
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c43c:	f7fe fb0c 	bl	800aa58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	685a      	ldr	r2, [r3, #4]
 800c444:	4b07      	ldr	r3, [pc, #28]	@ (800c464 <vPortFree+0xb4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4413      	add	r3, r2
 800c44a:	4a06      	ldr	r2, [pc, #24]	@ (800c464 <vPortFree+0xb4>)
 800c44c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c44e:	6938      	ldr	r0, [r7, #16]
 800c450:	f000 f86c 	bl	800c52c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c454:	f7fe fb0e 	bl	800aa74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c458:	bf00      	nop
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	20001e6c 	.word	0x20001e6c
 800c464:	20001e64 	.word	0x20001e64

0800c468 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c46e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c472:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c474:	4b27      	ldr	r3, [pc, #156]	@ (800c514 <prvHeapInit+0xac>)
 800c476:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00c      	beq.n	800c49c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3307      	adds	r3, #7
 800c486:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f023 0307 	bic.w	r3, r3, #7
 800c48e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	4a1f      	ldr	r2, [pc, #124]	@ (800c514 <prvHeapInit+0xac>)
 800c498:	4413      	add	r3, r2
 800c49a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4a0:	4a1d      	ldr	r2, [pc, #116]	@ (800c518 <prvHeapInit+0xb0>)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4a6:	4b1c      	ldr	r3, [pc, #112]	@ (800c518 <prvHeapInit+0xb0>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4b4:	2208      	movs	r2, #8
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	1a9b      	subs	r3, r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f023 0307 	bic.w	r3, r3, #7
 800c4c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4a15      	ldr	r2, [pc, #84]	@ (800c51c <prvHeapInit+0xb4>)
 800c4c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4ca:	4b14      	ldr	r3, [pc, #80]	@ (800c51c <prvHeapInit+0xb4>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4d2:	4b12      	ldr	r3, [pc, #72]	@ (800c51c <prvHeapInit+0xb4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	1ad2      	subs	r2, r2, r3
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c51c <prvHeapInit+0xb4>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	4a0a      	ldr	r2, [pc, #40]	@ (800c520 <prvHeapInit+0xb8>)
 800c4f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	4a09      	ldr	r2, [pc, #36]	@ (800c524 <prvHeapInit+0xbc>)
 800c4fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c500:	4b09      	ldr	r3, [pc, #36]	@ (800c528 <prvHeapInit+0xc0>)
 800c502:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c506:	601a      	str	r2, [r3, #0]
}
 800c508:	bf00      	nop
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bc80      	pop	{r7}
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	20001258 	.word	0x20001258
 800c518:	20001e58 	.word	0x20001e58
 800c51c:	20001e60 	.word	0x20001e60
 800c520:	20001e68 	.word	0x20001e68
 800c524:	20001e64 	.word	0x20001e64
 800c528:	20001e6c 	.word	0x20001e6c

0800c52c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c534:	4b27      	ldr	r3, [pc, #156]	@ (800c5d4 <prvInsertBlockIntoFreeList+0xa8>)
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	e002      	b.n	800c540 <prvInsertBlockIntoFreeList+0x14>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	429a      	cmp	r2, r3
 800c548:	d8f7      	bhi.n	800c53a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	4413      	add	r3, r2
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d108      	bne.n	800c56e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	441a      	add	r2, r3
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	441a      	add	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d118      	bne.n	800c5b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	4b14      	ldr	r3, [pc, #80]	@ (800c5d8 <prvInsertBlockIntoFreeList+0xac>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d00d      	beq.n	800c5aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685a      	ldr	r2, [r3, #4]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	441a      	add	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	e008      	b.n	800c5bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d8 <prvInsertBlockIntoFreeList+0xac>)
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	e003      	b.n	800c5bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d002      	beq.n	800c5ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5ca:	bf00      	nop
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bc80      	pop	{r7}
 800c5d2:	4770      	bx	lr
 800c5d4:	20001e58 	.word	0x20001e58
 800c5d8:	20001e60 	.word	0x20001e60

0800c5dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	4912      	ldr	r1, [pc, #72]	@ (800c62c <MX_USB_DEVICE_Init+0x50>)
 800c5e4:	4812      	ldr	r0, [pc, #72]	@ (800c630 <MX_USB_DEVICE_Init+0x54>)
 800c5e6:	f7fb ff14 	bl	8008412 <USBD_Init>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c5f0:	f7f5 f8b8 	bl	8001764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c5f4:	490f      	ldr	r1, [pc, #60]	@ (800c634 <MX_USB_DEVICE_Init+0x58>)
 800c5f6:	480e      	ldr	r0, [pc, #56]	@ (800c630 <MX_USB_DEVICE_Init+0x54>)
 800c5f8:	f7fb ff36 	bl	8008468 <USBD_RegisterClass>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c602:	f7f5 f8af 	bl	8001764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c606:	490c      	ldr	r1, [pc, #48]	@ (800c638 <MX_USB_DEVICE_Init+0x5c>)
 800c608:	4809      	ldr	r0, [pc, #36]	@ (800c630 <MX_USB_DEVICE_Init+0x54>)
 800c60a:	f7fb fe67 	bl	80082dc <USBD_CDC_RegisterInterface>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c614:	f7f5 f8a6 	bl	8001764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c618:	4805      	ldr	r0, [pc, #20]	@ (800c630 <MX_USB_DEVICE_Init+0x54>)
 800c61a:	f7fb ff3e 	bl	800849a <USBD_Start>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c624:	f7f5 f89e 	bl	8001764 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c628:	bf00      	nop
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	20000134 	.word	0x20000134
 800c630:	20001e70 	.word	0x20001e70
 800c634:	2000001c 	.word	0x2000001c
 800c638:	20000124 	.word	0x20000124

0800c63c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c640:	2200      	movs	r2, #0
 800c642:	4905      	ldr	r1, [pc, #20]	@ (800c658 <CDC_Init_FS+0x1c>)
 800c644:	4805      	ldr	r0, [pc, #20]	@ (800c65c <CDC_Init_FS+0x20>)
 800c646:	f7fb fe5f 	bl	8008308 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c64a:	4905      	ldr	r1, [pc, #20]	@ (800c660 <CDC_Init_FS+0x24>)
 800c64c:	4803      	ldr	r0, [pc, #12]	@ (800c65c <CDC_Init_FS+0x20>)
 800c64e:	f7fb fe74 	bl	800833a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c652:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c654:	4618      	mov	r0, r3
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20002534 	.word	0x20002534
 800c65c:	20001e70 	.word	0x20001e70
 800c660:	20002134 	.word	0x20002134

0800c664 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c664:	b480      	push	{r7}
 800c666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c668:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bc80      	pop	{r7}
 800c670:	4770      	bx	lr
	...

0800c674 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	4603      	mov	r3, r0
 800c67c:	6039      	str	r1, [r7, #0]
 800c67e:	71fb      	strb	r3, [r7, #7]
 800c680:	4613      	mov	r3, r2
 800c682:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c684:	79fb      	ldrb	r3, [r7, #7]
 800c686:	2b23      	cmp	r3, #35	@ 0x23
 800c688:	d84a      	bhi.n	800c720 <CDC_Control_FS+0xac>
 800c68a:	a201      	add	r2, pc, #4	@ (adr r2, 800c690 <CDC_Control_FS+0x1c>)
 800c68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c690:	0800c721 	.word	0x0800c721
 800c694:	0800c721 	.word	0x0800c721
 800c698:	0800c721 	.word	0x0800c721
 800c69c:	0800c721 	.word	0x0800c721
 800c6a0:	0800c721 	.word	0x0800c721
 800c6a4:	0800c721 	.word	0x0800c721
 800c6a8:	0800c721 	.word	0x0800c721
 800c6ac:	0800c721 	.word	0x0800c721
 800c6b0:	0800c721 	.word	0x0800c721
 800c6b4:	0800c721 	.word	0x0800c721
 800c6b8:	0800c721 	.word	0x0800c721
 800c6bc:	0800c721 	.word	0x0800c721
 800c6c0:	0800c721 	.word	0x0800c721
 800c6c4:	0800c721 	.word	0x0800c721
 800c6c8:	0800c721 	.word	0x0800c721
 800c6cc:	0800c721 	.word	0x0800c721
 800c6d0:	0800c721 	.word	0x0800c721
 800c6d4:	0800c721 	.word	0x0800c721
 800c6d8:	0800c721 	.word	0x0800c721
 800c6dc:	0800c721 	.word	0x0800c721
 800c6e0:	0800c721 	.word	0x0800c721
 800c6e4:	0800c721 	.word	0x0800c721
 800c6e8:	0800c721 	.word	0x0800c721
 800c6ec:	0800c721 	.word	0x0800c721
 800c6f0:	0800c721 	.word	0x0800c721
 800c6f4:	0800c721 	.word	0x0800c721
 800c6f8:	0800c721 	.word	0x0800c721
 800c6fc:	0800c721 	.word	0x0800c721
 800c700:	0800c721 	.word	0x0800c721
 800c704:	0800c721 	.word	0x0800c721
 800c708:	0800c721 	.word	0x0800c721
 800c70c:	0800c721 	.word	0x0800c721
 800c710:	0800c721 	.word	0x0800c721
 800c714:	0800c721 	.word	0x0800c721
 800c718:	0800c721 	.word	0x0800c721
 800c71c:	0800c721 	.word	0x0800c721
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c720:	bf00      	nop
  }

  return (USBD_OK);
 800c722:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	bc80      	pop	{r7}
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop

0800c730 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c73a:	6879      	ldr	r1, [r7, #4]
 800c73c:	4805      	ldr	r0, [pc, #20]	@ (800c754 <CDC_Receive_FS+0x24>)
 800c73e:	f7fb fdfc 	bl	800833a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c742:	4804      	ldr	r0, [pc, #16]	@ (800c754 <CDC_Receive_FS+0x24>)
 800c744:	f7fb fe3b 	bl	80083be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c748:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	20001e70 	.word	0x20001e70

0800c758 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c768:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a0 <CDC_Transmit_FS+0x48>)
 800c76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c76e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e00b      	b.n	800c796 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c77e:	887b      	ldrh	r3, [r7, #2]
 800c780:	461a      	mov	r2, r3
 800c782:	6879      	ldr	r1, [r7, #4]
 800c784:	4806      	ldr	r0, [pc, #24]	@ (800c7a0 <CDC_Transmit_FS+0x48>)
 800c786:	f7fb fdbf 	bl	8008308 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c78a:	4805      	ldr	r0, [pc, #20]	@ (800c7a0 <CDC_Transmit_FS+0x48>)
 800c78c:	f7fb fde8 	bl	8008360 <USBD_CDC_TransmitPacket>
 800c790:	4603      	mov	r3, r0
 800c792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20001e70 	.word	0x20001e70

0800c7a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	6039      	str	r1, [r7, #0]
 800c7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2212      	movs	r2, #18
 800c7b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c7b6:	4b03      	ldr	r3, [pc, #12]	@ (800c7c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	20000150 	.word	0x20000150

0800c7c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	6039      	str	r1, [r7, #0]
 800c7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c7da:	4b03      	ldr	r3, [pc, #12]	@ (800c7e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bc80      	pop	{r7}
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	20000164 	.word	0x20000164

0800c7ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	6039      	str	r1, [r7, #0]
 800c7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d105      	bne.n	800c80a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	4907      	ldr	r1, [pc, #28]	@ (800c820 <USBD_FS_ProductStrDescriptor+0x34>)
 800c802:	4808      	ldr	r0, [pc, #32]	@ (800c824 <USBD_FS_ProductStrDescriptor+0x38>)
 800c804:	f7fc fdbf 	bl	8009386 <USBD_GetString>
 800c808:	e004      	b.n	800c814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	4904      	ldr	r1, [pc, #16]	@ (800c820 <USBD_FS_ProductStrDescriptor+0x34>)
 800c80e:	4805      	ldr	r0, [pc, #20]	@ (800c824 <USBD_FS_ProductStrDescriptor+0x38>)
 800c810:	f7fc fdb9 	bl	8009386 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c814:	4b02      	ldr	r3, [pc, #8]	@ (800c820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c816:	4618      	mov	r0, r3
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	20002934 	.word	0x20002934
 800c824:	0800f2b4 	.word	0x0800f2b4

0800c828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	4603      	mov	r3, r0
 800c830:	6039      	str	r1, [r7, #0]
 800c832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	4904      	ldr	r1, [pc, #16]	@ (800c848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c838:	4804      	ldr	r0, [pc, #16]	@ (800c84c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c83a:	f7fc fda4 	bl	8009386 <USBD_GetString>
  return USBD_StrDesc;
 800c83e:	4b02      	ldr	r3, [pc, #8]	@ (800c848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c840:	4618      	mov	r0, r3
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	20002934 	.word	0x20002934
 800c84c:	0800f2cc 	.word	0x0800f2cc

0800c850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	6039      	str	r1, [r7, #0]
 800c85a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	221a      	movs	r2, #26
 800c860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c862:	f000 f843 	bl	800c8ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c866:	4b02      	ldr	r3, [pc, #8]	@ (800c870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20000168 	.word	0x20000168

0800c874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	6039      	str	r1, [r7, #0]
 800c87e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d105      	bne.n	800c892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	4907      	ldr	r1, [pc, #28]	@ (800c8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c88a:	4808      	ldr	r0, [pc, #32]	@ (800c8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c88c:	f7fc fd7b 	bl	8009386 <USBD_GetString>
 800c890:	e004      	b.n	800c89c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	4904      	ldr	r1, [pc, #16]	@ (800c8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c896:	4805      	ldr	r0, [pc, #20]	@ (800c8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c898:	f7fc fd75 	bl	8009386 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c89c:	4b02      	ldr	r3, [pc, #8]	@ (800c8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20002934 	.word	0x20002934
 800c8ac:	0800f2e0 	.word	0x0800f2e0

0800c8b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	6039      	str	r1, [r7, #0]
 800c8ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8bc:	79fb      	ldrb	r3, [r7, #7]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d105      	bne.n	800c8ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	4907      	ldr	r1, [pc, #28]	@ (800c8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8c6:	4808      	ldr	r0, [pc, #32]	@ (800c8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8c8:	f7fc fd5d 	bl	8009386 <USBD_GetString>
 800c8cc:	e004      	b.n	800c8d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	4904      	ldr	r1, [pc, #16]	@ (800c8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8d2:	4805      	ldr	r0, [pc, #20]	@ (800c8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8d4:	f7fc fd57 	bl	8009386 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8d8:	4b02      	ldr	r3, [pc, #8]	@ (800c8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20002934 	.word	0x20002934
 800c8e8:	0800f2ec 	.word	0x0800f2ec

0800c8ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c8f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c930 <Get_SerialNum+0x44>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c8f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c934 <Get_SerialNum+0x48>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c8fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c938 <Get_SerialNum+0x4c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4413      	add	r3, r2
 800c90a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d009      	beq.n	800c926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c912:	2208      	movs	r2, #8
 800c914:	4909      	ldr	r1, [pc, #36]	@ (800c93c <Get_SerialNum+0x50>)
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f000 f814 	bl	800c944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c91c:	2204      	movs	r2, #4
 800c91e:	4908      	ldr	r1, [pc, #32]	@ (800c940 <Get_SerialNum+0x54>)
 800c920:	68b8      	ldr	r0, [r7, #8]
 800c922:	f000 f80f 	bl	800c944 <IntToUnicode>
  }
}
 800c926:	bf00      	nop
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	1ffff7e8 	.word	0x1ffff7e8
 800c934:	1ffff7ec 	.word	0x1ffff7ec
 800c938:	1ffff7f0 	.word	0x1ffff7f0
 800c93c:	2000016a 	.word	0x2000016a
 800c940:	2000017a 	.word	0x2000017a

0800c944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c944:	b480      	push	{r7}
 800c946:	b087      	sub	sp, #28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	4613      	mov	r3, r2
 800c950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c956:	2300      	movs	r3, #0
 800c958:	75fb      	strb	r3, [r7, #23]
 800c95a:	e027      	b.n	800c9ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	0f1b      	lsrs	r3, r3, #28
 800c960:	2b09      	cmp	r3, #9
 800c962:	d80b      	bhi.n	800c97c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	0f1b      	lsrs	r3, r3, #28
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	005b      	lsls	r3, r3, #1
 800c96e:	4619      	mov	r1, r3
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	440b      	add	r3, r1
 800c974:	3230      	adds	r2, #48	@ 0x30
 800c976:	b2d2      	uxtb	r2, r2
 800c978:	701a      	strb	r2, [r3, #0]
 800c97a:	e00a      	b.n	800c992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	0f1b      	lsrs	r3, r3, #28
 800c980:	b2da      	uxtb	r2, r3
 800c982:	7dfb      	ldrb	r3, [r7, #23]
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4619      	mov	r1, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	440b      	add	r3, r1
 800c98c:	3237      	adds	r2, #55	@ 0x37
 800c98e:	b2d2      	uxtb	r2, r2
 800c990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	011b      	lsls	r3, r3, #4
 800c996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c998:	7dfb      	ldrb	r3, [r7, #23]
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	3301      	adds	r3, #1
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	75fb      	strb	r3, [r7, #23]
 800c9ac:	7dfa      	ldrb	r2, [r7, #23]
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d3d3      	bcc.n	800c95c <IntToUnicode+0x18>
  }
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bc80      	pop	{r7}
 800c9be:	4770      	bx	lr

0800c9c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a0d      	ldr	r2, [pc, #52]	@ (800ca04 <HAL_PCD_MspInit+0x44>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d113      	bne.n	800c9fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800ca08 <HAL_PCD_MspInit+0x48>)
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	4a0c      	ldr	r2, [pc, #48]	@ (800ca08 <HAL_PCD_MspInit+0x48>)
 800c9d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c9dc:	61d3      	str	r3, [r2, #28]
 800c9de:	4b0a      	ldr	r3, [pc, #40]	@ (800ca08 <HAL_PCD_MspInit+0x48>)
 800c9e0:	69db      	ldr	r3, [r3, #28]
 800c9e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2105      	movs	r1, #5
 800c9ee:	2014      	movs	r0, #20
 800c9f0:	f7f5 fa49 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c9f4:	2014      	movs	r0, #20
 800c9f6:	f7f5 fa62 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c9fa:	bf00      	nop
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	40005c00 	.word	0x40005c00
 800ca08:	40021000 	.word	0x40021000

0800ca0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800ca20:	4619      	mov	r1, r3
 800ca22:	4610      	mov	r0, r2
 800ca24:	f7fb fd81 	bl	800852a <USBD_LL_SetupStage>
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800ca42:	78fa      	ldrb	r2, [r7, #3]
 800ca44:	6879      	ldr	r1, [r7, #4]
 800ca46:	4613      	mov	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	440b      	add	r3, r1
 800ca50:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	78fb      	ldrb	r3, [r7, #3]
 800ca58:	4619      	mov	r1, r3
 800ca5a:	f7fb fdb3 	bl	80085c4 <USBD_LL_DataOutStage>
}
 800ca5e:	bf00      	nop
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b082      	sub	sp, #8
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800ca78:	78fa      	ldrb	r2, [r7, #3]
 800ca7a:	6879      	ldr	r1, [r7, #4]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	440b      	add	r3, r1
 800ca86:	333c      	adds	r3, #60	@ 0x3c
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	78fb      	ldrb	r3, [r7, #3]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	f7fb fe0a 	bl	80086a6 <USBD_LL_DataInStage>
}
 800ca92:	bf00      	nop
 800ca94:	3708      	adds	r7, #8
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fb ff1a 	bl	80088e2 <USBD_LL_SOF>
}
 800caae:	bf00      	nop
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cabe:	2301      	movs	r3, #1
 800cac0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d001      	beq.n	800cace <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800caca:	f7f4 fe4b 	bl	8001764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cad4:	7bfa      	ldrb	r2, [r7, #15]
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fb feca 	bl	8008872 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fb fe83 	bl	80087f0 <USBD_LL_Reset>
}
 800caea:	bf00      	nop
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fb fec4 	bl	8008890 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d005      	beq.n	800cb1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb10:	4b04      	ldr	r3, [pc, #16]	@ (800cb24 <HAL_PCD_SuspendCallback+0x30>)
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	4a03      	ldr	r2, [pc, #12]	@ (800cb24 <HAL_PCD_SuspendCallback+0x30>)
 800cb16:	f043 0306 	orr.w	r3, r3, #6
 800cb1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	e000ed00 	.word	0xe000ed00

0800cb28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fb febe 	bl	80088b8 <USBD_LL_Resume>
}
 800cb3c:	bf00      	nop
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cb4c:	4a28      	ldr	r2, [pc, #160]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a26      	ldr	r2, [pc, #152]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb58:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cb5c:	4b24      	ldr	r3, [pc, #144]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb5e:	4a25      	ldr	r2, [pc, #148]	@ (800cbf4 <USBD_LL_Init+0xb0>)
 800cb60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb62:	4b23      	ldr	r3, [pc, #140]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb64:	2208      	movs	r2, #8
 800cb66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb68:	4b21      	ldr	r3, [pc, #132]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb6a:	2202      	movs	r2, #2
 800cb6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb6e:	4b20      	ldr	r3, [pc, #128]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb74:	4b1e      	ldr	r3, [pc, #120]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb7a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb80:	481b      	ldr	r0, [pc, #108]	@ (800cbf0 <USBD_LL_Init+0xac>)
 800cb82:	f7f5 fd67 	bl	8002654 <HAL_PCD_Init>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cb8c:	f7f4 fdea 	bl	8001764 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cb96:	2318      	movs	r3, #24
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	f7f7 fa85 	bl	80040aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cba6:	2358      	movs	r3, #88	@ 0x58
 800cba8:	2200      	movs	r2, #0
 800cbaa:	2180      	movs	r1, #128	@ 0x80
 800cbac:	f7f7 fa7d 	bl	80040aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbb6:	23c0      	movs	r3, #192	@ 0xc0
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2181      	movs	r1, #129	@ 0x81
 800cbbc:	f7f7 fa75 	bl	80040aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbc6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2101      	movs	r1, #1
 800cbce:	f7f7 fa6c 	bl	80040aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cbd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2182      	movs	r1, #130	@ 0x82
 800cbe0:	f7f7 fa63 	bl	80040aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20002b34 	.word	0x20002b34
 800cbf4:	40005c00 	.word	0x40005c00

0800cbf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7f5 fe1f 	bl	8002852 <HAL_PCD_Start>
 800cc14:	4603      	mov	r3, r0
 800cc16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 f94e 	bl	800cebc <USBD_Get_USB_Status>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	4608      	mov	r0, r1
 800cc38:	4611      	mov	r1, r2
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	70fb      	strb	r3, [r7, #3]
 800cc40:	460b      	mov	r3, r1
 800cc42:	70bb      	strb	r3, [r7, #2]
 800cc44:	4613      	mov	r3, r2
 800cc46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cc56:	78bb      	ldrb	r3, [r7, #2]
 800cc58:	883a      	ldrh	r2, [r7, #0]
 800cc5a:	78f9      	ldrb	r1, [r7, #3]
 800cc5c:	f7f5 ff74 	bl	8002b48 <HAL_PCD_EP_Open>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 f928 	bl	800cebc <USBD_Get_USB_Status>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc70:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b084      	sub	sp, #16
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	460b      	mov	r3, r1
 800cc84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc94:	78fa      	ldrb	r2, [r7, #3]
 800cc96:	4611      	mov	r1, r2
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f5 ffb2 	bl	8002c02 <HAL_PCD_EP_Close>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 f909 	bl	800cebc <USBD_Get_USB_Status>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccae:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ccd2:	78fa      	ldrb	r2, [r7, #3]
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7f6 f85a 	bl	8002d90 <HAL_PCD_EP_SetStall>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 f8ea 	bl	800cebc <USBD_Get_USB_Status>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	460b      	mov	r3, r1
 800cd00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd10:	78fa      	ldrb	r2, [r7, #3]
 800cd12:	4611      	mov	r1, r2
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7f6 f89b 	bl	8002e50 <HAL_PCD_EP_ClrStall>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 f8cb 	bl	800cebc <USBD_Get_USB_Status>
 800cd26:	4603      	mov	r3, r0
 800cd28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cd46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	da0c      	bge.n	800cd6a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd50:	78fb      	ldrb	r3, [r7, #3]
 800cd52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd56:	68f9      	ldr	r1, [r7, #12]
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	00db      	lsls	r3, r3, #3
 800cd62:	440b      	add	r3, r1
 800cd64:	3302      	adds	r3, #2
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	e00b      	b.n	800cd82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd6a:	78fb      	ldrb	r3, [r7, #3]
 800cd6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd70:	68f9      	ldr	r1, [r7, #12]
 800cd72:	4613      	mov	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	440b      	add	r3, r1
 800cd7c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800cd80:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bc80      	pop	{r7}
 800cd8a:	4770      	bx	lr

0800cd8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cda6:	78fa      	ldrb	r2, [r7, #3]
 800cda8:	4611      	mov	r1, r2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f5 fea7 	bl	8002afe <HAL_PCD_SetAddress>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 f880 	bl	800cebc <USBD_Get_USB_Status>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b086      	sub	sp, #24
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	60f8      	str	r0, [r7, #12]
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	72fb      	strb	r3, [r7, #11]
 800cdda:	4613      	mov	r3, r2
 800cddc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800cdec:	893b      	ldrh	r3, [r7, #8]
 800cdee:	7af9      	ldrb	r1, [r7, #11]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	f7f5 ff96 	bl	8002d22 <HAL_PCD_EP_Transmit>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 f85d 	bl	800cebc <USBD_Get_USB_Status>
 800ce02:	4603      	mov	r3, r0
 800ce04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce06:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	72fb      	strb	r3, [r7, #11]
 800ce20:	4613      	mov	r3, r2
 800ce22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ce32:	893b      	ldrh	r3, [r7, #8]
 800ce34:	7af9      	ldrb	r1, [r7, #11]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	f7f5 ff2b 	bl	8002c92 <HAL_PCD_EP_Receive>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 f83a 	bl	800cebc <USBD_Get_USB_Status>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3718      	adds	r7, #24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ce68:	78fa      	ldrb	r2, [r7, #3]
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f5 ff41 	bl	8002cf4 <HAL_PCD_EP_GetRxCount>
 800ce72:	4603      	mov	r3, r0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce84:	4b02      	ldr	r3, [pc, #8]	@ (800ce90 <USBD_static_malloc+0x14>)
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	370c      	adds	r7, #12
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bc80      	pop	{r7}
 800ce8e:	4770      	bx	lr
 800ce90:	20002e24 	.word	0x20002e24

0800ce94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]

}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bc80      	pop	{r7}
 800cea4:	4770      	bx	lr

0800cea6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ceb2:	bf00      	nop
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bc80      	pop	{r7}
 800ceba:	4770      	bx	lr

0800cebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ceca:	79fb      	ldrb	r3, [r7, #7]
 800cecc:	2b03      	cmp	r3, #3
 800cece:	d817      	bhi.n	800cf00 <USBD_Get_USB_Status+0x44>
 800ced0:	a201      	add	r2, pc, #4	@ (adr r2, 800ced8 <USBD_Get_USB_Status+0x1c>)
 800ced2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced6:	bf00      	nop
 800ced8:	0800cee9 	.word	0x0800cee9
 800cedc:	0800ceef 	.word	0x0800ceef
 800cee0:	0800cef5 	.word	0x0800cef5
 800cee4:	0800cefb 	.word	0x0800cefb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	73fb      	strb	r3, [r7, #15]
    break;
 800ceec:	e00b      	b.n	800cf06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ceee:	2302      	movs	r3, #2
 800cef0:	73fb      	strb	r3, [r7, #15]
    break;
 800cef2:	e008      	b.n	800cf06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cef4:	2301      	movs	r3, #1
 800cef6:	73fb      	strb	r3, [r7, #15]
    break;
 800cef8:	e005      	b.n	800cf06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cefa:	2302      	movs	r3, #2
 800cefc:	73fb      	strb	r3, [r7, #15]
    break;
 800cefe:	e002      	b.n	800cf06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf00:	2302      	movs	r3, #2
 800cf02:	73fb      	strb	r3, [r7, #15]
    break;
 800cf04:	bf00      	nop
  }
  return usb_status;
 800cf06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bc80      	pop	{r7}
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop

0800cf14 <asinf>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4604      	mov	r4, r0
 800cf18:	f000 f87a 	bl	800d010 <__ieee754_asinf>
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4605      	mov	r5, r0
 800cf20:	4620      	mov	r0, r4
 800cf22:	f7f3 fbf1 	bl	8000708 <__aeabi_fcmpun>
 800cf26:	b980      	cbnz	r0, 800cf4a <asinf+0x36>
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 f862 	bl	800cff2 <fabsf>
 800cf2e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800cf32:	f7f3 fbdf 	bl	80006f4 <__aeabi_fcmpgt>
 800cf36:	b140      	cbz	r0, 800cf4a <asinf+0x36>
 800cf38:	f001 fa46 	bl	800e3c8 <__errno>
 800cf3c:	2321      	movs	r3, #33	@ 0x21
 800cf3e:	6003      	str	r3, [r0, #0]
 800cf40:	4803      	ldr	r0, [pc, #12]	@ (800cf50 <asinf+0x3c>)
 800cf42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf46:	f000 b85f 	b.w	800d008 <nanf>
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	bd38      	pop	{r3, r4, r5, pc}
 800cf4e:	bf00      	nop
 800cf50:	0800f3c5 	.word	0x0800f3c5

0800cf54 <atan2f>:
 800cf54:	f000 b99e 	b.w	800d294 <__ieee754_atan2f>

0800cf58 <powf>:
 800cf58:	b570      	push	{r4, r5, r6, lr}
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	f000 fa21 	bl	800d3a4 <__ieee754_powf>
 800cf62:	4621      	mov	r1, r4
 800cf64:	4605      	mov	r5, r0
 800cf66:	4620      	mov	r0, r4
 800cf68:	f7f3 fbce 	bl	8000708 <__aeabi_fcmpun>
 800cf6c:	bb68      	cbnz	r0, 800cfca <powf+0x72>
 800cf6e:	2100      	movs	r1, #0
 800cf70:	4630      	mov	r0, r6
 800cf72:	f7f3 fb97 	bl	80006a4 <__aeabi_fcmpeq>
 800cf76:	b190      	cbz	r0, 800cf9e <powf+0x46>
 800cf78:	2100      	movs	r1, #0
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f7f3 fb92 	bl	80006a4 <__aeabi_fcmpeq>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d133      	bne.n	800cfec <powf+0x94>
 800cf84:	4620      	mov	r0, r4
 800cf86:	f000 f837 	bl	800cff8 <finitef>
 800cf8a:	b1f0      	cbz	r0, 800cfca <powf+0x72>
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7f3 fb92 	bl	80006b8 <__aeabi_fcmplt>
 800cf94:	b1c8      	cbz	r0, 800cfca <powf+0x72>
 800cf96:	f001 fa17 	bl	800e3c8 <__errno>
 800cf9a:	2322      	movs	r3, #34	@ 0x22
 800cf9c:	e014      	b.n	800cfc8 <powf+0x70>
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f000 f82a 	bl	800cff8 <finitef>
 800cfa4:	b998      	cbnz	r0, 800cfce <powf+0x76>
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f000 f826 	bl	800cff8 <finitef>
 800cfac:	b178      	cbz	r0, 800cfce <powf+0x76>
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f000 f822 	bl	800cff8 <finitef>
 800cfb4:	b158      	cbz	r0, 800cfce <powf+0x76>
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	4628      	mov	r0, r5
 800cfba:	f7f3 fba5 	bl	8000708 <__aeabi_fcmpun>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d0e9      	beq.n	800cf96 <powf+0x3e>
 800cfc2:	f001 fa01 	bl	800e3c8 <__errno>
 800cfc6:	2321      	movs	r3, #33	@ 0x21
 800cfc8:	6003      	str	r3, [r0, #0]
 800cfca:	4628      	mov	r0, r5
 800cfcc:	bd70      	pop	{r4, r5, r6, pc}
 800cfce:	2100      	movs	r1, #0
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f7f3 fb67 	bl	80006a4 <__aeabi_fcmpeq>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d0f7      	beq.n	800cfca <powf+0x72>
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f000 f80c 	bl	800cff8 <finitef>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d0f2      	beq.n	800cfca <powf+0x72>
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 f807 	bl	800cff8 <finitef>
 800cfea:	e7d3      	b.n	800cf94 <powf+0x3c>
 800cfec:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800cff0:	e7eb      	b.n	800cfca <powf+0x72>

0800cff2 <fabsf>:
 800cff2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cff6:	4770      	bx	lr

0800cff8 <finitef>:
 800cff8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cffc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800d000:	bfac      	ite	ge
 800d002:	2000      	movge	r0, #0
 800d004:	2001      	movlt	r0, #1
 800d006:	4770      	bx	lr

0800d008 <nanf>:
 800d008:	4800      	ldr	r0, [pc, #0]	@ (800d00c <nanf+0x4>)
 800d00a:	4770      	bx	lr
 800d00c:	7fc00000 	.word	0x7fc00000

0800d010 <__ieee754_asinf>:
 800d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800d018:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800d01c:	4604      	mov	r4, r0
 800d01e:	4605      	mov	r5, r0
 800d020:	d10c      	bne.n	800d03c <__ieee754_asinf+0x2c>
 800d022:	498c      	ldr	r1, [pc, #560]	@ (800d254 <__ieee754_asinf+0x244>)
 800d024:	f7f3 f9aa 	bl	800037c <__aeabi_fmul>
 800d028:	498b      	ldr	r1, [pc, #556]	@ (800d258 <__ieee754_asinf+0x248>)
 800d02a:	4605      	mov	r5, r0
 800d02c:	4620      	mov	r0, r4
 800d02e:	f7f3 f9a5 	bl	800037c <__aeabi_fmul>
 800d032:	4601      	mov	r1, r0
 800d034:	4628      	mov	r0, r5
 800d036:	f7f3 f899 	bl	800016c <__addsf3>
 800d03a:	e006      	b.n	800d04a <__ieee754_asinf+0x3a>
 800d03c:	d909      	bls.n	800d052 <__ieee754_asinf+0x42>
 800d03e:	4601      	mov	r1, r0
 800d040:	f7f3 f892 	bl	8000168 <__aeabi_fsub>
 800d044:	4601      	mov	r1, r0
 800d046:	f7f3 fa4d 	bl	80004e4 <__aeabi_fdiv>
 800d04a:	4604      	mov	r4, r0
 800d04c:	4620      	mov	r0, r4
 800d04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d052:	f1b8 5f7c 	cmp.w	r8, #1056964608	@ 0x3f000000
 800d056:	d20b      	bcs.n	800d070 <__ieee754_asinf+0x60>
 800d058:	f1b8 5f48 	cmp.w	r8, #838860800	@ 0x32000000
 800d05c:	d273      	bcs.n	800d146 <__ieee754_asinf+0x136>
 800d05e:	497f      	ldr	r1, [pc, #508]	@ (800d25c <__ieee754_asinf+0x24c>)
 800d060:	f7f3 f884 	bl	800016c <__addsf3>
 800d064:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d068:	f7f3 fb44 	bl	80006f4 <__aeabi_fcmpgt>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d1ed      	bne.n	800d04c <__ieee754_asinf+0x3c>
 800d070:	4620      	mov	r0, r4
 800d072:	f7ff ffbe 	bl	800cff2 <fabsf>
 800d076:	4601      	mov	r1, r0
 800d078:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d07c:	f7f3 f874 	bl	8000168 <__aeabi_fsub>
 800d080:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800d084:	f7f3 f97a 	bl	800037c <__aeabi_fmul>
 800d088:	4606      	mov	r6, r0
 800d08a:	4975      	ldr	r1, [pc, #468]	@ (800d260 <__ieee754_asinf+0x250>)
 800d08c:	f7f3 f976 	bl	800037c <__aeabi_fmul>
 800d090:	4974      	ldr	r1, [pc, #464]	@ (800d264 <__ieee754_asinf+0x254>)
 800d092:	f7f3 f86b 	bl	800016c <__addsf3>
 800d096:	4631      	mov	r1, r6
 800d098:	f7f3 f970 	bl	800037c <__aeabi_fmul>
 800d09c:	4972      	ldr	r1, [pc, #456]	@ (800d268 <__ieee754_asinf+0x258>)
 800d09e:	f7f3 f863 	bl	8000168 <__aeabi_fsub>
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	f7f3 f96a 	bl	800037c <__aeabi_fmul>
 800d0a8:	4970      	ldr	r1, [pc, #448]	@ (800d26c <__ieee754_asinf+0x25c>)
 800d0aa:	f7f3 f85f 	bl	800016c <__addsf3>
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	f7f3 f964 	bl	800037c <__aeabi_fmul>
 800d0b4:	496e      	ldr	r1, [pc, #440]	@ (800d270 <__ieee754_asinf+0x260>)
 800d0b6:	f7f3 f857 	bl	8000168 <__aeabi_fsub>
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	f7f3 f95e 	bl	800037c <__aeabi_fmul>
 800d0c0:	496c      	ldr	r1, [pc, #432]	@ (800d274 <__ieee754_asinf+0x264>)
 800d0c2:	f7f3 f853 	bl	800016c <__addsf3>
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	f7f3 f958 	bl	800037c <__aeabi_fmul>
 800d0cc:	496a      	ldr	r1, [pc, #424]	@ (800d278 <__ieee754_asinf+0x268>)
 800d0ce:	4681      	mov	r9, r0
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7f3 f953 	bl	800037c <__aeabi_fmul>
 800d0d6:	4969      	ldr	r1, [pc, #420]	@ (800d27c <__ieee754_asinf+0x26c>)
 800d0d8:	f7f3 f846 	bl	8000168 <__aeabi_fsub>
 800d0dc:	4631      	mov	r1, r6
 800d0de:	f7f3 f94d 	bl	800037c <__aeabi_fmul>
 800d0e2:	4967      	ldr	r1, [pc, #412]	@ (800d280 <__ieee754_asinf+0x270>)
 800d0e4:	f7f3 f842 	bl	800016c <__addsf3>
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	f7f3 f947 	bl	800037c <__aeabi_fmul>
 800d0ee:	4965      	ldr	r1, [pc, #404]	@ (800d284 <__ieee754_asinf+0x274>)
 800d0f0:	f7f3 f83a 	bl	8000168 <__aeabi_fsub>
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	f7f3 f941 	bl	800037c <__aeabi_fmul>
 800d0fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d0fe:	f7f3 f835 	bl	800016c <__addsf3>
 800d102:	4682      	mov	sl, r0
 800d104:	4630      	mov	r0, r6
 800d106:	f000 fe21 	bl	800dd4c <__ieee754_sqrtf>
 800d10a:	4b5f      	ldr	r3, [pc, #380]	@ (800d288 <__ieee754_asinf+0x278>)
 800d10c:	4607      	mov	r7, r0
 800d10e:	4598      	cmp	r8, r3
 800d110:	d963      	bls.n	800d1da <__ieee754_asinf+0x1ca>
 800d112:	4651      	mov	r1, sl
 800d114:	4648      	mov	r0, r9
 800d116:	f7f3 f9e5 	bl	80004e4 <__aeabi_fdiv>
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 f92e 	bl	800037c <__aeabi_fmul>
 800d120:	4639      	mov	r1, r7
 800d122:	f7f3 f823 	bl	800016c <__addsf3>
 800d126:	4601      	mov	r1, r0
 800d128:	f7f3 f820 	bl	800016c <__addsf3>
 800d12c:	4957      	ldr	r1, [pc, #348]	@ (800d28c <__ieee754_asinf+0x27c>)
 800d12e:	f7f3 f81d 	bl	800016c <__addsf3>
 800d132:	4601      	mov	r1, r0
 800d134:	4847      	ldr	r0, [pc, #284]	@ (800d254 <__ieee754_asinf+0x244>)
 800d136:	f7f3 f817 	bl	8000168 <__aeabi_fsub>
 800d13a:	2d00      	cmp	r5, #0
 800d13c:	4604      	mov	r4, r0
 800d13e:	bfd8      	it	le
 800d140:	f100 4400 	addle.w	r4, r0, #2147483648	@ 0x80000000
 800d144:	e782      	b.n	800d04c <__ieee754_asinf+0x3c>
 800d146:	4601      	mov	r1, r0
 800d148:	f7f3 f918 	bl	800037c <__aeabi_fmul>
 800d14c:	4605      	mov	r5, r0
 800d14e:	4944      	ldr	r1, [pc, #272]	@ (800d260 <__ieee754_asinf+0x250>)
 800d150:	f7f3 f914 	bl	800037c <__aeabi_fmul>
 800d154:	4943      	ldr	r1, [pc, #268]	@ (800d264 <__ieee754_asinf+0x254>)
 800d156:	f7f3 f809 	bl	800016c <__addsf3>
 800d15a:	4629      	mov	r1, r5
 800d15c:	f7f3 f90e 	bl	800037c <__aeabi_fmul>
 800d160:	4941      	ldr	r1, [pc, #260]	@ (800d268 <__ieee754_asinf+0x258>)
 800d162:	f7f3 f801 	bl	8000168 <__aeabi_fsub>
 800d166:	4629      	mov	r1, r5
 800d168:	f7f3 f908 	bl	800037c <__aeabi_fmul>
 800d16c:	493f      	ldr	r1, [pc, #252]	@ (800d26c <__ieee754_asinf+0x25c>)
 800d16e:	f7f2 fffd 	bl	800016c <__addsf3>
 800d172:	4629      	mov	r1, r5
 800d174:	f7f3 f902 	bl	800037c <__aeabi_fmul>
 800d178:	493d      	ldr	r1, [pc, #244]	@ (800d270 <__ieee754_asinf+0x260>)
 800d17a:	f7f2 fff5 	bl	8000168 <__aeabi_fsub>
 800d17e:	4629      	mov	r1, r5
 800d180:	f7f3 f8fc 	bl	800037c <__aeabi_fmul>
 800d184:	493b      	ldr	r1, [pc, #236]	@ (800d274 <__ieee754_asinf+0x264>)
 800d186:	f7f2 fff1 	bl	800016c <__addsf3>
 800d18a:	4629      	mov	r1, r5
 800d18c:	f7f3 f8f6 	bl	800037c <__aeabi_fmul>
 800d190:	4939      	ldr	r1, [pc, #228]	@ (800d278 <__ieee754_asinf+0x268>)
 800d192:	4606      	mov	r6, r0
 800d194:	4628      	mov	r0, r5
 800d196:	f7f3 f8f1 	bl	800037c <__aeabi_fmul>
 800d19a:	4938      	ldr	r1, [pc, #224]	@ (800d27c <__ieee754_asinf+0x26c>)
 800d19c:	f7f2 ffe4 	bl	8000168 <__aeabi_fsub>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	f7f3 f8eb 	bl	800037c <__aeabi_fmul>
 800d1a6:	4936      	ldr	r1, [pc, #216]	@ (800d280 <__ieee754_asinf+0x270>)
 800d1a8:	f7f2 ffe0 	bl	800016c <__addsf3>
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	f7f3 f8e5 	bl	800037c <__aeabi_fmul>
 800d1b2:	4934      	ldr	r1, [pc, #208]	@ (800d284 <__ieee754_asinf+0x274>)
 800d1b4:	f7f2 ffd8 	bl	8000168 <__aeabi_fsub>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f8df 	bl	800037c <__aeabi_fmul>
 800d1be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d1c2:	f7f2 ffd3 	bl	800016c <__addsf3>
 800d1c6:	4601      	mov	r1, r0
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f7f3 f98b 	bl	80004e4 <__aeabi_fdiv>
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	f7f3 f8d4 	bl	800037c <__aeabi_fmul>
 800d1d4:	4601      	mov	r1, r0
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	e72d      	b.n	800d036 <__ieee754_asinf+0x26>
 800d1da:	4601      	mov	r1, r0
 800d1dc:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800d1e0:	f7f2 ffc4 	bl	800016c <__addsf3>
 800d1e4:	4651      	mov	r1, sl
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	4648      	mov	r0, r9
 800d1ea:	f7f3 f97b 	bl	80004e4 <__aeabi_fdiv>
 800d1ee:	4601      	mov	r1, r0
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f7f3 f8c3 	bl	800037c <__aeabi_fmul>
 800d1f6:	f028 080f 	bic.w	r8, r8, #15
 800d1fa:	4681      	mov	r9, r0
 800d1fc:	4641      	mov	r1, r8
 800d1fe:	4640      	mov	r0, r8
 800d200:	f7f3 f8bc 	bl	800037c <__aeabi_fmul>
 800d204:	4601      	mov	r1, r0
 800d206:	4630      	mov	r0, r6
 800d208:	f7f2 ffae 	bl	8000168 <__aeabi_fsub>
 800d20c:	4641      	mov	r1, r8
 800d20e:	4604      	mov	r4, r0
 800d210:	4638      	mov	r0, r7
 800d212:	f7f2 ffab 	bl	800016c <__addsf3>
 800d216:	4601      	mov	r1, r0
 800d218:	4620      	mov	r0, r4
 800d21a:	f7f3 f963 	bl	80004e4 <__aeabi_fdiv>
 800d21e:	4601      	mov	r1, r0
 800d220:	f7f2 ffa4 	bl	800016c <__addsf3>
 800d224:	4601      	mov	r1, r0
 800d226:	480c      	ldr	r0, [pc, #48]	@ (800d258 <__ieee754_asinf+0x248>)
 800d228:	f7f2 ff9e 	bl	8000168 <__aeabi_fsub>
 800d22c:	4601      	mov	r1, r0
 800d22e:	4648      	mov	r0, r9
 800d230:	f7f2 ff9a 	bl	8000168 <__aeabi_fsub>
 800d234:	4641      	mov	r1, r8
 800d236:	4604      	mov	r4, r0
 800d238:	4640      	mov	r0, r8
 800d23a:	f7f2 ff97 	bl	800016c <__addsf3>
 800d23e:	4601      	mov	r1, r0
 800d240:	4813      	ldr	r0, [pc, #76]	@ (800d290 <__ieee754_asinf+0x280>)
 800d242:	f7f2 ff91 	bl	8000168 <__aeabi_fsub>
 800d246:	4601      	mov	r1, r0
 800d248:	4620      	mov	r0, r4
 800d24a:	f7f2 ff8d 	bl	8000168 <__aeabi_fsub>
 800d24e:	4601      	mov	r1, r0
 800d250:	480f      	ldr	r0, [pc, #60]	@ (800d290 <__ieee754_asinf+0x280>)
 800d252:	e770      	b.n	800d136 <__ieee754_asinf+0x126>
 800d254:	3fc90fdb 	.word	0x3fc90fdb
 800d258:	b33bbd2e 	.word	0xb33bbd2e
 800d25c:	7149f2ca 	.word	0x7149f2ca
 800d260:	3811ef08 	.word	0x3811ef08
 800d264:	3a4f7f04 	.word	0x3a4f7f04
 800d268:	3d241146 	.word	0x3d241146
 800d26c:	3e4e0aa8 	.word	0x3e4e0aa8
 800d270:	3ea6b090 	.word	0x3ea6b090
 800d274:	3e2aaaab 	.word	0x3e2aaaab
 800d278:	3d9dc62e 	.word	0x3d9dc62e
 800d27c:	3f303361 	.word	0x3f303361
 800d280:	4001572d 	.word	0x4001572d
 800d284:	4019d139 	.word	0x4019d139
 800d288:	3f799999 	.word	0x3f799999
 800d28c:	333bbd2e 	.word	0x333bbd2e
 800d290:	3f490fdb 	.word	0x3f490fdb

0800d294 <__ieee754_atan2f>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800d29a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d29e:	4603      	mov	r3, r0
 800d2a0:	d805      	bhi.n	800d2ae <__ieee754_atan2f+0x1a>
 800d2a2:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800d2a6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d2aa:	4607      	mov	r7, r0
 800d2ac:	d904      	bls.n	800d2b8 <__ieee754_atan2f+0x24>
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7f2 ff5c 	bl	800016c <__addsf3>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	e010      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d2b8:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800d2bc:	d103      	bne.n	800d2c6 <__ieee754_atan2f+0x32>
 800d2be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d2c2:	f000 bbcd 	b.w	800da60 <atanf>
 800d2c6:	178c      	asrs	r4, r1, #30
 800d2c8:	f004 0402 	and.w	r4, r4, #2
 800d2cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d2d0:	b92a      	cbnz	r2, 800d2de <__ieee754_atan2f+0x4a>
 800d2d2:	2c02      	cmp	r4, #2
 800d2d4:	d04b      	beq.n	800d36e <__ieee754_atan2f+0xda>
 800d2d6:	2c03      	cmp	r4, #3
 800d2d8:	d04b      	beq.n	800d372 <__ieee754_atan2f+0xde>
 800d2da:	4618      	mov	r0, r3
 800d2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2de:	b91e      	cbnz	r6, 800d2e8 <__ieee754_atan2f+0x54>
 800d2e0:	2f00      	cmp	r7, #0
 800d2e2:	da4c      	bge.n	800d37e <__ieee754_atan2f+0xea>
 800d2e4:	4b27      	ldr	r3, [pc, #156]	@ (800d384 <__ieee754_atan2f+0xf0>)
 800d2e6:	e7f8      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d2e8:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d2ec:	d10e      	bne.n	800d30c <__ieee754_atan2f+0x78>
 800d2ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d2f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d2f6:	d105      	bne.n	800d304 <__ieee754_atan2f+0x70>
 800d2f8:	2c02      	cmp	r4, #2
 800d2fa:	d83c      	bhi.n	800d376 <__ieee754_atan2f+0xe2>
 800d2fc:	4b22      	ldr	r3, [pc, #136]	@ (800d388 <__ieee754_atan2f+0xf4>)
 800d2fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d302:	e7ea      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d304:	2c02      	cmp	r4, #2
 800d306:	d838      	bhi.n	800d37a <__ieee754_atan2f+0xe6>
 800d308:	4b20      	ldr	r3, [pc, #128]	@ (800d38c <__ieee754_atan2f+0xf8>)
 800d30a:	e7f8      	b.n	800d2fe <__ieee754_atan2f+0x6a>
 800d30c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d310:	d0e6      	beq.n	800d2e0 <__ieee754_atan2f+0x4c>
 800d312:	1b92      	subs	r2, r2, r6
 800d314:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800d318:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800d31c:	da17      	bge.n	800d34e <__ieee754_atan2f+0xba>
 800d31e:	2900      	cmp	r1, #0
 800d320:	da01      	bge.n	800d326 <__ieee754_atan2f+0x92>
 800d322:	303c      	adds	r0, #60	@ 0x3c
 800d324:	db15      	blt.n	800d352 <__ieee754_atan2f+0xbe>
 800d326:	4618      	mov	r0, r3
 800d328:	f7f3 f8dc 	bl	80004e4 <__aeabi_fdiv>
 800d32c:	f7ff fe61 	bl	800cff2 <fabsf>
 800d330:	f000 fb96 	bl	800da60 <atanf>
 800d334:	4603      	mov	r3, r0
 800d336:	2c01      	cmp	r4, #1
 800d338:	d00d      	beq.n	800d356 <__ieee754_atan2f+0xc2>
 800d33a:	2c02      	cmp	r4, #2
 800d33c:	d00e      	beq.n	800d35c <__ieee754_atan2f+0xc8>
 800d33e:	2c00      	cmp	r4, #0
 800d340:	d0cb      	beq.n	800d2da <__ieee754_atan2f+0x46>
 800d342:	4913      	ldr	r1, [pc, #76]	@ (800d390 <__ieee754_atan2f+0xfc>)
 800d344:	4618      	mov	r0, r3
 800d346:	f7f2 ff11 	bl	800016c <__addsf3>
 800d34a:	4912      	ldr	r1, [pc, #72]	@ (800d394 <__ieee754_atan2f+0x100>)
 800d34c:	e00c      	b.n	800d368 <__ieee754_atan2f+0xd4>
 800d34e:	4b12      	ldr	r3, [pc, #72]	@ (800d398 <__ieee754_atan2f+0x104>)
 800d350:	e7f1      	b.n	800d336 <__ieee754_atan2f+0xa2>
 800d352:	2300      	movs	r3, #0
 800d354:	e7ef      	b.n	800d336 <__ieee754_atan2f+0xa2>
 800d356:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d35a:	e7be      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d35c:	490c      	ldr	r1, [pc, #48]	@ (800d390 <__ieee754_atan2f+0xfc>)
 800d35e:	4618      	mov	r0, r3
 800d360:	f7f2 ff04 	bl	800016c <__addsf3>
 800d364:	4601      	mov	r1, r0
 800d366:	480b      	ldr	r0, [pc, #44]	@ (800d394 <__ieee754_atan2f+0x100>)
 800d368:	f7f2 fefe 	bl	8000168 <__aeabi_fsub>
 800d36c:	e7a2      	b.n	800d2b4 <__ieee754_atan2f+0x20>
 800d36e:	4b09      	ldr	r3, [pc, #36]	@ (800d394 <__ieee754_atan2f+0x100>)
 800d370:	e7b3      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d372:	4b0a      	ldr	r3, [pc, #40]	@ (800d39c <__ieee754_atan2f+0x108>)
 800d374:	e7b1      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d376:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a0 <__ieee754_atan2f+0x10c>)
 800d378:	e7af      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d37a:	2300      	movs	r3, #0
 800d37c:	e7ad      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d37e:	4b06      	ldr	r3, [pc, #24]	@ (800d398 <__ieee754_atan2f+0x104>)
 800d380:	e7ab      	b.n	800d2da <__ieee754_atan2f+0x46>
 800d382:	bf00      	nop
 800d384:	bfc90fdb 	.word	0xbfc90fdb
 800d388:	0800f37c 	.word	0x0800f37c
 800d38c:	0800f370 	.word	0x0800f370
 800d390:	33bbbd2e 	.word	0x33bbbd2e
 800d394:	40490fdb 	.word	0x40490fdb
 800d398:	3fc90fdb 	.word	0x3fc90fdb
 800d39c:	c0490fdb 	.word	0xc0490fdb
 800d3a0:	3f490fdb 	.word	0x3f490fdb

0800d3a4 <__ieee754_powf>:
 800d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	460f      	mov	r7, r1
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	460c      	mov	r4, r1
 800d3b4:	b087      	sub	sp, #28
 800d3b6:	d10c      	bne.n	800d3d2 <__ieee754_powf+0x2e>
 800d3b8:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800d3bc:	0076      	lsls	r6, r6, #1
 800d3be:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800d3c2:	f240 8336 	bls.w	800da32 <__ieee754_powf+0x68e>
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	4640      	mov	r0, r8
 800d3ca:	f7f2 fecf 	bl	800016c <__addsf3>
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	e03e      	b.n	800d450 <__ieee754_powf+0xac>
 800d3d2:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 800d3d6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d3da:	d802      	bhi.n	800d3e2 <__ieee754_powf+0x3e>
 800d3dc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800d3e0:	d908      	bls.n	800d3f4 <__ieee754_powf+0x50>
 800d3e2:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800d3e6:	d1ee      	bne.n	800d3c6 <__ieee754_powf+0x22>
 800d3e8:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d3ec:	0064      	lsls	r4, r4, #1
 800d3ee:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d3f2:	e7e6      	b.n	800d3c2 <__ieee754_powf+0x1e>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	da1e      	bge.n	800d436 <__ieee754_powf+0x92>
 800d3f8:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800d3fc:	d22c      	bcs.n	800d458 <__ieee754_powf+0xb4>
 800d3fe:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800d402:	d333      	bcc.n	800d46c <__ieee754_powf+0xc8>
 800d404:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800d408:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d40c:	fa4b f503 	asr.w	r5, fp, r3
 800d410:	fa05 f303 	lsl.w	r3, r5, r3
 800d414:	455b      	cmp	r3, fp
 800d416:	d127      	bne.n	800d468 <__ieee754_powf+0xc4>
 800d418:	f005 0501 	and.w	r5, r5, #1
 800d41c:	f1c5 0502 	rsb	r5, r5, #2
 800d420:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800d424:	d123      	bne.n	800d46e <__ieee754_powf+0xca>
 800d426:	2c00      	cmp	r4, #0
 800d428:	4641      	mov	r1, r8
 800d42a:	da11      	bge.n	800d450 <__ieee754_powf+0xac>
 800d42c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d430:	f7f3 f858 	bl	80004e4 <__aeabi_fdiv>
 800d434:	e7cb      	b.n	800d3ce <__ieee754_powf+0x2a>
 800d436:	2500      	movs	r5, #0
 800d438:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800d43c:	d1f0      	bne.n	800d420 <__ieee754_powf+0x7c>
 800d43e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d442:	f000 82f6 	beq.w	800da32 <__ieee754_powf+0x68e>
 800d446:	d909      	bls.n	800d45c <__ieee754_powf+0xb8>
 800d448:	2c00      	cmp	r4, #0
 800d44a:	f2c0 82f5 	blt.w	800da38 <__ieee754_powf+0x694>
 800d44e:	4639      	mov	r1, r7
 800d450:	4608      	mov	r0, r1
 800d452:	b007      	add	sp, #28
 800d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d458:	2502      	movs	r5, #2
 800d45a:	e7ed      	b.n	800d438 <__ieee754_powf+0x94>
 800d45c:	2c00      	cmp	r4, #0
 800d45e:	f280 82eb 	bge.w	800da38 <__ieee754_powf+0x694>
 800d462:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800d466:	e7f3      	b.n	800d450 <__ieee754_powf+0xac>
 800d468:	2500      	movs	r5, #0
 800d46a:	e7d9      	b.n	800d420 <__ieee754_powf+0x7c>
 800d46c:	2500      	movs	r5, #0
 800d46e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800d472:	d104      	bne.n	800d47e <__ieee754_powf+0xda>
 800d474:	4641      	mov	r1, r8
 800d476:	4640      	mov	r0, r8
 800d478:	f7f2 ff80 	bl	800037c <__aeabi_fmul>
 800d47c:	e7a7      	b.n	800d3ce <__ieee754_powf+0x2a>
 800d47e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d482:	d107      	bne.n	800d494 <__ieee754_powf+0xf0>
 800d484:	2e00      	cmp	r6, #0
 800d486:	db05      	blt.n	800d494 <__ieee754_powf+0xf0>
 800d488:	4640      	mov	r0, r8
 800d48a:	b007      	add	sp, #28
 800d48c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	f000 bc5c 	b.w	800dd4c <__ieee754_sqrtf>
 800d494:	4640      	mov	r0, r8
 800d496:	f7ff fdac 	bl	800cff2 <fabsf>
 800d49a:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800d49e:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d4a2:	46ca      	mov	sl, r9
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	d002      	beq.n	800d4ae <__ieee754_powf+0x10a>
 800d4a8:	f1b9 0f00 	cmp.w	r9, #0
 800d4ac:	d117      	bne.n	800d4de <__ieee754_powf+0x13a>
 800d4ae:	2c00      	cmp	r4, #0
 800d4b0:	da04      	bge.n	800d4bc <__ieee754_powf+0x118>
 800d4b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d4b6:	f7f3 f815 	bl	80004e4 <__aeabi_fdiv>
 800d4ba:	4601      	mov	r1, r0
 800d4bc:	2e00      	cmp	r6, #0
 800d4be:	dac7      	bge.n	800d450 <__ieee754_powf+0xac>
 800d4c0:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 800d4c4:	ea59 0905 	orrs.w	r9, r9, r5
 800d4c8:	d104      	bne.n	800d4d4 <__ieee754_powf+0x130>
 800d4ca:	4608      	mov	r0, r1
 800d4cc:	f7f2 fe4c 	bl	8000168 <__aeabi_fsub>
 800d4d0:	4601      	mov	r1, r0
 800d4d2:	e7ad      	b.n	800d430 <__ieee754_powf+0x8c>
 800d4d4:	2d01      	cmp	r5, #1
 800d4d6:	d1bb      	bne.n	800d450 <__ieee754_powf+0xac>
 800d4d8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800d4dc:	e777      	b.n	800d3ce <__ieee754_powf+0x2a>
 800d4de:	0ff3      	lsrs	r3, r6, #31
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	9303      	str	r3, [sp, #12]
 800d4e4:	432b      	orrs	r3, r5
 800d4e6:	d101      	bne.n	800d4ec <__ieee754_powf+0x148>
 800d4e8:	4641      	mov	r1, r8
 800d4ea:	e7ee      	b.n	800d4ca <__ieee754_powf+0x126>
 800d4ec:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800d4f0:	f240 809e 	bls.w	800d630 <__ieee754_powf+0x28c>
 800d4f4:	4b47      	ldr	r3, [pc, #284]	@ (800d614 <__ieee754_powf+0x270>)
 800d4f6:	4599      	cmp	r9, r3
 800d4f8:	d807      	bhi.n	800d50a <__ieee754_powf+0x166>
 800d4fa:	2c00      	cmp	r4, #0
 800d4fc:	da0a      	bge.n	800d514 <__ieee754_powf+0x170>
 800d4fe:	2000      	movs	r0, #0
 800d500:	b007      	add	sp, #28
 800d502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d506:	f000 bc1c 	b.w	800dd42 <__math_oflowf>
 800d50a:	4b43      	ldr	r3, [pc, #268]	@ (800d618 <__ieee754_powf+0x274>)
 800d50c:	4599      	cmp	r9, r3
 800d50e:	d907      	bls.n	800d520 <__ieee754_powf+0x17c>
 800d510:	2c00      	cmp	r4, #0
 800d512:	dcf4      	bgt.n	800d4fe <__ieee754_powf+0x15a>
 800d514:	2000      	movs	r0, #0
 800d516:	b007      	add	sp, #28
 800d518:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51c:	f000 bc0d 	b.w	800dd3a <__math_uflowf>
 800d520:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d524:	f7f2 fe20 	bl	8000168 <__aeabi_fsub>
 800d528:	493c      	ldr	r1, [pc, #240]	@ (800d61c <__ieee754_powf+0x278>)
 800d52a:	4606      	mov	r6, r0
 800d52c:	f7f2 ff26 	bl	800037c <__aeabi_fmul>
 800d530:	493b      	ldr	r1, [pc, #236]	@ (800d620 <__ieee754_powf+0x27c>)
 800d532:	4680      	mov	r8, r0
 800d534:	4630      	mov	r0, r6
 800d536:	f7f2 ff21 	bl	800037c <__aeabi_fmul>
 800d53a:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800d53e:	4681      	mov	r9, r0
 800d540:	4630      	mov	r0, r6
 800d542:	f7f2 ff1b 	bl	800037c <__aeabi_fmul>
 800d546:	4601      	mov	r1, r0
 800d548:	4836      	ldr	r0, [pc, #216]	@ (800d624 <__ieee754_powf+0x280>)
 800d54a:	f7f2 fe0d 	bl	8000168 <__aeabi_fsub>
 800d54e:	4631      	mov	r1, r6
 800d550:	f7f2 ff14 	bl	800037c <__aeabi_fmul>
 800d554:	4601      	mov	r1, r0
 800d556:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800d55a:	f7f2 fe05 	bl	8000168 <__aeabi_fsub>
 800d55e:	4631      	mov	r1, r6
 800d560:	4682      	mov	sl, r0
 800d562:	4630      	mov	r0, r6
 800d564:	f7f2 ff0a 	bl	800037c <__aeabi_fmul>
 800d568:	4601      	mov	r1, r0
 800d56a:	4650      	mov	r0, sl
 800d56c:	f7f2 ff06 	bl	800037c <__aeabi_fmul>
 800d570:	492d      	ldr	r1, [pc, #180]	@ (800d628 <__ieee754_powf+0x284>)
 800d572:	f7f2 ff03 	bl	800037c <__aeabi_fmul>
 800d576:	4601      	mov	r1, r0
 800d578:	4648      	mov	r0, r9
 800d57a:	f7f2 fdf5 	bl	8000168 <__aeabi_fsub>
 800d57e:	4601      	mov	r1, r0
 800d580:	4606      	mov	r6, r0
 800d582:	4640      	mov	r0, r8
 800d584:	f7f2 fdf2 	bl	800016c <__addsf3>
 800d588:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800d58c:	f02b 0b0f 	bic.w	fp, fp, #15
 800d590:	4641      	mov	r1, r8
 800d592:	4658      	mov	r0, fp
 800d594:	f7f2 fde8 	bl	8000168 <__aeabi_fsub>
 800d598:	4601      	mov	r1, r0
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7f2 fde4 	bl	8000168 <__aeabi_fsub>
 800d5a0:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	3d01      	subs	r5, #1
 800d5a8:	f024 040f 	bic.w	r4, r4, #15
 800d5ac:	431d      	orrs	r5, r3
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	bf14      	ite	ne
 800d5b6:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800d5ba:	4d1c      	ldreq	r5, [pc, #112]	@ (800d62c <__ieee754_powf+0x288>)
 800d5bc:	f7f2 fdd4 	bl	8000168 <__aeabi_fsub>
 800d5c0:	4659      	mov	r1, fp
 800d5c2:	f7f2 fedb 	bl	800037c <__aeabi_fmul>
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f7f2 fed6 	bl	800037c <__aeabi_fmul>
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	4640      	mov	r0, r8
 800d5d4:	f7f2 fdca 	bl	800016c <__addsf3>
 800d5d8:	4621      	mov	r1, r4
 800d5da:	4606      	mov	r6, r0
 800d5dc:	4658      	mov	r0, fp
 800d5de:	f7f2 fecd 	bl	800037c <__aeabi_fmul>
 800d5e2:	4601      	mov	r1, r0
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f7f2 fdc0 	bl	800016c <__addsf3>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	4680      	mov	r8, r0
 800d5f2:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d5f6:	f340 8141 	ble.w	800d87c <__ieee754_powf+0x4d8>
 800d5fa:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800d5fe:	f240 812a 	bls.w	800d856 <__ieee754_powf+0x4b2>
 800d602:	2100      	movs	r1, #0
 800d604:	4628      	mov	r0, r5
 800d606:	f7f3 f857 	bl	80006b8 <__aeabi_fcmplt>
 800d60a:	3800      	subs	r0, #0
 800d60c:	bf18      	it	ne
 800d60e:	2001      	movne	r0, #1
 800d610:	e776      	b.n	800d500 <__ieee754_powf+0x15c>
 800d612:	bf00      	nop
 800d614:	3f7ffff3 	.word	0x3f7ffff3
 800d618:	3f800007 	.word	0x3f800007
 800d61c:	3fb8aa00 	.word	0x3fb8aa00
 800d620:	36eca570 	.word	0x36eca570
 800d624:	3eaaaaab 	.word	0x3eaaaaab
 800d628:	3fb8aa3b 	.word	0x3fb8aa3b
 800d62c:	bf800000 	.word	0xbf800000
 800d630:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800d634:	f040 810b 	bne.w	800d84e <__ieee754_powf+0x4aa>
 800d638:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800d63c:	f7f2 fe9e 	bl	800037c <__aeabi_fmul>
 800d640:	f06f 0217 	mvn.w	r2, #23
 800d644:	4682      	mov	sl, r0
 800d646:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800d64a:	3b7f      	subs	r3, #127	@ 0x7f
 800d64c:	441a      	add	r2, r3
 800d64e:	4b96      	ldr	r3, [pc, #600]	@ (800d8a8 <__ieee754_powf+0x504>)
 800d650:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800d654:	459a      	cmp	sl, r3
 800d656:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800d65a:	dd06      	ble.n	800d66a <__ieee754_powf+0x2c6>
 800d65c:	4b93      	ldr	r3, [pc, #588]	@ (800d8ac <__ieee754_powf+0x508>)
 800d65e:	459a      	cmp	sl, r3
 800d660:	f340 80f7 	ble.w	800d852 <__ieee754_powf+0x4ae>
 800d664:	3201      	adds	r2, #1
 800d666:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800d66a:	2300      	movs	r3, #0
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	9205      	str	r2, [sp, #20]
 800d670:	4b8f      	ldr	r3, [pc, #572]	@ (800d8b0 <__ieee754_powf+0x50c>)
 800d672:	9a01      	ldr	r2, [sp, #4]
 800d674:	4630      	mov	r0, r6
 800d676:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800d67a:	46b2      	mov	sl, r6
 800d67c:	4659      	mov	r1, fp
 800d67e:	f7f2 fd73 	bl	8000168 <__aeabi_fsub>
 800d682:	4631      	mov	r1, r6
 800d684:	4681      	mov	r9, r0
 800d686:	4658      	mov	r0, fp
 800d688:	f7f2 fd70 	bl	800016c <__addsf3>
 800d68c:	4601      	mov	r1, r0
 800d68e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d692:	f7f2 ff27 	bl	80004e4 <__aeabi_fdiv>
 800d696:	4601      	mov	r1, r0
 800d698:	9004      	str	r0, [sp, #16]
 800d69a:	4648      	mov	r0, r9
 800d69c:	f7f2 fe6e 	bl	800037c <__aeabi_fmul>
 800d6a0:	9002      	str	r0, [sp, #8]
 800d6a2:	9b02      	ldr	r3, [sp, #8]
 800d6a4:	1076      	asrs	r6, r6, #1
 800d6a6:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 800d6aa:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800d6b4:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800d6b8:	f028 080f 	bic.w	r8, r8, #15
 800d6bc:	4631      	mov	r1, r6
 800d6be:	4640      	mov	r0, r8
 800d6c0:	f7f2 fe5c 	bl	800037c <__aeabi_fmul>
 800d6c4:	4601      	mov	r1, r0
 800d6c6:	4648      	mov	r0, r9
 800d6c8:	f7f2 fd4e 	bl	8000168 <__aeabi_fsub>
 800d6cc:	4659      	mov	r1, fp
 800d6ce:	4681      	mov	r9, r0
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f7f2 fd49 	bl	8000168 <__aeabi_fsub>
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	4650      	mov	r0, sl
 800d6da:	f7f2 fd45 	bl	8000168 <__aeabi_fsub>
 800d6de:	4641      	mov	r1, r8
 800d6e0:	f7f2 fe4c 	bl	800037c <__aeabi_fmul>
 800d6e4:	4601      	mov	r1, r0
 800d6e6:	4648      	mov	r0, r9
 800d6e8:	f7f2 fd3e 	bl	8000168 <__aeabi_fsub>
 800d6ec:	9b04      	ldr	r3, [sp, #16]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	f7f2 fe44 	bl	800037c <__aeabi_fmul>
 800d6f4:	9902      	ldr	r1, [sp, #8]
 800d6f6:	4683      	mov	fp, r0
 800d6f8:	4608      	mov	r0, r1
 800d6fa:	f7f2 fe3f 	bl	800037c <__aeabi_fmul>
 800d6fe:	4606      	mov	r6, r0
 800d700:	496c      	ldr	r1, [pc, #432]	@ (800d8b4 <__ieee754_powf+0x510>)
 800d702:	f7f2 fe3b 	bl	800037c <__aeabi_fmul>
 800d706:	496c      	ldr	r1, [pc, #432]	@ (800d8b8 <__ieee754_powf+0x514>)
 800d708:	f7f2 fd30 	bl	800016c <__addsf3>
 800d70c:	4631      	mov	r1, r6
 800d70e:	f7f2 fe35 	bl	800037c <__aeabi_fmul>
 800d712:	496a      	ldr	r1, [pc, #424]	@ (800d8bc <__ieee754_powf+0x518>)
 800d714:	f7f2 fd2a 	bl	800016c <__addsf3>
 800d718:	4631      	mov	r1, r6
 800d71a:	f7f2 fe2f 	bl	800037c <__aeabi_fmul>
 800d71e:	4968      	ldr	r1, [pc, #416]	@ (800d8c0 <__ieee754_powf+0x51c>)
 800d720:	f7f2 fd24 	bl	800016c <__addsf3>
 800d724:	4631      	mov	r1, r6
 800d726:	f7f2 fe29 	bl	800037c <__aeabi_fmul>
 800d72a:	4966      	ldr	r1, [pc, #408]	@ (800d8c4 <__ieee754_powf+0x520>)
 800d72c:	f7f2 fd1e 	bl	800016c <__addsf3>
 800d730:	4631      	mov	r1, r6
 800d732:	f7f2 fe23 	bl	800037c <__aeabi_fmul>
 800d736:	4964      	ldr	r1, [pc, #400]	@ (800d8c8 <__ieee754_powf+0x524>)
 800d738:	f7f2 fd18 	bl	800016c <__addsf3>
 800d73c:	4631      	mov	r1, r6
 800d73e:	4681      	mov	r9, r0
 800d740:	4630      	mov	r0, r6
 800d742:	f7f2 fe1b 	bl	800037c <__aeabi_fmul>
 800d746:	4601      	mov	r1, r0
 800d748:	4648      	mov	r0, r9
 800d74a:	f7f2 fe17 	bl	800037c <__aeabi_fmul>
 800d74e:	4606      	mov	r6, r0
 800d750:	4641      	mov	r1, r8
 800d752:	9802      	ldr	r0, [sp, #8]
 800d754:	f7f2 fd0a 	bl	800016c <__addsf3>
 800d758:	4659      	mov	r1, fp
 800d75a:	f7f2 fe0f 	bl	800037c <__aeabi_fmul>
 800d75e:	4631      	mov	r1, r6
 800d760:	f7f2 fd04 	bl	800016c <__addsf3>
 800d764:	4641      	mov	r1, r8
 800d766:	4681      	mov	r9, r0
 800d768:	4640      	mov	r0, r8
 800d76a:	f7f2 fe07 	bl	800037c <__aeabi_fmul>
 800d76e:	4957      	ldr	r1, [pc, #348]	@ (800d8cc <__ieee754_powf+0x528>)
 800d770:	4682      	mov	sl, r0
 800d772:	f7f2 fcfb 	bl	800016c <__addsf3>
 800d776:	4649      	mov	r1, r9
 800d778:	f7f2 fcf8 	bl	800016c <__addsf3>
 800d77c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800d780:	f026 060f 	bic.w	r6, r6, #15
 800d784:	4631      	mov	r1, r6
 800d786:	4640      	mov	r0, r8
 800d788:	f7f2 fdf8 	bl	800037c <__aeabi_fmul>
 800d78c:	494f      	ldr	r1, [pc, #316]	@ (800d8cc <__ieee754_powf+0x528>)
 800d78e:	4680      	mov	r8, r0
 800d790:	4630      	mov	r0, r6
 800d792:	f7f2 fce9 	bl	8000168 <__aeabi_fsub>
 800d796:	4651      	mov	r1, sl
 800d798:	f7f2 fce6 	bl	8000168 <__aeabi_fsub>
 800d79c:	4601      	mov	r1, r0
 800d79e:	4648      	mov	r0, r9
 800d7a0:	f7f2 fce2 	bl	8000168 <__aeabi_fsub>
 800d7a4:	9902      	ldr	r1, [sp, #8]
 800d7a6:	f7f2 fde9 	bl	800037c <__aeabi_fmul>
 800d7aa:	4631      	mov	r1, r6
 800d7ac:	4681      	mov	r9, r0
 800d7ae:	4658      	mov	r0, fp
 800d7b0:	f7f2 fde4 	bl	800037c <__aeabi_fmul>
 800d7b4:	4601      	mov	r1, r0
 800d7b6:	4648      	mov	r0, r9
 800d7b8:	f7f2 fcd8 	bl	800016c <__addsf3>
 800d7bc:	4682      	mov	sl, r0
 800d7be:	4601      	mov	r1, r0
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	f7f2 fcd3 	bl	800016c <__addsf3>
 800d7c6:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800d7ca:	f026 060f 	bic.w	r6, r6, #15
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	493f      	ldr	r1, [pc, #252]	@ (800d8d0 <__ieee754_powf+0x52c>)
 800d7d2:	f7f2 fdd3 	bl	800037c <__aeabi_fmul>
 800d7d6:	4641      	mov	r1, r8
 800d7d8:	4681      	mov	r9, r0
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7f2 fcc4 	bl	8000168 <__aeabi_fsub>
 800d7e0:	4601      	mov	r1, r0
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	f7f2 fcc0 	bl	8000168 <__aeabi_fsub>
 800d7e8:	493a      	ldr	r1, [pc, #232]	@ (800d8d4 <__ieee754_powf+0x530>)
 800d7ea:	f7f2 fdc7 	bl	800037c <__aeabi_fmul>
 800d7ee:	493a      	ldr	r1, [pc, #232]	@ (800d8d8 <__ieee754_powf+0x534>)
 800d7f0:	4680      	mov	r8, r0
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7f2 fdc2 	bl	800037c <__aeabi_fmul>
 800d7f8:	4601      	mov	r1, r0
 800d7fa:	4640      	mov	r0, r8
 800d7fc:	f7f2 fcb6 	bl	800016c <__addsf3>
 800d800:	4b36      	ldr	r3, [pc, #216]	@ (800d8dc <__ieee754_powf+0x538>)
 800d802:	9a01      	ldr	r2, [sp, #4]
 800d804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d808:	f7f2 fcb0 	bl	800016c <__addsf3>
 800d80c:	9a05      	ldr	r2, [sp, #20]
 800d80e:	4606      	mov	r6, r0
 800d810:	4610      	mov	r0, r2
 800d812:	f7f2 fd5f 	bl	80002d4 <__aeabi_i2f>
 800d816:	4680      	mov	r8, r0
 800d818:	4b31      	ldr	r3, [pc, #196]	@ (800d8e0 <__ieee754_powf+0x53c>)
 800d81a:	9a01      	ldr	r2, [sp, #4]
 800d81c:	4631      	mov	r1, r6
 800d81e:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800d822:	4648      	mov	r0, r9
 800d824:	f7f2 fca2 	bl	800016c <__addsf3>
 800d828:	4651      	mov	r1, sl
 800d82a:	f7f2 fc9f 	bl	800016c <__addsf3>
 800d82e:	4641      	mov	r1, r8
 800d830:	f7f2 fc9c 	bl	800016c <__addsf3>
 800d834:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800d838:	f02b 0b0f 	bic.w	fp, fp, #15
 800d83c:	4641      	mov	r1, r8
 800d83e:	4658      	mov	r0, fp
 800d840:	f7f2 fc92 	bl	8000168 <__aeabi_fsub>
 800d844:	4651      	mov	r1, sl
 800d846:	f7f2 fc8f 	bl	8000168 <__aeabi_fsub>
 800d84a:	4649      	mov	r1, r9
 800d84c:	e6a2      	b.n	800d594 <__ieee754_powf+0x1f0>
 800d84e:	2200      	movs	r2, #0
 800d850:	e6f9      	b.n	800d646 <__ieee754_powf+0x2a2>
 800d852:	2301      	movs	r3, #1
 800d854:	e70a      	b.n	800d66c <__ieee754_powf+0x2c8>
 800d856:	d149      	bne.n	800d8ec <__ieee754_powf+0x548>
 800d858:	4922      	ldr	r1, [pc, #136]	@ (800d8e4 <__ieee754_powf+0x540>)
 800d85a:	4630      	mov	r0, r6
 800d85c:	f7f2 fc86 	bl	800016c <__addsf3>
 800d860:	4639      	mov	r1, r7
 800d862:	4681      	mov	r9, r0
 800d864:	4620      	mov	r0, r4
 800d866:	f7f2 fc7f 	bl	8000168 <__aeabi_fsub>
 800d86a:	4601      	mov	r1, r0
 800d86c:	4648      	mov	r0, r9
 800d86e:	f7f2 ff41 	bl	80006f4 <__aeabi_fcmpgt>
 800d872:	2800      	cmp	r0, #0
 800d874:	f47f aec5 	bne.w	800d602 <__ieee754_powf+0x25e>
 800d878:	2386      	movs	r3, #134	@ 0x86
 800d87a:	e03c      	b.n	800d8f6 <__ieee754_powf+0x552>
 800d87c:	4a1a      	ldr	r2, [pc, #104]	@ (800d8e8 <__ieee754_powf+0x544>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d907      	bls.n	800d892 <__ieee754_powf+0x4ee>
 800d882:	2100      	movs	r1, #0
 800d884:	4628      	mov	r0, r5
 800d886:	f7f2 ff17 	bl	80006b8 <__aeabi_fcmplt>
 800d88a:	3800      	subs	r0, #0
 800d88c:	bf18      	it	ne
 800d88e:	2001      	movne	r0, #1
 800d890:	e641      	b.n	800d516 <__ieee754_powf+0x172>
 800d892:	d12b      	bne.n	800d8ec <__ieee754_powf+0x548>
 800d894:	4639      	mov	r1, r7
 800d896:	f7f2 fc67 	bl	8000168 <__aeabi_fsub>
 800d89a:	4631      	mov	r1, r6
 800d89c:	f7f2 ff20 	bl	80006e0 <__aeabi_fcmpge>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d0e9      	beq.n	800d878 <__ieee754_powf+0x4d4>
 800d8a4:	e7ed      	b.n	800d882 <__ieee754_powf+0x4de>
 800d8a6:	bf00      	nop
 800d8a8:	001cc471 	.word	0x001cc471
 800d8ac:	005db3d6 	.word	0x005db3d6
 800d8b0:	0800f398 	.word	0x0800f398
 800d8b4:	3e53f142 	.word	0x3e53f142
 800d8b8:	3e6c3255 	.word	0x3e6c3255
 800d8bc:	3e8ba305 	.word	0x3e8ba305
 800d8c0:	3eaaaaab 	.word	0x3eaaaaab
 800d8c4:	3edb6db7 	.word	0x3edb6db7
 800d8c8:	3f19999a 	.word	0x3f19999a
 800d8cc:	40400000 	.word	0x40400000
 800d8d0:	3f763800 	.word	0x3f763800
 800d8d4:	3f76384f 	.word	0x3f76384f
 800d8d8:	369dc3a0 	.word	0x369dc3a0
 800d8dc:	0800f388 	.word	0x0800f388
 800d8e0:	0800f390 	.word	0x0800f390
 800d8e4:	3338aa3c 	.word	0x3338aa3c
 800d8e8:	43160000 	.word	0x43160000
 800d8ec:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d8f0:	f240 809b 	bls.w	800da2a <__ieee754_powf+0x686>
 800d8f4:	15db      	asrs	r3, r3, #23
 800d8f6:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800d8fa:	3b7e      	subs	r3, #126	@ 0x7e
 800d8fc:	411c      	asrs	r4, r3
 800d8fe:	4444      	add	r4, r8
 800d900:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800d904:	494d      	ldr	r1, [pc, #308]	@ (800da3c <__ieee754_powf+0x698>)
 800d906:	3b7f      	subs	r3, #127	@ 0x7f
 800d908:	4119      	asrs	r1, r3
 800d90a:	4021      	ands	r1, r4
 800d90c:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d910:	f1c3 0317 	rsb	r3, r3, #23
 800d914:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800d918:	4638      	mov	r0, r7
 800d91a:	411c      	asrs	r4, r3
 800d91c:	f1b8 0f00 	cmp.w	r8, #0
 800d920:	bfb8      	it	lt
 800d922:	4264      	neglt	r4, r4
 800d924:	f7f2 fc20 	bl	8000168 <__aeabi_fsub>
 800d928:	4607      	mov	r7, r0
 800d92a:	4631      	mov	r1, r6
 800d92c:	4638      	mov	r0, r7
 800d92e:	f7f2 fc1d 	bl	800016c <__addsf3>
 800d932:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800d936:	f028 080f 	bic.w	r8, r8, #15
 800d93a:	4640      	mov	r0, r8
 800d93c:	4940      	ldr	r1, [pc, #256]	@ (800da40 <__ieee754_powf+0x69c>)
 800d93e:	f7f2 fd1d 	bl	800037c <__aeabi_fmul>
 800d942:	4639      	mov	r1, r7
 800d944:	4681      	mov	r9, r0
 800d946:	4640      	mov	r0, r8
 800d948:	f7f2 fc0e 	bl	8000168 <__aeabi_fsub>
 800d94c:	4601      	mov	r1, r0
 800d94e:	4630      	mov	r0, r6
 800d950:	f7f2 fc0a 	bl	8000168 <__aeabi_fsub>
 800d954:	493b      	ldr	r1, [pc, #236]	@ (800da44 <__ieee754_powf+0x6a0>)
 800d956:	f7f2 fd11 	bl	800037c <__aeabi_fmul>
 800d95a:	493b      	ldr	r1, [pc, #236]	@ (800da48 <__ieee754_powf+0x6a4>)
 800d95c:	4606      	mov	r6, r0
 800d95e:	4640      	mov	r0, r8
 800d960:	f7f2 fd0c 	bl	800037c <__aeabi_fmul>
 800d964:	4601      	mov	r1, r0
 800d966:	4630      	mov	r0, r6
 800d968:	f7f2 fc00 	bl	800016c <__addsf3>
 800d96c:	4607      	mov	r7, r0
 800d96e:	4601      	mov	r1, r0
 800d970:	4648      	mov	r0, r9
 800d972:	f7f2 fbfb 	bl	800016c <__addsf3>
 800d976:	4649      	mov	r1, r9
 800d978:	4606      	mov	r6, r0
 800d97a:	f7f2 fbf5 	bl	8000168 <__aeabi_fsub>
 800d97e:	4601      	mov	r1, r0
 800d980:	4638      	mov	r0, r7
 800d982:	f7f2 fbf1 	bl	8000168 <__aeabi_fsub>
 800d986:	4631      	mov	r1, r6
 800d988:	4680      	mov	r8, r0
 800d98a:	4630      	mov	r0, r6
 800d98c:	f7f2 fcf6 	bl	800037c <__aeabi_fmul>
 800d990:	4607      	mov	r7, r0
 800d992:	492e      	ldr	r1, [pc, #184]	@ (800da4c <__ieee754_powf+0x6a8>)
 800d994:	f7f2 fcf2 	bl	800037c <__aeabi_fmul>
 800d998:	492d      	ldr	r1, [pc, #180]	@ (800da50 <__ieee754_powf+0x6ac>)
 800d99a:	f7f2 fbe5 	bl	8000168 <__aeabi_fsub>
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f2 fcec 	bl	800037c <__aeabi_fmul>
 800d9a4:	492b      	ldr	r1, [pc, #172]	@ (800da54 <__ieee754_powf+0x6b0>)
 800d9a6:	f7f2 fbe1 	bl	800016c <__addsf3>
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f7f2 fce6 	bl	800037c <__aeabi_fmul>
 800d9b0:	4929      	ldr	r1, [pc, #164]	@ (800da58 <__ieee754_powf+0x6b4>)
 800d9b2:	f7f2 fbd9 	bl	8000168 <__aeabi_fsub>
 800d9b6:	4639      	mov	r1, r7
 800d9b8:	f7f2 fce0 	bl	800037c <__aeabi_fmul>
 800d9bc:	4927      	ldr	r1, [pc, #156]	@ (800da5c <__ieee754_powf+0x6b8>)
 800d9be:	f7f2 fbd5 	bl	800016c <__addsf3>
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	f7f2 fcda 	bl	800037c <__aeabi_fmul>
 800d9c8:	4601      	mov	r1, r0
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f7f2 fbcc 	bl	8000168 <__aeabi_fsub>
 800d9d0:	4607      	mov	r7, r0
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f7f2 fcd1 	bl	800037c <__aeabi_fmul>
 800d9da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800d9de:	4681      	mov	r9, r0
 800d9e0:	4638      	mov	r0, r7
 800d9e2:	f7f2 fbc1 	bl	8000168 <__aeabi_fsub>
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	4648      	mov	r0, r9
 800d9ea:	f7f2 fd7b 	bl	80004e4 <__aeabi_fdiv>
 800d9ee:	4641      	mov	r1, r8
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7f2 fcc2 	bl	800037c <__aeabi_fmul>
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	f7f2 fbb7 	bl	800016c <__addsf3>
 800d9fe:	4601      	mov	r1, r0
 800da00:	4638      	mov	r0, r7
 800da02:	f7f2 fbb1 	bl	8000168 <__aeabi_fsub>
 800da06:	4631      	mov	r1, r6
 800da08:	f7f2 fbae 	bl	8000168 <__aeabi_fsub>
 800da0c:	4601      	mov	r1, r0
 800da0e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800da12:	f7f2 fba9 	bl	8000168 <__aeabi_fsub>
 800da16:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800da1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da1e:	da06      	bge.n	800da2e <__ieee754_powf+0x68a>
 800da20:	4621      	mov	r1, r4
 800da22:	f000 f929 	bl	800dc78 <scalbnf>
 800da26:	4629      	mov	r1, r5
 800da28:	e526      	b.n	800d478 <__ieee754_powf+0xd4>
 800da2a:	2400      	movs	r4, #0
 800da2c:	e77d      	b.n	800d92a <__ieee754_powf+0x586>
 800da2e:	4618      	mov	r0, r3
 800da30:	e7f9      	b.n	800da26 <__ieee754_powf+0x682>
 800da32:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800da36:	e50b      	b.n	800d450 <__ieee754_powf+0xac>
 800da38:	2100      	movs	r1, #0
 800da3a:	e509      	b.n	800d450 <__ieee754_powf+0xac>
 800da3c:	ff800000 	.word	0xff800000
 800da40:	3f317200 	.word	0x3f317200
 800da44:	3f317218 	.word	0x3f317218
 800da48:	35bfbe8c 	.word	0x35bfbe8c
 800da4c:	3331bb4c 	.word	0x3331bb4c
 800da50:	35ddea0e 	.word	0x35ddea0e
 800da54:	388ab355 	.word	0x388ab355
 800da58:	3b360b61 	.word	0x3b360b61
 800da5c:	3e2aaaab 	.word	0x3e2aaaab

0800da60 <atanf>:
 800da60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da64:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800da68:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800da6c:	4604      	mov	r4, r0
 800da6e:	4680      	mov	r8, r0
 800da70:	d30e      	bcc.n	800da90 <atanf+0x30>
 800da72:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800da76:	d904      	bls.n	800da82 <atanf+0x22>
 800da78:	4601      	mov	r1, r0
 800da7a:	f7f2 fb77 	bl	800016c <__addsf3>
 800da7e:	4604      	mov	r4, r0
 800da80:	e003      	b.n	800da8a <atanf+0x2a>
 800da82:	2800      	cmp	r0, #0
 800da84:	f340 80ce 	ble.w	800dc24 <atanf+0x1c4>
 800da88:	4c67      	ldr	r4, [pc, #412]	@ (800dc28 <atanf+0x1c8>)
 800da8a:	4620      	mov	r0, r4
 800da8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da90:	4b66      	ldr	r3, [pc, #408]	@ (800dc2c <atanf+0x1cc>)
 800da92:	429d      	cmp	r5, r3
 800da94:	d80e      	bhi.n	800dab4 <atanf+0x54>
 800da96:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800da9a:	d208      	bcs.n	800daae <atanf+0x4e>
 800da9c:	4964      	ldr	r1, [pc, #400]	@ (800dc30 <atanf+0x1d0>)
 800da9e:	f7f2 fb65 	bl	800016c <__addsf3>
 800daa2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800daa6:	f7f2 fe25 	bl	80006f4 <__aeabi_fcmpgt>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d1ed      	bne.n	800da8a <atanf+0x2a>
 800daae:	f04f 36ff 	mov.w	r6, #4294967295
 800dab2:	e01c      	b.n	800daee <atanf+0x8e>
 800dab4:	f7ff fa9d 	bl	800cff2 <fabsf>
 800dab8:	4b5e      	ldr	r3, [pc, #376]	@ (800dc34 <atanf+0x1d4>)
 800daba:	4604      	mov	r4, r0
 800dabc:	429d      	cmp	r5, r3
 800dabe:	d87c      	bhi.n	800dbba <atanf+0x15a>
 800dac0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800dac4:	429d      	cmp	r5, r3
 800dac6:	d867      	bhi.n	800db98 <atanf+0x138>
 800dac8:	4601      	mov	r1, r0
 800daca:	f7f2 fb4f 	bl	800016c <__addsf3>
 800dace:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800dad2:	f7f2 fb49 	bl	8000168 <__aeabi_fsub>
 800dad6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800dada:	4605      	mov	r5, r0
 800dadc:	4620      	mov	r0, r4
 800dade:	f7f2 fb45 	bl	800016c <__addsf3>
 800dae2:	4601      	mov	r1, r0
 800dae4:	4628      	mov	r0, r5
 800dae6:	f7f2 fcfd 	bl	80004e4 <__aeabi_fdiv>
 800daea:	2600      	movs	r6, #0
 800daec:	4604      	mov	r4, r0
 800daee:	4621      	mov	r1, r4
 800daf0:	4620      	mov	r0, r4
 800daf2:	f7f2 fc43 	bl	800037c <__aeabi_fmul>
 800daf6:	4601      	mov	r1, r0
 800daf8:	4607      	mov	r7, r0
 800dafa:	f7f2 fc3f 	bl	800037c <__aeabi_fmul>
 800dafe:	4605      	mov	r5, r0
 800db00:	494d      	ldr	r1, [pc, #308]	@ (800dc38 <atanf+0x1d8>)
 800db02:	f7f2 fc3b 	bl	800037c <__aeabi_fmul>
 800db06:	494d      	ldr	r1, [pc, #308]	@ (800dc3c <atanf+0x1dc>)
 800db08:	f7f2 fb30 	bl	800016c <__addsf3>
 800db0c:	4629      	mov	r1, r5
 800db0e:	f7f2 fc35 	bl	800037c <__aeabi_fmul>
 800db12:	494b      	ldr	r1, [pc, #300]	@ (800dc40 <atanf+0x1e0>)
 800db14:	f7f2 fb2a 	bl	800016c <__addsf3>
 800db18:	4629      	mov	r1, r5
 800db1a:	f7f2 fc2f 	bl	800037c <__aeabi_fmul>
 800db1e:	4949      	ldr	r1, [pc, #292]	@ (800dc44 <atanf+0x1e4>)
 800db20:	f7f2 fb24 	bl	800016c <__addsf3>
 800db24:	4629      	mov	r1, r5
 800db26:	f7f2 fc29 	bl	800037c <__aeabi_fmul>
 800db2a:	4947      	ldr	r1, [pc, #284]	@ (800dc48 <atanf+0x1e8>)
 800db2c:	f7f2 fb1e 	bl	800016c <__addsf3>
 800db30:	4629      	mov	r1, r5
 800db32:	f7f2 fc23 	bl	800037c <__aeabi_fmul>
 800db36:	4945      	ldr	r1, [pc, #276]	@ (800dc4c <atanf+0x1ec>)
 800db38:	f7f2 fb18 	bl	800016c <__addsf3>
 800db3c:	4639      	mov	r1, r7
 800db3e:	f7f2 fc1d 	bl	800037c <__aeabi_fmul>
 800db42:	4943      	ldr	r1, [pc, #268]	@ (800dc50 <atanf+0x1f0>)
 800db44:	4607      	mov	r7, r0
 800db46:	4628      	mov	r0, r5
 800db48:	f7f2 fc18 	bl	800037c <__aeabi_fmul>
 800db4c:	4941      	ldr	r1, [pc, #260]	@ (800dc54 <atanf+0x1f4>)
 800db4e:	f7f2 fb0b 	bl	8000168 <__aeabi_fsub>
 800db52:	4629      	mov	r1, r5
 800db54:	f7f2 fc12 	bl	800037c <__aeabi_fmul>
 800db58:	493f      	ldr	r1, [pc, #252]	@ (800dc58 <atanf+0x1f8>)
 800db5a:	f7f2 fb05 	bl	8000168 <__aeabi_fsub>
 800db5e:	4629      	mov	r1, r5
 800db60:	f7f2 fc0c 	bl	800037c <__aeabi_fmul>
 800db64:	493d      	ldr	r1, [pc, #244]	@ (800dc5c <atanf+0x1fc>)
 800db66:	f7f2 faff 	bl	8000168 <__aeabi_fsub>
 800db6a:	4629      	mov	r1, r5
 800db6c:	f7f2 fc06 	bl	800037c <__aeabi_fmul>
 800db70:	493b      	ldr	r1, [pc, #236]	@ (800dc60 <atanf+0x200>)
 800db72:	f7f2 faf9 	bl	8000168 <__aeabi_fsub>
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fc00 	bl	800037c <__aeabi_fmul>
 800db7c:	4601      	mov	r1, r0
 800db7e:	4638      	mov	r0, r7
 800db80:	f7f2 faf4 	bl	800016c <__addsf3>
 800db84:	4621      	mov	r1, r4
 800db86:	f7f2 fbf9 	bl	800037c <__aeabi_fmul>
 800db8a:	1c73      	adds	r3, r6, #1
 800db8c:	4601      	mov	r1, r0
 800db8e:	d133      	bne.n	800dbf8 <atanf+0x198>
 800db90:	4620      	mov	r0, r4
 800db92:	f7f2 fae9 	bl	8000168 <__aeabi_fsub>
 800db96:	e772      	b.n	800da7e <atanf+0x1e>
 800db98:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800db9c:	f7f2 fae4 	bl	8000168 <__aeabi_fsub>
 800dba0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800dba4:	4605      	mov	r5, r0
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7f2 fae0 	bl	800016c <__addsf3>
 800dbac:	4601      	mov	r1, r0
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f7f2 fc98 	bl	80004e4 <__aeabi_fdiv>
 800dbb4:	2601      	movs	r6, #1
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	e799      	b.n	800daee <atanf+0x8e>
 800dbba:	4b2a      	ldr	r3, [pc, #168]	@ (800dc64 <atanf+0x204>)
 800dbbc:	429d      	cmp	r5, r3
 800dbbe:	d814      	bhi.n	800dbea <atanf+0x18a>
 800dbc0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800dbc4:	f7f2 fad0 	bl	8000168 <__aeabi_fsub>
 800dbc8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800dbcc:	4605      	mov	r5, r0
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f7f2 fbd4 	bl	800037c <__aeabi_fmul>
 800dbd4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800dbd8:	f7f2 fac8 	bl	800016c <__addsf3>
 800dbdc:	4601      	mov	r1, r0
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f7f2 fc80 	bl	80004e4 <__aeabi_fdiv>
 800dbe4:	2602      	movs	r6, #2
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	e781      	b.n	800daee <atanf+0x8e>
 800dbea:	4601      	mov	r1, r0
 800dbec:	481e      	ldr	r0, [pc, #120]	@ (800dc68 <atanf+0x208>)
 800dbee:	f7f2 fc79 	bl	80004e4 <__aeabi_fdiv>
 800dbf2:	2603      	movs	r6, #3
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	e77a      	b.n	800daee <atanf+0x8e>
 800dbf8:	4b1c      	ldr	r3, [pc, #112]	@ (800dc6c <atanf+0x20c>)
 800dbfa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800dbfe:	f7f2 fab3 	bl	8000168 <__aeabi_fsub>
 800dc02:	4621      	mov	r1, r4
 800dc04:	f7f2 fab0 	bl	8000168 <__aeabi_fsub>
 800dc08:	4b19      	ldr	r3, [pc, #100]	@ (800dc70 <atanf+0x210>)
 800dc0a:	4601      	mov	r1, r0
 800dc0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc10:	f7f2 faaa 	bl	8000168 <__aeabi_fsub>
 800dc14:	f1b8 0f00 	cmp.w	r8, #0
 800dc18:	4604      	mov	r4, r0
 800dc1a:	f6bf af36 	bge.w	800da8a <atanf+0x2a>
 800dc1e:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800dc22:	e732      	b.n	800da8a <atanf+0x2a>
 800dc24:	4c13      	ldr	r4, [pc, #76]	@ (800dc74 <atanf+0x214>)
 800dc26:	e730      	b.n	800da8a <atanf+0x2a>
 800dc28:	3fc90fdb 	.word	0x3fc90fdb
 800dc2c:	3edfffff 	.word	0x3edfffff
 800dc30:	7149f2ca 	.word	0x7149f2ca
 800dc34:	3f97ffff 	.word	0x3f97ffff
 800dc38:	3c8569d7 	.word	0x3c8569d7
 800dc3c:	3d4bda59 	.word	0x3d4bda59
 800dc40:	3d886b35 	.word	0x3d886b35
 800dc44:	3dba2e6e 	.word	0x3dba2e6e
 800dc48:	3e124925 	.word	0x3e124925
 800dc4c:	3eaaaaab 	.word	0x3eaaaaab
 800dc50:	bd15a221 	.word	0xbd15a221
 800dc54:	3d6ef16b 	.word	0x3d6ef16b
 800dc58:	3d9d8795 	.word	0x3d9d8795
 800dc5c:	3de38e38 	.word	0x3de38e38
 800dc60:	3e4ccccd 	.word	0x3e4ccccd
 800dc64:	401bffff 	.word	0x401bffff
 800dc68:	bf800000 	.word	0xbf800000
 800dc6c:	0800f3a0 	.word	0x0800f3a0
 800dc70:	0800f3b0 	.word	0x0800f3b0
 800dc74:	bfc90fdb 	.word	0xbfc90fdb

0800dc78 <scalbnf>:
 800dc78:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4603      	mov	r3, r0
 800dc80:	460d      	mov	r5, r1
 800dc82:	4604      	mov	r4, r0
 800dc84:	d02e      	beq.n	800dce4 <scalbnf+0x6c>
 800dc86:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dc8a:	d304      	bcc.n	800dc96 <scalbnf+0x1e>
 800dc8c:	4601      	mov	r1, r0
 800dc8e:	f7f2 fa6d 	bl	800016c <__addsf3>
 800dc92:	4603      	mov	r3, r0
 800dc94:	e026      	b.n	800dce4 <scalbnf+0x6c>
 800dc96:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800dc9a:	d118      	bne.n	800dcce <scalbnf+0x56>
 800dc9c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800dca0:	f7f2 fb6c 	bl	800037c <__aeabi_fmul>
 800dca4:	4a17      	ldr	r2, [pc, #92]	@ (800dd04 <scalbnf+0x8c>)
 800dca6:	4603      	mov	r3, r0
 800dca8:	4295      	cmp	r5, r2
 800dcaa:	db0c      	blt.n	800dcc6 <scalbnf+0x4e>
 800dcac:	4604      	mov	r4, r0
 800dcae:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dcb2:	3a19      	subs	r2, #25
 800dcb4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800dcb8:	428d      	cmp	r5, r1
 800dcba:	dd0a      	ble.n	800dcd2 <scalbnf+0x5a>
 800dcbc:	4912      	ldr	r1, [pc, #72]	@ (800dd08 <scalbnf+0x90>)
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f361 001e 	bfi	r0, r1, #0, #31
 800dcc4:	e000      	b.n	800dcc8 <scalbnf+0x50>
 800dcc6:	4911      	ldr	r1, [pc, #68]	@ (800dd0c <scalbnf+0x94>)
 800dcc8:	f7f2 fb58 	bl	800037c <__aeabi_fmul>
 800dccc:	e7e1      	b.n	800dc92 <scalbnf+0x1a>
 800dcce:	0dd2      	lsrs	r2, r2, #23
 800dcd0:	e7f0      	b.n	800dcb4 <scalbnf+0x3c>
 800dcd2:	1951      	adds	r1, r2, r5
 800dcd4:	29fe      	cmp	r1, #254	@ 0xfe
 800dcd6:	dcf1      	bgt.n	800dcbc <scalbnf+0x44>
 800dcd8:	2900      	cmp	r1, #0
 800dcda:	dd05      	ble.n	800dce8 <scalbnf+0x70>
 800dcdc:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800dce0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800dce4:	4618      	mov	r0, r3
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	f111 0f16 	cmn.w	r1, #22
 800dcec:	da01      	bge.n	800dcf2 <scalbnf+0x7a>
 800dcee:	4907      	ldr	r1, [pc, #28]	@ (800dd0c <scalbnf+0x94>)
 800dcf0:	e7e5      	b.n	800dcbe <scalbnf+0x46>
 800dcf2:	f101 0019 	add.w	r0, r1, #25
 800dcf6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800dcfa:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800dcfe:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800dd02:	e7e1      	b.n	800dcc8 <scalbnf+0x50>
 800dd04:	ffff3cb0 	.word	0xffff3cb0
 800dd08:	7149f2ca 	.word	0x7149f2ca
 800dd0c:	0da24260 	.word	0x0da24260

0800dd10 <with_errnof>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	4604      	mov	r4, r0
 800dd14:	460d      	mov	r5, r1
 800dd16:	f000 fb57 	bl	800e3c8 <__errno>
 800dd1a:	6005      	str	r5, [r0, #0]
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}

0800dd20 <xflowf>:
 800dd20:	b508      	push	{r3, lr}
 800dd22:	b140      	cbz	r0, 800dd36 <xflowf+0x16>
 800dd24:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800dd28:	f7f2 fb28 	bl	800037c <__aeabi_fmul>
 800dd2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dd30:	2122      	movs	r1, #34	@ 0x22
 800dd32:	f7ff bfed 	b.w	800dd10 <with_errnof>
 800dd36:	4608      	mov	r0, r1
 800dd38:	e7f6      	b.n	800dd28 <xflowf+0x8>

0800dd3a <__math_uflowf>:
 800dd3a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800dd3e:	f7ff bfef 	b.w	800dd20 <xflowf>

0800dd42 <__math_oflowf>:
 800dd42:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800dd46:	f7ff bfeb 	b.w	800dd20 <xflowf>
	...

0800dd4c <__ieee754_sqrtf>:
 800dd4c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800dd50:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd58:	4603      	mov	r3, r0
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	d30a      	bcc.n	800dd74 <__ieee754_sqrtf+0x28>
 800dd5e:	4601      	mov	r1, r0
 800dd60:	f7f2 fb0c 	bl	800037c <__aeabi_fmul>
 800dd64:	4601      	mov	r1, r0
 800dd66:	4620      	mov	r0, r4
 800dd68:	f7f2 fa00 	bl	800016c <__addsf3>
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	4620      	mov	r0, r4
 800dd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd74:	2a00      	cmp	r2, #0
 800dd76:	d0fa      	beq.n	800dd6e <__ieee754_sqrtf+0x22>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	da06      	bge.n	800dd8a <__ieee754_sqrtf+0x3e>
 800dd7c:	4601      	mov	r1, r0
 800dd7e:	f7f2 f9f3 	bl	8000168 <__aeabi_fsub>
 800dd82:	4601      	mov	r1, r0
 800dd84:	f7f2 fbae 	bl	80004e4 <__aeabi_fdiv>
 800dd88:	e7f0      	b.n	800dd6c <__ieee754_sqrtf+0x20>
 800dd8a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800dd8e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800dd92:	d03e      	beq.n	800de12 <__ieee754_sqrtf+0xc6>
 800dd94:	2400      	movs	r4, #0
 800dd96:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800dd9a:	07ca      	lsls	r2, r1, #31
 800dd9c:	f04f 0019 	mov.w	r0, #25
 800dda0:	4626      	mov	r6, r4
 800dda2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800dda6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ddaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ddae:	bf58      	it	pl
 800ddb0:	005b      	lslpl	r3, r3, #1
 800ddb2:	106d      	asrs	r5, r5, #1
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	1872      	adds	r2, r6, r1
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	bfcf      	iteee	gt
 800ddbc:	461a      	movgt	r2, r3
 800ddbe:	1856      	addle	r6, r2, r1
 800ddc0:	1864      	addle	r4, r4, r1
 800ddc2:	1a9a      	suble	r2, r3, r2
 800ddc4:	3801      	subs	r0, #1
 800ddc6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800ddca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ddce:	d1f2      	bne.n	800ddb6 <__ieee754_sqrtf+0x6a>
 800ddd0:	b1ba      	cbz	r2, 800de02 <__ieee754_sqrtf+0xb6>
 800ddd2:	4e14      	ldr	r6, [pc, #80]	@ (800de24 <__ieee754_sqrtf+0xd8>)
 800ddd4:	4f14      	ldr	r7, [pc, #80]	@ (800de28 <__ieee754_sqrtf+0xdc>)
 800ddd6:	6830      	ldr	r0, [r6, #0]
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	f7f2 f9c5 	bl	8000168 <__aeabi_fsub>
 800ddde:	f8d6 8000 	ldr.w	r8, [r6]
 800dde2:	4601      	mov	r1, r0
 800dde4:	4640      	mov	r0, r8
 800dde6:	f7f2 fc71 	bl	80006cc <__aeabi_fcmple>
 800ddea:	b150      	cbz	r0, 800de02 <__ieee754_sqrtf+0xb6>
 800ddec:	6830      	ldr	r0, [r6, #0]
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	f7f2 f9bc 	bl	800016c <__addsf3>
 800ddf4:	6836      	ldr	r6, [r6, #0]
 800ddf6:	4601      	mov	r1, r0
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f7f2 fc5d 	bl	80006b8 <__aeabi_fcmplt>
 800ddfe:	b168      	cbz	r0, 800de1c <__ieee754_sqrtf+0xd0>
 800de00:	3402      	adds	r4, #2
 800de02:	1064      	asrs	r4, r4, #1
 800de04:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800de08:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800de0c:	e7af      	b.n	800dd6e <__ieee754_sqrtf+0x22>
 800de0e:	005b      	lsls	r3, r3, #1
 800de10:	3201      	adds	r2, #1
 800de12:	0218      	lsls	r0, r3, #8
 800de14:	d5fb      	bpl.n	800de0e <__ieee754_sqrtf+0xc2>
 800de16:	3a01      	subs	r2, #1
 800de18:	1a89      	subs	r1, r1, r2
 800de1a:	e7bb      	b.n	800dd94 <__ieee754_sqrtf+0x48>
 800de1c:	3401      	adds	r4, #1
 800de1e:	f024 0401 	bic.w	r4, r4, #1
 800de22:	e7ee      	b.n	800de02 <__ieee754_sqrtf+0xb6>
 800de24:	20000188 	.word	0x20000188
 800de28:	20000184 	.word	0x20000184

0800de2c <std>:
 800de2c:	2300      	movs	r3, #0
 800de2e:	b510      	push	{r4, lr}
 800de30:	4604      	mov	r4, r0
 800de32:	e9c0 3300 	strd	r3, r3, [r0]
 800de36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de3a:	6083      	str	r3, [r0, #8]
 800de3c:	8181      	strh	r1, [r0, #12]
 800de3e:	6643      	str	r3, [r0, #100]	@ 0x64
 800de40:	81c2      	strh	r2, [r0, #14]
 800de42:	6183      	str	r3, [r0, #24]
 800de44:	4619      	mov	r1, r3
 800de46:	2208      	movs	r2, #8
 800de48:	305c      	adds	r0, #92	@ 0x5c
 800de4a:	f000 fa19 	bl	800e280 <memset>
 800de4e:	4b0d      	ldr	r3, [pc, #52]	@ (800de84 <std+0x58>)
 800de50:	6224      	str	r4, [r4, #32]
 800de52:	6263      	str	r3, [r4, #36]	@ 0x24
 800de54:	4b0c      	ldr	r3, [pc, #48]	@ (800de88 <std+0x5c>)
 800de56:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de58:	4b0c      	ldr	r3, [pc, #48]	@ (800de8c <std+0x60>)
 800de5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de5c:	4b0c      	ldr	r3, [pc, #48]	@ (800de90 <std+0x64>)
 800de5e:	6323      	str	r3, [r4, #48]	@ 0x30
 800de60:	4b0c      	ldr	r3, [pc, #48]	@ (800de94 <std+0x68>)
 800de62:	429c      	cmp	r4, r3
 800de64:	d006      	beq.n	800de74 <std+0x48>
 800de66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800de6a:	4294      	cmp	r4, r2
 800de6c:	d002      	beq.n	800de74 <std+0x48>
 800de6e:	33d0      	adds	r3, #208	@ 0xd0
 800de70:	429c      	cmp	r4, r3
 800de72:	d105      	bne.n	800de80 <std+0x54>
 800de74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800de78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de7c:	f000 bace 	b.w	800e41c <__retarget_lock_init_recursive>
 800de80:	bd10      	pop	{r4, pc}
 800de82:	bf00      	nop
 800de84:	0800e0d1 	.word	0x0800e0d1
 800de88:	0800e0f3 	.word	0x0800e0f3
 800de8c:	0800e12b 	.word	0x0800e12b
 800de90:	0800e14f 	.word	0x0800e14f
 800de94:	20003044 	.word	0x20003044

0800de98 <stdio_exit_handler>:
 800de98:	4a02      	ldr	r2, [pc, #8]	@ (800dea4 <stdio_exit_handler+0xc>)
 800de9a:	4903      	ldr	r1, [pc, #12]	@ (800dea8 <stdio_exit_handler+0x10>)
 800de9c:	4803      	ldr	r0, [pc, #12]	@ (800deac <stdio_exit_handler+0x14>)
 800de9e:	f000 b869 	b.w	800df74 <_fwalk_sglue>
 800dea2:	bf00      	nop
 800dea4:	2000018c 	.word	0x2000018c
 800dea8:	0800ef81 	.word	0x0800ef81
 800deac:	2000019c 	.word	0x2000019c

0800deb0 <cleanup_stdio>:
 800deb0:	6841      	ldr	r1, [r0, #4]
 800deb2:	4b0c      	ldr	r3, [pc, #48]	@ (800dee4 <cleanup_stdio+0x34>)
 800deb4:	b510      	push	{r4, lr}
 800deb6:	4299      	cmp	r1, r3
 800deb8:	4604      	mov	r4, r0
 800deba:	d001      	beq.n	800dec0 <cleanup_stdio+0x10>
 800debc:	f001 f860 	bl	800ef80 <_fflush_r>
 800dec0:	68a1      	ldr	r1, [r4, #8]
 800dec2:	4b09      	ldr	r3, [pc, #36]	@ (800dee8 <cleanup_stdio+0x38>)
 800dec4:	4299      	cmp	r1, r3
 800dec6:	d002      	beq.n	800dece <cleanup_stdio+0x1e>
 800dec8:	4620      	mov	r0, r4
 800deca:	f001 f859 	bl	800ef80 <_fflush_r>
 800dece:	68e1      	ldr	r1, [r4, #12]
 800ded0:	4b06      	ldr	r3, [pc, #24]	@ (800deec <cleanup_stdio+0x3c>)
 800ded2:	4299      	cmp	r1, r3
 800ded4:	d004      	beq.n	800dee0 <cleanup_stdio+0x30>
 800ded6:	4620      	mov	r0, r4
 800ded8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dedc:	f001 b850 	b.w	800ef80 <_fflush_r>
 800dee0:	bd10      	pop	{r4, pc}
 800dee2:	bf00      	nop
 800dee4:	20003044 	.word	0x20003044
 800dee8:	200030ac 	.word	0x200030ac
 800deec:	20003114 	.word	0x20003114

0800def0 <global_stdio_init.part.0>:
 800def0:	b510      	push	{r4, lr}
 800def2:	4b0b      	ldr	r3, [pc, #44]	@ (800df20 <global_stdio_init.part.0+0x30>)
 800def4:	4c0b      	ldr	r4, [pc, #44]	@ (800df24 <global_stdio_init.part.0+0x34>)
 800def6:	4a0c      	ldr	r2, [pc, #48]	@ (800df28 <global_stdio_init.part.0+0x38>)
 800def8:	4620      	mov	r0, r4
 800defa:	601a      	str	r2, [r3, #0]
 800defc:	2104      	movs	r1, #4
 800defe:	2200      	movs	r2, #0
 800df00:	f7ff ff94 	bl	800de2c <std>
 800df04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df08:	2201      	movs	r2, #1
 800df0a:	2109      	movs	r1, #9
 800df0c:	f7ff ff8e 	bl	800de2c <std>
 800df10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df14:	2202      	movs	r2, #2
 800df16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df1a:	2112      	movs	r1, #18
 800df1c:	f7ff bf86 	b.w	800de2c <std>
 800df20:	2000317c 	.word	0x2000317c
 800df24:	20003044 	.word	0x20003044
 800df28:	0800de99 	.word	0x0800de99

0800df2c <__sfp_lock_acquire>:
 800df2c:	4801      	ldr	r0, [pc, #4]	@ (800df34 <__sfp_lock_acquire+0x8>)
 800df2e:	f000 ba76 	b.w	800e41e <__retarget_lock_acquire_recursive>
 800df32:	bf00      	nop
 800df34:	20003185 	.word	0x20003185

0800df38 <__sfp_lock_release>:
 800df38:	4801      	ldr	r0, [pc, #4]	@ (800df40 <__sfp_lock_release+0x8>)
 800df3a:	f000 ba71 	b.w	800e420 <__retarget_lock_release_recursive>
 800df3e:	bf00      	nop
 800df40:	20003185 	.word	0x20003185

0800df44 <__sinit>:
 800df44:	b510      	push	{r4, lr}
 800df46:	4604      	mov	r4, r0
 800df48:	f7ff fff0 	bl	800df2c <__sfp_lock_acquire>
 800df4c:	6a23      	ldr	r3, [r4, #32]
 800df4e:	b11b      	cbz	r3, 800df58 <__sinit+0x14>
 800df50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df54:	f7ff bff0 	b.w	800df38 <__sfp_lock_release>
 800df58:	4b04      	ldr	r3, [pc, #16]	@ (800df6c <__sinit+0x28>)
 800df5a:	6223      	str	r3, [r4, #32]
 800df5c:	4b04      	ldr	r3, [pc, #16]	@ (800df70 <__sinit+0x2c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1f5      	bne.n	800df50 <__sinit+0xc>
 800df64:	f7ff ffc4 	bl	800def0 <global_stdio_init.part.0>
 800df68:	e7f2      	b.n	800df50 <__sinit+0xc>
 800df6a:	bf00      	nop
 800df6c:	0800deb1 	.word	0x0800deb1
 800df70:	2000317c 	.word	0x2000317c

0800df74 <_fwalk_sglue>:
 800df74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df78:	4607      	mov	r7, r0
 800df7a:	4688      	mov	r8, r1
 800df7c:	4614      	mov	r4, r2
 800df7e:	2600      	movs	r6, #0
 800df80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df84:	f1b9 0901 	subs.w	r9, r9, #1
 800df88:	d505      	bpl.n	800df96 <_fwalk_sglue+0x22>
 800df8a:	6824      	ldr	r4, [r4, #0]
 800df8c:	2c00      	cmp	r4, #0
 800df8e:	d1f7      	bne.n	800df80 <_fwalk_sglue+0xc>
 800df90:	4630      	mov	r0, r6
 800df92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df96:	89ab      	ldrh	r3, [r5, #12]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d907      	bls.n	800dfac <_fwalk_sglue+0x38>
 800df9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	d003      	beq.n	800dfac <_fwalk_sglue+0x38>
 800dfa4:	4629      	mov	r1, r5
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	47c0      	blx	r8
 800dfaa:	4306      	orrs	r6, r0
 800dfac:	3568      	adds	r5, #104	@ 0x68
 800dfae:	e7e9      	b.n	800df84 <_fwalk_sglue+0x10>

0800dfb0 <iprintf>:
 800dfb0:	b40f      	push	{r0, r1, r2, r3}
 800dfb2:	b507      	push	{r0, r1, r2, lr}
 800dfb4:	4906      	ldr	r1, [pc, #24]	@ (800dfd0 <iprintf+0x20>)
 800dfb6:	ab04      	add	r3, sp, #16
 800dfb8:	6808      	ldr	r0, [r1, #0]
 800dfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfbe:	6881      	ldr	r1, [r0, #8]
 800dfc0:	9301      	str	r3, [sp, #4]
 800dfc2:	f000 fcb3 	bl	800e92c <_vfiprintf_r>
 800dfc6:	b003      	add	sp, #12
 800dfc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfcc:	b004      	add	sp, #16
 800dfce:	4770      	bx	lr
 800dfd0:	20000198 	.word	0x20000198

0800dfd4 <_puts_r>:
 800dfd4:	6a03      	ldr	r3, [r0, #32]
 800dfd6:	b570      	push	{r4, r5, r6, lr}
 800dfd8:	4605      	mov	r5, r0
 800dfda:	460e      	mov	r6, r1
 800dfdc:	6884      	ldr	r4, [r0, #8]
 800dfde:	b90b      	cbnz	r3, 800dfe4 <_puts_r+0x10>
 800dfe0:	f7ff ffb0 	bl	800df44 <__sinit>
 800dfe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfe6:	07db      	lsls	r3, r3, #31
 800dfe8:	d405      	bmi.n	800dff6 <_puts_r+0x22>
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	0598      	lsls	r0, r3, #22
 800dfee:	d402      	bmi.n	800dff6 <_puts_r+0x22>
 800dff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dff2:	f000 fa14 	bl	800e41e <__retarget_lock_acquire_recursive>
 800dff6:	89a3      	ldrh	r3, [r4, #12]
 800dff8:	0719      	lsls	r1, r3, #28
 800dffa:	d502      	bpl.n	800e002 <_puts_r+0x2e>
 800dffc:	6923      	ldr	r3, [r4, #16]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d135      	bne.n	800e06e <_puts_r+0x9a>
 800e002:	4621      	mov	r1, r4
 800e004:	4628      	mov	r0, r5
 800e006:	f000 f8e5 	bl	800e1d4 <__swsetup_r>
 800e00a:	b380      	cbz	r0, 800e06e <_puts_r+0x9a>
 800e00c:	f04f 35ff 	mov.w	r5, #4294967295
 800e010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e012:	07da      	lsls	r2, r3, #31
 800e014:	d405      	bmi.n	800e022 <_puts_r+0x4e>
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	059b      	lsls	r3, r3, #22
 800e01a:	d402      	bmi.n	800e022 <_puts_r+0x4e>
 800e01c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e01e:	f000 f9ff 	bl	800e420 <__retarget_lock_release_recursive>
 800e022:	4628      	mov	r0, r5
 800e024:	bd70      	pop	{r4, r5, r6, pc}
 800e026:	2b00      	cmp	r3, #0
 800e028:	da04      	bge.n	800e034 <_puts_r+0x60>
 800e02a:	69a2      	ldr	r2, [r4, #24]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	dc17      	bgt.n	800e060 <_puts_r+0x8c>
 800e030:	290a      	cmp	r1, #10
 800e032:	d015      	beq.n	800e060 <_puts_r+0x8c>
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	6022      	str	r2, [r4, #0]
 800e03a:	7019      	strb	r1, [r3, #0]
 800e03c:	68a3      	ldr	r3, [r4, #8]
 800e03e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e042:	3b01      	subs	r3, #1
 800e044:	60a3      	str	r3, [r4, #8]
 800e046:	2900      	cmp	r1, #0
 800e048:	d1ed      	bne.n	800e026 <_puts_r+0x52>
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	da11      	bge.n	800e072 <_puts_r+0x9e>
 800e04e:	4622      	mov	r2, r4
 800e050:	210a      	movs	r1, #10
 800e052:	4628      	mov	r0, r5
 800e054:	f000 f87f 	bl	800e156 <__swbuf_r>
 800e058:	3001      	adds	r0, #1
 800e05a:	d0d7      	beq.n	800e00c <_puts_r+0x38>
 800e05c:	250a      	movs	r5, #10
 800e05e:	e7d7      	b.n	800e010 <_puts_r+0x3c>
 800e060:	4622      	mov	r2, r4
 800e062:	4628      	mov	r0, r5
 800e064:	f000 f877 	bl	800e156 <__swbuf_r>
 800e068:	3001      	adds	r0, #1
 800e06a:	d1e7      	bne.n	800e03c <_puts_r+0x68>
 800e06c:	e7ce      	b.n	800e00c <_puts_r+0x38>
 800e06e:	3e01      	subs	r6, #1
 800e070:	e7e4      	b.n	800e03c <_puts_r+0x68>
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	6022      	str	r2, [r4, #0]
 800e078:	220a      	movs	r2, #10
 800e07a:	701a      	strb	r2, [r3, #0]
 800e07c:	e7ee      	b.n	800e05c <_puts_r+0x88>
	...

0800e080 <puts>:
 800e080:	4b02      	ldr	r3, [pc, #8]	@ (800e08c <puts+0xc>)
 800e082:	4601      	mov	r1, r0
 800e084:	6818      	ldr	r0, [r3, #0]
 800e086:	f7ff bfa5 	b.w	800dfd4 <_puts_r>
 800e08a:	bf00      	nop
 800e08c:	20000198 	.word	0x20000198

0800e090 <siprintf>:
 800e090:	b40e      	push	{r1, r2, r3}
 800e092:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e096:	b500      	push	{lr}
 800e098:	b09c      	sub	sp, #112	@ 0x70
 800e09a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e09c:	9002      	str	r0, [sp, #8]
 800e09e:	9006      	str	r0, [sp, #24]
 800e0a0:	9107      	str	r1, [sp, #28]
 800e0a2:	9104      	str	r1, [sp, #16]
 800e0a4:	4808      	ldr	r0, [pc, #32]	@ (800e0c8 <siprintf+0x38>)
 800e0a6:	4909      	ldr	r1, [pc, #36]	@ (800e0cc <siprintf+0x3c>)
 800e0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0ac:	9105      	str	r1, [sp, #20]
 800e0ae:	6800      	ldr	r0, [r0, #0]
 800e0b0:	a902      	add	r1, sp, #8
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	f000 fb16 	bl	800e6e4 <_svfiprintf_r>
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	9b02      	ldr	r3, [sp, #8]
 800e0bc:	701a      	strb	r2, [r3, #0]
 800e0be:	b01c      	add	sp, #112	@ 0x70
 800e0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0c4:	b003      	add	sp, #12
 800e0c6:	4770      	bx	lr
 800e0c8:	20000198 	.word	0x20000198
 800e0cc:	ffff0208 	.word	0xffff0208

0800e0d0 <__sread>:
 800e0d0:	b510      	push	{r4, lr}
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d8:	f000 f952 	bl	800e380 <_read_r>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	bfab      	itete	ge
 800e0e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800e0e4:	181b      	addge	r3, r3, r0
 800e0e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e0ea:	bfac      	ite	ge
 800e0ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0ee:	81a3      	strhlt	r3, [r4, #12]
 800e0f0:	bd10      	pop	{r4, pc}

0800e0f2 <__swrite>:
 800e0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f6:	461f      	mov	r7, r3
 800e0f8:	898b      	ldrh	r3, [r1, #12]
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	05db      	lsls	r3, r3, #23
 800e0fe:	460c      	mov	r4, r1
 800e100:	4616      	mov	r6, r2
 800e102:	d505      	bpl.n	800e110 <__swrite+0x1e>
 800e104:	2302      	movs	r3, #2
 800e106:	2200      	movs	r2, #0
 800e108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e10c:	f000 f926 	bl	800e35c <_lseek_r>
 800e110:	89a3      	ldrh	r3, [r4, #12]
 800e112:	4632      	mov	r2, r6
 800e114:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e118:	81a3      	strh	r3, [r4, #12]
 800e11a:	4628      	mov	r0, r5
 800e11c:	463b      	mov	r3, r7
 800e11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e126:	f000 b93d 	b.w	800e3a4 <_write_r>

0800e12a <__sseek>:
 800e12a:	b510      	push	{r4, lr}
 800e12c:	460c      	mov	r4, r1
 800e12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e132:	f000 f913 	bl	800e35c <_lseek_r>
 800e136:	1c43      	adds	r3, r0, #1
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	bf15      	itete	ne
 800e13c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e13e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e142:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e146:	81a3      	strheq	r3, [r4, #12]
 800e148:	bf18      	it	ne
 800e14a:	81a3      	strhne	r3, [r4, #12]
 800e14c:	bd10      	pop	{r4, pc}

0800e14e <__sclose>:
 800e14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e152:	f000 b89d 	b.w	800e290 <_close_r>

0800e156 <__swbuf_r>:
 800e156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e158:	460e      	mov	r6, r1
 800e15a:	4614      	mov	r4, r2
 800e15c:	4605      	mov	r5, r0
 800e15e:	b118      	cbz	r0, 800e168 <__swbuf_r+0x12>
 800e160:	6a03      	ldr	r3, [r0, #32]
 800e162:	b90b      	cbnz	r3, 800e168 <__swbuf_r+0x12>
 800e164:	f7ff feee 	bl	800df44 <__sinit>
 800e168:	69a3      	ldr	r3, [r4, #24]
 800e16a:	60a3      	str	r3, [r4, #8]
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	071a      	lsls	r2, r3, #28
 800e170:	d501      	bpl.n	800e176 <__swbuf_r+0x20>
 800e172:	6923      	ldr	r3, [r4, #16]
 800e174:	b943      	cbnz	r3, 800e188 <__swbuf_r+0x32>
 800e176:	4621      	mov	r1, r4
 800e178:	4628      	mov	r0, r5
 800e17a:	f000 f82b 	bl	800e1d4 <__swsetup_r>
 800e17e:	b118      	cbz	r0, 800e188 <__swbuf_r+0x32>
 800e180:	f04f 37ff 	mov.w	r7, #4294967295
 800e184:	4638      	mov	r0, r7
 800e186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	6922      	ldr	r2, [r4, #16]
 800e18c:	b2f6      	uxtb	r6, r6
 800e18e:	1a98      	subs	r0, r3, r2
 800e190:	6963      	ldr	r3, [r4, #20]
 800e192:	4637      	mov	r7, r6
 800e194:	4283      	cmp	r3, r0
 800e196:	dc05      	bgt.n	800e1a4 <__swbuf_r+0x4e>
 800e198:	4621      	mov	r1, r4
 800e19a:	4628      	mov	r0, r5
 800e19c:	f000 fef0 	bl	800ef80 <_fflush_r>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1ed      	bne.n	800e180 <__swbuf_r+0x2a>
 800e1a4:	68a3      	ldr	r3, [r4, #8]
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	60a3      	str	r3, [r4, #8]
 800e1aa:	6823      	ldr	r3, [r4, #0]
 800e1ac:	1c5a      	adds	r2, r3, #1
 800e1ae:	6022      	str	r2, [r4, #0]
 800e1b0:	701e      	strb	r6, [r3, #0]
 800e1b2:	6962      	ldr	r2, [r4, #20]
 800e1b4:	1c43      	adds	r3, r0, #1
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d004      	beq.n	800e1c4 <__swbuf_r+0x6e>
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	07db      	lsls	r3, r3, #31
 800e1be:	d5e1      	bpl.n	800e184 <__swbuf_r+0x2e>
 800e1c0:	2e0a      	cmp	r6, #10
 800e1c2:	d1df      	bne.n	800e184 <__swbuf_r+0x2e>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 feda 	bl	800ef80 <_fflush_r>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d0d9      	beq.n	800e184 <__swbuf_r+0x2e>
 800e1d0:	e7d6      	b.n	800e180 <__swbuf_r+0x2a>
	...

0800e1d4 <__swsetup_r>:
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	4b29      	ldr	r3, [pc, #164]	@ (800e27c <__swsetup_r+0xa8>)
 800e1d8:	4605      	mov	r5, r0
 800e1da:	6818      	ldr	r0, [r3, #0]
 800e1dc:	460c      	mov	r4, r1
 800e1de:	b118      	cbz	r0, 800e1e8 <__swsetup_r+0x14>
 800e1e0:	6a03      	ldr	r3, [r0, #32]
 800e1e2:	b90b      	cbnz	r3, 800e1e8 <__swsetup_r+0x14>
 800e1e4:	f7ff feae 	bl	800df44 <__sinit>
 800e1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ec:	0719      	lsls	r1, r3, #28
 800e1ee:	d422      	bmi.n	800e236 <__swsetup_r+0x62>
 800e1f0:	06da      	lsls	r2, r3, #27
 800e1f2:	d407      	bmi.n	800e204 <__swsetup_r+0x30>
 800e1f4:	2209      	movs	r2, #9
 800e1f6:	602a      	str	r2, [r5, #0]
 800e1f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e200:	81a3      	strh	r3, [r4, #12]
 800e202:	e033      	b.n	800e26c <__swsetup_r+0x98>
 800e204:	0758      	lsls	r0, r3, #29
 800e206:	d512      	bpl.n	800e22e <__swsetup_r+0x5a>
 800e208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e20a:	b141      	cbz	r1, 800e21e <__swsetup_r+0x4a>
 800e20c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e210:	4299      	cmp	r1, r3
 800e212:	d002      	beq.n	800e21a <__swsetup_r+0x46>
 800e214:	4628      	mov	r0, r5
 800e216:	f000 f913 	bl	800e440 <_free_r>
 800e21a:	2300      	movs	r3, #0
 800e21c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e224:	81a3      	strh	r3, [r4, #12]
 800e226:	2300      	movs	r3, #0
 800e228:	6063      	str	r3, [r4, #4]
 800e22a:	6923      	ldr	r3, [r4, #16]
 800e22c:	6023      	str	r3, [r4, #0]
 800e22e:	89a3      	ldrh	r3, [r4, #12]
 800e230:	f043 0308 	orr.w	r3, r3, #8
 800e234:	81a3      	strh	r3, [r4, #12]
 800e236:	6923      	ldr	r3, [r4, #16]
 800e238:	b94b      	cbnz	r3, 800e24e <__swsetup_r+0x7a>
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e244:	d003      	beq.n	800e24e <__swsetup_r+0x7a>
 800e246:	4621      	mov	r1, r4
 800e248:	4628      	mov	r0, r5
 800e24a:	f000 fee6 	bl	800f01a <__smakebuf_r>
 800e24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e252:	f013 0201 	ands.w	r2, r3, #1
 800e256:	d00a      	beq.n	800e26e <__swsetup_r+0x9a>
 800e258:	2200      	movs	r2, #0
 800e25a:	60a2      	str	r2, [r4, #8]
 800e25c:	6962      	ldr	r2, [r4, #20]
 800e25e:	4252      	negs	r2, r2
 800e260:	61a2      	str	r2, [r4, #24]
 800e262:	6922      	ldr	r2, [r4, #16]
 800e264:	b942      	cbnz	r2, 800e278 <__swsetup_r+0xa4>
 800e266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e26a:	d1c5      	bne.n	800e1f8 <__swsetup_r+0x24>
 800e26c:	bd38      	pop	{r3, r4, r5, pc}
 800e26e:	0799      	lsls	r1, r3, #30
 800e270:	bf58      	it	pl
 800e272:	6962      	ldrpl	r2, [r4, #20]
 800e274:	60a2      	str	r2, [r4, #8]
 800e276:	e7f4      	b.n	800e262 <__swsetup_r+0x8e>
 800e278:	2000      	movs	r0, #0
 800e27a:	e7f7      	b.n	800e26c <__swsetup_r+0x98>
 800e27c:	20000198 	.word	0x20000198

0800e280 <memset>:
 800e280:	4603      	mov	r3, r0
 800e282:	4402      	add	r2, r0
 800e284:	4293      	cmp	r3, r2
 800e286:	d100      	bne.n	800e28a <memset+0xa>
 800e288:	4770      	bx	lr
 800e28a:	f803 1b01 	strb.w	r1, [r3], #1
 800e28e:	e7f9      	b.n	800e284 <memset+0x4>

0800e290 <_close_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	2300      	movs	r3, #0
 800e294:	4d05      	ldr	r5, [pc, #20]	@ (800e2ac <_close_r+0x1c>)
 800e296:	4604      	mov	r4, r0
 800e298:	4608      	mov	r0, r1
 800e29a:	602b      	str	r3, [r5, #0]
 800e29c:	f7f3 fc55 	bl	8001b4a <_close>
 800e2a0:	1c43      	adds	r3, r0, #1
 800e2a2:	d102      	bne.n	800e2aa <_close_r+0x1a>
 800e2a4:	682b      	ldr	r3, [r5, #0]
 800e2a6:	b103      	cbz	r3, 800e2aa <_close_r+0x1a>
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	bd38      	pop	{r3, r4, r5, pc}
 800e2ac:	20003180 	.word	0x20003180

0800e2b0 <_reclaim_reent>:
 800e2b0:	4b29      	ldr	r3, [pc, #164]	@ (800e358 <_reclaim_reent+0xa8>)
 800e2b2:	b570      	push	{r4, r5, r6, lr}
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4283      	cmp	r3, r0
 800e2ba:	d04b      	beq.n	800e354 <_reclaim_reent+0xa4>
 800e2bc:	69c3      	ldr	r3, [r0, #28]
 800e2be:	b1ab      	cbz	r3, 800e2ec <_reclaim_reent+0x3c>
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	b16b      	cbz	r3, 800e2e0 <_reclaim_reent+0x30>
 800e2c4:	2500      	movs	r5, #0
 800e2c6:	69e3      	ldr	r3, [r4, #28]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	5959      	ldr	r1, [r3, r5]
 800e2cc:	2900      	cmp	r1, #0
 800e2ce:	d13b      	bne.n	800e348 <_reclaim_reent+0x98>
 800e2d0:	3504      	adds	r5, #4
 800e2d2:	2d80      	cmp	r5, #128	@ 0x80
 800e2d4:	d1f7      	bne.n	800e2c6 <_reclaim_reent+0x16>
 800e2d6:	69e3      	ldr	r3, [r4, #28]
 800e2d8:	4620      	mov	r0, r4
 800e2da:	68d9      	ldr	r1, [r3, #12]
 800e2dc:	f000 f8b0 	bl	800e440 <_free_r>
 800e2e0:	69e3      	ldr	r3, [r4, #28]
 800e2e2:	6819      	ldr	r1, [r3, #0]
 800e2e4:	b111      	cbz	r1, 800e2ec <_reclaim_reent+0x3c>
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f000 f8aa 	bl	800e440 <_free_r>
 800e2ec:	6961      	ldr	r1, [r4, #20]
 800e2ee:	b111      	cbz	r1, 800e2f6 <_reclaim_reent+0x46>
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f000 f8a5 	bl	800e440 <_free_r>
 800e2f6:	69e1      	ldr	r1, [r4, #28]
 800e2f8:	b111      	cbz	r1, 800e300 <_reclaim_reent+0x50>
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f000 f8a0 	bl	800e440 <_free_r>
 800e300:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e302:	b111      	cbz	r1, 800e30a <_reclaim_reent+0x5a>
 800e304:	4620      	mov	r0, r4
 800e306:	f000 f89b 	bl	800e440 <_free_r>
 800e30a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e30c:	b111      	cbz	r1, 800e314 <_reclaim_reent+0x64>
 800e30e:	4620      	mov	r0, r4
 800e310:	f000 f896 	bl	800e440 <_free_r>
 800e314:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e316:	b111      	cbz	r1, 800e31e <_reclaim_reent+0x6e>
 800e318:	4620      	mov	r0, r4
 800e31a:	f000 f891 	bl	800e440 <_free_r>
 800e31e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e320:	b111      	cbz	r1, 800e328 <_reclaim_reent+0x78>
 800e322:	4620      	mov	r0, r4
 800e324:	f000 f88c 	bl	800e440 <_free_r>
 800e328:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e32a:	b111      	cbz	r1, 800e332 <_reclaim_reent+0x82>
 800e32c:	4620      	mov	r0, r4
 800e32e:	f000 f887 	bl	800e440 <_free_r>
 800e332:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e334:	b111      	cbz	r1, 800e33c <_reclaim_reent+0x8c>
 800e336:	4620      	mov	r0, r4
 800e338:	f000 f882 	bl	800e440 <_free_r>
 800e33c:	6a23      	ldr	r3, [r4, #32]
 800e33e:	b14b      	cbz	r3, 800e354 <_reclaim_reent+0xa4>
 800e340:	4620      	mov	r0, r4
 800e342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e346:	4718      	bx	r3
 800e348:	680e      	ldr	r6, [r1, #0]
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 f878 	bl	800e440 <_free_r>
 800e350:	4631      	mov	r1, r6
 800e352:	e7bb      	b.n	800e2cc <_reclaim_reent+0x1c>
 800e354:	bd70      	pop	{r4, r5, r6, pc}
 800e356:	bf00      	nop
 800e358:	20000198 	.word	0x20000198

0800e35c <_lseek_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4604      	mov	r4, r0
 800e360:	4608      	mov	r0, r1
 800e362:	4611      	mov	r1, r2
 800e364:	2200      	movs	r2, #0
 800e366:	4d05      	ldr	r5, [pc, #20]	@ (800e37c <_lseek_r+0x20>)
 800e368:	602a      	str	r2, [r5, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	f7f3 fc11 	bl	8001b92 <_lseek>
 800e370:	1c43      	adds	r3, r0, #1
 800e372:	d102      	bne.n	800e37a <_lseek_r+0x1e>
 800e374:	682b      	ldr	r3, [r5, #0]
 800e376:	b103      	cbz	r3, 800e37a <_lseek_r+0x1e>
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	bd38      	pop	{r3, r4, r5, pc}
 800e37c:	20003180 	.word	0x20003180

0800e380 <_read_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	4604      	mov	r4, r0
 800e384:	4608      	mov	r0, r1
 800e386:	4611      	mov	r1, r2
 800e388:	2200      	movs	r2, #0
 800e38a:	4d05      	ldr	r5, [pc, #20]	@ (800e3a0 <_read_r+0x20>)
 800e38c:	602a      	str	r2, [r5, #0]
 800e38e:	461a      	mov	r2, r3
 800e390:	f7f3 fba2 	bl	8001ad8 <_read>
 800e394:	1c43      	adds	r3, r0, #1
 800e396:	d102      	bne.n	800e39e <_read_r+0x1e>
 800e398:	682b      	ldr	r3, [r5, #0]
 800e39a:	b103      	cbz	r3, 800e39e <_read_r+0x1e>
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	bd38      	pop	{r3, r4, r5, pc}
 800e3a0:	20003180 	.word	0x20003180

0800e3a4 <_write_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	4d05      	ldr	r5, [pc, #20]	@ (800e3c4 <_write_r+0x20>)
 800e3b0:	602a      	str	r2, [r5, #0]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	f7f3 fbad 	bl	8001b12 <_write>
 800e3b8:	1c43      	adds	r3, r0, #1
 800e3ba:	d102      	bne.n	800e3c2 <_write_r+0x1e>
 800e3bc:	682b      	ldr	r3, [r5, #0]
 800e3be:	b103      	cbz	r3, 800e3c2 <_write_r+0x1e>
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}
 800e3c4:	20003180 	.word	0x20003180

0800e3c8 <__errno>:
 800e3c8:	4b01      	ldr	r3, [pc, #4]	@ (800e3d0 <__errno+0x8>)
 800e3ca:	6818      	ldr	r0, [r3, #0]
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	20000198 	.word	0x20000198

0800e3d4 <__libc_init_array>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	2600      	movs	r6, #0
 800e3d8:	4d0c      	ldr	r5, [pc, #48]	@ (800e40c <__libc_init_array+0x38>)
 800e3da:	4c0d      	ldr	r4, [pc, #52]	@ (800e410 <__libc_init_array+0x3c>)
 800e3dc:	1b64      	subs	r4, r4, r5
 800e3de:	10a4      	asrs	r4, r4, #2
 800e3e0:	42a6      	cmp	r6, r4
 800e3e2:	d109      	bne.n	800e3f8 <__libc_init_array+0x24>
 800e3e4:	f000 fee6 	bl	800f1b4 <_init>
 800e3e8:	2600      	movs	r6, #0
 800e3ea:	4d0a      	ldr	r5, [pc, #40]	@ (800e414 <__libc_init_array+0x40>)
 800e3ec:	4c0a      	ldr	r4, [pc, #40]	@ (800e418 <__libc_init_array+0x44>)
 800e3ee:	1b64      	subs	r4, r4, r5
 800e3f0:	10a4      	asrs	r4, r4, #2
 800e3f2:	42a6      	cmp	r6, r4
 800e3f4:	d105      	bne.n	800e402 <__libc_init_array+0x2e>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fc:	4798      	blx	r3
 800e3fe:	3601      	adds	r6, #1
 800e400:	e7ee      	b.n	800e3e0 <__libc_init_array+0xc>
 800e402:	f855 3b04 	ldr.w	r3, [r5], #4
 800e406:	4798      	blx	r3
 800e408:	3601      	adds	r6, #1
 800e40a:	e7f2      	b.n	800e3f2 <__libc_init_array+0x1e>
 800e40c:	0800f3fc 	.word	0x0800f3fc
 800e410:	0800f3fc 	.word	0x0800f3fc
 800e414:	0800f3fc 	.word	0x0800f3fc
 800e418:	0800f400 	.word	0x0800f400

0800e41c <__retarget_lock_init_recursive>:
 800e41c:	4770      	bx	lr

0800e41e <__retarget_lock_acquire_recursive>:
 800e41e:	4770      	bx	lr

0800e420 <__retarget_lock_release_recursive>:
 800e420:	4770      	bx	lr

0800e422 <memcpy>:
 800e422:	440a      	add	r2, r1
 800e424:	4291      	cmp	r1, r2
 800e426:	f100 33ff 	add.w	r3, r0, #4294967295
 800e42a:	d100      	bne.n	800e42e <memcpy+0xc>
 800e42c:	4770      	bx	lr
 800e42e:	b510      	push	{r4, lr}
 800e430:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e434:	4291      	cmp	r1, r2
 800e436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e43a:	d1f9      	bne.n	800e430 <memcpy+0xe>
 800e43c:	bd10      	pop	{r4, pc}
	...

0800e440 <_free_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4605      	mov	r5, r0
 800e444:	2900      	cmp	r1, #0
 800e446:	d040      	beq.n	800e4ca <_free_r+0x8a>
 800e448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e44c:	1f0c      	subs	r4, r1, #4
 800e44e:	2b00      	cmp	r3, #0
 800e450:	bfb8      	it	lt
 800e452:	18e4      	addlt	r4, r4, r3
 800e454:	f000 f8de 	bl	800e614 <__malloc_lock>
 800e458:	4a1c      	ldr	r2, [pc, #112]	@ (800e4cc <_free_r+0x8c>)
 800e45a:	6813      	ldr	r3, [r2, #0]
 800e45c:	b933      	cbnz	r3, 800e46c <_free_r+0x2c>
 800e45e:	6063      	str	r3, [r4, #4]
 800e460:	6014      	str	r4, [r2, #0]
 800e462:	4628      	mov	r0, r5
 800e464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e468:	f000 b8da 	b.w	800e620 <__malloc_unlock>
 800e46c:	42a3      	cmp	r3, r4
 800e46e:	d908      	bls.n	800e482 <_free_r+0x42>
 800e470:	6820      	ldr	r0, [r4, #0]
 800e472:	1821      	adds	r1, r4, r0
 800e474:	428b      	cmp	r3, r1
 800e476:	bf01      	itttt	eq
 800e478:	6819      	ldreq	r1, [r3, #0]
 800e47a:	685b      	ldreq	r3, [r3, #4]
 800e47c:	1809      	addeq	r1, r1, r0
 800e47e:	6021      	streq	r1, [r4, #0]
 800e480:	e7ed      	b.n	800e45e <_free_r+0x1e>
 800e482:	461a      	mov	r2, r3
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	b10b      	cbz	r3, 800e48c <_free_r+0x4c>
 800e488:	42a3      	cmp	r3, r4
 800e48a:	d9fa      	bls.n	800e482 <_free_r+0x42>
 800e48c:	6811      	ldr	r1, [r2, #0]
 800e48e:	1850      	adds	r0, r2, r1
 800e490:	42a0      	cmp	r0, r4
 800e492:	d10b      	bne.n	800e4ac <_free_r+0x6c>
 800e494:	6820      	ldr	r0, [r4, #0]
 800e496:	4401      	add	r1, r0
 800e498:	1850      	adds	r0, r2, r1
 800e49a:	4283      	cmp	r3, r0
 800e49c:	6011      	str	r1, [r2, #0]
 800e49e:	d1e0      	bne.n	800e462 <_free_r+0x22>
 800e4a0:	6818      	ldr	r0, [r3, #0]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	4408      	add	r0, r1
 800e4a6:	6010      	str	r0, [r2, #0]
 800e4a8:	6053      	str	r3, [r2, #4]
 800e4aa:	e7da      	b.n	800e462 <_free_r+0x22>
 800e4ac:	d902      	bls.n	800e4b4 <_free_r+0x74>
 800e4ae:	230c      	movs	r3, #12
 800e4b0:	602b      	str	r3, [r5, #0]
 800e4b2:	e7d6      	b.n	800e462 <_free_r+0x22>
 800e4b4:	6820      	ldr	r0, [r4, #0]
 800e4b6:	1821      	adds	r1, r4, r0
 800e4b8:	428b      	cmp	r3, r1
 800e4ba:	bf01      	itttt	eq
 800e4bc:	6819      	ldreq	r1, [r3, #0]
 800e4be:	685b      	ldreq	r3, [r3, #4]
 800e4c0:	1809      	addeq	r1, r1, r0
 800e4c2:	6021      	streq	r1, [r4, #0]
 800e4c4:	6063      	str	r3, [r4, #4]
 800e4c6:	6054      	str	r4, [r2, #4]
 800e4c8:	e7cb      	b.n	800e462 <_free_r+0x22>
 800e4ca:	bd38      	pop	{r3, r4, r5, pc}
 800e4cc:	2000318c 	.word	0x2000318c

0800e4d0 <sbrk_aligned>:
 800e4d0:	b570      	push	{r4, r5, r6, lr}
 800e4d2:	4e0f      	ldr	r6, [pc, #60]	@ (800e510 <sbrk_aligned+0x40>)
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	6831      	ldr	r1, [r6, #0]
 800e4d8:	4605      	mov	r5, r0
 800e4da:	b911      	cbnz	r1, 800e4e2 <sbrk_aligned+0x12>
 800e4dc:	f000 fe16 	bl	800f10c <_sbrk_r>
 800e4e0:	6030      	str	r0, [r6, #0]
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f000 fe11 	bl	800f10c <_sbrk_r>
 800e4ea:	1c43      	adds	r3, r0, #1
 800e4ec:	d103      	bne.n	800e4f6 <sbrk_aligned+0x26>
 800e4ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	bd70      	pop	{r4, r5, r6, pc}
 800e4f6:	1cc4      	adds	r4, r0, #3
 800e4f8:	f024 0403 	bic.w	r4, r4, #3
 800e4fc:	42a0      	cmp	r0, r4
 800e4fe:	d0f8      	beq.n	800e4f2 <sbrk_aligned+0x22>
 800e500:	1a21      	subs	r1, r4, r0
 800e502:	4628      	mov	r0, r5
 800e504:	f000 fe02 	bl	800f10c <_sbrk_r>
 800e508:	3001      	adds	r0, #1
 800e50a:	d1f2      	bne.n	800e4f2 <sbrk_aligned+0x22>
 800e50c:	e7ef      	b.n	800e4ee <sbrk_aligned+0x1e>
 800e50e:	bf00      	nop
 800e510:	20003188 	.word	0x20003188

0800e514 <_malloc_r>:
 800e514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e518:	1ccd      	adds	r5, r1, #3
 800e51a:	f025 0503 	bic.w	r5, r5, #3
 800e51e:	3508      	adds	r5, #8
 800e520:	2d0c      	cmp	r5, #12
 800e522:	bf38      	it	cc
 800e524:	250c      	movcc	r5, #12
 800e526:	2d00      	cmp	r5, #0
 800e528:	4606      	mov	r6, r0
 800e52a:	db01      	blt.n	800e530 <_malloc_r+0x1c>
 800e52c:	42a9      	cmp	r1, r5
 800e52e:	d904      	bls.n	800e53a <_malloc_r+0x26>
 800e530:	230c      	movs	r3, #12
 800e532:	6033      	str	r3, [r6, #0]
 800e534:	2000      	movs	r0, #0
 800e536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e53a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e610 <_malloc_r+0xfc>
 800e53e:	f000 f869 	bl	800e614 <__malloc_lock>
 800e542:	f8d8 3000 	ldr.w	r3, [r8]
 800e546:	461c      	mov	r4, r3
 800e548:	bb44      	cbnz	r4, 800e59c <_malloc_r+0x88>
 800e54a:	4629      	mov	r1, r5
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7ff ffbf 	bl	800e4d0 <sbrk_aligned>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	4604      	mov	r4, r0
 800e556:	d158      	bne.n	800e60a <_malloc_r+0xf6>
 800e558:	f8d8 4000 	ldr.w	r4, [r8]
 800e55c:	4627      	mov	r7, r4
 800e55e:	2f00      	cmp	r7, #0
 800e560:	d143      	bne.n	800e5ea <_malloc_r+0xd6>
 800e562:	2c00      	cmp	r4, #0
 800e564:	d04b      	beq.n	800e5fe <_malloc_r+0xea>
 800e566:	6823      	ldr	r3, [r4, #0]
 800e568:	4639      	mov	r1, r7
 800e56a:	4630      	mov	r0, r6
 800e56c:	eb04 0903 	add.w	r9, r4, r3
 800e570:	f000 fdcc 	bl	800f10c <_sbrk_r>
 800e574:	4581      	cmp	r9, r0
 800e576:	d142      	bne.n	800e5fe <_malloc_r+0xea>
 800e578:	6821      	ldr	r1, [r4, #0]
 800e57a:	4630      	mov	r0, r6
 800e57c:	1a6d      	subs	r5, r5, r1
 800e57e:	4629      	mov	r1, r5
 800e580:	f7ff ffa6 	bl	800e4d0 <sbrk_aligned>
 800e584:	3001      	adds	r0, #1
 800e586:	d03a      	beq.n	800e5fe <_malloc_r+0xea>
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	442b      	add	r3, r5
 800e58c:	6023      	str	r3, [r4, #0]
 800e58e:	f8d8 3000 	ldr.w	r3, [r8]
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	bb62      	cbnz	r2, 800e5f0 <_malloc_r+0xdc>
 800e596:	f8c8 7000 	str.w	r7, [r8]
 800e59a:	e00f      	b.n	800e5bc <_malloc_r+0xa8>
 800e59c:	6822      	ldr	r2, [r4, #0]
 800e59e:	1b52      	subs	r2, r2, r5
 800e5a0:	d420      	bmi.n	800e5e4 <_malloc_r+0xd0>
 800e5a2:	2a0b      	cmp	r2, #11
 800e5a4:	d917      	bls.n	800e5d6 <_malloc_r+0xc2>
 800e5a6:	1961      	adds	r1, r4, r5
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	6025      	str	r5, [r4, #0]
 800e5ac:	bf18      	it	ne
 800e5ae:	6059      	strne	r1, [r3, #4]
 800e5b0:	6863      	ldr	r3, [r4, #4]
 800e5b2:	bf08      	it	eq
 800e5b4:	f8c8 1000 	streq.w	r1, [r8]
 800e5b8:	5162      	str	r2, [r4, r5]
 800e5ba:	604b      	str	r3, [r1, #4]
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f000 f82f 	bl	800e620 <__malloc_unlock>
 800e5c2:	f104 000b 	add.w	r0, r4, #11
 800e5c6:	1d23      	adds	r3, r4, #4
 800e5c8:	f020 0007 	bic.w	r0, r0, #7
 800e5cc:	1ac2      	subs	r2, r0, r3
 800e5ce:	bf1c      	itt	ne
 800e5d0:	1a1b      	subne	r3, r3, r0
 800e5d2:	50a3      	strne	r3, [r4, r2]
 800e5d4:	e7af      	b.n	800e536 <_malloc_r+0x22>
 800e5d6:	6862      	ldr	r2, [r4, #4]
 800e5d8:	42a3      	cmp	r3, r4
 800e5da:	bf0c      	ite	eq
 800e5dc:	f8c8 2000 	streq.w	r2, [r8]
 800e5e0:	605a      	strne	r2, [r3, #4]
 800e5e2:	e7eb      	b.n	800e5bc <_malloc_r+0xa8>
 800e5e4:	4623      	mov	r3, r4
 800e5e6:	6864      	ldr	r4, [r4, #4]
 800e5e8:	e7ae      	b.n	800e548 <_malloc_r+0x34>
 800e5ea:	463c      	mov	r4, r7
 800e5ec:	687f      	ldr	r7, [r7, #4]
 800e5ee:	e7b6      	b.n	800e55e <_malloc_r+0x4a>
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	42a3      	cmp	r3, r4
 800e5f6:	d1fb      	bne.n	800e5f0 <_malloc_r+0xdc>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	6053      	str	r3, [r2, #4]
 800e5fc:	e7de      	b.n	800e5bc <_malloc_r+0xa8>
 800e5fe:	230c      	movs	r3, #12
 800e600:	4630      	mov	r0, r6
 800e602:	6033      	str	r3, [r6, #0]
 800e604:	f000 f80c 	bl	800e620 <__malloc_unlock>
 800e608:	e794      	b.n	800e534 <_malloc_r+0x20>
 800e60a:	6005      	str	r5, [r0, #0]
 800e60c:	e7d6      	b.n	800e5bc <_malloc_r+0xa8>
 800e60e:	bf00      	nop
 800e610:	2000318c 	.word	0x2000318c

0800e614 <__malloc_lock>:
 800e614:	4801      	ldr	r0, [pc, #4]	@ (800e61c <__malloc_lock+0x8>)
 800e616:	f7ff bf02 	b.w	800e41e <__retarget_lock_acquire_recursive>
 800e61a:	bf00      	nop
 800e61c:	20003184 	.word	0x20003184

0800e620 <__malloc_unlock>:
 800e620:	4801      	ldr	r0, [pc, #4]	@ (800e628 <__malloc_unlock+0x8>)
 800e622:	f7ff befd 	b.w	800e420 <__retarget_lock_release_recursive>
 800e626:	bf00      	nop
 800e628:	20003184 	.word	0x20003184

0800e62c <__ssputs_r>:
 800e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e630:	461f      	mov	r7, r3
 800e632:	688e      	ldr	r6, [r1, #8]
 800e634:	4682      	mov	sl, r0
 800e636:	42be      	cmp	r6, r7
 800e638:	460c      	mov	r4, r1
 800e63a:	4690      	mov	r8, r2
 800e63c:	680b      	ldr	r3, [r1, #0]
 800e63e:	d82d      	bhi.n	800e69c <__ssputs_r+0x70>
 800e640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e648:	d026      	beq.n	800e698 <__ssputs_r+0x6c>
 800e64a:	6965      	ldr	r5, [r4, #20]
 800e64c:	6909      	ldr	r1, [r1, #16]
 800e64e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e652:	eba3 0901 	sub.w	r9, r3, r1
 800e656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e65a:	1c7b      	adds	r3, r7, #1
 800e65c:	444b      	add	r3, r9
 800e65e:	106d      	asrs	r5, r5, #1
 800e660:	429d      	cmp	r5, r3
 800e662:	bf38      	it	cc
 800e664:	461d      	movcc	r5, r3
 800e666:	0553      	lsls	r3, r2, #21
 800e668:	d527      	bpl.n	800e6ba <__ssputs_r+0x8e>
 800e66a:	4629      	mov	r1, r5
 800e66c:	f7ff ff52 	bl	800e514 <_malloc_r>
 800e670:	4606      	mov	r6, r0
 800e672:	b360      	cbz	r0, 800e6ce <__ssputs_r+0xa2>
 800e674:	464a      	mov	r2, r9
 800e676:	6921      	ldr	r1, [r4, #16]
 800e678:	f7ff fed3 	bl	800e422 <memcpy>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e686:	81a3      	strh	r3, [r4, #12]
 800e688:	6126      	str	r6, [r4, #16]
 800e68a:	444e      	add	r6, r9
 800e68c:	6026      	str	r6, [r4, #0]
 800e68e:	463e      	mov	r6, r7
 800e690:	6165      	str	r5, [r4, #20]
 800e692:	eba5 0509 	sub.w	r5, r5, r9
 800e696:	60a5      	str	r5, [r4, #8]
 800e698:	42be      	cmp	r6, r7
 800e69a:	d900      	bls.n	800e69e <__ssputs_r+0x72>
 800e69c:	463e      	mov	r6, r7
 800e69e:	4632      	mov	r2, r6
 800e6a0:	4641      	mov	r1, r8
 800e6a2:	6820      	ldr	r0, [r4, #0]
 800e6a4:	f000 fcf5 	bl	800f092 <memmove>
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	68a3      	ldr	r3, [r4, #8]
 800e6ac:	1b9b      	subs	r3, r3, r6
 800e6ae:	60a3      	str	r3, [r4, #8]
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	4433      	add	r3, r6
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ba:	462a      	mov	r2, r5
 800e6bc:	f000 fd44 	bl	800f148 <_realloc_r>
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	d1e0      	bne.n	800e688 <__ssputs_r+0x5c>
 800e6c6:	4650      	mov	r0, sl
 800e6c8:	6921      	ldr	r1, [r4, #16]
 800e6ca:	f7ff feb9 	bl	800e440 <_free_r>
 800e6ce:	230c      	movs	r3, #12
 800e6d0:	f8ca 3000 	str.w	r3, [sl]
 800e6d4:	89a3      	ldrh	r3, [r4, #12]
 800e6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6de:	81a3      	strh	r3, [r4, #12]
 800e6e0:	e7e9      	b.n	800e6b6 <__ssputs_r+0x8a>
	...

0800e6e4 <_svfiprintf_r>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	4698      	mov	r8, r3
 800e6ea:	898b      	ldrh	r3, [r1, #12]
 800e6ec:	4607      	mov	r7, r0
 800e6ee:	061b      	lsls	r3, r3, #24
 800e6f0:	460d      	mov	r5, r1
 800e6f2:	4614      	mov	r4, r2
 800e6f4:	b09d      	sub	sp, #116	@ 0x74
 800e6f6:	d510      	bpl.n	800e71a <_svfiprintf_r+0x36>
 800e6f8:	690b      	ldr	r3, [r1, #16]
 800e6fa:	b973      	cbnz	r3, 800e71a <_svfiprintf_r+0x36>
 800e6fc:	2140      	movs	r1, #64	@ 0x40
 800e6fe:	f7ff ff09 	bl	800e514 <_malloc_r>
 800e702:	6028      	str	r0, [r5, #0]
 800e704:	6128      	str	r0, [r5, #16]
 800e706:	b930      	cbnz	r0, 800e716 <_svfiprintf_r+0x32>
 800e708:	230c      	movs	r3, #12
 800e70a:	603b      	str	r3, [r7, #0]
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	b01d      	add	sp, #116	@ 0x74
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	2340      	movs	r3, #64	@ 0x40
 800e718:	616b      	str	r3, [r5, #20]
 800e71a:	2300      	movs	r3, #0
 800e71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71e:	2320      	movs	r3, #32
 800e720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e724:	2330      	movs	r3, #48	@ 0x30
 800e726:	f04f 0901 	mov.w	r9, #1
 800e72a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e72e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e8c8 <_svfiprintf_r+0x1e4>
 800e732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e736:	4623      	mov	r3, r4
 800e738:	469a      	mov	sl, r3
 800e73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e73e:	b10a      	cbz	r2, 800e744 <_svfiprintf_r+0x60>
 800e740:	2a25      	cmp	r2, #37	@ 0x25
 800e742:	d1f9      	bne.n	800e738 <_svfiprintf_r+0x54>
 800e744:	ebba 0b04 	subs.w	fp, sl, r4
 800e748:	d00b      	beq.n	800e762 <_svfiprintf_r+0x7e>
 800e74a:	465b      	mov	r3, fp
 800e74c:	4622      	mov	r2, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	4638      	mov	r0, r7
 800e752:	f7ff ff6b 	bl	800e62c <__ssputs_r>
 800e756:	3001      	adds	r0, #1
 800e758:	f000 80a7 	beq.w	800e8aa <_svfiprintf_r+0x1c6>
 800e75c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e75e:	445a      	add	r2, fp
 800e760:	9209      	str	r2, [sp, #36]	@ 0x24
 800e762:	f89a 3000 	ldrb.w	r3, [sl]
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 809f 	beq.w	800e8aa <_svfiprintf_r+0x1c6>
 800e76c:	2300      	movs	r3, #0
 800e76e:	f04f 32ff 	mov.w	r2, #4294967295
 800e772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e776:	f10a 0a01 	add.w	sl, sl, #1
 800e77a:	9304      	str	r3, [sp, #16]
 800e77c:	9307      	str	r3, [sp, #28]
 800e77e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e782:	931a      	str	r3, [sp, #104]	@ 0x68
 800e784:	4654      	mov	r4, sl
 800e786:	2205      	movs	r2, #5
 800e788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e78c:	484e      	ldr	r0, [pc, #312]	@ (800e8c8 <_svfiprintf_r+0x1e4>)
 800e78e:	f000 fccd 	bl	800f12c <memchr>
 800e792:	9a04      	ldr	r2, [sp, #16]
 800e794:	b9d8      	cbnz	r0, 800e7ce <_svfiprintf_r+0xea>
 800e796:	06d0      	lsls	r0, r2, #27
 800e798:	bf44      	itt	mi
 800e79a:	2320      	movmi	r3, #32
 800e79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7a0:	0711      	lsls	r1, r2, #28
 800e7a2:	bf44      	itt	mi
 800e7a4:	232b      	movmi	r3, #43	@ 0x2b
 800e7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7b0:	d015      	beq.n	800e7de <_svfiprintf_r+0xfa>
 800e7b2:	4654      	mov	r4, sl
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	f04f 0c0a 	mov.w	ip, #10
 800e7ba:	9a07      	ldr	r2, [sp, #28]
 800e7bc:	4621      	mov	r1, r4
 800e7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7c2:	3b30      	subs	r3, #48	@ 0x30
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	d94b      	bls.n	800e860 <_svfiprintf_r+0x17c>
 800e7c8:	b1b0      	cbz	r0, 800e7f8 <_svfiprintf_r+0x114>
 800e7ca:	9207      	str	r2, [sp, #28]
 800e7cc:	e014      	b.n	800e7f8 <_svfiprintf_r+0x114>
 800e7ce:	eba0 0308 	sub.w	r3, r0, r8
 800e7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	46a2      	mov	sl, r4
 800e7da:	9304      	str	r3, [sp, #16]
 800e7dc:	e7d2      	b.n	800e784 <_svfiprintf_r+0xa0>
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	1d19      	adds	r1, r3, #4
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	9103      	str	r1, [sp, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	bfbb      	ittet	lt
 800e7ea:	425b      	neglt	r3, r3
 800e7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e7f0:	9307      	strge	r3, [sp, #28]
 800e7f2:	9307      	strlt	r3, [sp, #28]
 800e7f4:	bfb8      	it	lt
 800e7f6:	9204      	strlt	r2, [sp, #16]
 800e7f8:	7823      	ldrb	r3, [r4, #0]
 800e7fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7fc:	d10a      	bne.n	800e814 <_svfiprintf_r+0x130>
 800e7fe:	7863      	ldrb	r3, [r4, #1]
 800e800:	2b2a      	cmp	r3, #42	@ 0x2a
 800e802:	d132      	bne.n	800e86a <_svfiprintf_r+0x186>
 800e804:	9b03      	ldr	r3, [sp, #12]
 800e806:	3402      	adds	r4, #2
 800e808:	1d1a      	adds	r2, r3, #4
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	9203      	str	r2, [sp, #12]
 800e80e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e812:	9305      	str	r3, [sp, #20]
 800e814:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e8cc <_svfiprintf_r+0x1e8>
 800e818:	2203      	movs	r2, #3
 800e81a:	4650      	mov	r0, sl
 800e81c:	7821      	ldrb	r1, [r4, #0]
 800e81e:	f000 fc85 	bl	800f12c <memchr>
 800e822:	b138      	cbz	r0, 800e834 <_svfiprintf_r+0x150>
 800e824:	2240      	movs	r2, #64	@ 0x40
 800e826:	9b04      	ldr	r3, [sp, #16]
 800e828:	eba0 000a 	sub.w	r0, r0, sl
 800e82c:	4082      	lsls	r2, r0
 800e82e:	4313      	orrs	r3, r2
 800e830:	3401      	adds	r4, #1
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e838:	2206      	movs	r2, #6
 800e83a:	4825      	ldr	r0, [pc, #148]	@ (800e8d0 <_svfiprintf_r+0x1ec>)
 800e83c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e840:	f000 fc74 	bl	800f12c <memchr>
 800e844:	2800      	cmp	r0, #0
 800e846:	d036      	beq.n	800e8b6 <_svfiprintf_r+0x1d2>
 800e848:	4b22      	ldr	r3, [pc, #136]	@ (800e8d4 <_svfiprintf_r+0x1f0>)
 800e84a:	bb1b      	cbnz	r3, 800e894 <_svfiprintf_r+0x1b0>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	3307      	adds	r3, #7
 800e850:	f023 0307 	bic.w	r3, r3, #7
 800e854:	3308      	adds	r3, #8
 800e856:	9303      	str	r3, [sp, #12]
 800e858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85a:	4433      	add	r3, r6
 800e85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e85e:	e76a      	b.n	800e736 <_svfiprintf_r+0x52>
 800e860:	460c      	mov	r4, r1
 800e862:	2001      	movs	r0, #1
 800e864:	fb0c 3202 	mla	r2, ip, r2, r3
 800e868:	e7a8      	b.n	800e7bc <_svfiprintf_r+0xd8>
 800e86a:	2300      	movs	r3, #0
 800e86c:	f04f 0c0a 	mov.w	ip, #10
 800e870:	4619      	mov	r1, r3
 800e872:	3401      	adds	r4, #1
 800e874:	9305      	str	r3, [sp, #20]
 800e876:	4620      	mov	r0, r4
 800e878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e87c:	3a30      	subs	r2, #48	@ 0x30
 800e87e:	2a09      	cmp	r2, #9
 800e880:	d903      	bls.n	800e88a <_svfiprintf_r+0x1a6>
 800e882:	2b00      	cmp	r3, #0
 800e884:	d0c6      	beq.n	800e814 <_svfiprintf_r+0x130>
 800e886:	9105      	str	r1, [sp, #20]
 800e888:	e7c4      	b.n	800e814 <_svfiprintf_r+0x130>
 800e88a:	4604      	mov	r4, r0
 800e88c:	2301      	movs	r3, #1
 800e88e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e892:	e7f0      	b.n	800e876 <_svfiprintf_r+0x192>
 800e894:	ab03      	add	r3, sp, #12
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	462a      	mov	r2, r5
 800e89a:	4638      	mov	r0, r7
 800e89c:	4b0e      	ldr	r3, [pc, #56]	@ (800e8d8 <_svfiprintf_r+0x1f4>)
 800e89e:	a904      	add	r1, sp, #16
 800e8a0:	f3af 8000 	nop.w
 800e8a4:	1c42      	adds	r2, r0, #1
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	d1d6      	bne.n	800e858 <_svfiprintf_r+0x174>
 800e8aa:	89ab      	ldrh	r3, [r5, #12]
 800e8ac:	065b      	lsls	r3, r3, #25
 800e8ae:	f53f af2d 	bmi.w	800e70c <_svfiprintf_r+0x28>
 800e8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8b4:	e72c      	b.n	800e710 <_svfiprintf_r+0x2c>
 800e8b6:	ab03      	add	r3, sp, #12
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4638      	mov	r0, r7
 800e8be:	4b06      	ldr	r3, [pc, #24]	@ (800e8d8 <_svfiprintf_r+0x1f4>)
 800e8c0:	a904      	add	r1, sp, #16
 800e8c2:	f000 f9bd 	bl	800ec40 <_printf_i>
 800e8c6:	e7ed      	b.n	800e8a4 <_svfiprintf_r+0x1c0>
 800e8c8:	0800f3c0 	.word	0x0800f3c0
 800e8cc:	0800f3c6 	.word	0x0800f3c6
 800e8d0:	0800f3ca 	.word	0x0800f3ca
 800e8d4:	00000000 	.word	0x00000000
 800e8d8:	0800e62d 	.word	0x0800e62d

0800e8dc <__sfputc_r>:
 800e8dc:	6893      	ldr	r3, [r2, #8]
 800e8de:	b410      	push	{r4}
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	6093      	str	r3, [r2, #8]
 800e8e6:	da07      	bge.n	800e8f8 <__sfputc_r+0x1c>
 800e8e8:	6994      	ldr	r4, [r2, #24]
 800e8ea:	42a3      	cmp	r3, r4
 800e8ec:	db01      	blt.n	800e8f2 <__sfputc_r+0x16>
 800e8ee:	290a      	cmp	r1, #10
 800e8f0:	d102      	bne.n	800e8f8 <__sfputc_r+0x1c>
 800e8f2:	bc10      	pop	{r4}
 800e8f4:	f7ff bc2f 	b.w	800e156 <__swbuf_r>
 800e8f8:	6813      	ldr	r3, [r2, #0]
 800e8fa:	1c58      	adds	r0, r3, #1
 800e8fc:	6010      	str	r0, [r2, #0]
 800e8fe:	7019      	strb	r1, [r3, #0]
 800e900:	4608      	mov	r0, r1
 800e902:	bc10      	pop	{r4}
 800e904:	4770      	bx	lr

0800e906 <__sfputs_r>:
 800e906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e908:	4606      	mov	r6, r0
 800e90a:	460f      	mov	r7, r1
 800e90c:	4614      	mov	r4, r2
 800e90e:	18d5      	adds	r5, r2, r3
 800e910:	42ac      	cmp	r4, r5
 800e912:	d101      	bne.n	800e918 <__sfputs_r+0x12>
 800e914:	2000      	movs	r0, #0
 800e916:	e007      	b.n	800e928 <__sfputs_r+0x22>
 800e918:	463a      	mov	r2, r7
 800e91a:	4630      	mov	r0, r6
 800e91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e920:	f7ff ffdc 	bl	800e8dc <__sfputc_r>
 800e924:	1c43      	adds	r3, r0, #1
 800e926:	d1f3      	bne.n	800e910 <__sfputs_r+0xa>
 800e928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e92c <_vfiprintf_r>:
 800e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e930:	460d      	mov	r5, r1
 800e932:	4614      	mov	r4, r2
 800e934:	4698      	mov	r8, r3
 800e936:	4606      	mov	r6, r0
 800e938:	b09d      	sub	sp, #116	@ 0x74
 800e93a:	b118      	cbz	r0, 800e944 <_vfiprintf_r+0x18>
 800e93c:	6a03      	ldr	r3, [r0, #32]
 800e93e:	b90b      	cbnz	r3, 800e944 <_vfiprintf_r+0x18>
 800e940:	f7ff fb00 	bl	800df44 <__sinit>
 800e944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e946:	07d9      	lsls	r1, r3, #31
 800e948:	d405      	bmi.n	800e956 <_vfiprintf_r+0x2a>
 800e94a:	89ab      	ldrh	r3, [r5, #12]
 800e94c:	059a      	lsls	r2, r3, #22
 800e94e:	d402      	bmi.n	800e956 <_vfiprintf_r+0x2a>
 800e950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e952:	f7ff fd64 	bl	800e41e <__retarget_lock_acquire_recursive>
 800e956:	89ab      	ldrh	r3, [r5, #12]
 800e958:	071b      	lsls	r3, r3, #28
 800e95a:	d501      	bpl.n	800e960 <_vfiprintf_r+0x34>
 800e95c:	692b      	ldr	r3, [r5, #16]
 800e95e:	b99b      	cbnz	r3, 800e988 <_vfiprintf_r+0x5c>
 800e960:	4629      	mov	r1, r5
 800e962:	4630      	mov	r0, r6
 800e964:	f7ff fc36 	bl	800e1d4 <__swsetup_r>
 800e968:	b170      	cbz	r0, 800e988 <_vfiprintf_r+0x5c>
 800e96a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e96c:	07dc      	lsls	r4, r3, #31
 800e96e:	d504      	bpl.n	800e97a <_vfiprintf_r+0x4e>
 800e970:	f04f 30ff 	mov.w	r0, #4294967295
 800e974:	b01d      	add	sp, #116	@ 0x74
 800e976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97a:	89ab      	ldrh	r3, [r5, #12]
 800e97c:	0598      	lsls	r0, r3, #22
 800e97e:	d4f7      	bmi.n	800e970 <_vfiprintf_r+0x44>
 800e980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e982:	f7ff fd4d 	bl	800e420 <__retarget_lock_release_recursive>
 800e986:	e7f3      	b.n	800e970 <_vfiprintf_r+0x44>
 800e988:	2300      	movs	r3, #0
 800e98a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e98c:	2320      	movs	r3, #32
 800e98e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e992:	2330      	movs	r3, #48	@ 0x30
 800e994:	f04f 0901 	mov.w	r9, #1
 800e998:	f8cd 800c 	str.w	r8, [sp, #12]
 800e99c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800eb48 <_vfiprintf_r+0x21c>
 800e9a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e9a4:	4623      	mov	r3, r4
 800e9a6:	469a      	mov	sl, r3
 800e9a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9ac:	b10a      	cbz	r2, 800e9b2 <_vfiprintf_r+0x86>
 800e9ae:	2a25      	cmp	r2, #37	@ 0x25
 800e9b0:	d1f9      	bne.n	800e9a6 <_vfiprintf_r+0x7a>
 800e9b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e9b6:	d00b      	beq.n	800e9d0 <_vfiprintf_r+0xa4>
 800e9b8:	465b      	mov	r3, fp
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	4629      	mov	r1, r5
 800e9be:	4630      	mov	r0, r6
 800e9c0:	f7ff ffa1 	bl	800e906 <__sfputs_r>
 800e9c4:	3001      	adds	r0, #1
 800e9c6:	f000 80a7 	beq.w	800eb18 <_vfiprintf_r+0x1ec>
 800e9ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9cc:	445a      	add	r2, fp
 800e9ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 809f 	beq.w	800eb18 <_vfiprintf_r+0x1ec>
 800e9da:	2300      	movs	r3, #0
 800e9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9e4:	f10a 0a01 	add.w	sl, sl, #1
 800e9e8:	9304      	str	r3, [sp, #16]
 800e9ea:	9307      	str	r3, [sp, #28]
 800e9ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9f2:	4654      	mov	r4, sl
 800e9f4:	2205      	movs	r2, #5
 800e9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9fa:	4853      	ldr	r0, [pc, #332]	@ (800eb48 <_vfiprintf_r+0x21c>)
 800e9fc:	f000 fb96 	bl	800f12c <memchr>
 800ea00:	9a04      	ldr	r2, [sp, #16]
 800ea02:	b9d8      	cbnz	r0, 800ea3c <_vfiprintf_r+0x110>
 800ea04:	06d1      	lsls	r1, r2, #27
 800ea06:	bf44      	itt	mi
 800ea08:	2320      	movmi	r3, #32
 800ea0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea0e:	0713      	lsls	r3, r2, #28
 800ea10:	bf44      	itt	mi
 800ea12:	232b      	movmi	r3, #43	@ 0x2b
 800ea14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea18:	f89a 3000 	ldrb.w	r3, [sl]
 800ea1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea1e:	d015      	beq.n	800ea4c <_vfiprintf_r+0x120>
 800ea20:	4654      	mov	r4, sl
 800ea22:	2000      	movs	r0, #0
 800ea24:	f04f 0c0a 	mov.w	ip, #10
 800ea28:	9a07      	ldr	r2, [sp, #28]
 800ea2a:	4621      	mov	r1, r4
 800ea2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea30:	3b30      	subs	r3, #48	@ 0x30
 800ea32:	2b09      	cmp	r3, #9
 800ea34:	d94b      	bls.n	800eace <_vfiprintf_r+0x1a2>
 800ea36:	b1b0      	cbz	r0, 800ea66 <_vfiprintf_r+0x13a>
 800ea38:	9207      	str	r2, [sp, #28]
 800ea3a:	e014      	b.n	800ea66 <_vfiprintf_r+0x13a>
 800ea3c:	eba0 0308 	sub.w	r3, r0, r8
 800ea40:	fa09 f303 	lsl.w	r3, r9, r3
 800ea44:	4313      	orrs	r3, r2
 800ea46:	46a2      	mov	sl, r4
 800ea48:	9304      	str	r3, [sp, #16]
 800ea4a:	e7d2      	b.n	800e9f2 <_vfiprintf_r+0xc6>
 800ea4c:	9b03      	ldr	r3, [sp, #12]
 800ea4e:	1d19      	adds	r1, r3, #4
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	9103      	str	r1, [sp, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	bfbb      	ittet	lt
 800ea58:	425b      	neglt	r3, r3
 800ea5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ea5e:	9307      	strge	r3, [sp, #28]
 800ea60:	9307      	strlt	r3, [sp, #28]
 800ea62:	bfb8      	it	lt
 800ea64:	9204      	strlt	r2, [sp, #16]
 800ea66:	7823      	ldrb	r3, [r4, #0]
 800ea68:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea6a:	d10a      	bne.n	800ea82 <_vfiprintf_r+0x156>
 800ea6c:	7863      	ldrb	r3, [r4, #1]
 800ea6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea70:	d132      	bne.n	800ead8 <_vfiprintf_r+0x1ac>
 800ea72:	9b03      	ldr	r3, [sp, #12]
 800ea74:	3402      	adds	r4, #2
 800ea76:	1d1a      	adds	r2, r3, #4
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	9203      	str	r2, [sp, #12]
 800ea7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea80:	9305      	str	r3, [sp, #20]
 800ea82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800eb4c <_vfiprintf_r+0x220>
 800ea86:	2203      	movs	r2, #3
 800ea88:	4650      	mov	r0, sl
 800ea8a:	7821      	ldrb	r1, [r4, #0]
 800ea8c:	f000 fb4e 	bl	800f12c <memchr>
 800ea90:	b138      	cbz	r0, 800eaa2 <_vfiprintf_r+0x176>
 800ea92:	2240      	movs	r2, #64	@ 0x40
 800ea94:	9b04      	ldr	r3, [sp, #16]
 800ea96:	eba0 000a 	sub.w	r0, r0, sl
 800ea9a:	4082      	lsls	r2, r0
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	3401      	adds	r4, #1
 800eaa0:	9304      	str	r3, [sp, #16]
 800eaa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa6:	2206      	movs	r2, #6
 800eaa8:	4829      	ldr	r0, [pc, #164]	@ (800eb50 <_vfiprintf_r+0x224>)
 800eaaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eaae:	f000 fb3d 	bl	800f12c <memchr>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d03f      	beq.n	800eb36 <_vfiprintf_r+0x20a>
 800eab6:	4b27      	ldr	r3, [pc, #156]	@ (800eb54 <_vfiprintf_r+0x228>)
 800eab8:	bb1b      	cbnz	r3, 800eb02 <_vfiprintf_r+0x1d6>
 800eaba:	9b03      	ldr	r3, [sp, #12]
 800eabc:	3307      	adds	r3, #7
 800eabe:	f023 0307 	bic.w	r3, r3, #7
 800eac2:	3308      	adds	r3, #8
 800eac4:	9303      	str	r3, [sp, #12]
 800eac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac8:	443b      	add	r3, r7
 800eaca:	9309      	str	r3, [sp, #36]	@ 0x24
 800eacc:	e76a      	b.n	800e9a4 <_vfiprintf_r+0x78>
 800eace:	460c      	mov	r4, r1
 800ead0:	2001      	movs	r0, #1
 800ead2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ead6:	e7a8      	b.n	800ea2a <_vfiprintf_r+0xfe>
 800ead8:	2300      	movs	r3, #0
 800eada:	f04f 0c0a 	mov.w	ip, #10
 800eade:	4619      	mov	r1, r3
 800eae0:	3401      	adds	r4, #1
 800eae2:	9305      	str	r3, [sp, #20]
 800eae4:	4620      	mov	r0, r4
 800eae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaea:	3a30      	subs	r2, #48	@ 0x30
 800eaec:	2a09      	cmp	r2, #9
 800eaee:	d903      	bls.n	800eaf8 <_vfiprintf_r+0x1cc>
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d0c6      	beq.n	800ea82 <_vfiprintf_r+0x156>
 800eaf4:	9105      	str	r1, [sp, #20]
 800eaf6:	e7c4      	b.n	800ea82 <_vfiprintf_r+0x156>
 800eaf8:	4604      	mov	r4, r0
 800eafa:	2301      	movs	r3, #1
 800eafc:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb00:	e7f0      	b.n	800eae4 <_vfiprintf_r+0x1b8>
 800eb02:	ab03      	add	r3, sp, #12
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	462a      	mov	r2, r5
 800eb08:	4630      	mov	r0, r6
 800eb0a:	4b13      	ldr	r3, [pc, #76]	@ (800eb58 <_vfiprintf_r+0x22c>)
 800eb0c:	a904      	add	r1, sp, #16
 800eb0e:	f3af 8000 	nop.w
 800eb12:	4607      	mov	r7, r0
 800eb14:	1c78      	adds	r0, r7, #1
 800eb16:	d1d6      	bne.n	800eac6 <_vfiprintf_r+0x19a>
 800eb18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb1a:	07d9      	lsls	r1, r3, #31
 800eb1c:	d405      	bmi.n	800eb2a <_vfiprintf_r+0x1fe>
 800eb1e:	89ab      	ldrh	r3, [r5, #12]
 800eb20:	059a      	lsls	r2, r3, #22
 800eb22:	d402      	bmi.n	800eb2a <_vfiprintf_r+0x1fe>
 800eb24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb26:	f7ff fc7b 	bl	800e420 <__retarget_lock_release_recursive>
 800eb2a:	89ab      	ldrh	r3, [r5, #12]
 800eb2c:	065b      	lsls	r3, r3, #25
 800eb2e:	f53f af1f 	bmi.w	800e970 <_vfiprintf_r+0x44>
 800eb32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb34:	e71e      	b.n	800e974 <_vfiprintf_r+0x48>
 800eb36:	ab03      	add	r3, sp, #12
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	462a      	mov	r2, r5
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	4b06      	ldr	r3, [pc, #24]	@ (800eb58 <_vfiprintf_r+0x22c>)
 800eb40:	a904      	add	r1, sp, #16
 800eb42:	f000 f87d 	bl	800ec40 <_printf_i>
 800eb46:	e7e4      	b.n	800eb12 <_vfiprintf_r+0x1e6>
 800eb48:	0800f3c0 	.word	0x0800f3c0
 800eb4c:	0800f3c6 	.word	0x0800f3c6
 800eb50:	0800f3ca 	.word	0x0800f3ca
 800eb54:	00000000 	.word	0x00000000
 800eb58:	0800e907 	.word	0x0800e907

0800eb5c <_printf_common>:
 800eb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb60:	4616      	mov	r6, r2
 800eb62:	4698      	mov	r8, r3
 800eb64:	688a      	ldr	r2, [r1, #8]
 800eb66:	690b      	ldr	r3, [r1, #16]
 800eb68:	4607      	mov	r7, r0
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	bfb8      	it	lt
 800eb6e:	4613      	movlt	r3, r2
 800eb70:	6033      	str	r3, [r6, #0]
 800eb72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb76:	460c      	mov	r4, r1
 800eb78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb7c:	b10a      	cbz	r2, 800eb82 <_printf_common+0x26>
 800eb7e:	3301      	adds	r3, #1
 800eb80:	6033      	str	r3, [r6, #0]
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	0699      	lsls	r1, r3, #26
 800eb86:	bf42      	ittt	mi
 800eb88:	6833      	ldrmi	r3, [r6, #0]
 800eb8a:	3302      	addmi	r3, #2
 800eb8c:	6033      	strmi	r3, [r6, #0]
 800eb8e:	6825      	ldr	r5, [r4, #0]
 800eb90:	f015 0506 	ands.w	r5, r5, #6
 800eb94:	d106      	bne.n	800eba4 <_printf_common+0x48>
 800eb96:	f104 0a19 	add.w	sl, r4, #25
 800eb9a:	68e3      	ldr	r3, [r4, #12]
 800eb9c:	6832      	ldr	r2, [r6, #0]
 800eb9e:	1a9b      	subs	r3, r3, r2
 800eba0:	42ab      	cmp	r3, r5
 800eba2:	dc2b      	bgt.n	800ebfc <_printf_common+0xa0>
 800eba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eba8:	6822      	ldr	r2, [r4, #0]
 800ebaa:	3b00      	subs	r3, #0
 800ebac:	bf18      	it	ne
 800ebae:	2301      	movne	r3, #1
 800ebb0:	0692      	lsls	r2, r2, #26
 800ebb2:	d430      	bmi.n	800ec16 <_printf_common+0xba>
 800ebb4:	4641      	mov	r1, r8
 800ebb6:	4638      	mov	r0, r7
 800ebb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ebbc:	47c8      	blx	r9
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	d023      	beq.n	800ec0a <_printf_common+0xae>
 800ebc2:	6823      	ldr	r3, [r4, #0]
 800ebc4:	6922      	ldr	r2, [r4, #16]
 800ebc6:	f003 0306 	and.w	r3, r3, #6
 800ebca:	2b04      	cmp	r3, #4
 800ebcc:	bf14      	ite	ne
 800ebce:	2500      	movne	r5, #0
 800ebd0:	6833      	ldreq	r3, [r6, #0]
 800ebd2:	f04f 0600 	mov.w	r6, #0
 800ebd6:	bf08      	it	eq
 800ebd8:	68e5      	ldreq	r5, [r4, #12]
 800ebda:	f104 041a 	add.w	r4, r4, #26
 800ebde:	bf08      	it	eq
 800ebe0:	1aed      	subeq	r5, r5, r3
 800ebe2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ebe6:	bf08      	it	eq
 800ebe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebec:	4293      	cmp	r3, r2
 800ebee:	bfc4      	itt	gt
 800ebf0:	1a9b      	subgt	r3, r3, r2
 800ebf2:	18ed      	addgt	r5, r5, r3
 800ebf4:	42b5      	cmp	r5, r6
 800ebf6:	d11a      	bne.n	800ec2e <_printf_common+0xd2>
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	e008      	b.n	800ec0e <_printf_common+0xb2>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	4652      	mov	r2, sl
 800ec00:	4641      	mov	r1, r8
 800ec02:	4638      	mov	r0, r7
 800ec04:	47c8      	blx	r9
 800ec06:	3001      	adds	r0, #1
 800ec08:	d103      	bne.n	800ec12 <_printf_common+0xb6>
 800ec0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec12:	3501      	adds	r5, #1
 800ec14:	e7c1      	b.n	800eb9a <_printf_common+0x3e>
 800ec16:	2030      	movs	r0, #48	@ 0x30
 800ec18:	18e1      	adds	r1, r4, r3
 800ec1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec1e:	1c5a      	adds	r2, r3, #1
 800ec20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec24:	4422      	add	r2, r4
 800ec26:	3302      	adds	r3, #2
 800ec28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec2c:	e7c2      	b.n	800ebb4 <_printf_common+0x58>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	4622      	mov	r2, r4
 800ec32:	4641      	mov	r1, r8
 800ec34:	4638      	mov	r0, r7
 800ec36:	47c8      	blx	r9
 800ec38:	3001      	adds	r0, #1
 800ec3a:	d0e6      	beq.n	800ec0a <_printf_common+0xae>
 800ec3c:	3601      	adds	r6, #1
 800ec3e:	e7d9      	b.n	800ebf4 <_printf_common+0x98>

0800ec40 <_printf_i>:
 800ec40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	7e0f      	ldrb	r7, [r1, #24]
 800ec46:	4691      	mov	r9, r2
 800ec48:	2f78      	cmp	r7, #120	@ 0x78
 800ec4a:	4680      	mov	r8, r0
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	469a      	mov	sl, r3
 800ec50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec56:	d807      	bhi.n	800ec68 <_printf_i+0x28>
 800ec58:	2f62      	cmp	r7, #98	@ 0x62
 800ec5a:	d80a      	bhi.n	800ec72 <_printf_i+0x32>
 800ec5c:	2f00      	cmp	r7, #0
 800ec5e:	f000 80d3 	beq.w	800ee08 <_printf_i+0x1c8>
 800ec62:	2f58      	cmp	r7, #88	@ 0x58
 800ec64:	f000 80ba 	beq.w	800eddc <_printf_i+0x19c>
 800ec68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec70:	e03a      	b.n	800ece8 <_printf_i+0xa8>
 800ec72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec76:	2b15      	cmp	r3, #21
 800ec78:	d8f6      	bhi.n	800ec68 <_printf_i+0x28>
 800ec7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ec80 <_printf_i+0x40>)
 800ec7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec80:	0800ecd9 	.word	0x0800ecd9
 800ec84:	0800eced 	.word	0x0800eced
 800ec88:	0800ec69 	.word	0x0800ec69
 800ec8c:	0800ec69 	.word	0x0800ec69
 800ec90:	0800ec69 	.word	0x0800ec69
 800ec94:	0800ec69 	.word	0x0800ec69
 800ec98:	0800eced 	.word	0x0800eced
 800ec9c:	0800ec69 	.word	0x0800ec69
 800eca0:	0800ec69 	.word	0x0800ec69
 800eca4:	0800ec69 	.word	0x0800ec69
 800eca8:	0800ec69 	.word	0x0800ec69
 800ecac:	0800edef 	.word	0x0800edef
 800ecb0:	0800ed17 	.word	0x0800ed17
 800ecb4:	0800eda9 	.word	0x0800eda9
 800ecb8:	0800ec69 	.word	0x0800ec69
 800ecbc:	0800ec69 	.word	0x0800ec69
 800ecc0:	0800ee11 	.word	0x0800ee11
 800ecc4:	0800ec69 	.word	0x0800ec69
 800ecc8:	0800ed17 	.word	0x0800ed17
 800eccc:	0800ec69 	.word	0x0800ec69
 800ecd0:	0800ec69 	.word	0x0800ec69
 800ecd4:	0800edb1 	.word	0x0800edb1
 800ecd8:	6833      	ldr	r3, [r6, #0]
 800ecda:	1d1a      	adds	r2, r3, #4
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6032      	str	r2, [r6, #0]
 800ece0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ece4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ece8:	2301      	movs	r3, #1
 800ecea:	e09e      	b.n	800ee2a <_printf_i+0x1ea>
 800ecec:	6833      	ldr	r3, [r6, #0]
 800ecee:	6820      	ldr	r0, [r4, #0]
 800ecf0:	1d19      	adds	r1, r3, #4
 800ecf2:	6031      	str	r1, [r6, #0]
 800ecf4:	0606      	lsls	r6, r0, #24
 800ecf6:	d501      	bpl.n	800ecfc <_printf_i+0xbc>
 800ecf8:	681d      	ldr	r5, [r3, #0]
 800ecfa:	e003      	b.n	800ed04 <_printf_i+0xc4>
 800ecfc:	0645      	lsls	r5, r0, #25
 800ecfe:	d5fb      	bpl.n	800ecf8 <_printf_i+0xb8>
 800ed00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed04:	2d00      	cmp	r5, #0
 800ed06:	da03      	bge.n	800ed10 <_printf_i+0xd0>
 800ed08:	232d      	movs	r3, #45	@ 0x2d
 800ed0a:	426d      	negs	r5, r5
 800ed0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed10:	230a      	movs	r3, #10
 800ed12:	4859      	ldr	r0, [pc, #356]	@ (800ee78 <_printf_i+0x238>)
 800ed14:	e011      	b.n	800ed3a <_printf_i+0xfa>
 800ed16:	6821      	ldr	r1, [r4, #0]
 800ed18:	6833      	ldr	r3, [r6, #0]
 800ed1a:	0608      	lsls	r0, r1, #24
 800ed1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed20:	d402      	bmi.n	800ed28 <_printf_i+0xe8>
 800ed22:	0649      	lsls	r1, r1, #25
 800ed24:	bf48      	it	mi
 800ed26:	b2ad      	uxthmi	r5, r5
 800ed28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed2a:	6033      	str	r3, [r6, #0]
 800ed2c:	bf14      	ite	ne
 800ed2e:	230a      	movne	r3, #10
 800ed30:	2308      	moveq	r3, #8
 800ed32:	4851      	ldr	r0, [pc, #324]	@ (800ee78 <_printf_i+0x238>)
 800ed34:	2100      	movs	r1, #0
 800ed36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed3a:	6866      	ldr	r6, [r4, #4]
 800ed3c:	2e00      	cmp	r6, #0
 800ed3e:	bfa8      	it	ge
 800ed40:	6821      	ldrge	r1, [r4, #0]
 800ed42:	60a6      	str	r6, [r4, #8]
 800ed44:	bfa4      	itt	ge
 800ed46:	f021 0104 	bicge.w	r1, r1, #4
 800ed4a:	6021      	strge	r1, [r4, #0]
 800ed4c:	b90d      	cbnz	r5, 800ed52 <_printf_i+0x112>
 800ed4e:	2e00      	cmp	r6, #0
 800ed50:	d04b      	beq.n	800edea <_printf_i+0x1aa>
 800ed52:	4616      	mov	r6, r2
 800ed54:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed58:	fb03 5711 	mls	r7, r3, r1, r5
 800ed5c:	5dc7      	ldrb	r7, [r0, r7]
 800ed5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed62:	462f      	mov	r7, r5
 800ed64:	42bb      	cmp	r3, r7
 800ed66:	460d      	mov	r5, r1
 800ed68:	d9f4      	bls.n	800ed54 <_printf_i+0x114>
 800ed6a:	2b08      	cmp	r3, #8
 800ed6c:	d10b      	bne.n	800ed86 <_printf_i+0x146>
 800ed6e:	6823      	ldr	r3, [r4, #0]
 800ed70:	07df      	lsls	r7, r3, #31
 800ed72:	d508      	bpl.n	800ed86 <_printf_i+0x146>
 800ed74:	6923      	ldr	r3, [r4, #16]
 800ed76:	6861      	ldr	r1, [r4, #4]
 800ed78:	4299      	cmp	r1, r3
 800ed7a:	bfde      	ittt	le
 800ed7c:	2330      	movle	r3, #48	@ 0x30
 800ed7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed82:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed86:	1b92      	subs	r2, r2, r6
 800ed88:	6122      	str	r2, [r4, #16]
 800ed8a:	464b      	mov	r3, r9
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	4640      	mov	r0, r8
 800ed90:	f8cd a000 	str.w	sl, [sp]
 800ed94:	aa03      	add	r2, sp, #12
 800ed96:	f7ff fee1 	bl	800eb5c <_printf_common>
 800ed9a:	3001      	adds	r0, #1
 800ed9c:	d14a      	bne.n	800ee34 <_printf_i+0x1f4>
 800ed9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eda2:	b004      	add	sp, #16
 800eda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	f043 0320 	orr.w	r3, r3, #32
 800edae:	6023      	str	r3, [r4, #0]
 800edb0:	2778      	movs	r7, #120	@ 0x78
 800edb2:	4832      	ldr	r0, [pc, #200]	@ (800ee7c <_printf_i+0x23c>)
 800edb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	6831      	ldr	r1, [r6, #0]
 800edbc:	061f      	lsls	r7, r3, #24
 800edbe:	f851 5b04 	ldr.w	r5, [r1], #4
 800edc2:	d402      	bmi.n	800edca <_printf_i+0x18a>
 800edc4:	065f      	lsls	r7, r3, #25
 800edc6:	bf48      	it	mi
 800edc8:	b2ad      	uxthmi	r5, r5
 800edca:	6031      	str	r1, [r6, #0]
 800edcc:	07d9      	lsls	r1, r3, #31
 800edce:	bf44      	itt	mi
 800edd0:	f043 0320 	orrmi.w	r3, r3, #32
 800edd4:	6023      	strmi	r3, [r4, #0]
 800edd6:	b11d      	cbz	r5, 800ede0 <_printf_i+0x1a0>
 800edd8:	2310      	movs	r3, #16
 800edda:	e7ab      	b.n	800ed34 <_printf_i+0xf4>
 800eddc:	4826      	ldr	r0, [pc, #152]	@ (800ee78 <_printf_i+0x238>)
 800edde:	e7e9      	b.n	800edb4 <_printf_i+0x174>
 800ede0:	6823      	ldr	r3, [r4, #0]
 800ede2:	f023 0320 	bic.w	r3, r3, #32
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	e7f6      	b.n	800edd8 <_printf_i+0x198>
 800edea:	4616      	mov	r6, r2
 800edec:	e7bd      	b.n	800ed6a <_printf_i+0x12a>
 800edee:	6833      	ldr	r3, [r6, #0]
 800edf0:	6825      	ldr	r5, [r4, #0]
 800edf2:	1d18      	adds	r0, r3, #4
 800edf4:	6961      	ldr	r1, [r4, #20]
 800edf6:	6030      	str	r0, [r6, #0]
 800edf8:	062e      	lsls	r6, r5, #24
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	d501      	bpl.n	800ee02 <_printf_i+0x1c2>
 800edfe:	6019      	str	r1, [r3, #0]
 800ee00:	e002      	b.n	800ee08 <_printf_i+0x1c8>
 800ee02:	0668      	lsls	r0, r5, #25
 800ee04:	d5fb      	bpl.n	800edfe <_printf_i+0x1be>
 800ee06:	8019      	strh	r1, [r3, #0]
 800ee08:	2300      	movs	r3, #0
 800ee0a:	4616      	mov	r6, r2
 800ee0c:	6123      	str	r3, [r4, #16]
 800ee0e:	e7bc      	b.n	800ed8a <_printf_i+0x14a>
 800ee10:	6833      	ldr	r3, [r6, #0]
 800ee12:	2100      	movs	r1, #0
 800ee14:	1d1a      	adds	r2, r3, #4
 800ee16:	6032      	str	r2, [r6, #0]
 800ee18:	681e      	ldr	r6, [r3, #0]
 800ee1a:	6862      	ldr	r2, [r4, #4]
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f000 f985 	bl	800f12c <memchr>
 800ee22:	b108      	cbz	r0, 800ee28 <_printf_i+0x1e8>
 800ee24:	1b80      	subs	r0, r0, r6
 800ee26:	6060      	str	r0, [r4, #4]
 800ee28:	6863      	ldr	r3, [r4, #4]
 800ee2a:	6123      	str	r3, [r4, #16]
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee32:	e7aa      	b.n	800ed8a <_printf_i+0x14a>
 800ee34:	4632      	mov	r2, r6
 800ee36:	4649      	mov	r1, r9
 800ee38:	4640      	mov	r0, r8
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	47d0      	blx	sl
 800ee3e:	3001      	adds	r0, #1
 800ee40:	d0ad      	beq.n	800ed9e <_printf_i+0x15e>
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	079b      	lsls	r3, r3, #30
 800ee46:	d413      	bmi.n	800ee70 <_printf_i+0x230>
 800ee48:	68e0      	ldr	r0, [r4, #12]
 800ee4a:	9b03      	ldr	r3, [sp, #12]
 800ee4c:	4298      	cmp	r0, r3
 800ee4e:	bfb8      	it	lt
 800ee50:	4618      	movlt	r0, r3
 800ee52:	e7a6      	b.n	800eda2 <_printf_i+0x162>
 800ee54:	2301      	movs	r3, #1
 800ee56:	4632      	mov	r2, r6
 800ee58:	4649      	mov	r1, r9
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	47d0      	blx	sl
 800ee5e:	3001      	adds	r0, #1
 800ee60:	d09d      	beq.n	800ed9e <_printf_i+0x15e>
 800ee62:	3501      	adds	r5, #1
 800ee64:	68e3      	ldr	r3, [r4, #12]
 800ee66:	9903      	ldr	r1, [sp, #12]
 800ee68:	1a5b      	subs	r3, r3, r1
 800ee6a:	42ab      	cmp	r3, r5
 800ee6c:	dcf2      	bgt.n	800ee54 <_printf_i+0x214>
 800ee6e:	e7eb      	b.n	800ee48 <_printf_i+0x208>
 800ee70:	2500      	movs	r5, #0
 800ee72:	f104 0619 	add.w	r6, r4, #25
 800ee76:	e7f5      	b.n	800ee64 <_printf_i+0x224>
 800ee78:	0800f3d1 	.word	0x0800f3d1
 800ee7c:	0800f3e2 	.word	0x0800f3e2

0800ee80 <__sflush_r>:
 800ee80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	0716      	lsls	r6, r2, #28
 800ee88:	4605      	mov	r5, r0
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	d454      	bmi.n	800ef38 <__sflush_r+0xb8>
 800ee8e:	684b      	ldr	r3, [r1, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dc02      	bgt.n	800ee9a <__sflush_r+0x1a>
 800ee94:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	dd48      	ble.n	800ef2c <__sflush_r+0xac>
 800ee9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee9c:	2e00      	cmp	r6, #0
 800ee9e:	d045      	beq.n	800ef2c <__sflush_r+0xac>
 800eea0:	2300      	movs	r3, #0
 800eea2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eea6:	682f      	ldr	r7, [r5, #0]
 800eea8:	6a21      	ldr	r1, [r4, #32]
 800eeaa:	602b      	str	r3, [r5, #0]
 800eeac:	d030      	beq.n	800ef10 <__sflush_r+0x90>
 800eeae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eeb0:	89a3      	ldrh	r3, [r4, #12]
 800eeb2:	0759      	lsls	r1, r3, #29
 800eeb4:	d505      	bpl.n	800eec2 <__sflush_r+0x42>
 800eeb6:	6863      	ldr	r3, [r4, #4]
 800eeb8:	1ad2      	subs	r2, r2, r3
 800eeba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eebc:	b10b      	cbz	r3, 800eec2 <__sflush_r+0x42>
 800eebe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eec0:	1ad2      	subs	r2, r2, r3
 800eec2:	2300      	movs	r3, #0
 800eec4:	4628      	mov	r0, r5
 800eec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eec8:	6a21      	ldr	r1, [r4, #32]
 800eeca:	47b0      	blx	r6
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	d106      	bne.n	800eee0 <__sflush_r+0x60>
 800eed2:	6829      	ldr	r1, [r5, #0]
 800eed4:	291d      	cmp	r1, #29
 800eed6:	d82b      	bhi.n	800ef30 <__sflush_r+0xb0>
 800eed8:	4a28      	ldr	r2, [pc, #160]	@ (800ef7c <__sflush_r+0xfc>)
 800eeda:	410a      	asrs	r2, r1
 800eedc:	07d6      	lsls	r6, r2, #31
 800eede:	d427      	bmi.n	800ef30 <__sflush_r+0xb0>
 800eee0:	2200      	movs	r2, #0
 800eee2:	6062      	str	r2, [r4, #4]
 800eee4:	6922      	ldr	r2, [r4, #16]
 800eee6:	04d9      	lsls	r1, r3, #19
 800eee8:	6022      	str	r2, [r4, #0]
 800eeea:	d504      	bpl.n	800eef6 <__sflush_r+0x76>
 800eeec:	1c42      	adds	r2, r0, #1
 800eeee:	d101      	bne.n	800eef4 <__sflush_r+0x74>
 800eef0:	682b      	ldr	r3, [r5, #0]
 800eef2:	b903      	cbnz	r3, 800eef6 <__sflush_r+0x76>
 800eef4:	6560      	str	r0, [r4, #84]	@ 0x54
 800eef6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eef8:	602f      	str	r7, [r5, #0]
 800eefa:	b1b9      	cbz	r1, 800ef2c <__sflush_r+0xac>
 800eefc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef00:	4299      	cmp	r1, r3
 800ef02:	d002      	beq.n	800ef0a <__sflush_r+0x8a>
 800ef04:	4628      	mov	r0, r5
 800ef06:	f7ff fa9b 	bl	800e440 <_free_r>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef0e:	e00d      	b.n	800ef2c <__sflush_r+0xac>
 800ef10:	2301      	movs	r3, #1
 800ef12:	4628      	mov	r0, r5
 800ef14:	47b0      	blx	r6
 800ef16:	4602      	mov	r2, r0
 800ef18:	1c50      	adds	r0, r2, #1
 800ef1a:	d1c9      	bne.n	800eeb0 <__sflush_r+0x30>
 800ef1c:	682b      	ldr	r3, [r5, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0c6      	beq.n	800eeb0 <__sflush_r+0x30>
 800ef22:	2b1d      	cmp	r3, #29
 800ef24:	d001      	beq.n	800ef2a <__sflush_r+0xaa>
 800ef26:	2b16      	cmp	r3, #22
 800ef28:	d11d      	bne.n	800ef66 <__sflush_r+0xe6>
 800ef2a:	602f      	str	r7, [r5, #0]
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	e021      	b.n	800ef74 <__sflush_r+0xf4>
 800ef30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef34:	b21b      	sxth	r3, r3
 800ef36:	e01a      	b.n	800ef6e <__sflush_r+0xee>
 800ef38:	690f      	ldr	r7, [r1, #16]
 800ef3a:	2f00      	cmp	r7, #0
 800ef3c:	d0f6      	beq.n	800ef2c <__sflush_r+0xac>
 800ef3e:	0793      	lsls	r3, r2, #30
 800ef40:	bf18      	it	ne
 800ef42:	2300      	movne	r3, #0
 800ef44:	680e      	ldr	r6, [r1, #0]
 800ef46:	bf08      	it	eq
 800ef48:	694b      	ldreq	r3, [r1, #20]
 800ef4a:	1bf6      	subs	r6, r6, r7
 800ef4c:	600f      	str	r7, [r1, #0]
 800ef4e:	608b      	str	r3, [r1, #8]
 800ef50:	2e00      	cmp	r6, #0
 800ef52:	ddeb      	ble.n	800ef2c <__sflush_r+0xac>
 800ef54:	4633      	mov	r3, r6
 800ef56:	463a      	mov	r2, r7
 800ef58:	4628      	mov	r0, r5
 800ef5a:	6a21      	ldr	r1, [r4, #32]
 800ef5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ef60:	47e0      	blx	ip
 800ef62:	2800      	cmp	r0, #0
 800ef64:	dc07      	bgt.n	800ef76 <__sflush_r+0xf6>
 800ef66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef72:	81a3      	strh	r3, [r4, #12]
 800ef74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef76:	4407      	add	r7, r0
 800ef78:	1a36      	subs	r6, r6, r0
 800ef7a:	e7e9      	b.n	800ef50 <__sflush_r+0xd0>
 800ef7c:	dfbffffe 	.word	0xdfbffffe

0800ef80 <_fflush_r>:
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	690b      	ldr	r3, [r1, #16]
 800ef84:	4605      	mov	r5, r0
 800ef86:	460c      	mov	r4, r1
 800ef88:	b913      	cbnz	r3, 800ef90 <_fflush_r+0x10>
 800ef8a:	2500      	movs	r5, #0
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	b118      	cbz	r0, 800ef9a <_fflush_r+0x1a>
 800ef92:	6a03      	ldr	r3, [r0, #32]
 800ef94:	b90b      	cbnz	r3, 800ef9a <_fflush_r+0x1a>
 800ef96:	f7fe ffd5 	bl	800df44 <__sinit>
 800ef9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d0f3      	beq.n	800ef8a <_fflush_r+0xa>
 800efa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800efa4:	07d0      	lsls	r0, r2, #31
 800efa6:	d404      	bmi.n	800efb2 <_fflush_r+0x32>
 800efa8:	0599      	lsls	r1, r3, #22
 800efaa:	d402      	bmi.n	800efb2 <_fflush_r+0x32>
 800efac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efae:	f7ff fa36 	bl	800e41e <__retarget_lock_acquire_recursive>
 800efb2:	4628      	mov	r0, r5
 800efb4:	4621      	mov	r1, r4
 800efb6:	f7ff ff63 	bl	800ee80 <__sflush_r>
 800efba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800efbc:	4605      	mov	r5, r0
 800efbe:	07da      	lsls	r2, r3, #31
 800efc0:	d4e4      	bmi.n	800ef8c <_fflush_r+0xc>
 800efc2:	89a3      	ldrh	r3, [r4, #12]
 800efc4:	059b      	lsls	r3, r3, #22
 800efc6:	d4e1      	bmi.n	800ef8c <_fflush_r+0xc>
 800efc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efca:	f7ff fa29 	bl	800e420 <__retarget_lock_release_recursive>
 800efce:	e7dd      	b.n	800ef8c <_fflush_r+0xc>

0800efd0 <__swhatbuf_r>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	460c      	mov	r4, r1
 800efd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd8:	4615      	mov	r5, r2
 800efda:	2900      	cmp	r1, #0
 800efdc:	461e      	mov	r6, r3
 800efde:	b096      	sub	sp, #88	@ 0x58
 800efe0:	da0c      	bge.n	800effc <__swhatbuf_r+0x2c>
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	2100      	movs	r1, #0
 800efe6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800efea:	bf14      	ite	ne
 800efec:	2340      	movne	r3, #64	@ 0x40
 800efee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eff2:	2000      	movs	r0, #0
 800eff4:	6031      	str	r1, [r6, #0]
 800eff6:	602b      	str	r3, [r5, #0]
 800eff8:	b016      	add	sp, #88	@ 0x58
 800effa:	bd70      	pop	{r4, r5, r6, pc}
 800effc:	466a      	mov	r2, sp
 800effe:	f000 f863 	bl	800f0c8 <_fstat_r>
 800f002:	2800      	cmp	r0, #0
 800f004:	dbed      	blt.n	800efe2 <__swhatbuf_r+0x12>
 800f006:	9901      	ldr	r1, [sp, #4]
 800f008:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f00c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f010:	4259      	negs	r1, r3
 800f012:	4159      	adcs	r1, r3
 800f014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f018:	e7eb      	b.n	800eff2 <__swhatbuf_r+0x22>

0800f01a <__smakebuf_r>:
 800f01a:	898b      	ldrh	r3, [r1, #12]
 800f01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f01e:	079d      	lsls	r5, r3, #30
 800f020:	4606      	mov	r6, r0
 800f022:	460c      	mov	r4, r1
 800f024:	d507      	bpl.n	800f036 <__smakebuf_r+0x1c>
 800f026:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f02a:	6023      	str	r3, [r4, #0]
 800f02c:	6123      	str	r3, [r4, #16]
 800f02e:	2301      	movs	r3, #1
 800f030:	6163      	str	r3, [r4, #20]
 800f032:	b003      	add	sp, #12
 800f034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f036:	466a      	mov	r2, sp
 800f038:	ab01      	add	r3, sp, #4
 800f03a:	f7ff ffc9 	bl	800efd0 <__swhatbuf_r>
 800f03e:	9f00      	ldr	r7, [sp, #0]
 800f040:	4605      	mov	r5, r0
 800f042:	4639      	mov	r1, r7
 800f044:	4630      	mov	r0, r6
 800f046:	f7ff fa65 	bl	800e514 <_malloc_r>
 800f04a:	b948      	cbnz	r0, 800f060 <__smakebuf_r+0x46>
 800f04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f050:	059a      	lsls	r2, r3, #22
 800f052:	d4ee      	bmi.n	800f032 <__smakebuf_r+0x18>
 800f054:	f023 0303 	bic.w	r3, r3, #3
 800f058:	f043 0302 	orr.w	r3, r3, #2
 800f05c:	81a3      	strh	r3, [r4, #12]
 800f05e:	e7e2      	b.n	800f026 <__smakebuf_r+0xc>
 800f060:	89a3      	ldrh	r3, [r4, #12]
 800f062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f06a:	81a3      	strh	r3, [r4, #12]
 800f06c:	9b01      	ldr	r3, [sp, #4]
 800f06e:	6020      	str	r0, [r4, #0]
 800f070:	b15b      	cbz	r3, 800f08a <__smakebuf_r+0x70>
 800f072:	4630      	mov	r0, r6
 800f074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f078:	f000 f838 	bl	800f0ec <_isatty_r>
 800f07c:	b128      	cbz	r0, 800f08a <__smakebuf_r+0x70>
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	f023 0303 	bic.w	r3, r3, #3
 800f084:	f043 0301 	orr.w	r3, r3, #1
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	89a3      	ldrh	r3, [r4, #12]
 800f08c:	431d      	orrs	r5, r3
 800f08e:	81a5      	strh	r5, [r4, #12]
 800f090:	e7cf      	b.n	800f032 <__smakebuf_r+0x18>

0800f092 <memmove>:
 800f092:	4288      	cmp	r0, r1
 800f094:	b510      	push	{r4, lr}
 800f096:	eb01 0402 	add.w	r4, r1, r2
 800f09a:	d902      	bls.n	800f0a2 <memmove+0x10>
 800f09c:	4284      	cmp	r4, r0
 800f09e:	4623      	mov	r3, r4
 800f0a0:	d807      	bhi.n	800f0b2 <memmove+0x20>
 800f0a2:	1e43      	subs	r3, r0, #1
 800f0a4:	42a1      	cmp	r1, r4
 800f0a6:	d008      	beq.n	800f0ba <memmove+0x28>
 800f0a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0b0:	e7f8      	b.n	800f0a4 <memmove+0x12>
 800f0b2:	4601      	mov	r1, r0
 800f0b4:	4402      	add	r2, r0
 800f0b6:	428a      	cmp	r2, r1
 800f0b8:	d100      	bne.n	800f0bc <memmove+0x2a>
 800f0ba:	bd10      	pop	{r4, pc}
 800f0bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0c4:	e7f7      	b.n	800f0b6 <memmove+0x24>
	...

0800f0c8 <_fstat_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4d06      	ldr	r5, [pc, #24]	@ (800f0e8 <_fstat_r+0x20>)
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	4608      	mov	r0, r1
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	602b      	str	r3, [r5, #0]
 800f0d6:	f7f2 fd43 	bl	8001b60 <_fstat>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	d102      	bne.n	800f0e4 <_fstat_r+0x1c>
 800f0de:	682b      	ldr	r3, [r5, #0]
 800f0e0:	b103      	cbz	r3, 800f0e4 <_fstat_r+0x1c>
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20003180 	.word	0x20003180

0800f0ec <_isatty_r>:
 800f0ec:	b538      	push	{r3, r4, r5, lr}
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	4d05      	ldr	r5, [pc, #20]	@ (800f108 <_isatty_r+0x1c>)
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	4608      	mov	r0, r1
 800f0f6:	602b      	str	r3, [r5, #0]
 800f0f8:	f7f2 fd41 	bl	8001b7e <_isatty>
 800f0fc:	1c43      	adds	r3, r0, #1
 800f0fe:	d102      	bne.n	800f106 <_isatty_r+0x1a>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	b103      	cbz	r3, 800f106 <_isatty_r+0x1a>
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	bd38      	pop	{r3, r4, r5, pc}
 800f108:	20003180 	.word	0x20003180

0800f10c <_sbrk_r>:
 800f10c:	b538      	push	{r3, r4, r5, lr}
 800f10e:	2300      	movs	r3, #0
 800f110:	4d05      	ldr	r5, [pc, #20]	@ (800f128 <_sbrk_r+0x1c>)
 800f112:	4604      	mov	r4, r0
 800f114:	4608      	mov	r0, r1
 800f116:	602b      	str	r3, [r5, #0]
 800f118:	f7f2 fd48 	bl	8001bac <_sbrk>
 800f11c:	1c43      	adds	r3, r0, #1
 800f11e:	d102      	bne.n	800f126 <_sbrk_r+0x1a>
 800f120:	682b      	ldr	r3, [r5, #0]
 800f122:	b103      	cbz	r3, 800f126 <_sbrk_r+0x1a>
 800f124:	6023      	str	r3, [r4, #0]
 800f126:	bd38      	pop	{r3, r4, r5, pc}
 800f128:	20003180 	.word	0x20003180

0800f12c <memchr>:
 800f12c:	4603      	mov	r3, r0
 800f12e:	b510      	push	{r4, lr}
 800f130:	b2c9      	uxtb	r1, r1
 800f132:	4402      	add	r2, r0
 800f134:	4293      	cmp	r3, r2
 800f136:	4618      	mov	r0, r3
 800f138:	d101      	bne.n	800f13e <memchr+0x12>
 800f13a:	2000      	movs	r0, #0
 800f13c:	e003      	b.n	800f146 <memchr+0x1a>
 800f13e:	7804      	ldrb	r4, [r0, #0]
 800f140:	3301      	adds	r3, #1
 800f142:	428c      	cmp	r4, r1
 800f144:	d1f6      	bne.n	800f134 <memchr+0x8>
 800f146:	bd10      	pop	{r4, pc}

0800f148 <_realloc_r>:
 800f148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f14c:	4680      	mov	r8, r0
 800f14e:	4615      	mov	r5, r2
 800f150:	460c      	mov	r4, r1
 800f152:	b921      	cbnz	r1, 800f15e <_realloc_r+0x16>
 800f154:	4611      	mov	r1, r2
 800f156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	f7ff b9db 	b.w	800e514 <_malloc_r>
 800f15e:	b92a      	cbnz	r2, 800f16c <_realloc_r+0x24>
 800f160:	f7ff f96e 	bl	800e440 <_free_r>
 800f164:	2400      	movs	r4, #0
 800f166:	4620      	mov	r0, r4
 800f168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16c:	f000 f81a 	bl	800f1a4 <_malloc_usable_size_r>
 800f170:	4285      	cmp	r5, r0
 800f172:	4606      	mov	r6, r0
 800f174:	d802      	bhi.n	800f17c <_realloc_r+0x34>
 800f176:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f17a:	d8f4      	bhi.n	800f166 <_realloc_r+0x1e>
 800f17c:	4629      	mov	r1, r5
 800f17e:	4640      	mov	r0, r8
 800f180:	f7ff f9c8 	bl	800e514 <_malloc_r>
 800f184:	4607      	mov	r7, r0
 800f186:	2800      	cmp	r0, #0
 800f188:	d0ec      	beq.n	800f164 <_realloc_r+0x1c>
 800f18a:	42b5      	cmp	r5, r6
 800f18c:	462a      	mov	r2, r5
 800f18e:	4621      	mov	r1, r4
 800f190:	bf28      	it	cs
 800f192:	4632      	movcs	r2, r6
 800f194:	f7ff f945 	bl	800e422 <memcpy>
 800f198:	4621      	mov	r1, r4
 800f19a:	4640      	mov	r0, r8
 800f19c:	f7ff f950 	bl	800e440 <_free_r>
 800f1a0:	463c      	mov	r4, r7
 800f1a2:	e7e0      	b.n	800f166 <_realloc_r+0x1e>

0800f1a4 <_malloc_usable_size_r>:
 800f1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a8:	1f18      	subs	r0, r3, #4
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	bfbc      	itt	lt
 800f1ae:	580b      	ldrlt	r3, [r1, r0]
 800f1b0:	18c0      	addlt	r0, r0, r3
 800f1b2:	4770      	bx	lr

0800f1b4 <_init>:
 800f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b6:	bf00      	nop
 800f1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ba:	bc08      	pop	{r3}
 800f1bc:	469e      	mov	lr, r3
 800f1be:	4770      	bx	lr

0800f1c0 <_fini>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	bf00      	nop
 800f1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c6:	bc08      	pop	{r3}
 800f1c8:	469e      	mov	lr, r3
 800f1ca:	4770      	bx	lr
