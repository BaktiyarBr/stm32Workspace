
test_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d828  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800d9b8  0800d9b8  0000e9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbc0  0800dbc0  0000f160  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbc0  0800dbc0  0000ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbc8  0800dbc8  0000f160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbc8  0800dbc8  0000ebc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbcc  0800dbcc  0000ebcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800dbd0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f160  2**0
                  CONTENTS
 10 .bss          000068d0  20000160  20000160  0000f160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006a30  20006a30  0000f160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022a19  00000000  00000000  0000f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054c9  00000000  00000000  00031ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e80  00000000  00000000  00037078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174e  00000000  00000000  00038ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025258  00000000  00000000  0003a646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000234ad  00000000  00000000  0005f89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20d5  00000000  00000000  00082d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00154e20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008998  00000000  00000000  00154e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0015d7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9a0 	.word	0x0800d9a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800d9a0 	.word	0x0800d9a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	
//	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
//	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
//	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
	
	CHIP_SELECT(BNO080);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056a:	480f      	ldr	r0, [pc, #60]	@ (80005a8 <BNO080_GPIO_SPI_Initialization+0x48>)
 800056c:	f001 fd2e 	bl	8001fcc <HAL_GPIO_WritePin>
	WAKE_LOW();
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <BNO080_GPIO_SPI_Initialization+0x48>)
 8000576:	f001 fd29 	bl	8001fcc <HAL_GPIO_WritePin>
	RESET_LOW();
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <BNO080_GPIO_SPI_Initialization+0x4c>)
 8000580:	f001 fd24 	bl	8001fcc <HAL_GPIO_WritePin>
	
	

	CHIP_DESELECT(BNO080);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058a:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <BNO080_GPIO_SPI_Initialization+0x48>)
 800058c:	f001 fd1e 	bl	8001fcc <HAL_GPIO_WritePin>
	WAKE_HIGH();
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <BNO080_GPIO_SPI_Initialization+0x48>)
 8000596:	f001 fd19 	bl	8001fcc <HAL_GPIO_WritePin>
	RESET_HIGH();
 800059a:	2201      	movs	r2, #1
 800059c:	2120      	movs	r1, #32
 800059e:	4803      	ldr	r0, [pc, #12]	@ (80005ac <BNO080_GPIO_SPI_Initialization+0x4c>)
 80005a0:	f001 fd14 	bl	8001fcc <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800

080005b0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80005b6:	f7ff ffd3 	bl	8000560 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80005ba:	482e      	ldr	r0, [pc, #184]	@ (8000674 <BNO080_Initialization+0xc4>)
 80005bc:	f00b fc6a 	bl	800be94 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c6:	482c      	ldr	r0, [pc, #176]	@ (8000678 <BNO080_Initialization+0xc8>)
 80005c8:	f001 fd00 	bl	8001fcc <HAL_GPIO_WritePin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	4829      	ldr	r0, [pc, #164]	@ (8000678 <BNO080_Initialization+0xc8>)
 80005d2:	f001 fcfb 	bl	8001fcc <HAL_GPIO_WritePin>
	RESET_LOW();	//Reset BNO080
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	4828      	ldr	r0, [pc, #160]	@ (800067c <BNO080_Initialization+0xcc>)
 80005dc:	f001 fcf6 	bl	8001fcc <HAL_GPIO_WritePin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80005e0:	20c8      	movs	r0, #200	@ 0xc8
 80005e2:	f001 fa17 	bl	8001a14 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80005e6:	2201      	movs	r2, #1
 80005e8:	2120      	movs	r1, #32
 80005ea:	4824      	ldr	r0, [pc, #144]	@ (800067c <BNO080_Initialization+0xcc>)
 80005ec:	f001 fcee 	bl	8001fcc <HAL_GPIO_WritePin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80005f0:	f000 fb16 	bl	8000c20 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80005f4:	f000 fb14 	bl	8000c20 <BNO080_waitForSPI>
	BNO080_receivePacket();
 80005f8:	f000 fb34 	bl	8000c64 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80005fc:	f000 fb10 	bl	8000c20 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8000600:	f000 fb30 	bl	8000c64 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <BNO080_Initialization+0xd0>)
 8000606:	22f9      	movs	r2, #249	@ 0xf9
 8000608:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800060a:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <BNO080_Initialization+0xd0>)
 800060c:	2200      	movs	r2, #0
 800060e:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8000610:	2102      	movs	r1, #2
 8000612:	2002      	movs	r0, #2
 8000614:	f000 fb98 	bl	8000d48 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8000618:	f000 fb02 	bl	8000c20 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800061c:	f000 fb22 	bl	8000c64 <BNO080_receivePacket>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d11b      	bne.n	800065e <BNO080_Initialization+0xae>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <BNO080_Initialization+0xd4>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <BNO080_Initialization+0xd4>)
 800062e:	785b      	ldrb	r3, [r3, #1]
 8000630:	461a      	mov	r2, r3
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <BNO080_Initialization+0xd4>)
 8000634:	789b      	ldrb	r3, [r3, #2]
 8000636:	4618      	mov	r0, r3
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <BNO080_Initialization+0xd4>)
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4603      	mov	r3, r0
 8000640:	4811      	ldr	r0, [pc, #68]	@ (8000688 <BNO080_Initialization+0xd8>)
 8000642:	f00b fc27 	bl	800be94 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <BNO080_Initialization+0xd0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2bf8      	cmp	r3, #248	@ 0xf8
 800064c:	d107      	bne.n	800065e <BNO080_Initialization+0xae>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <BNO080_Initialization+0xd0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <BNO080_Initialization+0xdc>)
 8000656:	f00b fc1d 	bl	800be94 <iprintf>
			return (0);
 800065a:	2300      	movs	r3, #0
 800065c:	e007      	b.n	800066e <BNO080_Initialization+0xbe>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <BNO080_Initialization+0xd0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	22f8      	movs	r2, #248	@ 0xf8
 8000664:	4619      	mov	r1, r3
 8000666:	480a      	ldr	r0, [pc, #40]	@ (8000690 <BNO080_Initialization+0xe0>)
 8000668:	f00b fc14 	bl	800be94 <iprintf>
	return (1); //Something went wrong
 800066c:	2301      	movs	r3, #1
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800d9b8 	.word	0x0800d9b8
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	20000180 	.word	0x20000180
 8000684:	2000017c 	.word	0x2000017c
 8000688:	0800d9cc 	.word	0x0800d9cc
 800068c:	0800d9e4 	.word	0x0800d9e4
 8000690:	0800da04 	.word	0x0800da04

08000694 <SPI2_SendByte>:



unsigned char SPI2_SendByte(unsigned char data)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af02      	add	r7, sp, #8
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
    uint8_t rxData;

    // Transmit and receive data
    HAL_SPI_TransmitReceive(&hspi2, &data, &rxData, 1, 1);
 800069e:	f107 020f 	add.w	r2, r7, #15
 80006a2:	1df9      	adds	r1, r7, #7
 80006a4:	2301      	movs	r3, #1
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	4804      	ldr	r0, [pc, #16]	@ (80006bc <SPI2_SendByte+0x28>)
 80006ac:	f003 fc69 	bl	8003f82 <HAL_SPI_TransmitReceive>
    //HAL_SPI_TransmitReceive_DMA(&hspi2, &data, &rxData, 1);




    return rxData;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000250 	.word	0x20000250

080006c0 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == GPIO_PIN_SET)
 80006c4:	2110      	movs	r1, #16
 80006c6:	4812      	ldr	r0, [pc, #72]	@ (8000710 <BNO080_dataAvailable+0x50>)
 80006c8:	f001 fc68 	bl	8001f9c <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d101      	bne.n	80006d6 <BNO080_dataAvailable+0x16>
		return (0);
 80006d2:	2300      	movs	r3, #0
 80006d4:	e019      	b.n	800070a <BNO080_dataAvailable+0x4a>

	if (BNO080_receivePacket() == 1)
 80006d6:	f000 fac5 	bl	8000c64 <BNO080_receivePacket>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d113      	bne.n	8000708 <BNO080_dataAvailable+0x48>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <BNO080_dataAvailable+0x54>)
 80006e2:	789b      	ldrb	r3, [r3, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d107      	bne.n	80006f8 <BNO080_dataAvailable+0x38>
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <BNO080_dataAvailable+0x58>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2bfb      	cmp	r3, #251	@ 0xfb
 80006ee:	d103      	bne.n	80006f8 <BNO080_dataAvailable+0x38>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80006f0:	f000 f830 	bl	8000754 <BNO080_parseInputReport>
			return (1);
 80006f4:	2301      	movs	r3, #1
 80006f6:	e008      	b.n	800070a <BNO080_dataAvailable+0x4a>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <BNO080_dataAvailable+0x54>)
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d103      	bne.n	8000708 <BNO080_dataAvailable+0x48>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8000700:	f000 f80c 	bl	800071c <BNO080_parseCommandReport>
			return (1);
 8000704:	2301      	movs	r3, #1
 8000706:	e000      	b.n	800070a <BNO080_dataAvailable+0x4a>
		}
	}
	return (0);
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40020800 	.word	0x40020800
 8000714:	2000017c 	.word	0x2000017c
 8000718:	20000180 	.word	0x20000180

0800071c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <BNO080_parseCommandReport+0x30>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2bf1      	cmp	r3, #241	@ 0xf1
 8000728:	d109      	bne.n	800073e <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <BNO080_parseCommandReport+0x30>)
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b07      	cmp	r3, #7
 8000734:	d103      	bne.n	800073e <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <BNO080_parseCommandReport+0x30>)
 8000738:	795a      	ldrb	r2, [r3, #5]
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <BNO080_parseCommandReport+0x34>)
 800073c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000180 	.word	0x20000180
 8000750:	20000240 	.word	0x20000240

08000754 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800075a:	4b98      	ldr	r3, [pc, #608]	@ (80009bc <BNO080_parseInputReport+0x268>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b21a      	sxth	r2, r3
 8000762:	4b96      	ldr	r3, [pc, #600]	@ (80009bc <BNO080_parseInputReport+0x268>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800076c:	8a3b      	ldrh	r3, [r7, #16]
 800076e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000772:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8000774:	8a3b      	ldrh	r3, [r7, #16]
 8000776:	3b04      	subs	r3, #4
 8000778:	b29b      	uxth	r3, r3
 800077a:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 800077c:	4b90      	ldr	r3, [pc, #576]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	061a      	lsls	r2, r3, #24
 8000782:	4b8f      	ldr	r3, [pc, #572]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 8000784:	78db      	ldrb	r3, [r3, #3]
 8000786:	041b      	lsls	r3, r3, #16
 8000788:	431a      	orrs	r2, r3
 800078a:	4b8d      	ldr	r3, [pc, #564]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 800078c:	789b      	ldrb	r3, [r3, #2]
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	4313      	orrs	r3, r2
 8000792:	4a8b      	ldr	r2, [pc, #556]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 8000794:	7852      	ldrb	r2, [r2, #1]
 8000796:	4313      	orrs	r3, r2
 8000798:	4a8a      	ldr	r2, [pc, #552]	@ (80009c4 <BNO080_parseInputReport+0x270>)
 800079a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 800079c:	4b88      	ldr	r3, [pc, #544]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 800079e:	79db      	ldrb	r3, [r3, #7]
 80007a0:	f003 0303 	and.w	r3, r3, #3
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80007a6:	4b86      	ldr	r3, [pc, #536]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007a8:	7a9b      	ldrb	r3, [r3, #10]
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b84      	ldr	r3, [pc, #528]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007b0:	7a5b      	ldrb	r3, [r3, #9]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80007ba:	4b81      	ldr	r3, [pc, #516]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007bc:	7b1b      	ldrb	r3, [r3, #12]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b7f      	ldr	r3, [pc, #508]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007c4:	7adb      	ldrb	r3, [r3, #11]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80007ce:	4b7c      	ldr	r3, [pc, #496]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007d0:	7b9b      	ldrb	r3, [r3, #14]
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	4b7a      	ldr	r3, [pc, #488]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007d8:	7b5b      	ldrb	r3, [r3, #13]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b21b      	sxth	r3, r3
 80007e0:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80007ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80007ee:	2b0e      	cmp	r3, #14
 80007f0:	dd09      	ble.n	8000806 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80007f2:	4b73      	ldr	r3, [pc, #460]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007f4:	7c1b      	ldrb	r3, [r3, #16]
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b71      	ldr	r3, [pc, #452]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80007fc:	7bdb      	ldrb	r3, [r3, #15]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8000806:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800080a:	2b10      	cmp	r3, #16
 800080c:	dd09      	ble.n	8000822 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800080e:	4b6c      	ldr	r3, [pc, #432]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 8000810:	7c9b      	ldrb	r3, [r3, #18]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	4b6a      	ldr	r3, [pc, #424]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 8000818:	7c5b      	ldrb	r3, [r3, #17]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8000822:	4b67      	ldr	r3, [pc, #412]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2b1e      	cmp	r3, #30
 8000828:	dc46      	bgt.n	80008b8 <BNO080_parseInputReport+0x164>
 800082a:	2b00      	cmp	r3, #0
 800082c:	f340 80bf 	ble.w	80009ae <BNO080_parseInputReport+0x25a>
 8000830:	3b01      	subs	r3, #1
 8000832:	2b1d      	cmp	r3, #29
 8000834:	f200 80bb 	bhi.w	80009ae <BNO080_parseInputReport+0x25a>
 8000838:	a201      	add	r2, pc, #4	@ (adr r2, 8000840 <BNO080_parseInputReport+0xec>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	080008bf 	.word	0x080008bf
 8000844:	080008f7 	.word	0x080008f7
 8000848:	08000913 	.word	0x08000913
 800084c:	080008db 	.word	0x080008db
 8000850:	0800092f 	.word	0x0800092f
 8000854:	080009af 	.word	0x080009af
 8000858:	080009af 	.word	0x080009af
 800085c:	0800092f 	.word	0x0800092f
 8000860:	080009af 	.word	0x080009af
 8000864:	080009af 	.word	0x080009af
 8000868:	080009af 	.word	0x080009af
 800086c:	080009af 	.word	0x080009af
 8000870:	080009af 	.word	0x080009af
 8000874:	080009af 	.word	0x080009af
 8000878:	080009af 	.word	0x080009af
 800087c:	080009af 	.word	0x080009af
 8000880:	08000957 	.word	0x08000957
 8000884:	080009af 	.word	0x080009af
 8000888:	0800095f 	.word	0x0800095f
 800088c:	080009af 	.word	0x080009af
 8000890:	080009af 	.word	0x080009af
 8000894:	080009af 	.word	0x080009af
 8000898:	080009af 	.word	0x080009af
 800089c:	080009af 	.word	0x080009af
 80008a0:	080009af 	.word	0x080009af
 80008a4:	080009af 	.word	0x080009af
 80008a8:	080009af 	.word	0x080009af
 80008ac:	080009af 	.word	0x080009af
 80008b0:	080009af 	.word	0x080009af
 80008b4:	08000969 	.word	0x08000969
 80008b8:	2bf1      	cmp	r3, #241	@ 0xf1
 80008ba:	d06d      	beq.n	8000998 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80008bc:	e077      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b41      	ldr	r3, [pc, #260]	@ (80009c8 <BNO080_parseInputReport+0x274>)
 80008c4:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80008c6:	4a41      	ldr	r2, [pc, #260]	@ (80009cc <BNO080_parseInputReport+0x278>)
 80008c8:	89bb      	ldrh	r3, [r7, #12]
 80008ca:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80008cc:	4a40      	ldr	r2, [pc, #256]	@ (80009d0 <BNO080_parseInputReport+0x27c>)
 80008ce:	897b      	ldrh	r3, [r7, #10]
 80008d0:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80008d2:	4a40      	ldr	r2, [pc, #256]	@ (80009d4 <BNO080_parseInputReport+0x280>)
 80008d4:	893b      	ldrh	r3, [r7, #8]
 80008d6:	8013      	strh	r3, [r2, #0]
			break;
 80008d8:	e069      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <BNO080_parseInputReport+0x284>)
 80008e0:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 80008e2:	4a3e      	ldr	r2, [pc, #248]	@ (80009dc <BNO080_parseInputReport+0x288>)
 80008e4:	89bb      	ldrh	r3, [r7, #12]
 80008e6:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80008e8:	4a3d      	ldr	r2, [pc, #244]	@ (80009e0 <BNO080_parseInputReport+0x28c>)
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80008ee:	4a3d      	ldr	r2, [pc, #244]	@ (80009e4 <BNO080_parseInputReport+0x290>)
 80008f0:	893b      	ldrh	r3, [r7, #8]
 80008f2:	8013      	strh	r3, [r2, #0]
			break;
 80008f4:	e05b      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b3b      	ldr	r3, [pc, #236]	@ (80009e8 <BNO080_parseInputReport+0x294>)
 80008fc:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80008fe:	4a3b      	ldr	r2, [pc, #236]	@ (80009ec <BNO080_parseInputReport+0x298>)
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8000904:	4a3a      	ldr	r2, [pc, #232]	@ (80009f0 <BNO080_parseInputReport+0x29c>)
 8000906:	897b      	ldrh	r3, [r7, #10]
 8000908:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800090a:	4a3a      	ldr	r2, [pc, #232]	@ (80009f4 <BNO080_parseInputReport+0x2a0>)
 800090c:	893b      	ldrh	r3, [r7, #8]
 800090e:	8013      	strh	r3, [r2, #0]
			break;
 8000910:	e04d      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <BNO080_parseInputReport+0x2a4>)
 8000918:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800091a:	4a38      	ldr	r2, [pc, #224]	@ (80009fc <BNO080_parseInputReport+0x2a8>)
 800091c:	89bb      	ldrh	r3, [r7, #12]
 800091e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8000920:	4a37      	ldr	r2, [pc, #220]	@ (8000a00 <BNO080_parseInputReport+0x2ac>)
 8000922:	897b      	ldrh	r3, [r7, #10]
 8000924:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8000926:	4a37      	ldr	r2, [pc, #220]	@ (8000a04 <BNO080_parseInputReport+0x2b0>)
 8000928:	893b      	ldrh	r3, [r7, #8]
 800092a:	8013      	strh	r3, [r2, #0]
			break;
 800092c:	e03f      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	b29a      	uxth	r2, r3
 8000932:	4b35      	ldr	r3, [pc, #212]	@ (8000a08 <BNO080_parseInputReport+0x2b4>)
 8000934:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8000936:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <BNO080_parseInputReport+0x2b8>)
 8000938:	89bb      	ldrh	r3, [r7, #12]
 800093a:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 800093c:	4a34      	ldr	r2, [pc, #208]	@ (8000a10 <BNO080_parseInputReport+0x2bc>)
 800093e:	897b      	ldrh	r3, [r7, #10]
 8000940:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 8000942:	4a34      	ldr	r2, [pc, #208]	@ (8000a14 <BNO080_parseInputReport+0x2c0>)
 8000944:	893b      	ldrh	r3, [r7, #8]
 8000946:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8000948:	4a33      	ldr	r2, [pc, #204]	@ (8000a18 <BNO080_parseInputReport+0x2c4>)
 800094a:	8afb      	ldrh	r3, [r7, #22]
 800094c:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800094e:	4a33      	ldr	r2, [pc, #204]	@ (8000a1c <BNO080_parseInputReport+0x2c8>)
 8000950:	8abb      	ldrh	r3, [r7, #20]
 8000952:	8013      	strh	r3, [r2, #0]
			break;
 8000954:	e02b      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 8000956:	4a32      	ldr	r2, [pc, #200]	@ (8000a20 <BNO080_parseInputReport+0x2cc>)
 8000958:	893b      	ldrh	r3, [r7, #8]
 800095a:	8013      	strh	r3, [r2, #0]
			break;
 800095c:	e027      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 8000960:	7a5a      	ldrb	r2, [r3, #9]
 8000962:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <BNO080_parseInputReport+0x2d0>)
 8000964:	701a      	strb	r2, [r3, #0]
			break;
 8000966:	e022      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 800096a:	7a9a      	ldrb	r2, [r3, #10]
 800096c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <BNO080_parseInputReport+0x2d4>)
 800096e:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8000970:	2300      	movs	r3, #0
 8000972:	74fb      	strb	r3, [r7, #19]
 8000974:	e00c      	b.n	8000990 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8000976:	7cfb      	ldrb	r3, [r7, #19]
 8000978:	f103 020b 	add.w	r2, r3, #11
 800097c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a2c <BNO080_parseInputReport+0x2d8>)
 800097e:	6819      	ldr	r1, [r3, #0]
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	440b      	add	r3, r1
 8000984:	490e      	ldr	r1, [pc, #56]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 8000986:	5c8a      	ldrb	r2, [r1, r2]
 8000988:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800098a:	7cfb      	ldrb	r3, [r7, #19]
 800098c:	3301      	adds	r3, #1
 800098e:	74fb      	strb	r3, [r7, #19]
 8000990:	7cfb      	ldrb	r3, [r7, #19]
 8000992:	2b08      	cmp	r3, #8
 8000994:	d9ef      	bls.n	8000976 <BNO080_parseInputReport+0x222>
			break;
 8000996:	e00a      	b.n	80009ae <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 800099a:	79db      	ldrb	r3, [r3, #7]
 800099c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	d103      	bne.n	80009ac <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <BNO080_parseInputReport+0x26c>)
 80009a6:	7a9a      	ldrb	r2, [r3, #10]
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <BNO080_parseInputReport+0x2dc>)
 80009aa:	701a      	strb	r2, [r3, #0]
			break;
 80009ac:	bf00      	nop
}
 80009ae:	bf00      	nop
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000017c 	.word	0x2000017c
 80009c0:	20000180 	.word	0x20000180
 80009c4:	20000234 	.word	0x20000234
 80009c8:	2000020c 	.word	0x2000020c
 80009cc:	20000206 	.word	0x20000206
 80009d0:	20000208 	.word	0x20000208
 80009d4:	2000020a 	.word	0x2000020a
 80009d8:	20000214 	.word	0x20000214
 80009dc:	2000020e 	.word	0x2000020e
 80009e0:	20000210 	.word	0x20000210
 80009e4:	20000212 	.word	0x20000212
 80009e8:	2000021c 	.word	0x2000021c
 80009ec:	20000216 	.word	0x20000216
 80009f0:	20000218 	.word	0x20000218
 80009f4:	2000021a 	.word	0x2000021a
 80009f8:	20000224 	.word	0x20000224
 80009fc:	2000021e 	.word	0x2000021e
 8000a00:	20000220 	.word	0x20000220
 8000a04:	20000222 	.word	0x20000222
 8000a08:	20000230 	.word	0x20000230
 8000a0c:	20000226 	.word	0x20000226
 8000a10:	20000228 	.word	0x20000228
 8000a14:	2000022a 	.word	0x2000022a
 8000a18:	2000022c 	.word	0x2000022c
 8000a1c:	2000022e 	.word	0x2000022e
 8000a20:	20000232 	.word	0x20000232
 8000a24:	20000238 	.word	0x20000238
 8000a28:	20000239 	.word	0x20000239
 8000a2c:	2000023c 	.word	0x2000023c
 8000a30:	20000240 	.word	0x20000240

08000a34 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <BNO080_getQuatI+0x24>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <BNO080_getQuatI+0x28>)
 8000a40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f861 	bl	8000b10 <BNO080_qToFloat>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000226 	.word	0x20000226
 8000a5c:	20000000 	.word	0x20000000

08000a60 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <BNO080_getQuatJ+0x24>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <BNO080_getQuatJ+0x28>)
 8000a6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f84b 	bl	8000b10 <BNO080_qToFloat>
 8000a7a:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000228 	.word	0x20000228
 8000a88:	20000000 	.word	0x20000000

08000a8c <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <BNO080_getQuatK+0x24>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <BNO080_getQuatK+0x28>)
 8000a98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f835 	bl	8000b10 <BNO080_qToFloat>
 8000aa6:	eef0 7a40 	vmov.f32	s15, s0
}
 8000aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000022a 	.word	0x2000022a
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8000abc:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <BNO080_getQuatReal+0x24>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <BNO080_getQuatReal+0x28>)
 8000ac4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f81f 	bl	8000b10 <BNO080_qToFloat>
 8000ad2:	eef0 7a40 	vmov.f32	s15, s0
}
 8000ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000022c 	.word	0x2000022c
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <BNO080_getQuatRadianAccuracy+0x24>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <BNO080_getQuatRadianAccuracy+0x28>)
 8000af0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f809 	bl	8000b10 <BNO080_qToFloat>
 8000afe:	eef0 7a40 	vmov.f32	s15, s0
}
 8000b02:	eeb0 0a67 	vmov.f32	s0, s15
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000022e 	.word	0x2000022e
 8000b0c:	20000000 	.word	0x20000000

08000b10 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	ed2d 8b02 	vpush	{d8}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8000b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000b30:	797b      	ldrb	r3, [r7, #5]
 8000b32:	425b      	negs	r3, r3
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3c:	eef0 0a67 	vmov.f32	s1, s15
 8000b40:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000b44:	f00c f904 	bl	800cd50 <powf>
 8000b48:	eef0 7a40 	vmov.f32	s15, s0
 8000b4c:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8000b50:	eeb0 0a67 	vmov.f32	s0, s15
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	ecbd 8b02 	vpop	{d8}
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	2005      	movs	r0, #5
 8000b70:	f000 f804 	bl	8000b7c <BNO080_setFeatureCommand>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8000b8a:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000b8c:	22fd      	movs	r2, #253	@ 0xfd
 8000b8e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8000b90:	4a22      	ldr	r2, [pc, #136]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bae:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bb8:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	0c1b      	lsrs	r3, r3, #16
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bc2:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	0e1b      	lsrs	r3, r3, #24
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bcc:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bec:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000bf6:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000c00:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0e1b      	lsrs	r3, r3, #24
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <BNO080_setFeatureCommand+0xa0>)
 8000c0a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8000c0c:	2111      	movs	r1, #17
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f000 f89a 	bl	8000d48 <BNO080_sendPacket>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000180 	.word	0x20000180

08000c20 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	e00b      	b.n	8000c44 <BNO080_waitForSPI+0x24>
	{
		if (HAL_GPIO_ReadPin(BNO_INT_GPIO_Port, BNO_INT_Pin) == GPIO_PIN_RESET)
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <BNO080_waitForSPI+0x3c>)
 8000c30:	f001 f9b4 	bl	8001f9c <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <BNO080_waitForSPI+0x1e>
		{
			//printf("\nData available\n");
			return (1);
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00a      	b.n	8000c54 <BNO080_waitForSPI+0x34>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4a:	d1ef      	bne.n	8000c2c <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <BNO080_waitForSPI+0x40>)
 8000c4e:	f00b f989 	bl	800bf64 <puts>
	return (0);
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	0800da50 	.word	0x0800da50

08000c64 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (HAL_GPIO_ReadPin(BNO_INT_GPIO_Port, BNO_INT_Pin) == GPIO_PIN_SET)
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4832      	ldr	r0, [pc, #200]	@ (8000d38 <BNO080_receivePacket+0xd4>)
 8000c6e:	f001 f995 	bl	8001f9c <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <BNO080_receivePacket+0x18>
		return (0); //Data is not available
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e058      	b.n	8000d2e <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c82:	482e      	ldr	r0, [pc, #184]	@ (8000d3c <BNO080_receivePacket+0xd8>)
 8000c84:	f001 f9a2 	bl	8001fcc <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fd03 	bl	8000694 <SPI2_SendByte>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fcfe 	bl	8000694 <SPI2_SendByte>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fcf9 	bl	8000694 <SPI2_SendByte>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fcf4 	bl	8000694 <SPI2_SendByte>
 8000cac:	4603      	mov	r3, r0
 8000cae:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8000cb0:	4a23      	ldr	r2, [pc, #140]	@ (8000d40 <BNO080_receivePacket+0xdc>)
 8000cb2:	7b7b      	ldrb	r3, [r7, #13]
 8000cb4:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8000cb6:	4a22      	ldr	r2, [pc, #136]	@ (8000d40 <BNO080_receivePacket+0xdc>)
 8000cb8:	7b3b      	ldrb	r3, [r7, #12]
 8000cba:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8000cbc:	4a20      	ldr	r2, [pc, #128]	@ (8000d40 <BNO080_receivePacket+0xdc>)
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d40 <BNO080_receivePacket+0xdc>)
 8000cc4:	7abb      	ldrb	r3, [r7, #10]
 8000cc6:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8000cc8:	7b3b      	ldrb	r3, [r7, #12]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	7b7b      	ldrb	r3, [r7, #13]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8000cd6:	893b      	ldrh	r3, [r7, #8]
 8000cd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cdc:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8000cde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e021      	b.n	8000d2e <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8000cea:	893b      	ldrh	r3, [r7, #8]
 8000cec:	3b04      	subs	r3, #4
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	81fb      	strh	r3, [r7, #14]
 8000cf6:	e00e      	b.n	8000d16 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8000cf8:	20ff      	movs	r0, #255	@ 0xff
 8000cfa:	f7ff fccb 	bl	8000694 <SPI2_SendByte>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d06:	d803      	bhi.n	8000d10 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	490e      	ldr	r1, [pc, #56]	@ (8000d44 <BNO080_receivePacket+0xe0>)
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	3301      	adds	r3, #1
 8000d14:	81fb      	strh	r3, [r7, #14]
 8000d16:	89fa      	ldrh	r2, [r7, #14]
 8000d18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbeb      	blt.n	8000cf8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <BNO080_receivePacket+0xd8>)
 8000d28:	f001 f950 	bl	8001fcc <HAL_GPIO_WritePin>
	return (1); //We're done!
 8000d2c:	2301      	movs	r3, #1
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	2000017c 	.word	0x2000017c
 8000d44:	20000180 	.word	0x20000180

08000d48 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8000d5e:	f7ff ff5f 	bl	8000c20 <BNO080_waitForSPI>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e034      	b.n	8000dd6 <BNO080_sendPacket+0x8e>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d72:	481b      	ldr	r0, [pc, #108]	@ (8000de0 <BNO080_sendPacket+0x98>)
 8000d74:	f001 f92a 	bl	8001fcc <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fc8a 	bl	8000694 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	121b      	asrs	r3, r3, #8
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fc84 	bl	8000694 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fc80 	bl	8000694 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <BNO080_sendPacket+0x9c>)
 8000d98:	5cd2      	ldrb	r2, [r2, r3]
 8000d9a:	1c51      	adds	r1, r2, #1
 8000d9c:	b2c8      	uxtb	r0, r1
 8000d9e:	4911      	ldr	r1, [pc, #68]	@ (8000de4 <BNO080_sendPacket+0x9c>)
 8000da0:	54c8      	strb	r0, [r1, r3]
 8000da2:	4610      	mov	r0, r2
 8000da4:	f7ff fc76 	bl	8000694 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e008      	b.n	8000dc0 <BNO080_sendPacket+0x78>
	{
		SPI2_SendByte(shtpData[i]);
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <BNO080_sendPacket+0xa0>)
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fc6d 	bl	8000694 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3f2      	bcc.n	8000dae <BNO080_sendPacket+0x66>
	}

	CHIP_DESELECT(BNO080);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dce:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <BNO080_sendPacket+0x98>)
 8000dd0:	f001 f8fc 	bl	8001fcc <HAL_GPIO_WritePin>

	return (1);
 8000dd4:	2301      	movs	r3, #1
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40020400 	.word	0x40020400
 8000de4:	20000200 	.word	0x20000200
 8000de8:	20000180 	.word	0x20000180

08000dec <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	ed93 7a00 	vldr	s14, [r3]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3304      	adds	r3, #4
 8000e08:	edd3 6a00 	vldr	s13, [r3]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3308      	adds	r3, #8
 8000e20:	edd3 6a00 	vldr	s13, [r3]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3308      	adds	r3, #8
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	330c      	adds	r3, #12
 8000e38:	edd3 6a00 	vldr	s13, [r3]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	330c      	adds	r3, #12
 8000e40:	edd3 7a00 	vldr	s15, [r3]
 8000e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e50:	f000 f90e 	bl	8001070 <invSqrt>
 8000e54:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e66:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	edd3 7a00 	vldr	s15, [r3]
 8000e72:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7a:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3308      	adds	r3, #8
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8e:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	330c      	adds	r3, #12
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea2:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8000ea6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb2:	edd7 6a06 	vldr	s13, [r7, #24]
 8000eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000ec6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ece:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ed2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ede:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef2:	eef0 0a67 	vmov.f32	s1, s15
 8000ef6:	eeb0 0a66 	vmov.f32	s0, s13
 8000efa:	f00b ff27 	bl	800cd4c <atan2f>
 8000efe:	eef0 7a40 	vmov.f32	s15, s0
 8000f02:	4b55      	ldr	r3, [pc, #340]	@ (8001058 <Quaternion_Update+0x26c>)
 8000f04:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8000f08:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f14:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f28:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2c:	f00b fee2 	bl	800ccf4 <asinf>
 8000f30:	eef0 7a40 	vmov.f32	s15, s0
 8000f34:	eef1 7a67 	vneg.f32	s15, s15
 8000f38:	4b48      	ldr	r3, [pc, #288]	@ (800105c <Quaternion_Update+0x270>)
 8000f3a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8000f3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f4a:	edd7 6a04 	vldr	s13, [r7, #16]
 8000f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000f5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f62:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f72:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8a:	eef0 0a67 	vmov.f32	s1, s15
 8000f8e:	eeb0 0a66 	vmov.f32	s0, s13
 8000f92:	f00b fedb 	bl	800cd4c <atan2f>
 8000f96:	eef0 7a40 	vmov.f32	s15, s0
 8000f9a:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <Quaternion_Update+0x274>)
 8000f9c:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <Quaternion_Update+0x26c>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001064 <Quaternion_Update+0x278>
 8000faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <Quaternion_Update+0x26c>)
 8000fb0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	@ (800105c <Quaternion_Update+0x270>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001064 <Quaternion_Update+0x278>
 8000fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <Quaternion_Update+0x270>)
 8000fc4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <Quaternion_Update+0x274>)
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001064 <Quaternion_Update+0x278>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <Quaternion_Update+0x274>)
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8000fdc:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <Quaternion_Update+0x274>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fea:	db0a      	blt.n	8001002 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <Quaternion_Update+0x274>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001068 <Quaternion_Update+0x27c>
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <Quaternion_Update+0x274>)
 8000ffc:	edc3 7a00 	vstr	s15, [r3]
 8001000:	e007      	b.n	8001012 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8001002:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <Quaternion_Update+0x274>)
 8001004:	edd3 7a00 	vldr	s15, [r3]
 8001008:	eef1 7a67 	vneg.f32	s15, s15
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <Quaternion_Update+0x274>)
 800100e:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <Quaternion_Update+0x26c>)
 8001014:	edd3 7a00 	vldr	s15, [r3]
 8001018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	db0a      	blt.n	8001038 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <Quaternion_Update+0x26c>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800106c <Quaternion_Update+0x280>
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <Quaternion_Update+0x26c>)
 8001032:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8001036:	e00b      	b.n	8001050 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <Quaternion_Update+0x26c>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800106c <Quaternion_Update+0x280>
 8001042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001046:	eef1 7a67 	vneg.f32	s15, s15
 800104a:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <Quaternion_Update+0x26c>)
 800104c:	edc3 7a00 	vstr	s15, [r3]
}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000248 	.word	0x20000248
 800105c:	20000244 	.word	0x20000244
 8001060:	2000024c 	.word	0x2000024c
 8001064:	42652ee1 	.word	0x42652ee1
 8001068:	43b40000 	.word	0x43b40000
 800106c:	43340000 	.word	0x43340000

08001070 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001086:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	105a      	asrs	r2, r3, #1
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <invSqrt+0x74>)
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80010a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80010c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010cc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	ee07 3a90 	vmov	s15, r3
}
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	5f3759df 	.word	0x5f3759df

080010e8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

volatile int test_number = 0, test_number2 = 0, test_number3 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BNO_INT_Pin){
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2b10      	cmp	r3, #16
 80010f6:	d10a      	bne.n	800110e <HAL_GPIO_EXTI_Callback+0x26>
		osThreadFlagsSet(myTask02Handle, 1);
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <HAL_GPIO_EXTI_Callback+0x30>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f007 f968 	bl	80083d4 <osThreadFlagsSet>
		test_number++;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_GPIO_EXTI_Callback+0x34>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_GPIO_EXTI_Callback+0x34>)
 800110c:	6013      	str	r3, [r2, #0]
	}
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200002ac 	.word	0x200002ac
 800111c:	200002c4 	.word	0x200002c4

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f000 fc34 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f896 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 f932 	bl	8001394 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001130:	f000 f8fa 	bl	8001328 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8001134:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001138:	4840      	ldr	r0, [pc, #256]	@ (800123c <main+0x11c>)
 800113a:	f000 ff60 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	@ 0x64
 8001140:	f000 fc68 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8001144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001148:	483c      	ldr	r0, [pc, #240]	@ (800123c <main+0x11c>)
 800114a:	f000 ff58 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	@ 0x64
 8001150:	f000 fc60 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8001154:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001158:	4838      	ldr	r0, [pc, #224]	@ (800123c <main+0x11c>)
 800115a:	f000 ff50 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	@ 0x64
 8001160:	f000 fc58 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8001164:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001168:	4834      	ldr	r0, [pc, #208]	@ (800123c <main+0x11c>)
 800116a:	f000 ff48 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800116e:	2064      	movs	r0, #100	@ 0x64
 8001170:	f000 fc50 	bl	8001a14 <HAL_Delay>


  BNO080_Initialization();
 8001174:	f7ff fa1c 	bl	80005b0 <BNO080_Initialization>
  HAL_Delay(1000);
 8001178:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800117c:	f000 fc4a 	bl	8001a14 <HAL_Delay>

  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8001180:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001184:	482d      	ldr	r0, [pc, #180]	@ (800123c <main+0x11c>)
 8001186:	f000 ff3a 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800118a:	2064      	movs	r0, #100	@ 0x64
 800118c:	f000 fc42 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8001190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001194:	4829      	ldr	r0, [pc, #164]	@ (800123c <main+0x11c>)
 8001196:	f000 ff32 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800119a:	2064      	movs	r0, #100	@ 0x64
 800119c:	f000 fc3a 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 80011a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a4:	4825      	ldr	r0, [pc, #148]	@ (800123c <main+0x11c>)
 80011a6:	f000 ff2a 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 80011aa:	2064      	movs	r0, #100	@ 0x64
 80011ac:	f000 fc32 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 80011b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b4:	4821      	ldr	r0, [pc, #132]	@ (800123c <main+0x11c>)
 80011b6:	f000 ff22 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	@ 0x64
 80011bc:	f000 fc2a 	bl	8001a14 <HAL_Delay>


  BNO080_enableRotationVector(2500); //enable rotation vector at 400Hz
 80011c0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80011c4:	f7ff fccb 	bl	8000b5e <BNO080_enableRotationVector>
  HAL_Delay(1000);
 80011c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011cc:	f000 fc22 	bl	8001a14 <HAL_Delay>


  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 80011d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d4:	4819      	ldr	r0, [pc, #100]	@ (800123c <main+0x11c>)
 80011d6:	f000 ff12 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 80011da:	2064      	movs	r0, #100	@ 0x64
 80011dc:	f000 fc1a 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 80011e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e4:	4815      	ldr	r0, [pc, #84]	@ (800123c <main+0x11c>)
 80011e6:	f000 ff0a 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	@ 0x64
 80011ec:	f000 fc12 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 80011f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f4:	4811      	ldr	r0, [pc, #68]	@ (800123c <main+0x11c>)
 80011f6:	f000 ff02 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 80011fa:	2064      	movs	r0, #100	@ 0x64
 80011fc:	f000 fc0a 	bl	8001a14 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 8001200:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <main+0x11c>)
 8001206:	f000 fefa 	bl	8001ffe <HAL_GPIO_TogglePin>
  HAL_Delay(100);
 800120a:	2064      	movs	r0, #100	@ 0x64
 800120c:	f000 fc02 	bl	8001a14 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001210:	f007 f804 	bl	800821c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001214:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <main+0x120>)
 8001216:	2100      	movs	r1, #0
 8001218:	480a      	ldr	r0, [pc, #40]	@ (8001244 <main+0x124>)
 800121a:	f007 f849 	bl	80082b0 <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <main+0x128>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001224:	4a09      	ldr	r2, [pc, #36]	@ (800124c <main+0x12c>)
 8001226:	2100      	movs	r1, #0
 8001228:	4809      	ldr	r0, [pc, #36]	@ (8001250 <main+0x130>)
 800122a:	f007 f841 	bl	80082b0 <osThreadNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <main+0x134>)
 8001232:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001234:	f007 f816 	bl	8008264 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <main+0x118>
 800123c:	40020800 	.word	0x40020800
 8001240:	0800dadc 	.word	0x0800dadc
 8001244:	080014ad 	.word	0x080014ad
 8001248:	200002a8 	.word	0x200002a8
 800124c:	0800db00 	.word	0x0800db00
 8001250:	080014d1 	.word	0x080014d1
 8001254:	200002ac 	.word	0x200002ac

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	@ 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	@ 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00a ff5c 	bl	800c124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <SystemClock_Config+0xc8>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	4a26      	ldr	r2, [pc, #152]	@ (8001320 <SystemClock_Config+0xc8>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	@ 0x40
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <SystemClock_Config+0xc8>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <SystemClock_Config+0xcc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a20      	ldr	r2, [pc, #128]	@ (8001324 <SystemClock_Config+0xcc>)
 80012a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <SystemClock_Config+0xcc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c8:	2304      	movs	r3, #4
 80012ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012cc:	2348      	movs	r3, #72	@ 0x48
 80012ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012d4:	2303      	movs	r3, #3
 80012d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f911 	bl	8003504 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e8:	f000 f93e 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2102      	movs	r1, #2
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fb73 	bl	80039f4 <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001314:	f000 f928 	bl	8001568 <Error_Handler>
  }
}
 8001318:	bf00      	nop
 800131a:	3750      	adds	r7, #80	@ 0x50
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800132c:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_SPI2_Init+0x64>)
 800132e:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <MX_SPI2_Init+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001332:	4b16      	ldr	r3, [pc, #88]	@ (800138c <MX_SPI2_Init+0x64>)
 8001334:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001338:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_SPI2_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_SPI2_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_SPI2_Init+0x64>)
 8001348:	2202      	movs	r2, #2
 800134a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_SPI2_Init+0x64>)
 800134e:	2201      	movs	r2, #1
 8001350:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_SPI2_Init+0x64>)
 8001354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001358:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_SPI2_Init+0x64>)
 800135c:	2218      	movs	r2, #24
 800135e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <MX_SPI2_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_SPI2_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <MX_SPI2_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_SPI2_Init+0x64>)
 8001374:	220a      	movs	r2, #10
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	@ (800138c <MX_SPI2_Init+0x64>)
 800137a:	f002 fd79 	bl	8003e70 <HAL_SPI_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001384:	f000 f8f0 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000250 	.word	0x20000250
 8001390:	40003800 	.word	0x40003800

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	@ 0x28
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b3c      	ldr	r3, [pc, #240]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a3b      	ldr	r2, [pc, #236]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b35      	ldr	r3, [pc, #212]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a34      	ldr	r2, [pc, #208]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a2d      	ldr	r2, [pc, #180]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a26      	ldr	r2, [pc, #152]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <MX_GPIO_Init+0x10c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BUILDIN_Pin|BNO_RST_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001420:	4820      	ldr	r0, [pc, #128]	@ (80014a4 <MX_GPIO_Init+0x110>)
 8001422:	f000 fdd3 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_WEAK_Pin|BNO_CS_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f241 0101 	movw	r1, #4097	@ 0x1001
 800142c:	481e      	ldr	r0, [pc, #120]	@ (80014a8 <MX_GPIO_Init+0x114>)
 800142e:	f000 fdcd 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BUILDIN_Pin BNO_RST_Pin */
  GPIO_InitStruct.Pin = LED_BUILDIN_Pin|BNO_RST_Pin;
 8001432:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4816      	ldr	r0, [pc, #88]	@ (80014a4 <MX_GPIO_Init+0x110>)
 800144c:	f000 fc0a 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8001450:	2310      	movs	r3, #16
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001454:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800145a:	2302      	movs	r3, #2
 800145c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	480f      	ldr	r0, [pc, #60]	@ (80014a4 <MX_GPIO_Init+0x110>)
 8001466:	f000 fbfd 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_WEAK_Pin BNO_CS_Pin */
  GPIO_InitStruct.Pin = BNO_WEAK_Pin|BNO_CS_Pin;
 800146a:	f241 0301 	movw	r3, #4097	@ 0x1001
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4809      	ldr	r0, [pc, #36]	@ (80014a8 <MX_GPIO_Init+0x114>)
 8001484:	f000 fbee 	bl	8001c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2105      	movs	r1, #5
 800148c:	200a      	movs	r0, #10
 800148e:	f000 fb9d 	bl	8001bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001492:	200a      	movs	r0, #10
 8001494:	f000 fbb6 	bl	8001c04 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	@ 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020400 	.word	0x40020400

080014ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80014b4:	f009 ff38 	bl	800b328 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 80014b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <StartDefaultTask+0x20>)
 80014be:	f000 fd9e 	bl	8001ffe <HAL_GPIO_TogglePin>
	  osDelay(100);
 80014c2:	2064      	movs	r0, #100	@ 0x64
 80014c4:	f007 f855 	bl	8008572 <osDelay>
	  HAL_GPIO_TogglePin(LED_BUILDIN_GPIO_Port, LED_BUILDIN_Pin);
 80014c8:	bf00      	nop
 80014ca:	e7f5      	b.n	80014b8 <StartDefaultTask+0xc>
 80014cc:	40020800 	.word	0x40020800

080014d0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, 0, osWaitForever);
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	2100      	movs	r1, #0
 80014de:	2001      	movs	r0, #1
 80014e0:	f006 ffc6 	bl	8008470 <osThreadFlagsWait>

	  	  	  if(BNO080_dataAvailable() == 1)
 80014e4:	f7ff f8ec 	bl	80006c0 <BNO080_dataAvailable>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d1f4      	bne.n	80014d8 <StartTask02+0x8>
	  	  		  {
	  	  			  q[0] = BNO080_getQuatI();
 80014ee:	f7ff faa1 	bl	8000a34 <BNO080_getQuatI>
 80014f2:	eef0 7a40 	vmov.f32	s15, s0
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <StartTask02+0x6c>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
	  	  			  q[1] = BNO080_getQuatJ();
 80014fc:	f7ff fab0 	bl	8000a60 <BNO080_getQuatJ>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <StartTask02+0x6c>)
 8001506:	edc3 7a01 	vstr	s15, [r3, #4]
	  	  			  q[2] = BNO080_getQuatK();
 800150a:	f7ff fabf 	bl	8000a8c <BNO080_getQuatK>
 800150e:	eef0 7a40 	vmov.f32	s15, s0
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <StartTask02+0x6c>)
 8001514:	edc3 7a02 	vstr	s15, [r3, #8]
	  	  			  q[3] = BNO080_getQuatReal();
 8001518:	f7ff face 	bl	8000ab8 <BNO080_getQuatReal>
 800151c:	eef0 7a40 	vmov.f32	s15, s0
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <StartTask02+0x6c>)
 8001522:	edc3 7a03 	vstr	s15, [r3, #12]
	  	  			  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8001526:	f7ff fadd 	bl	8000ae4 <BNO080_getQuatRadianAccuracy>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
 800152e:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <StartTask02+0x70>)
 8001530:	edc3 7a00 	vstr	s15, [r3]
	  	  			  Quaternion_Update(&q[0]);
 8001534:	4801      	ldr	r0, [pc, #4]	@ (800153c <StartTask02+0x6c>)
 8001536:	f7ff fc59 	bl	8000dec <Quaternion_Update>
	  osThreadFlagsWait(1, 0, osWaitForever);
 800153a:	e7cd      	b.n	80014d8 <StartTask02+0x8>
 800153c:	200002b0 	.word	0x200002b0
 8001540:	200002c0 	.word	0x200002c0

08001544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001556:	f000 fa3d 	bl	80019d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <Error_Handler+0x8>

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_MspInit+0x54>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	4a11      	ldr	r2, [pc, #68]	@ (80015c8 <HAL_MspInit+0x54>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001588:	6453      	str	r3, [r2, #68]	@ 0x44
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_MspInit+0x54>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_MspInit+0x54>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_MspInit+0x54>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_MspInit+0x54>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	210f      	movs	r1, #15
 80015b6:	f06f 0001 	mvn.w	r0, #1
 80015ba:	f000 fb07 	bl	8001bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <HAL_SPI_MspInit+0x94>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d134      	bne.n	8001658 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <HAL_SPI_MspInit+0x98>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <HAL_SPI_MspInit+0x98>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_SPI_MspInit+0x98>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_SPI_MspInit+0x98>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <HAL_SPI_MspInit+0x98>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_SPI_MspInit+0x98>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001626:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001638:	2305      	movs	r3, #5
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4809      	ldr	r0, [pc, #36]	@ (8001668 <HAL_SPI_MspInit+0x9c>)
 8001644:	f000 fb0e 	bl	8001c64 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2105      	movs	r1, #5
 800164c:	2024      	movs	r0, #36	@ 0x24
 800164e:	f000 fabd 	bl	8001bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001652:	2024      	movs	r0, #36	@ 0x24
 8001654:	f000 fad6 	bl	8001c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40003800 	.word	0x40003800
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400

0800166c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	@ 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_InitTick+0xd0>)
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001684:	4a2d      	ldr	r2, [pc, #180]	@ (800173c <HAL_InitTick+0xd0>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6453      	str	r3, [r2, #68]	@ 0x44
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_InitTick+0xd0>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001698:	f107 020c 	add.w	r2, r7, #12
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fbb2 	bl	8003e0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016a8:	f002 fb9c 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 80016ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <HAL_InitTick+0xd4>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	3b01      	subs	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_InitTick+0xd8>)
 80016be:	4a22      	ldr	r2, [pc, #136]	@ (8001748 <HAL_InitTick+0xdc>)
 80016c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_InitTick+0xd8>)
 80016c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <HAL_InitTick+0xd8>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <HAL_InitTick+0xd8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_InitTick+0xd8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_InitTick+0xd8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016e2:	4818      	ldr	r0, [pc, #96]	@ (8001744 <HAL_InitTick+0xd8>)
 80016e4:	f002 ffec 	bl	80046c0 <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11b      	bne.n	800172e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016f6:	4813      	ldr	r0, [pc, #76]	@ (8001744 <HAL_InitTick+0xd8>)
 80016f8:	f003 f83c 	bl	8004774 <HAL_TIM_Base_Start_IT>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001706:	2b00      	cmp	r3, #0
 8001708:	d111      	bne.n	800172e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800170a:	2019      	movs	r0, #25
 800170c:	f000 fa7a 	bl	8001c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	d808      	bhi.n	8001728 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001716:	2200      	movs	r2, #0
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	2019      	movs	r0, #25
 800171c:	f000 fa56 	bl	8001bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_InitTick+0xe0>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e002      	b.n	800172e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800172e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001732:	4618      	mov	r0, r3
 8001734:	3730      	adds	r7, #48	@ 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	431bde83 	.word	0x431bde83
 8001744:	200002c8 	.word	0x200002c8
 8001748:	40010000 	.word	0x40010000
 800174c:	20000008 	.word	0x20000008

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <NMI_Handler+0x4>

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <MemManage_Handler+0x4>

08001768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <UsageFault_Handler+0x4>

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO_INT_Pin);
 800178a:	2010      	movs	r0, #16
 800178c:	f000 fc52 	bl	8002034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800179a:	f003 f85b 	bl	8004854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200002c8 	.word	0x200002c8

080017a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <SPI2_IRQHandler+0x10>)
 80017ae:	f002 fd99 	bl	80042e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000250 	.word	0x20000250

080017bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <OTG_FS_IRQHandler+0x10>)
 80017c2:	f000 fd93 	bl	80022ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200061e0 	.word	0x200061e0

080017d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
  }

  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e009      	b.n	8001830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf1      	blt.n	800181c <_write+0x12>
  }
  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_close>:

int _close(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800186a:	605a      	str	r2, [r3, #4]
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_isatty>:

int _isatty(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f00a fcc6 	bl	800c26c <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20020000 	.word	0x20020000
 800190c:	00000400 	.word	0x00000400
 8001910:	20000310 	.word	0x20000310
 8001914:	20006a30 	.word	0x20006a30

08001918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001974 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001940:	f7ff ffea 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	@ (800197c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	@ (8001988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800196a:	f00a fc85 	bl	800c278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fbd7 	bl	8001120 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001980:	0800dbd0 	.word	0x0800dbd0
  ldr r2, =_sbss
 8001984:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001988:	20006a30 	.word	0x20006a30

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <HAL_Init+0x40>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <HAL_Init+0x40>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_Init+0x40>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f8fc 	bl	8001bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	200f      	movs	r0, #15
 80019c0:	f7ff fe54 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fdd6 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	20000314 	.word	0x20000314

080019fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000314 	.word	0x20000314

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff ffee 	bl	80019fc <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_Delay+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffde 	bl	80019fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000000c 	.word	0x2000000c

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	@ (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	@ (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff4c 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bde:	f7ff ff61 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	6978      	ldr	r0, [r7, #20]
 8001bea:	f7ff ffb1 	bl	8001b50 <NVIC_EncodePriority>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff80 	bl	8001afc <__NVIC_SetPriority>
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff54 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d004      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2280      	movs	r2, #128	@ 0x80
 8001c38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00c      	b.n	8001c58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2205      	movs	r2, #5
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e16b      	b.n	8001f58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 815a 	bne.w	8001f52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d005      	beq.n	8001cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d130      	bne.n	8001d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d017      	beq.n	8001d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80b4 	beq.w	8001f52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b60      	ldr	r3, [pc, #384]	@ (8001f70 <HAL_GPIO_Init+0x30c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f70 <HAL_GPIO_Init+0x30c>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001f70 <HAL_GPIO_Init+0x30c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e06:	4a5b      	ldr	r2, [pc, #364]	@ (8001f74 <HAL_GPIO_Init+0x310>)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	@ (8001f78 <HAL_GPIO_Init+0x314>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02b      	beq.n	8001e8a <HAL_GPIO_Init+0x226>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a51      	ldr	r2, [pc, #324]	@ (8001f7c <HAL_GPIO_Init+0x318>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d025      	beq.n	8001e86 <HAL_GPIO_Init+0x222>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a50      	ldr	r2, [pc, #320]	@ (8001f80 <HAL_GPIO_Init+0x31c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <HAL_GPIO_Init+0x21e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4f      	ldr	r2, [pc, #316]	@ (8001f84 <HAL_GPIO_Init+0x320>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x21a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f88 <HAL_GPIO_Init+0x324>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x216>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4d      	ldr	r2, [pc, #308]	@ (8001f8c <HAL_GPIO_Init+0x328>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x212>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f90 <HAL_GPIO_Init+0x32c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x20e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	@ (8001f94 <HAL_GPIO_Init+0x330>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x20a>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00e      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e6e:	2308      	movs	r3, #8
 8001e70:	e00c      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00a      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e76:	2305      	movs	r3, #5
 8001e78:	e008      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e004      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x228>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	f002 0203 	and.w	r2, r2, #3
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	4093      	lsls	r3, r2
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e9c:	4935      	ldr	r1, [pc, #212]	@ (8001f74 <HAL_GPIO_Init+0x310>)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a32      	ldr	r2, [pc, #200]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b30      	ldr	r3, [pc, #192]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a27      	ldr	r2, [pc, #156]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001efe:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f22:	4a1d      	ldr	r2, [pc, #116]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <HAL_GPIO_Init+0x334>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3301      	adds	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2b0f      	cmp	r3, #15
 8001f5c:	f67f ae90 	bls.w	8001c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3724      	adds	r7, #36	@ 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020c00 	.word	0x40020c00
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40021400 	.word	0x40021400
 8001f90:	40021800 	.word	0x40021800
 8001f94:	40021c00 	.word	0x40021c00
 8001f98:	40013c00 	.word	0x40013c00

08001f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe8:	e003      	b.n	8001ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	041a      	lsls	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43d9      	mvns	r1, r3
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	400b      	ands	r3, r1
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f848 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af02      	add	r7, sp, #8
 800206a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e101      	b.n	800227a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f009 fb29 	bl	800b6e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020a4:	d102      	bne.n	80020ac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 febe 	bl	8004e32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7c1a      	ldrb	r2, [r3, #16]
 80020be:	f88d 2000 	strb.w	r2, [sp]
 80020c2:	3304      	adds	r3, #4
 80020c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c6:	f002 fd9d 	bl	8004c04 <USB_CoreInit>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0ce      	b.n	800227a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 feb6 	bl	8004e54 <USB_SetCurrentMode>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0bf      	b.n	800227a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e04a      	b.n	8002196 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3315      	adds	r3, #21
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3314      	adds	r3, #20
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	b298      	uxth	r0, r3
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	332e      	adds	r3, #46	@ 0x2e
 800213c:	4602      	mov	r2, r0
 800213e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3318      	adds	r3, #24
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	331c      	adds	r3, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3320      	adds	r3, #32
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3324      	adds	r3, #36	@ 0x24
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	3301      	adds	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	791b      	ldrb	r3, [r3, #4]
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3af      	bcc.n	8002100 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e044      	b.n	8002230 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3301      	adds	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	791b      	ldrb	r3, [r3, #4]
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	429a      	cmp	r2, r3
 8002238:	d3b5      	bcc.n	80021a6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7c1a      	ldrb	r2, [r3, #16]
 8002242:	f88d 2000 	strb.w	r2, [sp]
 8002246:	3304      	adds	r3, #4
 8002248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224a:	f002 fe4f 	bl	8004eec <USB_DevInit>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e00c      	b.n	800227a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 fe93 	bl	8005f9e <USB_DevDisconnect>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_PCD_Start+0x1c>
 800229a:	2302      	movs	r3, #2
 800229c:	e022      	b.n	80022e4 <HAL_PCD_Start+0x62>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fda0 	bl	8004e10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fe41 	bl	8005f5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b08d      	sub	sp, #52	@ 0x34
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 feff 	bl	8006106 <USB_GetMode>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 848c 	bne.w	8002c28 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f003 fe63 	bl	8005fe0 <USB_ReadInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8482 	beq.w	8002c26 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f003 fe50 	bl	8005fe0 <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f002 0202 	and.w	r2, r2, #2
 8002358:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fe3e 	bl	8005fe0 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b10      	cmp	r3, #16
 800236c:	d161      	bne.n	8002432 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0210 	bic.w	r2, r2, #16
 800237c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f003 020f 	and.w	r2, r3, #15
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	3304      	adds	r3, #4
 800239c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	0c5b      	lsrs	r3, r3, #17
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d124      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d035      	beq.n	8002422 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	6a38      	ldr	r0, [r7, #32]
 80023ca:	f003 fc75 	bl	8005cb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023da:	441a      	add	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ec:	441a      	add	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	615a      	str	r2, [r3, #20]
 80023f2:	e016      	b.n	8002422 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	0c5b      	lsrs	r3, r3, #17
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	2b06      	cmp	r3, #6
 80023fe:	d110      	bne.n	8002422 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002406:	2208      	movs	r2, #8
 8002408:	4619      	mov	r1, r3
 800240a:	6a38      	ldr	r0, [r7, #32]
 800240c:	f003 fc54 	bl	8005cb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241c:	441a      	add	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0210 	orr.w	r2, r2, #16
 8002430:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fdd2 	bl	8005fe0 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002442:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002446:	f040 80a7 	bne.w	8002598 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fdd7 	bl	8006006 <USB_ReadDevAllOutEpInterrupt>
 8002458:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800245a:	e099      	b.n	8002590 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800245c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 808e 	beq.w	8002584 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fdfb 	bl	800606e <USB_ReadDevOutEPInterrupt>
 8002478:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2301      	movs	r3, #1
 8002494:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fea1 	bl	80031e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024b4:	461a      	mov	r2, r3
 80024b6:	2308      	movs	r3, #8
 80024b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 ff77 	bl	80033b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	2310      	movs	r3, #16
 80024dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d030      	beq.n	800254a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f0:	2b80      	cmp	r3, #128	@ 0x80
 80024f2:	d109      	bne.n	8002508 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002502:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002506:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	78db      	ldrb	r3, [r3, #3]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f009 f9de 	bl	800b8f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002544:	461a      	mov	r2, r3
 8002546:	2302      	movs	r3, #2
 8002548:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002560:	461a      	mov	r2, r3
 8002562:	2320      	movs	r3, #32
 8002564:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800257c:	461a      	mov	r2, r3
 800257e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002582:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	3301      	adds	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800258a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f af62 	bne.w	800245c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fd1f 	bl	8005fe0 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025ac:	f040 80db 	bne.w	8002766 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fd40 	bl	800603a <USB_ReadDevAllInEpInterrupt>
 80025ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80025c0:	e0cd      	b.n	800275e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80c2 	beq.w	8002752 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fd66 	bl	80060aa <USB_ReadDevInEPInterrupt>
 80025de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d057      	beq.n	800269a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	2201      	movs	r2, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	69f9      	ldr	r1, [r7, #28]
 8002606:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800260a:	4013      	ands	r3, r2
 800260c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800261a:	461a      	mov	r2, r3
 800261c:	2301      	movs	r3, #1
 800261e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	799b      	ldrb	r3, [r3, #6]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d132      	bne.n	800268e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3320      	adds	r3, #32
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4403      	add	r3, r0
 8002648:	331c      	adds	r3, #28
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4419      	add	r1, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4403      	add	r3, r0
 800265c:	3320      	adds	r3, #32
 800265e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d113      	bne.n	800268e <HAL_PCD_IRQHandler+0x3a2>
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3324      	adds	r3, #36	@ 0x24
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d108      	bne.n	800268e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002686:	461a      	mov	r2, r3
 8002688:	2101      	movs	r1, #1
 800268a:	f003 fd6d 	bl	8006168 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	b2db      	uxtb	r3, r3
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f009 f8a8 	bl	800b7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026b0:	461a      	mov	r2, r3
 80026b2:	2308      	movs	r3, #8
 80026b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026cc:	461a      	mov	r2, r3
 80026ce:	2310      	movs	r3, #16
 80026d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026e8:	461a      	mov	r2, r3
 80026ea:	2340      	movs	r3, #64	@ 0x40
 80026ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d023      	beq.n	8002740 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026fa:	6a38      	ldr	r0, [r7, #32]
 80026fc:	f002 fd5a 	bl	80051b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3310      	adds	r3, #16
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	78db      	ldrb	r3, [r3, #3]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d108      	bne.n	800272e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2200      	movs	r2, #0
 8002720:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f009 f8f5 	bl	800b918 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800273a:	461a      	mov	r2, r3
 800273c:	2302      	movs	r3, #2
 800273e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800274a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fcbb 	bl	80030c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	3301      	adds	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800275e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f af2e 	bne.w	80025c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fc38 	bl	8005fe0 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800277a:	d122      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027a2:	2100      	movs	r1, #0
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fea1 	bl	80034ec <HAL_PCDEx_LPM_Callback>
 80027aa:	e002      	b.n	80027b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f009 f893 	bl	800b8d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80027c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 fc0a 	bl	8005fe0 <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027d6:	d112      	bne.n	80027fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d102      	bne.n	80027ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f009 f84f 	bl	800b88c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027fc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fbec 	bl	8005fe0 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002812:	f040 80b7 	bne.w	8002984 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2110      	movs	r1, #16
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fcbf 	bl	80051b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800283a:	e046      	b.n	80028ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002848:	461a      	mov	r2, r3
 800284a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800284e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002860:	0151      	lsls	r1, r2, #5
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	440a      	add	r2, r1
 8002866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800286a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800286e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800287c:	461a      	mov	r2, r3
 800287e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002882:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002894:	0151      	lsls	r1, r2, #5
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	440a      	add	r2, r1
 800289a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800289e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028b4:	0151      	lsls	r1, r2, #5
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	440a      	add	r2, r1
 80028ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80028be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c6:	3301      	adds	r3, #1
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	791b      	ldrb	r3, [r3, #4]
 80028ce:	461a      	mov	r2, r3
 80028d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d3b2      	bcc.n	800283c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7bdb      	ldrb	r3, [r3, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002902:	f043 030b 	orr.w	r3, r3, #11
 8002906:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002918:	f043 030b 	orr.w	r3, r3, #11
 800291c:	6453      	str	r3, [r2, #68]	@ 0x44
 800291e:	e015      	b.n	800294c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800292e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002932:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002936:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002946:	f043 030b 	orr.w	r3, r3, #11
 800294a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800295a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800295e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800296e:	461a      	mov	r2, r3
 8002970:	f003 fbfa 	bl	8006168 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fb29 	bl	8005fe0 <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002998:	d123      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fbbf 	bl	8006122 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 fc7c 	bl	80052a6 <USB_GetDevSpeed>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681c      	ldr	r4, [r3, #0]
 80029ba:	f001 fa07 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 80029be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029c4:	461a      	mov	r2, r3
 80029c6:	4620      	mov	r0, r4
 80029c8:	f002 f980 	bl	8004ccc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f008 ff34 	bl	800b83a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80029e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fafa 	bl	8005fe0 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d10a      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f008 ff11 	bl	800b81e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f002 0208 	and.w	r2, r2, #8
 8002a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 fae5 	bl	8005fe0 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1c:	2b80      	cmp	r3, #128	@ 0x80
 8002a1e:	d123      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a30:	e014      	b.n	8002a5c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fb08 	bl	8003066 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	3301      	adds	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	791b      	ldrb	r3, [r3, #4]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d3e4      	bcc.n	8002a32 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fab7 	bl	8005fe0 <USB_ReadInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a7c:	d13c      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a7e:	2301      	movs	r3, #1
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a82:	e02b      	b.n	8002adc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3318      	adds	r3, #24
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d115      	bne.n	8002ad6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002aaa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da12      	bge.n	8002ad6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3317      	adds	r3, #23
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fac8 	bl	8003066 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	3301      	adds	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	791b      	ldrb	r3, [r3, #4]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d3cd      	bcc.n	8002a84 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 fa6f 	bl	8005fe0 <USB_ReadInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b0c:	d156      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b0e:	2301      	movs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b12:	e045      	b.n	8002ba0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d12e      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da2b      	bge.n	8002b9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d121      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b96:	6053      	str	r3, [r2, #4]
            break;
 8002b98:	e008      	b.n	8002bac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d3b3      	bcc.n	8002b14 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fa0d 	bl	8005fe0 <USB_ReadInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd0:	d10a      	bne.n	8002be8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f008 feb2 	bl	800b93c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 f9f7 	bl	8005fe0 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d115      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f008 fea2 	bl	800b958 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	e000      	b.n	8002c28 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c26:	bf00      	nop
    }
  }
}
 8002c28:	3734      	adds	r7, #52	@ 0x34
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}

08002c2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_PCD_SetAddress+0x1a>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e012      	b.n	8002c6e <HAL_PCD_SetAddress+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 f956 	bl	8005f10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	4608      	mov	r0, r1
 8002c80:	4611      	mov	r1, r2
 8002c82:	461a      	mov	r2, r3
 8002c84:	4603      	mov	r3, r0
 8002c86:	70fb      	strb	r3, [r7, #3]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	803b      	strh	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da0f      	bge.n	8002cbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	f003 020f 	and.w	r2, r3, #15
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	3310      	adds	r3, #16
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4413      	add	r3, r2
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	705a      	strb	r2, [r3, #1]
 8002cba:	e00f      	b.n	8002cdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 020f 	and.w	r2, r3, #15
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ce8:	883a      	ldrh	r2, [r7, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	78ba      	ldrb	r2, [r7, #2]
 8002cf2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d06:	78bb      	ldrb	r3, [r7, #2]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d102      	bne.n	8002d12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_PCD_EP_Open+0xaa>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e00e      	b.n	8002d3e <HAL_PCD_EP_Open+0xc8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fade 	bl	80052f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da0f      	bge.n	8002d7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 020f 	and.w	r2, r3, #15
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	3310      	adds	r3, #16
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	705a      	strb	r2, [r3, #1]
 8002d78:	e00f      	b.n	8002d9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	3304      	adds	r3, #4
 8002d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_PCD_EP_Close+0x6e>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e00e      	b.n	8002dd2 <HAL_PCD_EP_Close+0x8c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f002 fb1c 	bl	8005400 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	460b      	mov	r3, r1
 8002de8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	3304      	adds	r3, #4
 8002e02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e1c:	7afb      	ldrb	r3, [r7, #11]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	799b      	ldrb	r3, [r3, #6]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	799b      	ldrb	r3, [r3, #6]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6979      	ldr	r1, [r7, #20]
 8002e42:	f002 fbb9 	bl	80055b8 <USB_EPStartXfer>

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	799b      	ldrb	r3, [r3, #6]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d102      	bne.n	8002eda <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	799b      	ldrb	r3, [r3, #6]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6979      	ldr	r1, [r7, #20]
 8002ee6:	f002 fb67 	bl	80055b8 <USB_EPStartXfer>

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	7912      	ldrb	r2, [r2, #4]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e04f      	b.n	8002fb2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da0f      	bge.n	8002f3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	3310      	adds	r3, #16
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	e00d      	b.n	8002f56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_EP_SetStall+0x82>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e01d      	b.n	8002fb2 <HAL_PCD_EP_SetStall+0xbe>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 feef 	bl	8005d68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7999      	ldrb	r1, [r3, #6]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f003 f8e0 	bl	8006168 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	7912      	ldrb	r2, [r2, #4]
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e042      	b.n	800305e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da0f      	bge.n	8003000 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 020f 	and.w	r2, r3, #15
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3310      	adds	r3, #16
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	705a      	strb	r2, [r3, #1]
 8002ffe:	e00f      	b.n	8003020 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_PCD_EP_ClrStall+0x86>
 800303c:	2302      	movs	r3, #2
 800303e:	e00e      	b.n	800305e <HAL_PCD_EP_ClrStall+0xa4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	4618      	mov	r0, r3
 8003050:	f002 fef8 	bl	8005e44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0c      	bge.n	8003094 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	3310      	adds	r3, #16
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e00c      	b.n	80030ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 fd17 	bl	8005ae8 <USB_EPStopXfer>
 80030ba:	4603      	mov	r3, r0
 80030bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030be:	7afb      	ldrb	r3, [r7, #11]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	3310      	adds	r3, #16
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d901      	bls.n	8003100 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e06b      	b.n	80031d8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	429a      	cmp	r2, r3
 8003114:	d902      	bls.n	800311c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3303      	adds	r3, #3
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003124:	e02a      	b.n	800317c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	429a      	cmp	r2, r3
 800313a:	d902      	bls.n	8003142 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3303      	adds	r3, #3
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68d9      	ldr	r1, [r3, #12]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	4603      	mov	r3, r0
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f002 fd6c 	bl	8005c3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	441a      	add	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	429a      	cmp	r2, r3
 8003190:	d809      	bhi.n	80031a6 <PCD_WriteEmptyTxFifo+0xde>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319a:	429a      	cmp	r2, r3
 800319c:	d203      	bcs.n	80031a6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1bf      	bne.n	8003126 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d811      	bhi.n	80031d6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2201      	movs	r2, #1
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031d2:	4013      	ands	r3, r2
 80031d4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	333c      	adds	r3, #60	@ 0x3c
 80031f8:	3304      	adds	r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	799b      	ldrb	r3, [r3, #6]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d17b      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a61      	ldr	r2, [pc, #388]	@ (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f240 80b9 	bls.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80b3 	beq.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003248:	6093      	str	r3, [r2, #8]
 800324a:	e0a7      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2320      	movs	r3, #32
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e098      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 8093 	bne.w	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90f      	bls.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	e07e      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	0159      	lsls	r1, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	440b      	add	r3, r1
 80032c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032e8:	461a      	mov	r2, r3
 80032ea:	2101      	movs	r1, #1
 80032ec:	f002 ff3c 	bl	8006168 <USB_EP0_OutStart>
 80032f0:	e006      	b.n	8003300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f008 fa54 	bl	800b7b4 <HAL_PCD_DataOutStageCallback>
 800330c:	e046      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	4a26      	ldr	r2, [pc, #152]	@ (80033ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d124      	bne.n	8003360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	e032      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2320      	movs	r3, #32
 8003350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f008 fa2b 	bl	800b7b4 <HAL_PCD_DataOutStageCallback>
 800335e:	e01d      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003388:	461a      	mov	r2, r3
 800338a:	2100      	movs	r1, #0
 800338c:	f002 feec 	bl	8006168 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f008 fa0c 	bl	800b7b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	4f54300a 	.word	0x4f54300a
 80033ac:	4f54310a 	.word	0x4f54310a

080033b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	333c      	adds	r3, #60	@ 0x3c
 80033c8:	3304      	adds	r3, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a15      	ldr	r2, [pc, #84]	@ (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d90e      	bls.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f008 f9c3 	bl	800b790 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a0a      	ldr	r2, [pc, #40]	@ (8003438 <PCD_EP_OutSetupPacket_int+0x88>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90c      	bls.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	799b      	ldrb	r3, [r3, #6]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003424:	461a      	mov	r2, r3
 8003426:	2101      	movs	r1, #1
 8003428:	f002 fe9e 	bl	8006168 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	4f54300a 	.word	0x4f54300a

0800343c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
 8003448:	4613      	mov	r3, r2
 800344a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800345a:	883b      	ldrh	r3, [r7, #0]
 800345c:	0419      	lsls	r1, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	430a      	orrs	r2, r1
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
 8003468:	e028      	b.n	80034bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4413      	add	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	e00d      	b.n	800349a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	3340      	adds	r3, #64	@ 0x40
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3301      	adds	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	3b01      	subs	r3, #1
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d3ec      	bcc.n	800347e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034a4:	883b      	ldrh	r3, [r7, #0]
 80034a6:	0418      	lsls	r0, r3, #16
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	4302      	orrs	r2, r0
 80034b4:	3340      	adds	r3, #64	@ 0x40
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e267      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d075      	beq.n	800360e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003522:	4b88      	ldr	r3, [pc, #544]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d00c      	beq.n	8003548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b85      	ldr	r3, [pc, #532]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	2b08      	cmp	r3, #8
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b82      	ldr	r3, [pc, #520]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b7e      	ldr	r3, [pc, #504]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x108>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e242      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x74>
 800356a:	4b76      	ldr	r3, [pc, #472]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a75      	ldr	r2, [pc, #468]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x98>
 8003582:	4b70      	ldr	r3, [pc, #448]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6f      	ldr	r2, [pc, #444]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b6d      	ldr	r3, [pc, #436]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6c      	ldr	r2, [pc, #432]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xb0>
 800359c:	4b69      	ldr	r3, [pc, #420]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a68      	ldr	r2, [pc, #416]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b66      	ldr	r3, [pc, #408]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a65      	ldr	r2, [pc, #404]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fa1e 	bl	80019fc <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe fa1a 	bl	80019fc <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	@ 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e207      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xc0>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fa0a 	bl	80019fc <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fa06 	bl	80019fc <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	@ 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1f3      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b51      	ldr	r3, [pc, #324]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0xe8>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d063      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361a:	4b4a      	ldr	r3, [pc, #296]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b47      	ldr	r3, [pc, #284]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d11c      	bne.n	800366c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b44      	ldr	r3, [pc, #272]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	4b41      	ldr	r3, [pc, #260]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_RCC_OscConfig+0x152>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e1c7      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003656:	4b3b      	ldr	r3, [pc, #236]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4937      	ldr	r1, [pc, #220]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	e03a      	b.n	80036e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003674:	4b34      	ldr	r3, [pc, #208]	@ (8003748 <HAL_RCC_OscConfig+0x244>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe f9bf 	bl	80019fc <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003682:	f7fe f9bb 	bl	80019fc <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e1a8      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a0:	4b28      	ldr	r3, [pc, #160]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4925      	ldr	r1, [pc, #148]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
 80036b4:	e015      	b.n	80036e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b6:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <HAL_RCC_OscConfig+0x244>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f99e 	bl	80019fc <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fe f99a 	bl	80019fc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e187      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d036      	beq.n	800375c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d016      	beq.n	8003724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <HAL_RCC_OscConfig+0x248>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fe f97e 	bl	80019fc <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003704:	f7fe f97a 	bl	80019fc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e167      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_OscConfig+0x240>)
 8003718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x200>
 8003722:	e01b      	b.n	800375c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003724:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_OscConfig+0x248>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fe f967 	bl	80019fc <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	e00e      	b.n	8003750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003732:	f7fe f963 	bl	80019fc <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d907      	bls.n	8003750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e150      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
 8003744:	40023800 	.word	0x40023800
 8003748:	42470000 	.word	0x42470000
 800374c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	4b88      	ldr	r3, [pc, #544]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ea      	bne.n	8003732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8097 	beq.w	8003898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376e:	4b81      	ldr	r3, [pc, #516]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	4b7d      	ldr	r3, [pc, #500]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	4a7c      	ldr	r2, [pc, #496]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	@ 0x40
 800378a:	4b7a      	ldr	r3, [pc, #488]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b77      	ldr	r3, [pc, #476]	@ (8003978 <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a6:	4b74      	ldr	r3, [pc, #464]	@ (8003978 <HAL_RCC_OscConfig+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a73      	ldr	r2, [pc, #460]	@ (8003978 <HAL_RCC_OscConfig+0x474>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe f923 	bl	80019fc <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe f91f 	bl	80019fc <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e10c      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003978 <HAL_RCC_OscConfig+0x474>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x2ea>
 80037e0:	4b64      	ldr	r3, [pc, #400]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	4a63      	ldr	r2, [pc, #396]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x324>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x30c>
 80037f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	6713      	str	r3, [r2, #112]	@ 0x70
 8003802:	4b5c      	ldr	r3, [pc, #368]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	4a5b      	ldr	r2, [pc, #364]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6713      	str	r3, [r2, #112]	@ 0x70
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0x324>
 8003810:	4b58      	ldr	r3, [pc, #352]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	4a57      	ldr	r2, [pc, #348]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0301 	bic.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	@ 0x70
 800381c:	4b55      	ldr	r3, [pc, #340]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	4a54      	ldr	r2, [pc, #336]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 0304 	bic.w	r3, r3, #4
 8003826:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d015      	beq.n	800385c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe f8e4 	bl	80019fc <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fe f8e0 	bl	80019fc <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0cb      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	4b49      	ldr	r3, [pc, #292]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0ee      	beq.n	8003838 <HAL_RCC_OscConfig+0x334>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe f8ce 	bl	80019fc <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fe f8ca 	bl	80019fc <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0b5      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	4b3e      	ldr	r3, [pc, #248]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ee      	bne.n	8003864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388c:	4b39      	ldr	r3, [pc, #228]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	4a38      	ldr	r2, [pc, #224]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003896:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a1 	beq.w	80039e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a2:	4b34      	ldr	r3, [pc, #208]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d05c      	beq.n	8003968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d141      	bne.n	800393a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b31      	ldr	r3, [pc, #196]	@ (800397c <HAL_RCC_OscConfig+0x478>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe f89e 	bl	80019fc <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe f89a 	bl	80019fc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e087      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d6:	4b27      	ldr	r3, [pc, #156]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	3b01      	subs	r3, #1
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	491b      	ldr	r1, [pc, #108]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <HAL_RCC_OscConfig+0x478>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe f873 	bl	80019fc <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe f86f 	bl	80019fc <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e05c      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x416>
 8003938:	e054      	b.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	@ (800397c <HAL_RCC_OscConfig+0x478>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe f85c 	bl	80019fc <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe f858 	bl	80019fc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e045      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_RCC_OscConfig+0x470>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x444>
 8003966:	e03d      	b.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e038      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
 8003974:	40023800 	.word	0x40023800
 8003978:	40007000 	.word	0x40007000
 800397c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x4ec>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d028      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d121      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d11a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800

080039f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0cc      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a08:	4b68      	ldr	r3, [pc, #416]	@ (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d90c      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	4b65      	ldr	r3, [pc, #404]	@ (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b63      	ldr	r3, [pc, #396]	@ (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b8      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a48:	4b59      	ldr	r3, [pc, #356]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a58      	ldr	r2, [pc, #352]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a60:	4b53      	ldr	r3, [pc, #332]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a52      	ldr	r2, [pc, #328]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b50      	ldr	r3, [pc, #320]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	494d      	ldr	r1, [pc, #308]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d044      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b47      	ldr	r3, [pc, #284]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d119      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e067      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad2:	4b37      	ldr	r3, [pc, #220]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4934      	ldr	r1, [pc, #208]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fd ff8a 	bl	80019fc <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aec:	f7fd ff86 	bl	80019fc <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e04f      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1eb      	bne.n	8003aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b25      	ldr	r3, [pc, #148]	@ (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d20c      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b22      	ldr	r3, [pc, #136]	@ (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e032      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b48:	4b19      	ldr	r3, [pc, #100]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4916      	ldr	r1, [pc, #88]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b66:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	490e      	ldr	r1, [pc, #56]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7a:	f000 f821 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	490a      	ldr	r1, [pc, #40]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a09      	ldr	r2, [pc, #36]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fd66 	bl	800166c <HAL_InitTick>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023c00 	.word	0x40023c00
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	0800db24 	.word	0x0800db24
 8003bb8:	20000004 	.word	0x20000004
 8003bbc:	20000008 	.word	0x20000008

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b094      	sub	sp, #80	@ 0x50
 8003bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bcc:	2300      	movs	r3, #0
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd8:	4b79      	ldr	r3, [pc, #484]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d00d      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x40>
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	f200 80e1 	bhi.w	8003dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d003      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003bf2:	e0db      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b73      	ldr	r3, [pc, #460]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003bf8:	e0db      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bfa:	4b73      	ldr	r3, [pc, #460]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bfe:	e0d8      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c00:	4b6f      	ldr	r3, [pc, #444]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c08:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d063      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c16:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c32:	4622      	mov	r2, r4
 8003c34:	462b      	mov	r3, r5
 8003c36:	f04f 0000 	mov.w	r0, #0
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	0159      	lsls	r1, r3, #5
 8003c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c44:	0150      	lsls	r0, r2, #5
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	1a51      	subs	r1, r2, r1
 8003c4e:	6139      	str	r1, [r7, #16]
 8003c50:	4629      	mov	r1, r5
 8003c52:	eb63 0301 	sbc.w	r3, r3, r1
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c64:	4659      	mov	r1, fp
 8003c66:	018b      	lsls	r3, r1, #6
 8003c68:	4651      	mov	r1, sl
 8003c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c6e:	4651      	mov	r1, sl
 8003c70:	018a      	lsls	r2, r1, #6
 8003c72:	4651      	mov	r1, sl
 8003c74:	ebb2 0801 	subs.w	r8, r2, r1
 8003c78:	4659      	mov	r1, fp
 8003c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c92:	4690      	mov	r8, r2
 8003c94:	4699      	mov	r9, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	eb18 0303 	adds.w	r3, r8, r3
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	eb49 0303 	adc.w	r3, r9, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	024b      	lsls	r3, r1, #9
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	024a      	lsls	r2, r1, #9
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cd0:	f7fc face 	bl	8000270 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cdc:	e058      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b38      	ldr	r3, [pc, #224]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	4611      	mov	r1, r2
 8003cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cee:	623b      	str	r3, [r7, #32]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	f04f 0000 	mov.w	r0, #0
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	0159      	lsls	r1, r3, #5
 8003d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0a:	0150      	lsls	r0, r2, #5
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4641      	mov	r1, r8
 8003d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d16:	4649      	mov	r1, r9
 8003d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d30:	ebb2 040a 	subs.w	r4, r2, sl
 8003d34:	eb63 050b 	sbc.w	r5, r3, fp
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	00eb      	lsls	r3, r5, #3
 8003d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d46:	00e2      	lsls	r2, r4, #3
 8003d48:	4614      	mov	r4, r2
 8003d4a:	461d      	mov	r5, r3
 8003d4c:	4643      	mov	r3, r8
 8003d4e:	18e3      	adds	r3, r4, r3
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	464b      	mov	r3, r9
 8003d54:	eb45 0303 	adc.w	r3, r5, r3
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d66:	4629      	mov	r1, r5
 8003d68:	028b      	lsls	r3, r1, #10
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d70:	4621      	mov	r1, r4
 8003d72:	028a      	lsls	r2, r1, #10
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	61fa      	str	r2, [r7, #28]
 8003d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d84:	f7fc fa74 	bl	8000270 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003da0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003daa:	e002      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3750      	adds	r7, #80	@ 0x50
 8003db8:	46bd      	mov	sp, r7
 8003dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	007a1200 	.word	0x007a1200

08003dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000004 	.word	0x20000004

08003de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de8:	f7ff fff0 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0b5b      	lsrs	r3, r3, #13
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4903      	ldr	r1, [pc, #12]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	0800db34 	.word	0x0800db34

08003e0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	220f      	movs	r2, #15
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e1c:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e28:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e34:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e40:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e4e:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <HAL_RCC_GetClockConfig+0x60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40023c00 	.word	0x40023c00

08003e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07b      	b.n	8003f7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e92:	d009      	beq.n	8003ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
 8003e9a:	e005      	b.n	8003ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fb82 	bl	80015cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	ea42 0103 	orr.w	r1, r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0104 	and.w	r1, r3, #4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	f003 0210 	and.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b08c      	sub	sp, #48	@ 0x30
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f90:	2301      	movs	r3, #1
 8003f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x26>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e198      	b.n	80042da <HAL_SPI_TransmitReceive+0x358>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb0:	f7fd fd24 	bl	80019fc <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d00f      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x70>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fd8:	d107      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x68>
 8003fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d003      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
 8003fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ff0:	e16d      	b.n	80042ce <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_SPI_TransmitReceive+0x82>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_TransmitReceive+0x82>
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d103      	bne.n	800400c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800400a:	e160      	b.n	80042ce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b04      	cmp	r3, #4
 8004016:	d003      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2205      	movs	r2, #5
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	887a      	ldrh	r2, [r7, #2]
 8004036:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d007      	beq.n	8004074 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800407c:	d17c      	bne.n	8004178 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_TransmitReceive+0x10a>
 8004086:	8b7b      	ldrh	r3, [r7, #26]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d16a      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004090:	881a      	ldrh	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409c:	1c9a      	adds	r2, r3, #2
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040b0:	e057      	b.n	8004162 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d11b      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x176>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x176>
 80040ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d113      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d119      	bne.n	800413a <HAL_SPI_TransmitReceive+0x1b8>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d014      	beq.n	800413a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	b292      	uxth	r2, r2
 800411c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	1c9a      	adds	r2, r3, #2
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004136:	2301      	movs	r3, #1
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800413a:	f7fd fc5f 	bl	80019fc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004146:	429a      	cmp	r2, r3
 8004148:	d80b      	bhi.n	8004162 <HAL_SPI_TransmitReceive+0x1e0>
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d007      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004160:	e0b5      	b.n	80042ce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1a2      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x130>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d19d      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x130>
 8004176:	e080      	b.n	800427a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_SPI_TransmitReceive+0x204>
 8004180:	8b7b      	ldrh	r3, [r7, #26]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d16f      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	7812      	ldrb	r2, [r2, #0]
 8004192:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ac:	e05b      	b.n	8004266 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d11c      	bne.n	80041f6 <HAL_SPI_TransmitReceive+0x274>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d017      	beq.n	80041f6 <HAL_SPI_TransmitReceive+0x274>
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d114      	bne.n	80041f6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b01      	cmp	r3, #1
 8004202:	d119      	bne.n	8004238 <HAL_SPI_TransmitReceive+0x2b6>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d014      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004234:	2301      	movs	r3, #1
 8004236:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004238:	f7fd fbe0 	bl	80019fc <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004244:	429a      	cmp	r2, r3
 8004246:	d803      	bhi.n	8004250 <HAL_SPI_TransmitReceive+0x2ce>
 8004248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d102      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x2d4>
 8004250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004264:	e033      	b.n	80042ce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d19e      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x22c>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d199      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800427a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800427c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f9ca 	bl	8004618 <SPI_EndRxTxTransaction>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d006      	beq.n	8004298 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004296:	e01a      	b.n	80042ce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c4:	e003      	b.n	80042ce <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80042d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3730      	adds	r7, #48	@ 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10e      	bne.n	8004324 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800430c:	2b00      	cmp	r3, #0
 800430e:	d009      	beq.n	8004324 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
    return;
 8004322:	e0ce      	b.n	80044c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_SPI_IRQHandler+0x5e>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
    return;
 8004340:	e0bf      	b.n	80044c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <HAL_SPI_IRQHandler+0x7e>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80b0 	beq.w	80044c2 <HAL_SPI_IRQHandler+0x1de>
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80aa 	beq.w	80044c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d023      	beq.n	80043c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d011      	beq.n	80043a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	e00b      	b.n	80043c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
        return;
 80043be:	e080      	b.n	80044c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d014      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004402:	f043 0208 	orr.w	r2, r3, #8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d04f      	beq.n	80044c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800442e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <HAL_SPI_IRQHandler+0x168>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d034      	beq.n	80044b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0203 	bic.w	r2, r2, #3
 800445a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d011      	beq.n	8004488 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004468:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <HAL_SPI_IRQHandler+0x1e4>)
 800446a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004470:	4618      	mov	r0, r3
 8004472:	f7fd fbd5 	bl	8001c20 <HAL_DMA_Abort_IT>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448c:	2b00      	cmp	r3, #0
 800448e:	d016      	beq.n	80044be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004494:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <HAL_SPI_IRQHandler+0x1e4>)
 8004496:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800449c:	4618      	mov	r0, r3
 800449e:	f7fd fbbf 	bl	8001c20 <HAL_DMA_Abort_IT>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80044b4:	e003      	b.n	80044be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f808 	bl	80044cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80044bc:	e000      	b.n	80044c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80044be:	bf00      	nop
    return;
 80044c0:	bf00      	nop
  }
}
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	080044e1 	.word	0x080044e1

080044cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff ffe6 	bl	80044cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004518:	f7fd fa70 	bl	80019fc <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	4413      	add	r3, r2
 8004526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004528:	f7fd fa68 	bl	80019fc <HAL_GetTick>
 800452c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800452e:	4b39      	ldr	r3, [pc, #228]	@ (8004614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	015b      	lsls	r3, r3, #5
 8004534:	0d1b      	lsrs	r3, r3, #20
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800453e:	e054      	b.n	80045ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d050      	beq.n	80045ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004548:	f7fd fa58 	bl	80019fc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	429a      	cmp	r2, r3
 8004556:	d902      	bls.n	800455e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d13d      	bne.n	80045da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800456c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004576:	d111      	bne.n	800459c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004580:	d004      	beq.n	800458c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458a:	d107      	bne.n	800459c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045a4:	d10f      	bne.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e017      	b.n	800460a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	429a      	cmp	r2, r3
 8004606:	d19b      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000004 	.word	0x20000004

08004618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2201      	movs	r2, #1
 800462c:	2102      	movs	r1, #2
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff ff6a 	bl	8004508 <SPI_WaitFlagStateUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463e:	f043 0220 	orr.w	r2, r3, #32
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e032      	b.n	80046b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800464a:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <SPI_EndRxTxTransaction+0xa0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <SPI_EndRxTxTransaction+0xa4>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	0d5b      	lsrs	r3, r3, #21
 8004656:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004668:	d112      	bne.n	8004690 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	2180      	movs	r1, #128	@ 0x80
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ff47 	bl	8004508 <SPI_WaitFlagStateUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d016      	beq.n	80046ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e00f      	b.n	80046b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3b01      	subs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a6:	2b80      	cmp	r3, #128	@ 0x80
 80046a8:	d0f2      	beq.n	8004690 <SPI_EndRxTxTransaction+0x78>
 80046aa:	e000      	b.n	80046ae <SPI_EndRxTxTransaction+0x96>
        break;
 80046ac:	bf00      	nop
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000004 	.word	0x20000004
 80046bc:	165e9f81 	.word	0x165e9f81

080046c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e041      	b.n	8004756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f839 	bl	800475e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f000 f9c0 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d001      	beq.n	800478c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e04e      	b.n	800482a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a23      	ldr	r2, [pc, #140]	@ (8004838 <HAL_TIM_Base_Start_IT+0xc4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d022      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b6:	d01d      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <HAL_TIM_Base_Start_IT+0xc8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d018      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004840 <HAL_TIM_Base_Start_IT+0xcc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004844 <HAL_TIM_Base_Start_IT+0xd0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1b      	ldr	r2, [pc, #108]	@ (8004848 <HAL_TIM_Base_Start_IT+0xd4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a19      	ldr	r2, [pc, #100]	@ (800484c <HAL_TIM_Base_Start_IT+0xd8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <HAL_TIM_Base_Start_IT+0xdc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d111      	bne.n	8004818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b06      	cmp	r3, #6
 8004804:	d010      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	e007      	b.n	8004828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800

08004854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d020      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01b      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0202 	mvn.w	r2, #2
 8004888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8d2 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8c4 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8d5 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d020      	beq.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8ac 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f89e 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8af 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0208 	mvn.w	r2, #8
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f886 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f878 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f889 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d020      	beq.n	800499c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0210 	mvn.w	r2, #16
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2208      	movs	r2, #8
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f860 	bl	8004a48 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f852 	bl	8004a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f863 	bl	8004a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0201 	mvn.w	r2, #1
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc fdc2 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f906 	bl	8004bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f834 	bl	8004a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00c      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0220 	mvn.w	r2, #32
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f8d8 	bl	8004bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a46      	ldr	r2, [pc, #280]	@ (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a43      	ldr	r2, [pc, #268]	@ (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a42      	ldr	r2, [pc, #264]	@ (8004bb8 <TIM_Base_SetConfig+0x134>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a41      	ldr	r2, [pc, #260]	@ (8004bbc <TIM_Base_SetConfig+0x138>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a40      	ldr	r2, [pc, #256]	@ (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d108      	bne.n	8004ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae4:	d027      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a32      	ldr	r2, [pc, #200]	@ (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d023      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a31      	ldr	r2, [pc, #196]	@ (8004bb8 <TIM_Base_SetConfig+0x134>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a30      	ldr	r2, [pc, #192]	@ (8004bbc <TIM_Base_SetConfig+0x138>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d017      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc4 <TIM_Base_SetConfig+0x140>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc8 <TIM_Base_SetConfig+0x144>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2c      	ldr	r2, [pc, #176]	@ (8004bcc <TIM_Base_SetConfig+0x148>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd0 <TIM_Base_SetConfig+0x14c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd4 <TIM_Base_SetConfig+0x150>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a29      	ldr	r2, [pc, #164]	@ (8004bd8 <TIM_Base_SetConfig+0x154>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a10      	ldr	r2, [pc, #64]	@ (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d105      	bne.n	8004ba2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	611a      	str	r2, [r3, #16]
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800
 8004bd0:	40001800 	.word	0x40001800
 8004bd4:	40001c00 	.word	0x40001c00
 8004bd8:	40002000 	.word	0x40002000

08004bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c04:	b084      	sub	sp, #16
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	f107 001c 	add.w	r0, r7, #28
 8004c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d123      	bne.n	8004c66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fae2 	bl	8006224 <USB_CoreReset>
 8004c60:	4603      	mov	r3, r0
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e01b      	b.n	8004c9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 fad6 	bl	8006224 <USB_CoreReset>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c90:	e005      	b.n	8004c9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c9e:	7fbb      	ldrb	r3, [r7, #30]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10b      	bne.n	8004cbc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f043 0206 	orr.w	r2, r3, #6
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f043 0220 	orr.w	r2, r3, #32
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc8:	b004      	add	sp, #16
 8004cca:	4770      	bx	lr

08004ccc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d165      	bne.n	8004dac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	@ (8004de8 <USB_SetTurnaroundTime+0x11c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d906      	bls.n	8004cf6 <USB_SetTurnaroundTime+0x2a>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a40      	ldr	r2, [pc, #256]	@ (8004dec <USB_SetTurnaroundTime+0x120>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d202      	bcs.n	8004cf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004cf0:	230f      	movs	r3, #15
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e062      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dec <USB_SetTurnaroundTime+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d306      	bcc.n	8004d0c <USB_SetTurnaroundTime+0x40>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4a3b      	ldr	r2, [pc, #236]	@ (8004df0 <USB_SetTurnaroundTime+0x124>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d202      	bcs.n	8004d0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d06:	230e      	movs	r3, #14
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	e057      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4a38      	ldr	r2, [pc, #224]	@ (8004df0 <USB_SetTurnaroundTime+0x124>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d306      	bcc.n	8004d22 <USB_SetTurnaroundTime+0x56>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4a37      	ldr	r2, [pc, #220]	@ (8004df4 <USB_SetTurnaroundTime+0x128>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d202      	bcs.n	8004d22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d1c:	230d      	movs	r3, #13
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e04c      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4a33      	ldr	r2, [pc, #204]	@ (8004df4 <USB_SetTurnaroundTime+0x128>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d306      	bcc.n	8004d38 <USB_SetTurnaroundTime+0x6c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a32      	ldr	r2, [pc, #200]	@ (8004df8 <USB_SetTurnaroundTime+0x12c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d802      	bhi.n	8004d38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d32:	230c      	movs	r3, #12
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e041      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004df8 <USB_SetTurnaroundTime+0x12c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d906      	bls.n	8004d4e <USB_SetTurnaroundTime+0x82>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4a2e      	ldr	r2, [pc, #184]	@ (8004dfc <USB_SetTurnaroundTime+0x130>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d802      	bhi.n	8004d4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d48:	230b      	movs	r3, #11
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e036      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <USB_SetTurnaroundTime+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d906      	bls.n	8004d64 <USB_SetTurnaroundTime+0x98>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4a29      	ldr	r2, [pc, #164]	@ (8004e00 <USB_SetTurnaroundTime+0x134>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d802      	bhi.n	8004d64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d5e:	230a      	movs	r3, #10
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e02b      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4a26      	ldr	r2, [pc, #152]	@ (8004e00 <USB_SetTurnaroundTime+0x134>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d906      	bls.n	8004d7a <USB_SetTurnaroundTime+0xae>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a25      	ldr	r2, [pc, #148]	@ (8004e04 <USB_SetTurnaroundTime+0x138>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d202      	bcs.n	8004d7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d74:	2309      	movs	r3, #9
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	e020      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	@ (8004e04 <USB_SetTurnaroundTime+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d306      	bcc.n	8004d90 <USB_SetTurnaroundTime+0xc4>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4a20      	ldr	r2, [pc, #128]	@ (8004e08 <USB_SetTurnaroundTime+0x13c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d802      	bhi.n	8004d90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e015      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a1d      	ldr	r2, [pc, #116]	@ (8004e08 <USB_SetTurnaroundTime+0x13c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d906      	bls.n	8004da6 <USB_SetTurnaroundTime+0xda>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e0c <USB_SetTurnaroundTime+0x140>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d202      	bcs.n	8004da6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004da0:	2307      	movs	r3, #7
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e00a      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004da6:	2306      	movs	r3, #6
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e007      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004db2:	2309      	movs	r3, #9
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e001      	b.n	8004dbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004db8:	2309      	movs	r3, #9
 8004dba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	00d8acbf 	.word	0x00d8acbf
 8004dec:	00e4e1c0 	.word	0x00e4e1c0
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	01067380 	.word	0x01067380
 8004df8:	011a499f 	.word	0x011a499f
 8004dfc:	01312cff 	.word	0x01312cff
 8004e00:	014ca43f 	.word	0x014ca43f
 8004e04:	016e3600 	.word	0x016e3600
 8004e08:	01a6ab1f 	.word	0x01a6ab1f
 8004e0c:	01e84800 	.word	0x01e84800

08004e10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d115      	bne.n	8004ea2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e82:	200a      	movs	r0, #10
 8004e84:	f7fc fdc6 	bl	8001a14 <HAL_Delay>
      ms += 10U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	330a      	adds	r3, #10
 8004e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 f939 	bl	8006106 <USB_GetMode>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d01e      	beq.n	8004ed8 <USB_SetCurrentMode+0x84>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e9e:	d9f0      	bls.n	8004e82 <USB_SetCurrentMode+0x2e>
 8004ea0:	e01a      	b.n	8004ed8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d115      	bne.n	8004ed4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004eb4:	200a      	movs	r0, #10
 8004eb6:	f7fc fdad 	bl	8001a14 <HAL_Delay>
      ms += 10U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	330a      	adds	r3, #10
 8004ebe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 f920 	bl	8006106 <USB_GetMode>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <USB_SetCurrentMode+0x84>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ed0:	d9f0      	bls.n	8004eb4 <USB_SetCurrentMode+0x60>
 8004ed2:	e001      	b.n	8004ed8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e005      	b.n	8004ee4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2bc8      	cmp	r3, #200	@ 0xc8
 8004edc:	d101      	bne.n	8004ee2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eec:	b084      	sub	sp, #16
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e009      	b.n	8004f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3340      	adds	r3, #64	@ 0x40
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	2200      	movs	r2, #0
 8004f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b0e      	cmp	r3, #14
 8004f24:	d9f2      	bls.n	8004f0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11c      	bne.n	8004f68 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f66:	e00b      	b.n	8004f80 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10d      	bne.n	8004fb0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f968 	bl	8005274 <USB_SetDevSpeed>
 8004fa4:	e008      	b.n	8004fb8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f963 	bl	8005274 <USB_SetDevSpeed>
 8004fae:	e003      	b.n	8004fb8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fb0:	2103      	movs	r1, #3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f95e 	bl	8005274 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fb8:	2110      	movs	r1, #16
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8fa 	bl	80051b4 <USB_FlushTxFifo>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f924 	bl	8005218 <USB_FlushRxFifo>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fec:	461a      	mov	r2, r3
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	e043      	b.n	800508c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800501a:	d118      	bne.n	800504e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e013      	b.n	8005060 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005044:	461a      	mov	r2, r3
 8005046:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	e008      	b.n	8005060 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506c:	461a      	mov	r2, r3
 800506e:	2300      	movs	r3, #0
 8005070:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800507e:	461a      	mov	r2, r3
 8005080:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005084:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3301      	adds	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005090:	461a      	mov	r2, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4293      	cmp	r3, r2
 8005096:	d3b5      	bcc.n	8005004 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e043      	b.n	8005126 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050b4:	d118      	bne.n	80050e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c8:	461a      	mov	r2, r3
 80050ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	e013      	b.n	80050fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050de:	461a      	mov	r2, r3
 80050e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e008      	b.n	80050fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	2300      	movs	r3, #0
 80050f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005106:	461a      	mov	r2, r3
 8005108:	2300      	movs	r3, #0
 800510a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005118:	461a      	mov	r2, r3
 800511a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800511e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	3301      	adds	r3, #1
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800512a:	461a      	mov	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4293      	cmp	r3, r2
 8005130:	d3b5      	bcc.n	800509e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005144:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005152:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005154:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f043 0210 	orr.w	r2, r3, #16
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	4b10      	ldr	r3, [pc, #64]	@ (80051b0 <USB_DevInit+0x2c4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005174:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f043 0208 	orr.w	r2, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005188:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005198:	f043 0304 	orr.w	r3, r3, #4
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051ac:	b004      	add	sp, #16
 80051ae:	4770      	bx	lr
 80051b0:	803c3800 	.word	0x803c3800

080051b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051ce:	d901      	bls.n	80051d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e01b      	b.n	800520c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	daf2      	bge.n	80051c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	019b      	lsls	r3, r3, #6
 80051e4:	f043 0220 	orr.w	r2, r3, #32
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051f8:	d901      	bls.n	80051fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e006      	b.n	800520c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b20      	cmp	r3, #32
 8005208:	d0f0      	beq.n	80051ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005230:	d901      	bls.n	8005236 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e018      	b.n	8005268 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	daf2      	bge.n	8005224 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2210      	movs	r2, #16
 8005246:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3301      	adds	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005254:	d901      	bls.n	800525a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e006      	b.n	8005268 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b10      	cmp	r3, #16
 8005264:	d0f0      	beq.n	8005248 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005294:	4313      	orrs	r3, r2
 8005296:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b087      	sub	sp, #28
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d102      	bne.n	80052cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]
 80052ca:	e00a      	b.n	80052e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d002      	beq.n	80052d8 <USB_GetDevSpeed+0x32>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b06      	cmp	r3, #6
 80052d6:	d102      	bne.n	80052de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80052d8:	2302      	movs	r3, #2
 80052da:	75fb      	strb	r3, [r7, #23]
 80052dc:	e001      	b.n	80052e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80052de:	230f      	movs	r3, #15
 80052e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d13a      	bne.n	8005382 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	b29b      	uxth	r3, r3
 8005324:	68f9      	ldr	r1, [r7, #12]
 8005326:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800532a:	4313      	orrs	r3, r2
 800532c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d155      	bne.n	80053f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	791b      	ldrb	r3, [r3, #4]
 800535e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005360:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	059b      	lsls	r3, r3, #22
 8005366:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005368:	4313      	orrs	r3, r2
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e036      	b.n	80053f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	2101      	movs	r1, #1
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d11a      	bne.n	80053f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053d6:	430b      	orrs	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d161      	bne.n	80054e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800542e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005432:	d11f      	bne.n	8005474 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800544e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005452:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800546e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005472:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	b29b      	uxth	r3, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005494:	4013      	ands	r3, r2
 8005496:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	2101      	movs	r1, #1
 80054aa:	fa01 f303 	lsl.w	r3, r1, r3
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054b8:	4013      	ands	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0159      	lsls	r1, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	440b      	add	r3, r1
 80054d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d6:	4619      	mov	r1, r3
 80054d8:	4b35      	ldr	r3, [pc, #212]	@ (80055b0 <USB_DeactivateEndpoint+0x1b0>)
 80054da:	4013      	ands	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]
 80054de:	e060      	b.n	80055a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f6:	d11f      	bne.n	8005538 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005512:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005516:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005532:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	2101      	movs	r1, #1
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	43db      	mvns	r3, r3
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005558:	4013      	ands	r3, r2
 800555a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	43db      	mvns	r3, r3
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800557c:	4013      	ands	r3, r2
 800557e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	0159      	lsls	r1, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	440b      	add	r3, r1
 8005596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559a:	4619      	mov	r1, r3
 800559c:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <USB_DeactivateEndpoint+0x1b4>)
 800559e:	4013      	ands	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	ec337800 	.word	0xec337800
 80055b4:	eff37800 	.word	0xeff37800

080055b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 817a 	bne.w	80058ce <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d132      	bne.n	8005648 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005600:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005640:	0cdb      	lsrs	r3, r3, #19
 8005642:	04db      	lsls	r3, r3, #19
 8005644:	6113      	str	r3, [r2, #16]
 8005646:	e092      	b.n	800576e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005662:	0cdb      	lsrs	r3, r3, #19
 8005664:	04db      	lsls	r3, r3, #19
 8005666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005682:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005686:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800568a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d11a      	bne.n	80056c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	d903      	bls.n	80056a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056c4:	6113      	str	r3, [r2, #16]
 80056c6:	e01b      	b.n	8005700 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6919      	ldr	r1, [r3, #16]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	440b      	add	r3, r1
 80056e0:	1e59      	subs	r1, r3, #1
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056ec:	4ba2      	ldr	r3, [pc, #648]	@ (8005978 <USB_EPStartXfer+0x3c0>)
 80056ee:	400b      	ands	r3, r1
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	0148      	lsls	r0, r1, #5
 80056f4:	69f9      	ldr	r1, [r7, #28]
 80056f6:	4401      	add	r1, r0
 80056f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80056fc:	4313      	orrs	r3, r2
 80056fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005716:	69b9      	ldr	r1, [r7, #24]
 8005718:	0148      	lsls	r0, r1, #5
 800571a:	69f9      	ldr	r1, [r7, #28]
 800571c:	4401      	add	r1, r0
 800571e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005722:	4313      	orrs	r3, r2
 8005724:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	791b      	ldrb	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d11f      	bne.n	800576e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005748:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800574c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005768:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800576c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d14b      	bne.n	800580c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	791b      	ldrb	r3, [r3, #4]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d128      	bne.n	80057ea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d110      	bne.n	80057ca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e00f      	b.n	80057ea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005804:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e165      	b.n	8005ad8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005826:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800582a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	791b      	ldrb	r3, [r3, #4]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d015      	beq.n	8005860 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 814d 	beq.w	8005ad8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	69f9      	ldr	r1, [r7, #28]
 8005856:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800585a:	4313      	orrs	r3, r2
 800585c:	634b      	str	r3, [r1, #52]	@ 0x34
 800585e:	e13b      	b.n	8005ad8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d110      	bne.n	8005892 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800588a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e00f      	b.n	80058b2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	68d9      	ldr	r1, [r3, #12]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	b298      	uxth	r0, r3
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4603      	mov	r3, r0
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f9b8 	bl	8005c3c <USB_WritePacket>
 80058cc:	e104      	b.n	8005ad8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e8:	0cdb      	lsrs	r3, r3, #19
 80058ea:	04db      	lsls	r3, r3, #19
 80058ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005908:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800590c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005910:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d131      	bne.n	800597c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005946:	69b9      	ldr	r1, [r7, #24]
 8005948:	0148      	lsls	r0, r1, #5
 800594a:	69f9      	ldr	r1, [r7, #28]
 800594c:	4401      	add	r1, r0
 800594e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005974:	6113      	str	r3, [r2, #16]
 8005976:	e061      	b.n	8005a3c <USB_EPStartXfer+0x484>
 8005978:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d123      	bne.n	80059cc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800599a:	69b9      	ldr	r1, [r7, #24]
 800599c:	0148      	lsls	r0, r1, #5
 800599e:	69f9      	ldr	r1, [r7, #28]
 80059a0:	4401      	add	r1, r0
 80059a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059c8:	6113      	str	r3, [r2, #16]
 80059ca:	e037      	b.n	8005a3c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4413      	add	r3, r2
 80059d6:	1e5a      	subs	r2, r3, #1
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	8afa      	ldrh	r2, [r7, #22]
 80059e8:	fb03 f202 	mul.w	r2, r3, r2
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	8afb      	ldrh	r3, [r7, #22]
 8005a00:	04d9      	lsls	r1, r3, #19
 8005a02:	4b38      	ldr	r3, [pc, #224]	@ (8005ae4 <USB_EPStartXfer+0x52c>)
 8005a04:	400b      	ands	r3, r1
 8005a06:	69b9      	ldr	r1, [r7, #24]
 8005a08:	0148      	lsls	r0, r1, #5
 8005a0a:	69f9      	ldr	r1, [r7, #28]
 8005a0c:	4401      	add	r1, r0
 8005a0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a12:	4313      	orrs	r3, r2
 8005a14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a2c:	69b9      	ldr	r1, [r7, #24]
 8005a2e:	0148      	lsls	r0, r1, #5
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	4401      	add	r1, r0
 8005a34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d10d      	bne.n	8005a5e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68d9      	ldr	r1, [r3, #12]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5a:	460a      	mov	r2, r1
 8005a5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	791b      	ldrb	r3, [r3, #4]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d128      	bne.n	8005ab8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d110      	bne.n	8005a98 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e00f      	b.n	8005ab8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	1ff80000 	.word	0x1ff80000

08005ae8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d14a      	bne.n	8005b9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b1e:	f040 8086 	bne.w	8005c2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	7812      	ldrb	r2, [r2, #0]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	7812      	ldrb	r2, [r2, #0]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d902      	bls.n	8005b80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b7e:	e056      	b.n	8005c2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b98:	d0e7      	beq.n	8005b6a <USB_EPStopXfer+0x82>
 8005b9a:	e048      	b.n	8005c2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bb4:	d13b      	bne.n	8005c2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d902      	bls.n	8005c14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
          break;
 8005c12:	e00c      	b.n	8005c2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c2c:	d0e7      	beq.n	8005bfe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	@ 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4611      	mov	r1, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	71fb      	strb	r3, [r7, #7]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d123      	bne.n	8005caa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c62:	88bb      	ldrh	r3, [r7, #4]
 8005c64:	3303      	adds	r3, #3
 8005c66:	089b      	lsrs	r3, r3, #2
 8005c68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e018      	b.n	8005ca2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	031a      	lsls	r2, r3, #12
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3301      	adds	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3e2      	bcc.n	8005c70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3724      	adds	r7, #36	@ 0x24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b08b      	sub	sp, #44	@ 0x2c
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cde:	2300      	movs	r3, #0
 8005ce0:	623b      	str	r3, [r7, #32]
 8005ce2:	e014      	b.n	8005d0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	3301      	adds	r3, #1
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	3301      	adds	r3, #1
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d3e6      	bcc.n	8005ce4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d16:	8bfb      	ldrh	r3, [r7, #30]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01e      	beq.n	8005d5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d26:	461a      	mov	r2, r3
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	701a      	strb	r2, [r3, #0]
      i++;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	3301      	adds	r3, #1
 8005d46:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d4e:	8bfb      	ldrh	r3, [r7, #30]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d54:	8bfb      	ldrh	r3, [r7, #30]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ea      	bne.n	8005d30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	372c      	adds	r7, #44	@ 0x2c
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d12c      	bne.n	8005dde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	db12      	blt.n	8005dbc <USB_EPSetStall+0x54>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00f      	beq.n	8005dbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005dba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e02b      	b.n	8005e36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	db12      	blt.n	8005e16 <USB_EPSetStall+0xae>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00f      	beq.n	8005e16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d128      	bne.n	8005eb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d003      	beq.n	8005e90 <USB_EPClearStall+0x4c>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d138      	bne.n	8005f02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e027      	b.n	8005f02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ecc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ed0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	791b      	ldrb	r3, [r3, #4]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d003      	beq.n	8005ee2 <USB_EPClearStall+0x9e>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	791b      	ldrb	r3, [r3, #4]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d10f      	bne.n	8005f02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f2e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f8a:	f023 0302 	bic.w	r3, r3, #2
 8005f8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0c1b      	lsrs	r3, r3, #16
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	b29b      	uxth	r3, r3
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800609c:	68bb      	ldr	r3, [r7, #8]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	01db      	lsls	r3, r3, #7
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4013      	ands	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060f8:	68bb      	ldr	r3, [r7, #8]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0301 	and.w	r3, r3, #1
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006140:	f023 0307 	bic.w	r3, r3, #7
 8006144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	460b      	mov	r3, r1
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	333c      	adds	r3, #60	@ 0x3c
 800617e:	3304      	adds	r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4a26      	ldr	r2, [pc, #152]	@ (8006220 <USB_EP0_OutStart+0xb8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d90a      	bls.n	80061a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800619c:	d101      	bne.n	80061a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e037      	b.n	8006212 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061d0:	f043 0318 	orr.w	r3, r3, #24
 80061d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80061e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10f      	bne.n	8006210 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800620a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800620e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	4f54300a 	.word	0x4f54300a

08006224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800623c:	d901      	bls.n	8006242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e01b      	b.n	800627a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	daf2      	bge.n	8006230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f043 0201 	orr.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006266:	d901      	bls.n	800626c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e006      	b.n	800627a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d0f0      	beq.n	800625a <USB_CoreReset+0x36>

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006294:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006298:	f005 fcf6 	bl	800bc88 <USBD_static_malloc>
 800629c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	32b0      	adds	r2, #176	@ 0xb0
 80062ae:	2100      	movs	r1, #0
 80062b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80062b4:	2302      	movs	r3, #2
 80062b6:	e0d4      	b.n	8006462 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80062b8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80062bc:	2100      	movs	r1, #0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f005 ff30 	bl	800c124 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32b0      	adds	r2, #176	@ 0xb0
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32b0      	adds	r2, #176	@ 0xb0
 80062de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7c1b      	ldrb	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d138      	bne.n	8006362 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062f0:	4b5e      	ldr	r3, [pc, #376]	@ (800646c <USBD_CDC_Init+0x1e4>)
 80062f2:	7819      	ldrb	r1, [r3, #0]
 80062f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062f8:	2202      	movs	r2, #2
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f005 fba1 	bl	800ba42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006300:	4b5a      	ldr	r3, [pc, #360]	@ (800646c <USBD_CDC_Init+0x1e4>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 020f 	and.w	r2, r3, #15
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3324      	adds	r3, #36	@ 0x24
 8006316:	2201      	movs	r2, #1
 8006318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800631a:	4b55      	ldr	r3, [pc, #340]	@ (8006470 <USBD_CDC_Init+0x1e8>)
 800631c:	7819      	ldrb	r1, [r3, #0]
 800631e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006322:	2202      	movs	r2, #2
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f005 fb8c 	bl	800ba42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800632a:	4b51      	ldr	r3, [pc, #324]	@ (8006470 <USBD_CDC_Init+0x1e8>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006342:	2201      	movs	r2, #1
 8006344:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006346:	4b4b      	ldr	r3, [pc, #300]	@ (8006474 <USBD_CDC_Init+0x1ec>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	3326      	adds	r3, #38	@ 0x26
 800635c:	2210      	movs	r2, #16
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	e035      	b.n	80063ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006362:	4b42      	ldr	r3, [pc, #264]	@ (800646c <USBD_CDC_Init+0x1e4>)
 8006364:	7819      	ldrb	r1, [r3, #0]
 8006366:	2340      	movs	r3, #64	@ 0x40
 8006368:	2202      	movs	r2, #2
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f005 fb69 	bl	800ba42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006370:	4b3e      	ldr	r3, [pc, #248]	@ (800646c <USBD_CDC_Init+0x1e4>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	3324      	adds	r3, #36	@ 0x24
 8006386:	2201      	movs	r2, #1
 8006388:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800638a:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <USBD_CDC_Init+0x1e8>)
 800638c:	7819      	ldrb	r1, [r3, #0]
 800638e:	2340      	movs	r3, #64	@ 0x40
 8006390:	2202      	movs	r2, #2
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f005 fb55 	bl	800ba42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006398:	4b35      	ldr	r3, [pc, #212]	@ (8006470 <USBD_CDC_Init+0x1e8>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063b0:	2201      	movs	r2, #1
 80063b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006474 <USBD_CDC_Init+0x1ec>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3326      	adds	r3, #38	@ 0x26
 80063ca:	2210      	movs	r2, #16
 80063cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063ce:	4b29      	ldr	r3, [pc, #164]	@ (8006474 <USBD_CDC_Init+0x1ec>)
 80063d0:	7819      	ldrb	r1, [r3, #0]
 80063d2:	2308      	movs	r3, #8
 80063d4:	2203      	movs	r2, #3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f005 fb33 	bl	800ba42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80063dc:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <USBD_CDC_Init+0x1ec>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	3324      	adds	r3, #36	@ 0x24
 80063f2:	2201      	movs	r2, #1
 80063f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	33b0      	adds	r3, #176	@ 0xb0
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800642c:	2302      	movs	r3, #2
 800642e:	e018      	b.n	8006462 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7c1b      	ldrb	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006438:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <USBD_CDC_Init+0x1e8>)
 800643a:	7819      	ldrb	r1, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f005 fbea 	bl	800bc20 <USBD_LL_PrepareReceive>
 800644c:	e008      	b.n	8006460 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800644e:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <USBD_CDC_Init+0x1e8>)
 8006450:	7819      	ldrb	r1, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006458:	2340      	movs	r3, #64	@ 0x40
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f005 fbe0 	bl	800bc20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000097 	.word	0x20000097
 8006470:	20000098 	.word	0x20000098
 8006474:	20000099 	.word	0x20000099

08006478 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006484:	4b3a      	ldr	r3, [pc, #232]	@ (8006570 <USBD_CDC_DeInit+0xf8>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f005 faff 	bl	800ba8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006490:	4b37      	ldr	r3, [pc, #220]	@ (8006570 <USBD_CDC_DeInit+0xf8>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	3324      	adds	r3, #36	@ 0x24
 80064a6:	2200      	movs	r2, #0
 80064a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80064aa:	4b32      	ldr	r3, [pc, #200]	@ (8006574 <USBD_CDC_DeInit+0xfc>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f005 faec 	bl	800ba8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80064b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006574 <USBD_CDC_DeInit+0xfc>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 020f 	and.w	r2, r3, #15
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80064ce:	2200      	movs	r2, #0
 80064d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80064d2:	4b29      	ldr	r3, [pc, #164]	@ (8006578 <USBD_CDC_DeInit+0x100>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f005 fad8 	bl	800ba8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80064de:	4b26      	ldr	r3, [pc, #152]	@ (8006578 <USBD_CDC_DeInit+0x100>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f003 020f 	and.w	r2, r3, #15
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	3324      	adds	r3, #36	@ 0x24
 80064f4:	2200      	movs	r2, #0
 80064f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064f8:	4b1f      	ldr	r3, [pc, #124]	@ (8006578 <USBD_CDC_DeInit+0x100>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 020f 	and.w	r2, r3, #15
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	3326      	adds	r3, #38	@ 0x26
 800650e:	2200      	movs	r2, #0
 8006510:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	32b0      	adds	r2, #176	@ 0xb0
 800651c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01f      	beq.n	8006564 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	33b0      	adds	r3, #176	@ 0xb0
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	32b0      	adds	r2, #176	@ 0xb0
 8006542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006546:	4618      	mov	r0, r3
 8006548:	f005 fbac 	bl	800bca4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	32b0      	adds	r2, #176	@ 0xb0
 8006556:	2100      	movs	r1, #0
 8006558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000097 	.word	0x20000097
 8006574:	20000098 	.word	0x20000098
 8006578:	20000099 	.word	0x20000099

0800657c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	32b0      	adds	r2, #176	@ 0xb0
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0bf      	b.n	800672c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d050      	beq.n	800665a <USBD_CDC_Setup+0xde>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	f040 80af 	bne.w	800671c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	88db      	ldrh	r3, [r3, #6]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d03a      	beq.n	800663c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b25b      	sxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da1b      	bge.n	8006608 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	33b0      	adds	r3, #176	@ 0xb0
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80065e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	88d2      	ldrh	r2, [r2, #6]
 80065ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	2b07      	cmp	r3, #7
 80065f4:	bf28      	it	cs
 80065f6:	2307      	movcs	r3, #7
 80065f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	89fa      	ldrh	r2, [r7, #14]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fd47 	bl	8008094 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006606:	e090      	b.n	800672a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	785a      	ldrb	r2, [r3, #1]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	88db      	ldrh	r3, [r3, #6]
 8006616:	2b3f      	cmp	r3, #63	@ 0x3f
 8006618:	d803      	bhi.n	8006622 <USBD_CDC_Setup+0xa6>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	b2da      	uxtb	r2, r3
 8006620:	e000      	b.n	8006624 <USBD_CDC_Setup+0xa8>
 8006622:	2240      	movs	r2, #64	@ 0x40
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800662a:	6939      	ldr	r1, [r7, #16]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006632:	461a      	mov	r2, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fd59 	bl	80080ec <USBD_CtlPrepareRx>
      break;
 800663a:	e076      	b.n	800672a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	33b0      	adds	r3, #176	@ 0xb0
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	7850      	ldrb	r0, [r2, #1]
 8006652:	2200      	movs	r2, #0
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	4798      	blx	r3
      break;
 8006658:	e067      	b.n	800672a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b0b      	cmp	r3, #11
 8006660:	d851      	bhi.n	8006706 <USBD_CDC_Setup+0x18a>
 8006662:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <USBD_CDC_Setup+0xec>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006699 	.word	0x08006699
 800666c:	08006715 	.word	0x08006715
 8006670:	08006707 	.word	0x08006707
 8006674:	08006707 	.word	0x08006707
 8006678:	08006707 	.word	0x08006707
 800667c:	08006707 	.word	0x08006707
 8006680:	08006707 	.word	0x08006707
 8006684:	08006707 	.word	0x08006707
 8006688:	08006707 	.word	0x08006707
 800668c:	08006707 	.word	0x08006707
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066ed 	.word	0x080066ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d107      	bne.n	80066b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066a4:	f107 030a 	add.w	r3, r7, #10
 80066a8:	2202      	movs	r2, #2
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 fcf1 	bl	8008094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066b2:	e032      	b.n	800671a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fc7b 	bl	8007fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	75fb      	strb	r3, [r7, #23]
          break;
 80066c0:	e02b      	b.n	800671a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d107      	bne.n	80066de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066ce:	f107 030d 	add.w	r3, r7, #13
 80066d2:	2201      	movs	r2, #1
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fcdc 	bl	8008094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066dc:	e01d      	b.n	800671a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fc66 	bl	8007fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ea:	e016      	b.n	800671a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d00f      	beq.n	8006718 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fc59 	bl	8007fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006704:	e008      	b.n	8006718 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 fc52 	bl	8007fb2 <USBD_CtlError>
          ret = USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	75fb      	strb	r3, [r7, #23]
          break;
 8006712:	e002      	b.n	800671a <USBD_CDC_Setup+0x19e>
          break;
 8006714:	bf00      	nop
 8006716:	e008      	b.n	800672a <USBD_CDC_Setup+0x1ae>
          break;
 8006718:	bf00      	nop
      }
      break;
 800671a:	e006      	b.n	800672a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 fc47 	bl	8007fb2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006724:	2303      	movs	r3, #3
 8006726:	75fb      	strb	r3, [r7, #23]
      break;
 8006728:	bf00      	nop
  }

  return (uint8_t)ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006746:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	32b0      	adds	r2, #176	@ 0xb0
 8006752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	e065      	b.n	800682a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	32b0      	adds	r2, #176	@ 0xb0
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	3318      	adds	r3, #24
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d02f      	beq.n	80067e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	3318      	adds	r3, #24
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	f003 010f 	and.w	r1, r3, #15
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	460b      	mov	r3, r1
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	440b      	add	r3, r1
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4403      	add	r3, r0
 80067b0:	331c      	adds	r3, #28
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d112      	bne.n	80067e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	f003 020f 	and.w	r2, r3, #15
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	440b      	add	r3, r1
 80067d4:	3318      	adds	r3, #24
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067da:	78f9      	ldrb	r1, [r7, #3]
 80067dc:	2300      	movs	r3, #0
 80067de:	2200      	movs	r2, #0
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f005 f9fc 	bl	800bbde <USBD_LL_Transmit>
 80067e6:	e01f      	b.n	8006828 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	33b0      	adds	r3, #176	@ 0xb0
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d010      	beq.n	8006828 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	33b0      	adds	r3, #176	@ 0xb0
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	32b0      	adds	r2, #176	@ 0xb0
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	32b0      	adds	r2, #176	@ 0xb0
 8006858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006860:	2303      	movs	r3, #3
 8006862:	e01a      	b.n	800689a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f005 f9fa 	bl	800bc62 <USBD_LL_GetRxDataSize>
 800686e:	4602      	mov	r2, r0
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	33b0      	adds	r3, #176	@ 0xb0
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006894:	4611      	mov	r1, r2
 8006896:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32b0      	adds	r2, #176	@ 0xb0
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e024      	b.n	800690e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	33b0      	adds	r3, #176	@ 0xb0
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d019      	beq.n	800690c <USBD_CDC_EP0_RxReady+0x6a>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80068de:	2bff      	cmp	r3, #255	@ 0xff
 80068e0:	d014      	beq.n	800690c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	33b0      	adds	r3, #176	@ 0xb0
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80068fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006902:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	22ff      	movs	r2, #255	@ 0xff
 8006908:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006920:	2182      	movs	r1, #130	@ 0x82
 8006922:	4818      	ldr	r0, [pc, #96]	@ (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006924:	f000 fd0f 	bl	8007346 <USBD_GetEpDesc>
 8006928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800692a:	2101      	movs	r1, #1
 800692c:	4815      	ldr	r0, [pc, #84]	@ (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800692e:	f000 fd0a 	bl	8007346 <USBD_GetEpDesc>
 8006932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006934:	2181      	movs	r1, #129	@ 0x81
 8006936:	4813      	ldr	r0, [pc, #76]	@ (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006938:	f000 fd05 	bl	8007346 <USBD_GetEpDesc>
 800693c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2210      	movs	r2, #16
 8006948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2200      	movs	r2, #0
 8006954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006958:	711a      	strb	r2, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d006      	beq.n	8006972 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800696c:	711a      	strb	r2, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2243      	movs	r2, #67	@ 0x43
 8006976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006978:	4b02      	ldr	r3, [pc, #8]	@ (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000054 	.word	0x20000054

08006988 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006990:	2182      	movs	r1, #130	@ 0x82
 8006992:	4818      	ldr	r0, [pc, #96]	@ (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006994:	f000 fcd7 	bl	8007346 <USBD_GetEpDesc>
 8006998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800699a:	2101      	movs	r1, #1
 800699c:	4815      	ldr	r0, [pc, #84]	@ (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800699e:	f000 fcd2 	bl	8007346 <USBD_GetEpDesc>
 80069a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069a4:	2181      	movs	r1, #129	@ 0x81
 80069a6:	4813      	ldr	r0, [pc, #76]	@ (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069a8:	f000 fccd 	bl	8007346 <USBD_GetEpDesc>
 80069ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2210      	movs	r2, #16
 80069b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2200      	movs	r2, #0
 80069c4:	711a      	strb	r2, [r3, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f042 0202 	orr.w	r2, r2, #2
 80069cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	711a      	strb	r2, [r3, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f042 0202 	orr.w	r2, r2, #2
 80069e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2243      	movs	r2, #67	@ 0x43
 80069e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069e8:	4b02      	ldr	r3, [pc, #8]	@ (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000054 	.word	0x20000054

080069f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a00:	2182      	movs	r1, #130	@ 0x82
 8006a02:	4818      	ldr	r0, [pc, #96]	@ (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a04:	f000 fc9f 	bl	8007346 <USBD_GetEpDesc>
 8006a08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4815      	ldr	r0, [pc, #84]	@ (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a0e:	f000 fc9a 	bl	8007346 <USBD_GetEpDesc>
 8006a12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a14:	2181      	movs	r1, #129	@ 0x81
 8006a16:	4813      	ldr	r0, [pc, #76]	@ (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a18:	f000 fc95 	bl	8007346 <USBD_GetEpDesc>
 8006a1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2210      	movs	r2, #16
 8006a28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a38:	711a      	strb	r2, [r3, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d006      	beq.n	8006a52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a4c:	711a      	strb	r2, [r3, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2243      	movs	r2, #67	@ 0x43
 8006a56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a58:	4b02      	ldr	r3, [pc, #8]	@ (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000054 	.word	0x20000054

08006a68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	220a      	movs	r2, #10
 8006a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a76:	4b03      	ldr	r3, [pc, #12]	@ (8006a84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000010 	.word	0x20000010

08006a88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e009      	b.n	8006ab0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	33b0      	adds	r3, #176	@ 0xb0
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	32b0      	adds	r2, #176	@ 0xb0
 8006ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e008      	b.n	8006af4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	32b0      	adds	r2, #176	@ 0xb0
 8006b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e004      	b.n	8006b2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32b0      	adds	r2, #176	@ 0xb0
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	32b0      	adds	r2, #176	@ 0xb0
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e018      	b.n	8006b9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7c1b      	ldrb	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <USBD_CDC_ReceivePacket+0x68>)
 8006b74:	7819      	ldrb	r1, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f005 f84d 	bl	800bc20 <USBD_LL_PrepareReceive>
 8006b86:	e008      	b.n	8006b9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b88:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <USBD_CDC_ReceivePacket+0x68>)
 8006b8a:	7819      	ldrb	r1, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b92:	2340      	movs	r3, #64	@ 0x40
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f005 f843 	bl	800bc20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000098 	.word	0x20000098

08006ba8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e01f      	b.n	8006c00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	79fa      	ldrb	r2, [r7, #7]
 8006bf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f004 febd 	bl	800b974 <USBD_LL_Init>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e025      	b.n	8006c6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	32ae      	adds	r2, #174	@ 0xae
 8006c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00f      	beq.n	8006c5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	32ae      	adds	r2, #174	@ 0xae
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4c:	f107 020e 	add.w	r2, r7, #14
 8006c50:	4610      	mov	r0, r2
 8006c52:	4798      	blx	r3
 8006c54:	4602      	mov	r2, r0
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f004 fec5 	bl	800ba0c <USBD_LL_Start>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	78fa      	ldrb	r2, [r7, #3]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d00:	2303      	movs	r3, #3
 8006d02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 f90c 	bl	8007f3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d01a      	beq.n	8006d80 <USBD_LL_SetupStage+0x72>
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d822      	bhi.n	8006d94 <USBD_LL_SetupStage+0x86>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <USBD_LL_SetupStage+0x4a>
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d00a      	beq.n	8006d6c <USBD_LL_SetupStage+0x5e>
 8006d56:	e01d      	b.n	8006d94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb63 	bl	800742c <USBD_StdDevReq>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6a:	e020      	b.n	8006dae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fbcb 	bl	8007510 <USBD_StdItfReq>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7e:	e016      	b.n	8006dae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fc2d 	bl	80075e8 <USBD_StdEPReq>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73fb      	strb	r3, [r7, #15]
      break;
 8006d92:	e00c      	b.n	8006dae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f004 fe92 	bl	800bacc <USBD_LL_StallEP>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	bf00      	nop
  }

  return ret;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d16e      	bne.n	8006eae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006dd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	f040 8098 	bne.w	8006f14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d913      	bls.n	8006e18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	1ad2      	subs	r2, r2, r3
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	bf28      	it	cs
 8006e0a:	4613      	movcs	r3, r2
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f001 f988 	bl	8008126 <USBD_CtlContinueRx>
 8006e16:	e07d      	b.n	8006f14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d014      	beq.n	8006e50 <USBD_LL_DataOutStage+0x98>
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d81d      	bhi.n	8006e66 <USBD_LL_DataOutStage+0xae>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <USBD_LL_DataOutStage+0x7c>
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d003      	beq.n	8006e3a <USBD_LL_DataOutStage+0x82>
 8006e32:	e018      	b.n	8006e66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	75bb      	strb	r3, [r7, #22]
            break;
 8006e38:	e018      	b.n	8006e6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	4619      	mov	r1, r3
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fa64 	bl	8007312 <USBD_CoreFindIF>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e4e:	e00d      	b.n	8006e6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	4619      	mov	r1, r3
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fa66 	bl	800732c <USBD_CoreFindEP>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75bb      	strb	r3, [r7, #22]
            break;
 8006e64:	e002      	b.n	8006e6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75bb      	strb	r3, [r7, #22]
            break;
 8006e6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e6c:	7dbb      	ldrb	r3, [r7, #22]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d119      	bne.n	8006ea6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d113      	bne.n	8006ea6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e7e:	7dba      	ldrb	r2, [r7, #22]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	32ae      	adds	r2, #174	@ 0xae
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e8e:	7dba      	ldrb	r2, [r7, #22]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e96:	7dba      	ldrb	r2, [r7, #22]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	32ae      	adds	r2, #174	@ 0xae
 8006e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 f94e 	bl	8008148 <USBD_CtlSendStatus>
 8006eac:	e032      	b.n	8006f14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006eae:	7afb      	ldrb	r3, [r7, #11]
 8006eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fa37 	bl	800732c <USBD_CoreFindEP>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ec2:	7dbb      	ldrb	r3, [r7, #22]
 8006ec4:	2bff      	cmp	r3, #255	@ 0xff
 8006ec6:	d025      	beq.n	8006f14 <USBD_LL_DataOutStage+0x15c>
 8006ec8:	7dbb      	ldrb	r3, [r7, #22]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d122      	bne.n	8006f14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d117      	bne.n	8006f0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006eda:	7dba      	ldrb	r2, [r7, #22]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	32ae      	adds	r2, #174	@ 0xae
 8006ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00f      	beq.n	8006f0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006eea:	7dba      	ldrb	r2, [r7, #22]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ef2:	7dba      	ldrb	r2, [r7, #22]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	32ae      	adds	r2, #174	@ 0xae
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	7afa      	ldrb	r2, [r7, #11]
 8006f00:	4611      	mov	r1, r2
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	4798      	blx	r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	e000      	b.n	8006f16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	460b      	mov	r3, r1
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f2c:	7afb      	ldrb	r3, [r7, #11]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d16f      	bne.n	8007012 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3314      	adds	r3, #20
 8006f36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d15a      	bne.n	8006ff8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d914      	bls.n	8006f78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f001 f8b0 	bl	80080ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f004 fe55 	bl	800bc20 <USBD_LL_PrepareReceive>
 8006f76:	e03f      	b.n	8006ff8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d11c      	bne.n	8006fbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d316      	bcc.n	8006fbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d20f      	bcs.n	8006fbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f001 f891 	bl	80080ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f004 fe32 	bl	800bc20 <USBD_LL_PrepareReceive>
 8006fbc:	e01c      	b.n	8006ff8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d10f      	bne.n	8006fea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fea:	2180      	movs	r1, #128	@ 0x80
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f004 fd6d 	bl	800bacc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f001 f8bb 	bl	800816e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d03a      	beq.n	8007078 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff fe42 	bl	8006c8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007010:	e032      	b.n	8007078 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4619      	mov	r1, r3
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f985 	bl	800732c <USBD_CoreFindEP>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	2bff      	cmp	r3, #255	@ 0xff
 800702a:	d025      	beq.n	8007078 <USBD_LL_DataInStage+0x15a>
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d122      	bne.n	8007078 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d11c      	bne.n	8007078 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800703e:	7dfa      	ldrb	r2, [r7, #23]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	32ae      	adds	r2, #174	@ 0xae
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d014      	beq.n	8007078 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800704e:	7dfa      	ldrb	r2, [r7, #23]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007056:	7dfa      	ldrb	r2, [r7, #23]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	32ae      	adds	r2, #174	@ 0xae
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	7afa      	ldrb	r2, [r7, #11]
 8007064:	4611      	mov	r1, r2
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	4798      	blx	r3
 800706a:	4603      	mov	r3, r0
 800706c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800706e:	7dbb      	ldrb	r3, [r7, #22]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007074:	7dbb      	ldrb	r3, [r7, #22]
 8007076:	e000      	b.n	800707a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d014      	beq.n	80070e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6852      	ldr	r2, [r2, #4]
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	4611      	mov	r1, r2
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070e8:	2340      	movs	r3, #64	@ 0x40
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f004 fca7 	bl	800ba42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2240      	movs	r2, #64	@ 0x40
 8007100:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007104:	2340      	movs	r3, #64	@ 0x40
 8007106:	2200      	movs	r2, #0
 8007108:	2180      	movs	r1, #128	@ 0x80
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f004 fc99 	bl	800ba42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2240      	movs	r2, #64	@ 0x40
 800711a:	621a      	str	r2, [r3, #32]

  return ret;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	78fa      	ldrb	r2, [r7, #3]
 8007136:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b04      	cmp	r3, #4
 8007158:	d006      	beq.n	8007168 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007160:	b2da      	uxtb	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2204      	movs	r2, #4
 800716c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b04      	cmp	r3, #4
 8007190:	d106      	bne.n	80071a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d110      	bne.n	80071e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32ae      	adds	r2, #174	@ 0xae
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	e01c      	b.n	800724a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b03      	cmp	r3, #3
 800721a:	d115      	bne.n	8007248 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32ae      	adds	r2, #174	@ 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32ae      	adds	r2, #174	@ 0xae
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	78fa      	ldrb	r2, [r7, #3]
 8007242:	4611      	mov	r1, r2
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	32ae      	adds	r2, #174	@ 0xae
 8007268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	e01c      	b.n	80072ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d115      	bne.n	80072ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32ae      	adds	r2, #174	@ 0xae
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	32ae      	adds	r2, #174	@ 0xae
 800729e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	4611      	mov	r1, r2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6852      	ldr	r2, [r2, #4]
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	4611      	mov	r1, r2
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800731e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007338:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	885b      	ldrh	r3, [r3, #2]
 8007362:	b29b      	uxth	r3, r3
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	4293      	cmp	r3, r2
 800736a:	d91f      	bls.n	80073ac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007372:	e013      	b.n	800739c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007374:	f107 030a 	add.w	r3, r7, #10
 8007378:	4619      	mov	r1, r3
 800737a:	6978      	ldr	r0, [r7, #20]
 800737c:	f000 f81b 	bl	80073b6 <USBD_GetNextDesc>
 8007380:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b05      	cmp	r3, #5
 8007388:	d108      	bne.n	800739c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	789b      	ldrb	r3, [r3, #2]
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	429a      	cmp	r2, r3
 8007396:	d008      	beq.n	80073aa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	885b      	ldrh	r3, [r3, #2]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	897b      	ldrh	r3, [r7, #10]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d8e5      	bhi.n	8007374 <USBD_GetEpDesc+0x2e>
 80073a8:	e000      	b.n	80073ac <USBD_GetEpDesc+0x66>
          break;
 80073aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073ac:	693b      	ldr	r3, [r7, #16]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	4413      	add	r3, r2
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073e0:	68fb      	ldr	r3, [r7, #12]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b087      	sub	sp, #28
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	3301      	adds	r3, #1
 8007404:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800740c:	8a3b      	ldrh	r3, [r7, #16]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	b21a      	sxth	r2, r3
 8007412:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007416:	4313      	orrs	r3, r2
 8007418:	b21b      	sxth	r3, r3
 800741a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800741c:	89fb      	ldrh	r3, [r7, #14]
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007442:	2b40      	cmp	r3, #64	@ 0x40
 8007444:	d005      	beq.n	8007452 <USBD_StdDevReq+0x26>
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d857      	bhi.n	80074fa <USBD_StdDevReq+0xce>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00f      	beq.n	800746e <USBD_StdDevReq+0x42>
 800744e:	2b20      	cmp	r3, #32
 8007450:	d153      	bne.n	80074fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	32ae      	adds	r2, #174	@ 0xae
 800745c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
      break;
 800746c:	e04a      	b.n	8007504 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	2b09      	cmp	r3, #9
 8007474:	d83b      	bhi.n	80074ee <USBD_StdDevReq+0xc2>
 8007476:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <USBD_StdDevReq+0x50>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	080074d1 	.word	0x080074d1
 8007480:	080074e5 	.word	0x080074e5
 8007484:	080074ef 	.word	0x080074ef
 8007488:	080074db 	.word	0x080074db
 800748c:	080074ef 	.word	0x080074ef
 8007490:	080074af 	.word	0x080074af
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074ef 	.word	0x080074ef
 800749c:	080074c7 	.word	0x080074c7
 80074a0:	080074b9 	.word	0x080074b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa3c 	bl	8007924 <USBD_GetDescriptor>
          break;
 80074ac:	e024      	b.n	80074f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fba1 	bl	8007bf8 <USBD_SetAddress>
          break;
 80074b6:	e01f      	b.n	80074f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fbe0 	bl	8007c80 <USBD_SetConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]
          break;
 80074c4:	e018      	b.n	80074f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fc83 	bl	8007dd4 <USBD_GetConfig>
          break;
 80074ce:	e013      	b.n	80074f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fcb4 	bl	8007e40 <USBD_GetStatus>
          break;
 80074d8:	e00e      	b.n	80074f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fce3 	bl	8007ea8 <USBD_SetFeature>
          break;
 80074e2:	e009      	b.n	80074f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fd07 	bl	8007efa <USBD_ClrFeature>
          break;
 80074ec:	e004      	b.n	80074f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fd5e 	bl	8007fb2 <USBD_CtlError>
          break;
 80074f6:	bf00      	nop
      }
      break;
 80074f8:	e004      	b.n	8007504 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fd58 	bl	8007fb2 <USBD_CtlError>
      break;
 8007502:	bf00      	nop
  }

  return ret;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop

08007510 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007526:	2b40      	cmp	r3, #64	@ 0x40
 8007528:	d005      	beq.n	8007536 <USBD_StdItfReq+0x26>
 800752a:	2b40      	cmp	r3, #64	@ 0x40
 800752c:	d852      	bhi.n	80075d4 <USBD_StdItfReq+0xc4>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <USBD_StdItfReq+0x26>
 8007532:	2b20      	cmp	r3, #32
 8007534:	d14e      	bne.n	80075d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	2b02      	cmp	r3, #2
 8007542:	d840      	bhi.n	80075c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	889b      	ldrh	r3, [r3, #4]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b01      	cmp	r3, #1
 800754c:	d836      	bhi.n	80075bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	889b      	ldrh	r3, [r3, #4]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff fedb 	bl	8007312 <USBD_CoreFindIF>
 800755c:	4603      	mov	r3, r0
 800755e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2bff      	cmp	r3, #255	@ 0xff
 8007564:	d01d      	beq.n	80075a2 <USBD_StdItfReq+0x92>
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d11a      	bne.n	80075a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800756c:	7bba      	ldrb	r2, [r7, #14]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32ae      	adds	r2, #174	@ 0xae
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00f      	beq.n	800759c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800757c:	7bba      	ldrb	r2, [r7, #14]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007584:	7bba      	ldrb	r2, [r7, #14]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	32ae      	adds	r2, #174	@ 0xae
 800758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800759a:	e004      	b.n	80075a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075a0:	e001      	b.n	80075a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075a2:	2303      	movs	r3, #3
 80075a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d110      	bne.n	80075d0 <USBD_StdItfReq+0xc0>
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10d      	bne.n	80075d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fdc7 	bl	8008148 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ba:	e009      	b.n	80075d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fcf7 	bl	8007fb2 <USBD_CtlError>
          break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fcf2 	bl	8007fb2 <USBD_CtlError>
          break;
 80075ce:	e000      	b.n	80075d2 <USBD_StdItfReq+0xc2>
          break;
 80075d0:	bf00      	nop
      }
      break;
 80075d2:	e004      	b.n	80075de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fceb 	bl	8007fb2 <USBD_CtlError>
      break;
 80075dc:	bf00      	nop
  }

  return ret;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	889b      	ldrh	r3, [r3, #4]
 80075fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007604:	2b40      	cmp	r3, #64	@ 0x40
 8007606:	d007      	beq.n	8007618 <USBD_StdEPReq+0x30>
 8007608:	2b40      	cmp	r3, #64	@ 0x40
 800760a:	f200 817f 	bhi.w	800790c <USBD_StdEPReq+0x324>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d02a      	beq.n	8007668 <USBD_StdEPReq+0x80>
 8007612:	2b20      	cmp	r3, #32
 8007614:	f040 817a 	bne.w	800790c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff fe85 	bl	800732c <USBD_CoreFindEP>
 8007622:	4603      	mov	r3, r0
 8007624:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007626:	7b7b      	ldrb	r3, [r7, #13]
 8007628:	2bff      	cmp	r3, #255	@ 0xff
 800762a:	f000 8174 	beq.w	8007916 <USBD_StdEPReq+0x32e>
 800762e:	7b7b      	ldrb	r3, [r7, #13]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 8170 	bne.w	8007916 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007636:	7b7a      	ldrb	r2, [r7, #13]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800763e:	7b7a      	ldrb	r2, [r7, #13]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	32ae      	adds	r2, #174	@ 0xae
 8007644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 8163 	beq.w	8007916 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007650:	7b7a      	ldrb	r2, [r7, #13]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32ae      	adds	r2, #174	@ 0xae
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
 8007662:	4603      	mov	r3, r0
 8007664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007666:	e156      	b.n	8007916 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d008      	beq.n	8007682 <USBD_StdEPReq+0x9a>
 8007670:	2b03      	cmp	r3, #3
 8007672:	f300 8145 	bgt.w	8007900 <USBD_StdEPReq+0x318>
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 809b 	beq.w	80077b2 <USBD_StdEPReq+0x1ca>
 800767c:	2b01      	cmp	r3, #1
 800767e:	d03c      	beq.n	80076fa <USBD_StdEPReq+0x112>
 8007680:	e13e      	b.n	8007900 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d002      	beq.n	8007694 <USBD_StdEPReq+0xac>
 800768e:	2b03      	cmp	r3, #3
 8007690:	d016      	beq.n	80076c0 <USBD_StdEPReq+0xd8>
 8007692:	e02c      	b.n	80076ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00d      	beq.n	80076b6 <USBD_StdEPReq+0xce>
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b80      	cmp	r3, #128	@ 0x80
 800769e:	d00a      	beq.n	80076b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f004 fa11 	bl	800bacc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076aa:	2180      	movs	r1, #128	@ 0x80
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f004 fa0d 	bl	800bacc <USBD_LL_StallEP>
 80076b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076b4:	e020      	b.n	80076f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc7a 	bl	8007fb2 <USBD_CtlError>
              break;
 80076be:	e01b      	b.n	80076f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	885b      	ldrh	r3, [r3, #2]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10e      	bne.n	80076e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <USBD_StdEPReq+0xfe>
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b80      	cmp	r3, #128	@ 0x80
 80076d2:	d008      	beq.n	80076e6 <USBD_StdEPReq+0xfe>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	88db      	ldrh	r3, [r3, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d104      	bne.n	80076e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f004 f9f3 	bl	800bacc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fd2e 	bl	8008148 <USBD_CtlSendStatus>

              break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc5e 	bl	8007fb2 <USBD_CtlError>
              break;
 80076f6:	bf00      	nop
          }
          break;
 80076f8:	e107      	b.n	800790a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d002      	beq.n	800770c <USBD_StdEPReq+0x124>
 8007706:	2b03      	cmp	r3, #3
 8007708:	d016      	beq.n	8007738 <USBD_StdEPReq+0x150>
 800770a:	e04b      	b.n	80077a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <USBD_StdEPReq+0x146>
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b80      	cmp	r3, #128	@ 0x80
 8007716:	d00a      	beq.n	800772e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f004 f9d5 	bl	800bacc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007722:	2180      	movs	r1, #128	@ 0x80
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f004 f9d1 	bl	800bacc <USBD_LL_StallEP>
 800772a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800772c:	e040      	b.n	80077b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fc3e 	bl	8007fb2 <USBD_CtlError>
              break;
 8007736:	e03b      	b.n	80077b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d136      	bne.n	80077ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f004 f9db 	bl	800bb0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fcf7 	bl	8008148 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7ff fde4 	bl	800732c <USBD_CoreFindEP>
 8007764:	4603      	mov	r3, r0
 8007766:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007768:	7b7b      	ldrb	r3, [r7, #13]
 800776a:	2bff      	cmp	r3, #255	@ 0xff
 800776c:	d01f      	beq.n	80077ae <USBD_StdEPReq+0x1c6>
 800776e:	7b7b      	ldrb	r3, [r7, #13]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d11c      	bne.n	80077ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007774:	7b7a      	ldrb	r2, [r7, #13]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800777c:	7b7a      	ldrb	r2, [r7, #13]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	32ae      	adds	r2, #174	@ 0xae
 8007782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d010      	beq.n	80077ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800778c:	7b7a      	ldrb	r2, [r7, #13]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32ae      	adds	r2, #174	@ 0xae
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4798      	blx	r3
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077a2:	e004      	b.n	80077ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fc03 	bl	8007fb2 <USBD_CtlError>
              break;
 80077ac:	e000      	b.n	80077b0 <USBD_StdEPReq+0x1c8>
              break;
 80077ae:	bf00      	nop
          }
          break;
 80077b0:	e0ab      	b.n	800790a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d002      	beq.n	80077c4 <USBD_StdEPReq+0x1dc>
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d032      	beq.n	8007828 <USBD_StdEPReq+0x240>
 80077c2:	e097      	b.n	80078f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <USBD_StdEPReq+0x1f2>
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b80      	cmp	r3, #128	@ 0x80
 80077ce:	d004      	beq.n	80077da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbed 	bl	8007fb2 <USBD_CtlError>
                break;
 80077d8:	e091      	b.n	80078fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da0b      	bge.n	80077fa <USBD_StdEPReq+0x212>
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	3310      	adds	r3, #16
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	3304      	adds	r3, #4
 80077f8:	e00b      	b.n	8007812 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	3304      	adds	r3, #4
 8007812:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2202      	movs	r2, #2
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fc37 	bl	8008094 <USBD_CtlSendData>
              break;
 8007826:	e06a      	b.n	80078fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da11      	bge.n	8007854 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	f003 020f 	and.w	r2, r3, #15
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	3324      	adds	r3, #36	@ 0x24
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d117      	bne.n	800787a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fbb0 	bl	8007fb2 <USBD_CtlError>
                  break;
 8007852:	e054      	b.n	80078fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	f003 020f 	and.w	r2, r3, #15
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fb9d 	bl	8007fb2 <USBD_CtlError>
                  break;
 8007878:	e041      	b.n	80078fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800787a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800787e:	2b00      	cmp	r3, #0
 8007880:	da0b      	bge.n	800789a <USBD_StdEPReq+0x2b2>
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	3310      	adds	r3, #16
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	4413      	add	r3, r2
 8007896:	3304      	adds	r3, #4
 8007898:	e00b      	b.n	80078b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	3304      	adds	r3, #4
 80078b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <USBD_StdEPReq+0x2d8>
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b80      	cmp	r3, #128	@ 0x80
 80078be:	d103      	bne.n	80078c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e00e      	b.n	80078e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f004 f93b 	bl	800bb48 <USBD_LL_IsStallEP>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e002      	b.n	80078e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2202      	movs	r2, #2
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fbd1 	bl	8008094 <USBD_CtlSendData>
              break;
 80078f2:	e004      	b.n	80078fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb5b 	bl	8007fb2 <USBD_CtlError>
              break;
 80078fc:	bf00      	nop
          }
          break;
 80078fe:	e004      	b.n	800790a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb55 	bl	8007fb2 <USBD_CtlError>
          break;
 8007908:	bf00      	nop
      }
      break;
 800790a:	e005      	b.n	8007918 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fb4f 	bl	8007fb2 <USBD_CtlError>
      break;
 8007914:	e000      	b.n	8007918 <USBD_StdEPReq+0x330>
      break;
 8007916:	bf00      	nop
  }

  return ret;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	885b      	ldrh	r3, [r3, #2]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	2b06      	cmp	r3, #6
 8007946:	f200 8128 	bhi.w	8007b9a <USBD_GetDescriptor+0x276>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <USBD_GetDescriptor+0x2c>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	0800796d 	.word	0x0800796d
 8007954:	08007985 	.word	0x08007985
 8007958:	080079c5 	.word	0x080079c5
 800795c:	08007b9b 	.word	0x08007b9b
 8007960:	08007b9b 	.word	0x08007b9b
 8007964:	08007b3b 	.word	0x08007b3b
 8007968:	08007b67 	.word	0x08007b67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	7c12      	ldrb	r2, [r2, #16]
 8007978:	f107 0108 	add.w	r1, r7, #8
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
 8007980:	60f8      	str	r0, [r7, #12]
      break;
 8007982:	e112      	b.n	8007baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7c1b      	ldrb	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	f107 0208 	add.w	r2, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3301      	adds	r3, #1
 80079a2:	2202      	movs	r2, #2
 80079a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079a6:	e100      	b.n	8007baa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	f107 0208 	add.w	r2, r7, #8
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
 80079b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3301      	adds	r3, #1
 80079be:	2202      	movs	r2, #2
 80079c0:	701a      	strb	r2, [r3, #0]
      break;
 80079c2:	e0f2      	b.n	8007baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	f200 80ac 	bhi.w	8007b28 <USBD_GetDescriptor+0x204>
 80079d0:	a201      	add	r2, pc, #4	@ (adr r2, 80079d8 <USBD_GetDescriptor+0xb4>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	08007a25 	.word	0x08007a25
 80079e0:	08007a59 	.word	0x08007a59
 80079e4:	08007a8d 	.word	0x08007a8d
 80079e8:	08007ac1 	.word	0x08007ac1
 80079ec:	08007af5 	.word	0x08007af5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e091      	b.n	8007b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 facb 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e089      	b.n	8007b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a46:	e077      	b.n	8007b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fab1 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
          break;
 8007a56:	e06f      	b.n	8007b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	7c12      	ldrb	r2, [r2, #16]
 8007a70:	f107 0108 	add.w	r1, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7a:	e05d      	b.n	8007b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa97 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8a:	e055      	b.n	8007b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e043      	b.n	8007b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa7d 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e03b      	b.n	8007b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae2:	e029      	b.n	8007b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa63 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
          break;
 8007af2:	e021      	b.n	8007b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e00f      	b.n	8007b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa49 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e007      	b.n	8007b38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa41 	bl	8007fb2 <USBD_CtlError>
          err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b36:	bf00      	nop
      }
      break;
 8007b38:	e037      	b.n	8007baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7c1b      	ldrb	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4a:	f107 0208 	add.w	r2, r7, #8
 8007b4e:	4610      	mov	r0, r2
 8007b50:	4798      	blx	r3
 8007b52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b54:	e029      	b.n	8007baa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fa2a 	bl	8007fb2 <USBD_CtlError>
        err++;
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	3301      	adds	r3, #1
 8007b62:	72fb      	strb	r3, [r7, #11]
      break;
 8007b64:	e021      	b.n	8007baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7c1b      	ldrb	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	f107 0208 	add.w	r2, r7, #8
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4798      	blx	r3
 8007b7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	2207      	movs	r2, #7
 8007b86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b88:	e00f      	b.n	8007baa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fa10 	bl	8007fb2 <USBD_CtlError>
        err++;
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	3301      	adds	r3, #1
 8007b96:	72fb      	strb	r3, [r7, #11]
      break;
 8007b98:	e007      	b.n	8007baa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa08 	bl	8007fb2 <USBD_CtlError>
      err++;
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba8:	bf00      	nop
  }

  if (err != 0U)
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d11e      	bne.n	8007bee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	88db      	ldrh	r3, [r3, #6]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d016      	beq.n	8007be6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bb8:	893b      	ldrh	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88da      	ldrh	r2, [r3, #6]
 8007bc2:	893b      	ldrh	r3, [r7, #8]
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bf28      	it	cs
 8007bc8:	4613      	movcs	r3, r2
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bce:	893b      	ldrh	r3, [r7, #8]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa5d 	bl	8008094 <USBD_CtlSendData>
 8007bda:	e009      	b.n	8007bf0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f9e7 	bl	8007fb2 <USBD_CtlError>
 8007be4:	e004      	b.n	8007bf0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 faae 	bl	8008148 <USBD_CtlSendStatus>
 8007bec:	e000      	b.n	8007bf0 <USBD_GetDescriptor+0x2cc>
    return;
 8007bee:	bf00      	nop
  }
}
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop

08007bf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	889b      	ldrh	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d131      	bne.n	8007c6e <USBD_SetAddress+0x76>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	88db      	ldrh	r3, [r3, #6]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d12d      	bne.n	8007c6e <USBD_SetAddress+0x76>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c18:	d829      	bhi.n	8007c6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d104      	bne.n	8007c3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9bc 	bl	8007fb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	e01d      	b.n	8007c78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7bfa      	ldrb	r2, [r7, #15]
 8007c40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f003 ffa9 	bl	800bba0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa7a 	bl	8008148 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	e009      	b.n	8007c78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6c:	e004      	b.n	8007c78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f99e 	bl	8007fb2 <USBD_CtlError>
  }
}
 8007c76:	bf00      	nop
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	4b4e      	ldr	r3, [pc, #312]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007c96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c98:	4b4d      	ldr	r3, [pc, #308]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d905      	bls.n	8007cac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f985 	bl	8007fb2 <USBD_CtlError>
    return USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e08c      	b.n	8007dc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d002      	beq.n	8007cbe <USBD_SetConfig+0x3e>
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d029      	beq.n	8007d10 <USBD_SetConfig+0x90>
 8007cbc:	e075      	b.n	8007daa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cbe:	4b44      	ldr	r3, [pc, #272]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d020      	beq.n	8007d08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cc6:	4b42      	ldr	r3, [pc, #264]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fe ffe3 	bl	8006ca2 <USBD_SetClassConfig>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d008      	beq.n	8007cf8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f962 	bl	8007fb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cf6:	e065      	b.n	8007dc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa25 	bl	8008148 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2203      	movs	r2, #3
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d06:	e05d      	b.n	8007dc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fa1d 	bl	8008148 <USBD_CtlSendStatus>
      break;
 8007d0e:	e059      	b.n	8007dc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d10:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d112      	bne.n	8007d3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007d20:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d2a:	4b29      	ldr	r3, [pc, #164]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fe ffd2 	bl	8006cda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa06 	bl	8008148 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d3c:	e042      	b.n	8007dc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d3e:	4b24      	ldr	r3, [pc, #144]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d02a      	beq.n	8007da2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7fe ffc0 	bl	8006cda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d64:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fe ff99 	bl	8006ca2 <USBD_SetClassConfig>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f918 	bl	8007fb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe ffa5 	bl	8006cda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d98:	e014      	b.n	8007dc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9d4 	bl	8008148 <USBD_CtlSendStatus>
      break;
 8007da0:	e010      	b.n	8007dc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9d0 	bl	8008148 <USBD_CtlSendStatus>
      break;
 8007da8:	e00c      	b.n	8007dc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f900 	bl	8007fb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007db2:	4b07      	ldr	r3, [pc, #28]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fe ff8e 	bl	8006cda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc2:	bf00      	nop
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000318 	.word	0x20000318

08007dd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	88db      	ldrh	r3, [r3, #6]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d004      	beq.n	8007df0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8e2 	bl	8007fb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dee:	e023      	b.n	8007e38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	dc02      	bgt.n	8007e02 <USBD_GetConfig+0x2e>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dc03      	bgt.n	8007e08 <USBD_GetConfig+0x34>
 8007e00:	e015      	b.n	8007e2e <USBD_GetConfig+0x5a>
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d00b      	beq.n	8007e1e <USBD_GetConfig+0x4a>
 8007e06:	e012      	b.n	8007e2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3308      	adds	r3, #8
 8007e12:	2201      	movs	r2, #1
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f93c 	bl	8008094 <USBD_CtlSendData>
        break;
 8007e1c:	e00c      	b.n	8007e38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3304      	adds	r3, #4
 8007e22:	2201      	movs	r2, #1
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f934 	bl	8008094 <USBD_CtlSendData>
        break;
 8007e2c:	e004      	b.n	8007e38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f8be 	bl	8007fb2 <USBD_CtlError>
        break;
 8007e36:	bf00      	nop
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d81e      	bhi.n	8007e96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	88db      	ldrh	r3, [r3, #6]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d004      	beq.n	8007e6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f8a5 	bl	8007fb2 <USBD_CtlError>
        break;
 8007e68:	e01a      	b.n	8007ea0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f043 0202 	orr.w	r2, r3, #2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	330c      	adds	r3, #12
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f900 	bl	8008094 <USBD_CtlSendData>
      break;
 8007e94:	e004      	b.n	8007ea0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f88a 	bl	8007fb2 <USBD_CtlError>
      break;
 8007e9e:	bf00      	nop
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d107      	bne.n	8007eca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f940 	bl	8008148 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ec8:	e013      	b.n	8007ef2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	885b      	ldrh	r3, [r3, #2]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d10b      	bne.n	8007eea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f930 	bl	8008148 <USBD_CtlSendStatus>
}
 8007ee8:	e003      	b.n	8007ef2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f860 	bl	8007fb2 <USBD_CtlError>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d80b      	bhi.n	8007f2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d10c      	bne.n	8007f34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f910 	bl	8008148 <USBD_CtlSendStatus>
      }
      break;
 8007f28:	e004      	b.n	8007f34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f840 	bl	8007fb2 <USBD_CtlError>
      break;
 8007f32:	e000      	b.n	8007f36 <USBD_ClrFeature+0x3c>
      break;
 8007f34:	bf00      	nop
  }
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3301      	adds	r3, #1
 8007f66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff fa40 	bl	80073ee <SWAPBYTE>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fa33 	bl	80073ee <SWAPBYTE>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fa26 	bl	80073ee <SWAPBYTE>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	80da      	strh	r2, [r3, #6]
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fbc:	2180      	movs	r1, #128	@ 0x80
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f003 fd84 	bl	800bacc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f003 fd80 	bl	800bacc <USBD_LL_StallEP>
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d036      	beq.n	8008058 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fee:	6938      	ldr	r0, [r7, #16]
 8007ff0:	f000 f836 	bl	8008060 <USBD_GetLen>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4413      	add	r3, r2
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	701a      	strb	r2, [r3, #0]
  idx++;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	3301      	adds	r3, #1
 8008012:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4413      	add	r3, r2
 800801a:	2203      	movs	r2, #3
 800801c:	701a      	strb	r2, [r3, #0]
  idx++;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	3301      	adds	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008024:	e013      	b.n	800804e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	3301      	adds	r3, #1
 8008036:	613b      	str	r3, [r7, #16]
    idx++;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	3301      	adds	r3, #1
 800803c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	4413      	add	r3, r2
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
    idx++;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	3301      	adds	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e7      	bne.n	8008026 <USBD_GetString+0x52>
 8008056:	e000      	b.n	800805a <USBD_GetString+0x86>
    return;
 8008058:	bf00      	nop
  }
}
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008070:	e005      	b.n	800807e <USBD_GetLen+0x1e>
  {
    len++;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	3301      	adds	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	3301      	adds	r3, #1
 800807c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f5      	bne.n	8008072 <USBD_GetLen+0x12>
  }

  return len;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f003 fd8f 	bl	800bbde <USBD_LL_Transmit>

  return USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	2100      	movs	r1, #0
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f003 fd7e 	bl	800bbde <USBD_LL_Transmit>

  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2203      	movs	r2, #3
 80080fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	2100      	movs	r1, #0
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f003 fd82 	bl	800bc20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	2100      	movs	r1, #0
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f003 fd71 	bl	800bc20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2204      	movs	r2, #4
 8008154:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008158:	2300      	movs	r3, #0
 800815a:	2200      	movs	r2, #0
 800815c:	2100      	movs	r1, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f003 fd3d 	bl	800bbde <USBD_LL_Transmit>

  return USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2205      	movs	r2, #5
 800817a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800817e:	2300      	movs	r3, #0
 8008180:	2200      	movs	r2, #0
 8008182:	2100      	movs	r1, #0
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f003 fd4b 	bl	800bc20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <__NVIC_SetPriority>:
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db0a      	blt.n	80081be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	490c      	ldr	r1, [pc, #48]	@ (80081e0 <__NVIC_SetPriority+0x4c>)
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	0112      	lsls	r2, r2, #4
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	440b      	add	r3, r1
 80081b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80081bc:	e00a      	b.n	80081d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	4908      	ldr	r1, [pc, #32]	@ (80081e4 <__NVIC_SetPriority+0x50>)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	3b04      	subs	r3, #4
 80081cc:	0112      	lsls	r2, r2, #4
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	440b      	add	r3, r1
 80081d2:	761a      	strb	r2, [r3, #24]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	e000e100 	.word	0xe000e100
 80081e4:	e000ed00 	.word	0xe000ed00

080081e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081ec:	4b05      	ldr	r3, [pc, #20]	@ (8008204 <SysTick_Handler+0x1c>)
 80081ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081f0:	f001 fe14 	bl	8009e1c <xTaskGetSchedulerState>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d001      	beq.n	80081fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081fa:	f002 fe15 	bl	800ae28 <xPortSysTickHandler>
  }
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	e000e010 	.word	0xe000e010

08008208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800820c:	2100      	movs	r1, #0
 800820e:	f06f 0004 	mvn.w	r0, #4
 8008212:	f7ff ffbf 	bl	8008194 <__NVIC_SetPriority>
#endif
}
 8008216:	bf00      	nop
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	603b      	str	r3, [r7, #0]
  return(result);
 8008228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800822e:	f06f 0305 	mvn.w	r3, #5
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	e00c      	b.n	8008250 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008236:	4b0a      	ldr	r3, [pc, #40]	@ (8008260 <osKernelInitialize+0x44>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800823e:	4b08      	ldr	r3, [pc, #32]	@ (8008260 <osKernelInitialize+0x44>)
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008244:	2300      	movs	r3, #0
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	e002      	b.n	8008250 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008250:	687b      	ldr	r3, [r7, #4]
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	2000031c 	.word	0x2000031c

08008264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800826a:	f3ef 8305 	mrs	r3, IPSR
 800826e:	603b      	str	r3, [r7, #0]
  return(result);
 8008270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008276:	f06f 0305 	mvn.w	r3, #5
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e010      	b.n	80082a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800827e:	4b0b      	ldr	r3, [pc, #44]	@ (80082ac <osKernelStart+0x48>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d109      	bne.n	800829a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008286:	f7ff ffbf 	bl	8008208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800828a:	4b08      	ldr	r3, [pc, #32]	@ (80082ac <osKernelStart+0x48>)
 800828c:	2202      	movs	r2, #2
 800828e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008290:	f001 f960 	bl	8009554 <vTaskStartScheduler>
      stat = osOK;
 8008294:	2300      	movs	r3, #0
 8008296:	607b      	str	r3, [r7, #4]
 8008298:	e002      	b.n	80082a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800829a:	f04f 33ff 	mov.w	r3, #4294967295
 800829e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082a0:	687b      	ldr	r3, [r7, #4]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	2000031c 	.word	0x2000031c

080082b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08e      	sub	sp, #56	@ 0x38
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c0:	f3ef 8305 	mrs	r3, IPSR
 80082c4:	617b      	str	r3, [r7, #20]
  return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d17e      	bne.n	80083ca <osThreadNew+0x11a>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d07b      	beq.n	80083ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082d2:	2380      	movs	r3, #128	@ 0x80
 80082d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082d6:	2318      	movs	r3, #24
 80082d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d045      	beq.n	8008376 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <osThreadNew+0x48>
        name = attr->name;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <osThreadNew+0x6e>
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	2b38      	cmp	r3, #56	@ 0x38
 8008310:	d805      	bhi.n	800831e <osThreadNew+0x6e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <osThreadNew+0x72>
        return (NULL);
 800831e:	2300      	movs	r3, #0
 8008320:	e054      	b.n	80083cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	089b      	lsrs	r3, r3, #2
 8008330:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00e      	beq.n	8008358 <osThreadNew+0xa8>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	2ba7      	cmp	r3, #167	@ 0xa7
 8008340:	d90a      	bls.n	8008358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008346:	2b00      	cmp	r3, #0
 8008348:	d006      	beq.n	8008358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <osThreadNew+0xa8>
        mem = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	e010      	b.n	800837a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10c      	bne.n	800837a <osThreadNew+0xca>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d108      	bne.n	800837a <osThreadNew+0xca>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <osThreadNew+0xca>
          mem = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	e001      	b.n	800837a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d110      	bne.n	80083a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008388:	9202      	str	r2, [sp, #8]
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	6a3a      	ldr	r2, [r7, #32]
 8008394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fee8 	bl	800916c <xTaskCreateStatic>
 800839c:	4603      	mov	r3, r0
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	e013      	b.n	80083ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d110      	bne.n	80083ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	f107 0310 	add.w	r3, r7, #16
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 ff36 	bl	800922c <xTaskCreate>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d001      	beq.n	80083ca <osThreadNew+0x11a>
            hTask = NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083ca:	693b      	ldr	r3, [r7, #16]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3728      	adds	r7, #40	@ 0x28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af02      	add	r7, sp, #8
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <osThreadFlagsSet+0x1a>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da03      	bge.n	80083f6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80083ee:	f06f 0303 	mvn.w	r3, #3
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e035      	b.n	8008462 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80083f6:	f04f 33ff 	mov.w	r3, #4294967295
 80083fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fc:	f3ef 8305 	mrs	r3, IPSR
 8008400:	613b      	str	r3, [r7, #16]
  return(result);
 8008402:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01f      	beq.n	8008448 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800840c:	f107 0308 	add.w	r3, r7, #8
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	2201      	movs	r2, #1
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6978      	ldr	r0, [r7, #20]
 800841a:	f001 feaf 	bl	800a17c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	2200      	movs	r2, #0
 8008424:	9200      	str	r2, [sp, #0]
 8008426:	2200      	movs	r2, #0
 8008428:	2100      	movs	r1, #0
 800842a:	6978      	ldr	r0, [r7, #20]
 800842c:	f001 fea6 	bl	800a17c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d015      	beq.n	8008462 <osThreadFlagsSet+0x8e>
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <osThreadFlagsSet+0x98>)
 8008438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	e00c      	b.n	8008462 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008448:	2300      	movs	r3, #0
 800844a:	2201      	movs	r2, #1
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6978      	ldr	r0, [r7, #20]
 8008450:	f001 fdd2 	bl	8009ff8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008454:	f107 030c 	add.w	r3, r7, #12
 8008458:	2200      	movs	r2, #0
 800845a:	2100      	movs	r1, #0
 800845c:	6978      	ldr	r0, [r7, #20]
 800845e:	f001 fdcb 	bl	8009ff8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008462:	68fb      	ldr	r3, [r7, #12]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b08c      	sub	sp, #48	@ 0x30
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800847c:	f3ef 8305 	mrs	r3, IPSR
 8008480:	617b      	str	r3, [r7, #20]
  return(result);
 8008482:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008488:	f06f 0305 	mvn.w	r3, #5
 800848c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800848e:	e06b      	b.n	8008568 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	da03      	bge.n	800849e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008496:	f06f 0303 	mvn.w	r3, #3
 800849a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800849c:	e064      	b.n	8008568 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <osThreadFlagsWait+0x3e>
      clear = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084ac:	e001      	b.n	80084b2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 80084ba:	f001 f967 	bl	800978c <xTaskGetTickCount>
 80084be:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80084c0:	f107 0210 	add.w	r2, r7, #16
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084c8:	2000      	movs	r0, #0
 80084ca:	f001 fd35 	bl	8009f38 <xTaskNotifyWait>
 80084ce:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d137      	bne.n	8008546 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80084d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4013      	ands	r3, r2
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084e2:	4313      	orrs	r3, r2
 80084e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00c      	beq.n	800850a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f4:	4013      	ands	r3, r2
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d032      	beq.n	8008562 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10f      	bne.n	8008522 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008502:	f06f 0302 	mvn.w	r3, #2
 8008506:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008508:	e02e      	b.n	8008568 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	4013      	ands	r3, r2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d128      	bne.n	8008566 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d103      	bne.n	8008522 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800851a:	f06f 0302 	mvn.w	r3, #2
 800851e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8008520:	e022      	b.n	8008568 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008522:	f001 f933 	bl	800978c <xTaskGetTickCount>
 8008526:	4602      	mov	r2, r0
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	429a      	cmp	r2, r3
 8008534:	d902      	bls.n	800853c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
 800853a:	e00e      	b.n	800855a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800853c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	627b      	str	r3, [r7, #36]	@ 0x24
 8008544:	e009      	b.n	800855a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800854c:	f06f 0302 	mvn.w	r3, #2
 8008550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008552:	e002      	b.n	800855a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008554:	f06f 0301 	mvn.w	r3, #1
 8008558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1af      	bne.n	80084c0 <osThreadFlagsWait+0x50>
 8008560:	e002      	b.n	8008568 <osThreadFlagsWait+0xf8>
            break;
 8008562:	bf00      	nop
 8008564:	e000      	b.n	8008568 <osThreadFlagsWait+0xf8>
            break;
 8008566:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800856a:	4618      	mov	r0, r3
 800856c:	3730      	adds	r7, #48	@ 0x30
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857a:	f3ef 8305 	mrs	r3, IPSR
 800857e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008580:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <osDelay+0x1c>
    stat = osErrorISR;
 8008586:	f06f 0305 	mvn.w	r3, #5
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	e007      	b.n	800859e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <osDelay+0x2c>
      vTaskDelay(ticks);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 ffa5 	bl	80094e8 <vTaskDelay>
    }
  }

  return (stat);
 800859e:	68fb      	ldr	r3, [r7, #12]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4a07      	ldr	r2, [pc, #28]	@ (80085d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80085b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4a06      	ldr	r2, [pc, #24]	@ (80085d8 <vApplicationGetIdleTaskMemory+0x30>)
 80085be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2280      	movs	r2, #128	@ 0x80
 80085c4:	601a      	str	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000320 	.word	0x20000320
 80085d8:	200003c8 	.word	0x200003c8

080085dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	4a07      	ldr	r2, [pc, #28]	@ (8008608 <vApplicationGetTimerTaskMemory+0x2c>)
 80085ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	4a06      	ldr	r2, [pc, #24]	@ (800860c <vApplicationGetTimerTaskMemory+0x30>)
 80085f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085fa:	601a      	str	r2, [r3, #0]
}
 80085fc:	bf00      	nop
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	200005c8 	.word	0x200005c8
 800860c:	20000670 	.word	0x20000670

08008610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f103 0208 	add.w	r2, r3, #8
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f04f 32ff 	mov.w	r2, #4294967295
 8008628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f103 0208 	add.w	r2, r3, #8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f103 0208 	add.w	r2, r3, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800865e:	bf00      	nop
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800866a:	b480      	push	{r7}
 800866c:	b085      	sub	sp, #20
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
}
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d103      	bne.n	80086d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e00c      	b.n	80086ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3308      	adds	r3, #8
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e002      	b.n	80086e0 <vListInsert+0x2e>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d2f6      	bcs.n	80086da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	601a      	str	r2, [r3, #0]
}
 8008718:	bf00      	nop
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6892      	ldr	r2, [r2, #8]
 800873a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6852      	ldr	r2, [r2, #4]
 8008744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d103      	bne.n	8008758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	1e5a      	subs	r2, r3, #1
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087a4:	f002 fab0 	bl	800ad08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b0:	68f9      	ldr	r1, [r7, #12]
 80087b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087b4:	fb01 f303 	mul.w	r3, r1, r3
 80087b8:	441a      	add	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087d4:	3b01      	subs	r3, #1
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087da:	fb01 f303 	mul.w	r3, r1, r3
 80087de:	441a      	add	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	22ff      	movs	r2, #255	@ 0xff
 80087e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	22ff      	movs	r2, #255	@ 0xff
 80087f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d114      	bne.n	8008824 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01a      	beq.n	8008838 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3310      	adds	r3, #16
 8008806:	4618      	mov	r0, r3
 8008808:	f001 f942 	bl	8009a90 <xTaskRemoveFromEventList>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d012      	beq.n	8008838 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008812:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <xQueueGenericReset+0xd0>)
 8008814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	e009      	b.n	8008838 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3310      	adds	r3, #16
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff fef1 	bl	8008610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3324      	adds	r3, #36	@ 0x24
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff feec 	bl	8008610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008838:	f002 fa98 	bl	800ad6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800883c:	2301      	movs	r3, #1
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08e      	sub	sp, #56	@ 0x38
 8008850:	af02      	add	r7, sp, #8
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10b      	bne.n	8008878 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	e7fd      	b.n	8008874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10b      	bne.n	8008896 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <xQueueGenericCreateStatic+0x56>
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <xQueueGenericCreateStatic+0x5a>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueGenericCreateStatic+0x5c>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10b      	bne.n	80088c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	623b      	str	r3, [r7, #32]
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	e7fd      	b.n	80088c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <xQueueGenericCreateStatic+0x84>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <xQueueGenericCreateStatic+0x88>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <xQueueGenericCreateStatic+0x8a>
 80088d4:	2300      	movs	r3, #0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	61fb      	str	r3, [r7, #28]
}
 80088ec:	bf00      	nop
 80088ee:	bf00      	nop
 80088f0:	e7fd      	b.n	80088ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088f2:	2350      	movs	r3, #80	@ 0x50
 80088f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b50      	cmp	r3, #80	@ 0x50
 80088fa:	d00b      	beq.n	8008914 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	61bb      	str	r3, [r7, #24]
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	e7fd      	b.n	8008910 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008914:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800891a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00d      	beq.n	800893c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008928:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800892c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	4613      	mov	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f805 	bl	8008946 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800893e:	4618      	mov	r0, r3
 8008940:	3730      	adds	r7, #48	@ 0x30
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
 8008952:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d103      	bne.n	8008962 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	e002      	b.n	8008968 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008974:	2101      	movs	r1, #1
 8008976:	69b8      	ldr	r0, [r7, #24]
 8008978:	f7ff fefe 	bl	8008778 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008984:	bf00      	nop
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08e      	sub	sp, #56	@ 0x38
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800899a:	2300      	movs	r3, #0
 800899c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10b      	bne.n	80089c0 <xQueueGenericSend+0x34>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089ba:	bf00      	nop
 80089bc:	bf00      	nop
 80089be:	e7fd      	b.n	80089bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d103      	bne.n	80089ce <xQueueGenericSend+0x42>
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <xQueueGenericSend+0x46>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <xQueueGenericSend+0x48>
 80089d2:	2300      	movs	r3, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10b      	bne.n	80089f0 <xQueueGenericSend+0x64>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	e7fd      	b.n	80089ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d103      	bne.n	80089fe <xQueueGenericSend+0x72>
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <xQueueGenericSend+0x76>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e000      	b.n	8008a04 <xQueueGenericSend+0x78>
 8008a02:	2300      	movs	r3, #0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10b      	bne.n	8008a20 <xQueueGenericSend+0x94>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	623b      	str	r3, [r7, #32]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a20:	f001 f9fc 	bl	8009e1c <xTaskGetSchedulerState>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <xQueueGenericSend+0xa4>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <xQueueGenericSend+0xa8>
 8008a30:	2301      	movs	r3, #1
 8008a32:	e000      	b.n	8008a36 <xQueueGenericSend+0xaa>
 8008a34:	2300      	movs	r3, #0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10b      	bne.n	8008a52 <xQueueGenericSend+0xc6>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	61fb      	str	r3, [r7, #28]
}
 8008a4c:	bf00      	nop
 8008a4e:	bf00      	nop
 8008a50:	e7fd      	b.n	8008a4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a52:	f002 f959 	bl	800ad08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d302      	bcc.n	8008a68 <xQueueGenericSend+0xdc>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d129      	bne.n	8008abc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a6e:	f000 fa0f 	bl	8008e90 <prvCopyDataToQueue>
 8008a72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d010      	beq.n	8008a9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	3324      	adds	r3, #36	@ 0x24
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f805 	bl	8009a90 <xTaskRemoveFromEventList>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d013      	beq.n	8008ab4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8008b8c <xQueueGenericSend+0x200>)
 8008a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	e00a      	b.n	8008ab4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008aa4:	4b39      	ldr	r3, [pc, #228]	@ (8008b8c <xQueueGenericSend+0x200>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ab4:	f002 f95a 	bl	800ad6c <vPortExitCritical>
				return pdPASS;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e063      	b.n	8008b84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d103      	bne.n	8008aca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ac2:	f002 f953 	bl	800ad6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e05c      	b.n	8008b84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ad0:	f107 0314 	add.w	r3, r7, #20
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f001 f83f 	bl	8009b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ade:	f002 f945 	bl	800ad6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ae2:	f000 fda7 	bl	8009634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ae6:	f002 f90f 	bl	800ad08 <vPortEnterCritical>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008af0:	b25b      	sxtb	r3, r3
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d103      	bne.n	8008b00 <xQueueGenericSend+0x174>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b06:	b25b      	sxtb	r3, r3
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d103      	bne.n	8008b16 <xQueueGenericSend+0x18a>
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b16:	f002 f929 	bl	800ad6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b1a:	1d3a      	adds	r2, r7, #4
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 f82e 	bl	8009b84 <xTaskCheckForTimeOut>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d124      	bne.n	8008b78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b30:	f000 faa6 	bl	8009080 <prvIsQueueFull>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d018      	beq.n	8008b6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 ff52 	bl	80099ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b4a:	f000 fa31 	bl	8008fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b4e:	f000 fd7f 	bl	8009650 <xTaskResumeAll>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f47f af7c 	bne.w	8008a52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <xQueueGenericSend+0x200>)
 8008b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	e772      	b.n	8008a52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b6e:	f000 fa1f 	bl	8008fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b72:	f000 fd6d 	bl	8009650 <xTaskResumeAll>
 8008b76:	e76c      	b.n	8008a52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b7a:	f000 fa19 	bl	8008fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b7e:	f000 fd67 	bl	8009650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3738      	adds	r7, #56	@ 0x38
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b090      	sub	sp, #64	@ 0x40
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10b      	bne.n	8008bc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bba:	bf00      	nop
 8008bbc:	bf00      	nop
 8008bbe:	e7fd      	b.n	8008bbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <xQueueGenericSendFromISR+0x3e>
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <xQueueGenericSendFromISR+0x42>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <xQueueGenericSendFromISR+0x44>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10b      	bne.n	8008bf0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008bea:	bf00      	nop
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d103      	bne.n	8008bfe <xQueueGenericSendFromISR+0x6e>
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d101      	bne.n	8008c02 <xQueueGenericSendFromISR+0x72>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueGenericSendFromISR+0x74>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10b      	bne.n	8008c20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	623b      	str	r3, [r7, #32]
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	e7fd      	b.n	8008c1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c20:	f002 f952 	bl	800aec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c24:	f3ef 8211 	mrs	r2, BASEPRI
 8008c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	61fa      	str	r2, [r7, #28]
 8008c3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d302      	bcc.n	8008c52 <xQueueGenericSendFromISR+0xc2>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d12f      	bne.n	8008cb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	68b9      	ldr	r1, [r7, #8]
 8008c66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c68:	f000 f912 	bl	8008e90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d112      	bne.n	8008c9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d016      	beq.n	8008cac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	3324      	adds	r3, #36	@ 0x24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 ff04 	bl	8009a90 <xTaskRemoveFromEventList>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00e      	beq.n	8008cac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e007      	b.n	8008cac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	b25a      	sxtb	r2, r3
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cac:	2301      	movs	r3, #1
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008cb0:	e001      	b.n	8008cb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3740      	adds	r7, #64	@ 0x40
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	@ 0x30
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10b      	bne.n	8008cfe <xQueueReceive+0x32>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	623b      	str	r3, [r7, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	e7fd      	b.n	8008cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d103      	bne.n	8008d0c <xQueueReceive+0x40>
 8008d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <xQueueReceive+0x44>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <xQueueReceive+0x46>
 8008d10:	2300      	movs	r3, #0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <xQueueReceive+0x62>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	61fb      	str	r3, [r7, #28]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d2e:	f001 f875 	bl	8009e1c <xTaskGetSchedulerState>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <xQueueReceive+0x72>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <xQueueReceive+0x76>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <xQueueReceive+0x78>
 8008d42:	2300      	movs	r3, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <xQueueReceive+0x94>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	61bb      	str	r3, [r7, #24]
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	e7fd      	b.n	8008d5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d60:	f001 ffd2 	bl	800ad08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01f      	beq.n	8008db0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d74:	f000 f8f6 	bl	8008f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7a:	1e5a      	subs	r2, r3, #1
 8008d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00f      	beq.n	8008da8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	3310      	adds	r3, #16
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fe7f 	bl	8009a90 <xTaskRemoveFromEventList>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d98:	4b3c      	ldr	r3, [pc, #240]	@ (8008e8c <xQueueReceive+0x1c0>)
 8008d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008da8:	f001 ffe0 	bl	800ad6c <vPortExitCritical>
				return pdPASS;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e069      	b.n	8008e84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d103      	bne.n	8008dbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008db6:	f001 ffd9 	bl	800ad6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e062      	b.n	8008e84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d106      	bne.n	8008dd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dc4:	f107 0310 	add.w	r3, r7, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fec5 	bl	8009b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dd2:	f001 ffcb 	bl	800ad6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dd6:	f000 fc2d 	bl	8009634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dda:	f001 ff95 	bl	800ad08 <vPortEnterCritical>
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d103      	bne.n	8008df4 <xQueueReceive+0x128>
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dfa:	b25b      	sxtb	r3, r3
 8008dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e00:	d103      	bne.n	8008e0a <xQueueReceive+0x13e>
 8008e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e0a:	f001 ffaf 	bl	800ad6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e0e:	1d3a      	adds	r2, r7, #4
 8008e10:	f107 0310 	add.w	r3, r7, #16
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 feb4 	bl	8009b84 <xTaskCheckForTimeOut>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d123      	bne.n	8008e6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e24:	f000 f916 	bl	8009054 <prvIsQueueEmpty>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d017      	beq.n	8008e5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	3324      	adds	r3, #36	@ 0x24
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fdd8 	bl	80099ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e3e:	f000 f8b7 	bl	8008fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e42:	f000 fc05 	bl	8009650 <xTaskResumeAll>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d189      	bne.n	8008d60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e8c <xQueueReceive+0x1c0>)
 8008e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	e780      	b.n	8008d60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e60:	f000 f8a6 	bl	8008fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e64:	f000 fbf4 	bl	8009650 <xTaskResumeAll>
 8008e68:	e77a      	b.n	8008d60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e6c:	f000 f8a0 	bl	8008fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e70:	f000 fbee 	bl	8009650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e76:	f000 f8ed 	bl	8009054 <prvIsQueueEmpty>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f43f af6f 	beq.w	8008d60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3730      	adds	r7, #48	@ 0x30
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	e000ed04 	.word	0xe000ed04

08008e90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10d      	bne.n	8008eca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d14d      	bne.n	8008f52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 ffcc 	bl	8009e58 <xTaskPriorityDisinherit>
 8008ec0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	609a      	str	r2, [r3, #8]
 8008ec8:	e043      	b.n	8008f52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d119      	bne.n	8008f04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6858      	ldr	r0, [r3, #4]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	461a      	mov	r2, r3
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	f003 f9f3 	bl	800c2c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee8:	441a      	add	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d32b      	bcc.n	8008f52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	605a      	str	r2, [r3, #4]
 8008f02:	e026      	b.n	8008f52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	68d8      	ldr	r0, [r3, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	f003 f9d9 	bl	800c2c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68da      	ldr	r2, [r3, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1c:	425b      	negs	r3, r3
 8008f1e:	441a      	add	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d207      	bcs.n	8008f40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	425b      	negs	r3, r3
 8008f3a:	441a      	add	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d105      	bne.n	8008f52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f5a:	697b      	ldr	r3, [r7, #20]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d018      	beq.n	8008fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7e:	441a      	add	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d303      	bcc.n	8008f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68d9      	ldr	r1, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6838      	ldr	r0, [r7, #0]
 8008fa4:	f003 f98f 	bl	800c2c6 <memcpy>
	}
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fb8:	f001 fea6 	bl	800ad08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fc4:	e011      	b.n	8008fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d012      	beq.n	8008ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3324      	adds	r3, #36	@ 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fd5c 	bl	8009a90 <xTaskRemoveFromEventList>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fde:	f000 fe35 	bl	8009c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dce9      	bgt.n	8008fc6 <prvUnlockQueue+0x16>
 8008ff2:	e000      	b.n	8008ff6 <prvUnlockQueue+0x46>
					break;
 8008ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	22ff      	movs	r2, #255	@ 0xff
 8008ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ffe:	f001 feb5 	bl	800ad6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009002:	f001 fe81 	bl	800ad08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800900c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800900e:	e011      	b.n	8009034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d012      	beq.n	800903e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3310      	adds	r3, #16
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fd37 	bl	8009a90 <xTaskRemoveFromEventList>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009028:	f000 fe10 	bl	8009c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	3b01      	subs	r3, #1
 8009030:	b2db      	uxtb	r3, r3
 8009032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009038:	2b00      	cmp	r3, #0
 800903a:	dce9      	bgt.n	8009010 <prvUnlockQueue+0x60>
 800903c:	e000      	b.n	8009040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800903e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	22ff      	movs	r2, #255	@ 0xff
 8009044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009048:	f001 fe90 	bl	800ad6c <vPortExitCritical>
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800905c:	f001 fe54 	bl	800ad08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e001      	b.n	8009072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009072:	f001 fe7b 	bl	800ad6c <vPortExitCritical>

	return xReturn;
 8009076:	68fb      	ldr	r3, [r7, #12]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009088:	f001 fe3e 	bl	800ad08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009094:	429a      	cmp	r2, r3
 8009096:	d102      	bne.n	800909e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	e001      	b.n	80090a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090a2:	f001 fe63 	bl	800ad6c <vPortExitCritical>

	return xReturn;
 80090a6:	68fb      	ldr	r3, [r7, #12]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	e014      	b.n	80090ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090c0:	4a0f      	ldr	r2, [pc, #60]	@ (8009100 <vQueueAddToRegistry+0x50>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10b      	bne.n	80090e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090cc:	490c      	ldr	r1, [pc, #48]	@ (8009100 <vQueueAddToRegistry+0x50>)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009100 <vQueueAddToRegistry+0x50>)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	4413      	add	r3, r2
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090e2:	e006      	b.n	80090f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b07      	cmp	r3, #7
 80090ee:	d9e7      	bls.n	80090c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000a70 	.word	0x20000a70

08009104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009114:	f001 fdf8 	bl	800ad08 <vPortEnterCritical>
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800911e:	b25b      	sxtb	r3, r3
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009124:	d103      	bne.n	800912e <vQueueWaitForMessageRestricted+0x2a>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009134:	b25b      	sxtb	r3, r3
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d103      	bne.n	8009144 <vQueueWaitForMessageRestricted+0x40>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009144:	f001 fe12 	bl	800ad6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	3324      	adds	r3, #36	@ 0x24
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fc6d 	bl	8009a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800915e:	6978      	ldr	r0, [r7, #20]
 8009160:	f7ff ff26 	bl	8008fb0 <prvUnlockQueue>
	}
 8009164:	bf00      	nop
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08e      	sub	sp, #56	@ 0x38
 8009170:	af04      	add	r7, sp, #16
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800917a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10b      	bne.n	8009198 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	623b      	str	r3, [r7, #32]
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	e7fd      	b.n	8009194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10b      	bne.n	80091b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	61fb      	str	r3, [r7, #28]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091b6:	23a8      	movs	r3, #168	@ 0xa8
 80091b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2ba8      	cmp	r3, #168	@ 0xa8
 80091be:	d00b      	beq.n	80091d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	61bb      	str	r3, [r7, #24]
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	e7fd      	b.n	80091d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01e      	beq.n	800921e <xTaskCreateStatic+0xb2>
 80091e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d01b      	beq.n	800921e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091f8:	2300      	movs	r3, #0
 80091fa:	9303      	str	r3, [sp, #12]
 80091fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fe:	9302      	str	r3, [sp, #8]
 8009200:	f107 0314 	add.w	r3, r7, #20
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f851 	bl	80092b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009218:	f000 f8f6 	bl	8009408 <prvAddNewTaskToReadyList>
 800921c:	e001      	b.n	8009222 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009222:	697b      	ldr	r3, [r7, #20]
	}
 8009224:	4618      	mov	r0, r3
 8009226:	3728      	adds	r7, #40	@ 0x28
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08c      	sub	sp, #48	@ 0x30
 8009230:	af04      	add	r7, sp, #16
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	4613      	mov	r3, r2
 800923a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4618      	mov	r0, r3
 8009242:	f001 fe83 	bl	800af4c <pvPortMalloc>
 8009246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00e      	beq.n	800926c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800924e:	20a8      	movs	r0, #168	@ 0xa8
 8009250:	f001 fe7c 	bl	800af4c <pvPortMalloc>
 8009254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	631a      	str	r2, [r3, #48]	@ 0x30
 8009262:	e005      	b.n	8009270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009264:	6978      	ldr	r0, [r7, #20]
 8009266:	f001 ff3f 	bl	800b0e8 <vPortFree>
 800926a:	e001      	b.n	8009270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800926c:	2300      	movs	r3, #0
 800926e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d017      	beq.n	80092a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	2300      	movs	r3, #0
 8009282:	9303      	str	r3, [sp, #12]
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	9302      	str	r3, [sp, #8]
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f000 f80f 	bl	80092b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800929a:	69f8      	ldr	r0, [r7, #28]
 800929c:	f000 f8b4 	bl	8009408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092a0:	2301      	movs	r3, #1
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	e002      	b.n	80092ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092a6:	f04f 33ff 	mov.w	r3, #4294967295
 80092aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092ac:	69bb      	ldr	r3, [r7, #24]
	}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3720      	adds	r7, #32
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	461a      	mov	r2, r3
 80092d0:	21a5      	movs	r1, #165	@ 0xa5
 80092d2:	f002 ff27 	bl	800c124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092e0:	3b01      	subs	r3, #1
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	f023 0307 	bic.w	r3, r3, #7
 80092ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	617b      	str	r3, [r7, #20]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01f      	beq.n	8009358 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009318:	2300      	movs	r3, #0
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	e012      	b.n	8009344 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4413      	add	r3, r2
 8009324:	7819      	ldrb	r1, [r3, #0]
 8009326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	3334      	adds	r3, #52	@ 0x34
 800932e:	460a      	mov	r2, r1
 8009330:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d006      	beq.n	800934c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3301      	adds	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	2b0f      	cmp	r3, #15
 8009348:	d9e9      	bls.n	800931e <prvInitialiseNewTask+0x66>
 800934a:	e000      	b.n	800934e <prvInitialiseNewTask+0x96>
			{
				break;
 800934c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009356:	e003      	b.n	8009360 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	2b37      	cmp	r3, #55	@ 0x37
 8009364:	d901      	bls.n	800936a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009366:	2337      	movs	r3, #55	@ 0x37
 8009368:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800936e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009374:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	2200      	movs	r2, #0
 800937a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	3304      	adds	r3, #4
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff f965 	bl	8008650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	3318      	adds	r3, #24
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff f960 	bl	8008650 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009398:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	3354      	adds	r3, #84	@ 0x54
 80093ba:	224c      	movs	r2, #76	@ 0x4c
 80093bc:	2100      	movs	r1, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f002 feb0 	bl	800c124 <memset>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	4a0d      	ldr	r2, [pc, #52]	@ (80093fc <prvInitialiseNewTask+0x144>)
 80093c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009400 <prvInitialiseNewTask+0x148>)
 80093ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009404 <prvInitialiseNewTask+0x14c>)
 80093d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	68f9      	ldr	r1, [r7, #12]
 80093da:	69b8      	ldr	r0, [r7, #24]
 80093dc:	f001 fb62 	bl	800aaa4 <pxPortInitialiseStack>
 80093e0:	4602      	mov	r2, r0
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093f2:	bf00      	nop
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	200068e4 	.word	0x200068e4
 8009400:	2000694c 	.word	0x2000694c
 8009404:	200069b4 	.word	0x200069b4

08009408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009410:	f001 fc7a 	bl	800ad08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009414:	4b2d      	ldr	r3, [pc, #180]	@ (80094cc <prvAddNewTaskToReadyList+0xc4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	4a2c      	ldr	r2, [pc, #176]	@ (80094cc <prvAddNewTaskToReadyList+0xc4>)
 800941c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800941e:	4b2c      	ldr	r3, [pc, #176]	@ (80094d0 <prvAddNewTaskToReadyList+0xc8>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009426:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <prvAddNewTaskToReadyList+0xc8>)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800942c:	4b27      	ldr	r3, [pc, #156]	@ (80094cc <prvAddNewTaskToReadyList+0xc4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d110      	bne.n	8009456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009434:	f000 fc2e 	bl	8009c94 <prvInitialiseTaskLists>
 8009438:	e00d      	b.n	8009456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800943a:	4b26      	ldr	r3, [pc, #152]	@ (80094d4 <prvAddNewTaskToReadyList+0xcc>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009442:	4b23      	ldr	r3, [pc, #140]	@ (80094d0 <prvAddNewTaskToReadyList+0xc8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944c:	429a      	cmp	r2, r3
 800944e:	d802      	bhi.n	8009456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009450:	4a1f      	ldr	r2, [pc, #124]	@ (80094d0 <prvAddNewTaskToReadyList+0xc8>)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009456:	4b20      	ldr	r3, [pc, #128]	@ (80094d8 <prvAddNewTaskToReadyList+0xd0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	4a1e      	ldr	r2, [pc, #120]	@ (80094d8 <prvAddNewTaskToReadyList+0xd0>)
 800945e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009460:	4b1d      	ldr	r3, [pc, #116]	@ (80094d8 <prvAddNewTaskToReadyList+0xd0>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4b1b      	ldr	r3, [pc, #108]	@ (80094dc <prvAddNewTaskToReadyList+0xd4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d903      	bls.n	800947c <prvAddNewTaskToReadyList+0x74>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009478:	4a18      	ldr	r2, [pc, #96]	@ (80094dc <prvAddNewTaskToReadyList+0xd4>)
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4a15      	ldr	r2, [pc, #84]	@ (80094e0 <prvAddNewTaskToReadyList+0xd8>)
 800948a:	441a      	add	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3304      	adds	r3, #4
 8009490:	4619      	mov	r1, r3
 8009492:	4610      	mov	r0, r2
 8009494:	f7ff f8e9 	bl	800866a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009498:	f001 fc68 	bl	800ad6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800949c:	4b0d      	ldr	r3, [pc, #52]	@ (80094d4 <prvAddNewTaskToReadyList+0xcc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00e      	beq.n	80094c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094a4:	4b0a      	ldr	r3, [pc, #40]	@ (80094d0 <prvAddNewTaskToReadyList+0xc8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d207      	bcs.n	80094c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094b2:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <prvAddNewTaskToReadyList+0xdc>)
 80094b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000f84 	.word	0x20000f84
 80094d0:	20000ab0 	.word	0x20000ab0
 80094d4:	20000f90 	.word	0x20000f90
 80094d8:	20000fa0 	.word	0x20000fa0
 80094dc:	20000f8c 	.word	0x20000f8c
 80094e0:	20000ab4 	.word	0x20000ab4
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d018      	beq.n	800952c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094fa:	4b14      	ldr	r3, [pc, #80]	@ (800954c <vTaskDelay+0x64>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <vTaskDelay+0x32>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	60bb      	str	r3, [r7, #8]
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	e7fd      	b.n	8009516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800951a:	f000 f88b 	bl	8009634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800951e:	2100      	movs	r1, #0
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 ff11 	bl	800a348 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009526:	f000 f893 	bl	8009650 <xTaskResumeAll>
 800952a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009532:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <vTaskDelay+0x68>)
 8009534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000fac 	.word	0x20000fac
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08a      	sub	sp, #40	@ 0x28
 8009558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009562:	463a      	mov	r2, r7
 8009564:	1d39      	adds	r1, r7, #4
 8009566:	f107 0308 	add.w	r3, r7, #8
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff f81c 	bl	80085a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	9202      	str	r2, [sp, #8]
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	2300      	movs	r3, #0
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	2300      	movs	r3, #0
 8009580:	460a      	mov	r2, r1
 8009582:	4924      	ldr	r1, [pc, #144]	@ (8009614 <vTaskStartScheduler+0xc0>)
 8009584:	4824      	ldr	r0, [pc, #144]	@ (8009618 <vTaskStartScheduler+0xc4>)
 8009586:	f7ff fdf1 	bl	800916c <xTaskCreateStatic>
 800958a:	4603      	mov	r3, r0
 800958c:	4a23      	ldr	r2, [pc, #140]	@ (800961c <vTaskStartScheduler+0xc8>)
 800958e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009590:	4b22      	ldr	r3, [pc, #136]	@ (800961c <vTaskStartScheduler+0xc8>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009598:	2301      	movs	r3, #1
 800959a:	617b      	str	r3, [r7, #20]
 800959c:	e001      	b.n	80095a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d102      	bne.n	80095ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80095a8:	f000 ff22 	bl	800a3f0 <xTimerCreateTimerTask>
 80095ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d11b      	bne.n	80095ec <vTaskStartScheduler+0x98>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	613b      	str	r3, [r7, #16]
}
 80095c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095c8:	4b15      	ldr	r3, [pc, #84]	@ (8009620 <vTaskStartScheduler+0xcc>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3354      	adds	r3, #84	@ 0x54
 80095ce:	4a15      	ldr	r2, [pc, #84]	@ (8009624 <vTaskStartScheduler+0xd0>)
 80095d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095d2:	4b15      	ldr	r3, [pc, #84]	@ (8009628 <vTaskStartScheduler+0xd4>)
 80095d4:	f04f 32ff 	mov.w	r2, #4294967295
 80095d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095da:	4b14      	ldr	r3, [pc, #80]	@ (800962c <vTaskStartScheduler+0xd8>)
 80095dc:	2201      	movs	r2, #1
 80095de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095e0:	4b13      	ldr	r3, [pc, #76]	@ (8009630 <vTaskStartScheduler+0xdc>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095e6:	f001 faeb 	bl	800abc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095ea:	e00f      	b.n	800960c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d10b      	bne.n	800960c <vTaskStartScheduler+0xb8>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	60fb      	str	r3, [r7, #12]
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	e7fd      	b.n	8009608 <vTaskStartScheduler+0xb4>
}
 800960c:	bf00      	nop
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	0800da7c 	.word	0x0800da7c
 8009618:	08009c65 	.word	0x08009c65
 800961c:	20000fa8 	.word	0x20000fa8
 8009620:	20000ab0 	.word	0x20000ab0
 8009624:	20000110 	.word	0x20000110
 8009628:	20000fa4 	.word	0x20000fa4
 800962c:	20000f90 	.word	0x20000f90
 8009630:	20000f88 	.word	0x20000f88

08009634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009638:	4b04      	ldr	r3, [pc, #16]	@ (800964c <vTaskSuspendAll+0x18>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	4a03      	ldr	r2, [pc, #12]	@ (800964c <vTaskSuspendAll+0x18>)
 8009640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009642:	bf00      	nop
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	20000fac 	.word	0x20000fac

08009650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800965a:	2300      	movs	r3, #0
 800965c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800965e:	4b42      	ldr	r3, [pc, #264]	@ (8009768 <xTaskResumeAll+0x118>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <xTaskResumeAll+0x2e>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	603b      	str	r3, [r7, #0]
}
 8009678:	bf00      	nop
 800967a:	bf00      	nop
 800967c:	e7fd      	b.n	800967a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800967e:	f001 fb43 	bl	800ad08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009682:	4b39      	ldr	r3, [pc, #228]	@ (8009768 <xTaskResumeAll+0x118>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3b01      	subs	r3, #1
 8009688:	4a37      	ldr	r2, [pc, #220]	@ (8009768 <xTaskResumeAll+0x118>)
 800968a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800968c:	4b36      	ldr	r3, [pc, #216]	@ (8009768 <xTaskResumeAll+0x118>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d162      	bne.n	800975a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009694:	4b35      	ldr	r3, [pc, #212]	@ (800976c <xTaskResumeAll+0x11c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d05e      	beq.n	800975a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800969c:	e02f      	b.n	80096fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800969e:	4b34      	ldr	r3, [pc, #208]	@ (8009770 <xTaskResumeAll+0x120>)
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3318      	adds	r3, #24
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff f83a 	bl	8008724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff f835 	bl	8008724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096be:	4b2d      	ldr	r3, [pc, #180]	@ (8009774 <xTaskResumeAll+0x124>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d903      	bls.n	80096ce <xTaskResumeAll+0x7e>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009774 <xTaskResumeAll+0x124>)
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4a27      	ldr	r2, [pc, #156]	@ (8009778 <xTaskResumeAll+0x128>)
 80096dc:	441a      	add	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f7fe ffc0 	bl	800866a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ee:	4b23      	ldr	r3, [pc, #140]	@ (800977c <xTaskResumeAll+0x12c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d302      	bcc.n	80096fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096f8:	4b21      	ldr	r3, [pc, #132]	@ (8009780 <xTaskResumeAll+0x130>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009770 <xTaskResumeAll+0x120>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1cb      	bne.n	800969e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800970c:	f000 fb66 	bl	8009ddc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009710:	4b1c      	ldr	r3, [pc, #112]	@ (8009784 <xTaskResumeAll+0x134>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d010      	beq.n	800973e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800971c:	f000 f846 	bl	80097ac <xTaskIncrementTick>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009726:	4b16      	ldr	r3, [pc, #88]	@ (8009780 <xTaskResumeAll+0x130>)
 8009728:	2201      	movs	r2, #1
 800972a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3b01      	subs	r3, #1
 8009730:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1f1      	bne.n	800971c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009738:	4b12      	ldr	r3, [pc, #72]	@ (8009784 <xTaskResumeAll+0x134>)
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800973e:	4b10      	ldr	r3, [pc, #64]	@ (8009780 <xTaskResumeAll+0x130>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d009      	beq.n	800975a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009746:	2301      	movs	r3, #1
 8009748:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800974a:	4b0f      	ldr	r3, [pc, #60]	@ (8009788 <xTaskResumeAll+0x138>)
 800974c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800975a:	f001 fb07 	bl	800ad6c <vPortExitCritical>

	return xAlreadyYielded;
 800975e:	68bb      	ldr	r3, [r7, #8]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000fac 	.word	0x20000fac
 800976c:	20000f84 	.word	0x20000f84
 8009770:	20000f44 	.word	0x20000f44
 8009774:	20000f8c 	.word	0x20000f8c
 8009778:	20000ab4 	.word	0x20000ab4
 800977c:	20000ab0 	.word	0x20000ab0
 8009780:	20000f98 	.word	0x20000f98
 8009784:	20000f94 	.word	0x20000f94
 8009788:	e000ed04 	.word	0xe000ed04

0800978c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009792:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <xTaskGetTickCount+0x1c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009798:	687b      	ldr	r3, [r7, #4]
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20000f88 	.word	0x20000f88

080097ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b6:	4b4f      	ldr	r3, [pc, #316]	@ (80098f4 <xTaskIncrementTick+0x148>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f040 8090 	bne.w	80098e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097c0:	4b4d      	ldr	r3, [pc, #308]	@ (80098f8 <xTaskIncrementTick+0x14c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097c8:	4a4b      	ldr	r2, [pc, #300]	@ (80098f8 <xTaskIncrementTick+0x14c>)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d121      	bne.n	8009818 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097d4:	4b49      	ldr	r3, [pc, #292]	@ (80098fc <xTaskIncrementTick+0x150>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	603b      	str	r3, [r7, #0]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <xTaskIncrementTick+0x46>
 80097f6:	4b41      	ldr	r3, [pc, #260]	@ (80098fc <xTaskIncrementTick+0x150>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	4b40      	ldr	r3, [pc, #256]	@ (8009900 <xTaskIncrementTick+0x154>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a3e      	ldr	r2, [pc, #248]	@ (80098fc <xTaskIncrementTick+0x150>)
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	4a3e      	ldr	r2, [pc, #248]	@ (8009900 <xTaskIncrementTick+0x154>)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	4b3e      	ldr	r3, [pc, #248]	@ (8009904 <xTaskIncrementTick+0x158>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3301      	adds	r3, #1
 8009810:	4a3c      	ldr	r2, [pc, #240]	@ (8009904 <xTaskIncrementTick+0x158>)
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	f000 fae2 	bl	8009ddc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009818:	4b3b      	ldr	r3, [pc, #236]	@ (8009908 <xTaskIncrementTick+0x15c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	429a      	cmp	r2, r3
 8009820:	d349      	bcc.n	80098b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009822:	4b36      	ldr	r3, [pc, #216]	@ (80098fc <xTaskIncrementTick+0x150>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d104      	bne.n	8009836 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800982c:	4b36      	ldr	r3, [pc, #216]	@ (8009908 <xTaskIncrementTick+0x15c>)
 800982e:	f04f 32ff 	mov.w	r2, #4294967295
 8009832:	601a      	str	r2, [r3, #0]
					break;
 8009834:	e03f      	b.n	80098b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009836:	4b31      	ldr	r3, [pc, #196]	@ (80098fc <xTaskIncrementTick+0x150>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	429a      	cmp	r2, r3
 800984c:	d203      	bcs.n	8009856 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800984e:	4a2e      	ldr	r2, [pc, #184]	@ (8009908 <xTaskIncrementTick+0x15c>)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009854:	e02f      	b.n	80098b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	3304      	adds	r3, #4
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe ff62 	bl	8008724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	3318      	adds	r3, #24
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe ff59 	bl	8008724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009876:	4b25      	ldr	r3, [pc, #148]	@ (800990c <xTaskIncrementTick+0x160>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d903      	bls.n	8009886 <xTaskIncrementTick+0xda>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009882:	4a22      	ldr	r2, [pc, #136]	@ (800990c <xTaskIncrementTick+0x160>)
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4a1f      	ldr	r2, [pc, #124]	@ (8009910 <xTaskIncrementTick+0x164>)
 8009894:	441a      	add	r2, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	3304      	adds	r3, #4
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f7fe fee4 	bl	800866a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009914 <xTaskIncrementTick+0x168>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d3b8      	bcc.n	8009822 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80098b0:	2301      	movs	r3, #1
 80098b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098b4:	e7b5      	b.n	8009822 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098b6:	4b17      	ldr	r3, [pc, #92]	@ (8009914 <xTaskIncrementTick+0x168>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098bc:	4914      	ldr	r1, [pc, #80]	@ (8009910 <xTaskIncrementTick+0x164>)
 80098be:	4613      	mov	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d901      	bls.n	80098d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80098ce:	2301      	movs	r3, #1
 80098d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098d2:	4b11      	ldr	r3, [pc, #68]	@ (8009918 <xTaskIncrementTick+0x16c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d007      	beq.n	80098ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80098da:	2301      	movs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	e004      	b.n	80098ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098e0:	4b0e      	ldr	r3, [pc, #56]	@ (800991c <xTaskIncrementTick+0x170>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	4a0d      	ldr	r2, [pc, #52]	@ (800991c <xTaskIncrementTick+0x170>)
 80098e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098ea:	697b      	ldr	r3, [r7, #20]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20000fac 	.word	0x20000fac
 80098f8:	20000f88 	.word	0x20000f88
 80098fc:	20000f3c 	.word	0x20000f3c
 8009900:	20000f40 	.word	0x20000f40
 8009904:	20000f9c 	.word	0x20000f9c
 8009908:	20000fa4 	.word	0x20000fa4
 800990c:	20000f8c 	.word	0x20000f8c
 8009910:	20000ab4 	.word	0x20000ab4
 8009914:	20000ab0 	.word	0x20000ab0
 8009918:	20000f98 	.word	0x20000f98
 800991c:	20000f94 	.word	0x20000f94

08009920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009926:	4b2b      	ldr	r3, [pc, #172]	@ (80099d4 <vTaskSwitchContext+0xb4>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800992e:	4b2a      	ldr	r3, [pc, #168]	@ (80099d8 <vTaskSwitchContext+0xb8>)
 8009930:	2201      	movs	r2, #1
 8009932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009934:	e047      	b.n	80099c6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009936:	4b28      	ldr	r3, [pc, #160]	@ (80099d8 <vTaskSwitchContext+0xb8>)
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993c:	4b27      	ldr	r3, [pc, #156]	@ (80099dc <vTaskSwitchContext+0xbc>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60fb      	str	r3, [r7, #12]
 8009942:	e011      	b.n	8009968 <vTaskSwitchContext+0x48>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10b      	bne.n	8009962 <vTaskSwitchContext+0x42>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	607b      	str	r3, [r7, #4]
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	e7fd      	b.n	800995e <vTaskSwitchContext+0x3e>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3b01      	subs	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	491d      	ldr	r1, [pc, #116]	@ (80099e0 <vTaskSwitchContext+0xc0>)
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0e3      	beq.n	8009944 <vTaskSwitchContext+0x24>
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4a16      	ldr	r2, [pc, #88]	@ (80099e0 <vTaskSwitchContext+0xc0>)
 8009988:	4413      	add	r3, r2
 800998a:	60bb      	str	r3, [r7, #8]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	605a      	str	r2, [r3, #4]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	3308      	adds	r3, #8
 800999e:	429a      	cmp	r2, r3
 80099a0:	d104      	bne.n	80099ac <vTaskSwitchContext+0x8c>
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	605a      	str	r2, [r3, #4]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	4a0c      	ldr	r2, [pc, #48]	@ (80099e4 <vTaskSwitchContext+0xc4>)
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	4a09      	ldr	r2, [pc, #36]	@ (80099dc <vTaskSwitchContext+0xbc>)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099bc:	4b09      	ldr	r3, [pc, #36]	@ (80099e4 <vTaskSwitchContext+0xc4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3354      	adds	r3, #84	@ 0x54
 80099c2:	4a09      	ldr	r2, [pc, #36]	@ (80099e8 <vTaskSwitchContext+0xc8>)
 80099c4:	6013      	str	r3, [r2, #0]
}
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000fac 	.word	0x20000fac
 80099d8:	20000f98 	.word	0x20000f98
 80099dc:	20000f8c 	.word	0x20000f8c
 80099e0:	20000ab4 	.word	0x20000ab4
 80099e4:	20000ab0 	.word	0x20000ab0
 80099e8:	20000110 	.word	0x20000110

080099ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10b      	bne.n	8009a14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60fb      	str	r3, [r7, #12]
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a14:	4b07      	ldr	r3, [pc, #28]	@ (8009a34 <vTaskPlaceOnEventList+0x48>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3318      	adds	r3, #24
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7fe fe48 	bl	80086b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a22:	2101      	movs	r1, #1
 8009a24:	6838      	ldr	r0, [r7, #0]
 8009a26:	f000 fc8f 	bl	800a348 <prvAddCurrentTaskToDelayedList>
}
 8009a2a:	bf00      	nop
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000ab0 	.word	0x20000ab0

08009a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10b      	bne.n	8009a62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	617b      	str	r3, [r7, #20]
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	e7fd      	b.n	8009a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a62:	4b0a      	ldr	r3, [pc, #40]	@ (8009a8c <vTaskPlaceOnEventListRestricted+0x54>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3318      	adds	r3, #24
 8009a68:	4619      	mov	r1, r3
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7fe fdfd 	bl	800866a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a76:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	68b8      	ldr	r0, [r7, #8]
 8009a80:	f000 fc62 	bl	800a348 <prvAddCurrentTaskToDelayedList>
	}
 8009a84:	bf00      	nop
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000ab0 	.word	0x20000ab0

08009a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	60fb      	str	r3, [r7, #12]
}
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	e7fd      	b.n	8009aba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fe2e 	bl	8008724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b40 <xTaskRemoveFromEventList+0xb0>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d11d      	bne.n	8009b0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fe fe25 	bl	8008724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ade:	4b19      	ldr	r3, [pc, #100]	@ (8009b44 <xTaskRemoveFromEventList+0xb4>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d903      	bls.n	8009aee <xTaskRemoveFromEventList+0x5e>
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aea:	4a16      	ldr	r2, [pc, #88]	@ (8009b44 <xTaskRemoveFromEventList+0xb4>)
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4a13      	ldr	r2, [pc, #76]	@ (8009b48 <xTaskRemoveFromEventList+0xb8>)
 8009afc:	441a      	add	r2, r3
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	3304      	adds	r3, #4
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f7fe fdb0 	bl	800866a <vListInsertEnd>
 8009b0a:	e005      	b.n	8009b18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	3318      	adds	r3, #24
 8009b10:	4619      	mov	r1, r3
 8009b12:	480e      	ldr	r0, [pc, #56]	@ (8009b4c <xTaskRemoveFromEventList+0xbc>)
 8009b14:	f7fe fda9 	bl	800866a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b50 <xTaskRemoveFromEventList+0xc0>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d905      	bls.n	8009b32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b26:	2301      	movs	r3, #1
 8009b28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <xTaskRemoveFromEventList+0xc4>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	e001      	b.n	8009b36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b36:	697b      	ldr	r3, [r7, #20]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20000fac 	.word	0x20000fac
 8009b44:	20000f8c 	.word	0x20000f8c
 8009b48:	20000ab4 	.word	0x20000ab4
 8009b4c:	20000f44 	.word	0x20000f44
 8009b50:	20000ab0 	.word	0x20000ab0
 8009b54:	20000f98 	.word	0x20000f98

08009b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b60:	4b06      	ldr	r3, [pc, #24]	@ (8009b7c <vTaskInternalSetTimeOutState+0x24>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b68:	4b05      	ldr	r3, [pc, #20]	@ (8009b80 <vTaskInternalSetTimeOutState+0x28>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	605a      	str	r2, [r3, #4]
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	20000f9c 	.word	0x20000f9c
 8009b80:	20000f88 	.word	0x20000f88

08009b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10b      	bne.n	8009bac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	613b      	str	r3, [r7, #16]
}
 8009ba6:	bf00      	nop
 8009ba8:	bf00      	nop
 8009baa:	e7fd      	b.n	8009ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60fb      	str	r3, [r7, #12]
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009bca:	f001 f89d 	bl	800ad08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bce:	4b1d      	ldr	r3, [pc, #116]	@ (8009c44 <xTaskCheckForTimeOut+0xc0>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d102      	bne.n	8009bee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	e023      	b.n	8009c36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	4b15      	ldr	r3, [pc, #84]	@ (8009c48 <xTaskCheckForTimeOut+0xc4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d007      	beq.n	8009c0a <xTaskCheckForTimeOut+0x86>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d302      	bcc.n	8009c0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c04:	2301      	movs	r3, #1
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e015      	b.n	8009c36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d20b      	bcs.n	8009c2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ff99 	bl	8009b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	61fb      	str	r3, [r7, #28]
 8009c2a:	e004      	b.n	8009c36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c32:	2301      	movs	r3, #1
 8009c34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c36:	f001 f899 	bl	800ad6c <vPortExitCritical>

	return xReturn;
 8009c3a:	69fb      	ldr	r3, [r7, #28]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3720      	adds	r7, #32
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	20000f88 	.word	0x20000f88
 8009c48:	20000f9c 	.word	0x20000f9c

08009c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c50:	4b03      	ldr	r3, [pc, #12]	@ (8009c60 <vTaskMissedYield+0x14>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
}
 8009c56:	bf00      	nop
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	20000f98 	.word	0x20000f98

08009c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c6c:	f000 f852 	bl	8009d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c70:	4b06      	ldr	r3, [pc, #24]	@ (8009c8c <prvIdleTask+0x28>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d9f9      	bls.n	8009c6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c78:	4b05      	ldr	r3, [pc, #20]	@ (8009c90 <prvIdleTask+0x2c>)
 8009c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c88:	e7f0      	b.n	8009c6c <prvIdleTask+0x8>
 8009c8a:	bf00      	nop
 8009c8c:	20000ab4 	.word	0x20000ab4
 8009c90:	e000ed04 	.word	0xe000ed04

08009c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	607b      	str	r3, [r7, #4]
 8009c9e:	e00c      	b.n	8009cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4a12      	ldr	r2, [pc, #72]	@ (8009cf4 <prvInitialiseTaskLists+0x60>)
 8009cac:	4413      	add	r3, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fcae 	bl	8008610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	607b      	str	r3, [r7, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b37      	cmp	r3, #55	@ 0x37
 8009cbe:	d9ef      	bls.n	8009ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cc0:	480d      	ldr	r0, [pc, #52]	@ (8009cf8 <prvInitialiseTaskLists+0x64>)
 8009cc2:	f7fe fca5 	bl	8008610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cc6:	480d      	ldr	r0, [pc, #52]	@ (8009cfc <prvInitialiseTaskLists+0x68>)
 8009cc8:	f7fe fca2 	bl	8008610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ccc:	480c      	ldr	r0, [pc, #48]	@ (8009d00 <prvInitialiseTaskLists+0x6c>)
 8009cce:	f7fe fc9f 	bl	8008610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cd2:	480c      	ldr	r0, [pc, #48]	@ (8009d04 <prvInitialiseTaskLists+0x70>)
 8009cd4:	f7fe fc9c 	bl	8008610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cd8:	480b      	ldr	r0, [pc, #44]	@ (8009d08 <prvInitialiseTaskLists+0x74>)
 8009cda:	f7fe fc99 	bl	8008610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cde:	4b0b      	ldr	r3, [pc, #44]	@ (8009d0c <prvInitialiseTaskLists+0x78>)
 8009ce0:	4a05      	ldr	r2, [pc, #20]	@ (8009cf8 <prvInitialiseTaskLists+0x64>)
 8009ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8009d10 <prvInitialiseTaskLists+0x7c>)
 8009ce6:	4a05      	ldr	r2, [pc, #20]	@ (8009cfc <prvInitialiseTaskLists+0x68>)
 8009ce8:	601a      	str	r2, [r3, #0]
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000ab4 	.word	0x20000ab4
 8009cf8:	20000f14 	.word	0x20000f14
 8009cfc:	20000f28 	.word	0x20000f28
 8009d00:	20000f44 	.word	0x20000f44
 8009d04:	20000f58 	.word	0x20000f58
 8009d08:	20000f70 	.word	0x20000f70
 8009d0c:	20000f3c 	.word	0x20000f3c
 8009d10:	20000f40 	.word	0x20000f40

08009d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d1a:	e019      	b.n	8009d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d1c:	f000 fff4 	bl	800ad08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d20:	4b10      	ldr	r3, [pc, #64]	@ (8009d64 <prvCheckTasksWaitingTermination+0x50>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fe fcf9 	bl	8008724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d32:	4b0d      	ldr	r3, [pc, #52]	@ (8009d68 <prvCheckTasksWaitingTermination+0x54>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4a0b      	ldr	r2, [pc, #44]	@ (8009d68 <prvCheckTasksWaitingTermination+0x54>)
 8009d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d6c <prvCheckTasksWaitingTermination+0x58>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	4a0a      	ldr	r2, [pc, #40]	@ (8009d6c <prvCheckTasksWaitingTermination+0x58>)
 8009d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d46:	f001 f811 	bl	800ad6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f810 	bl	8009d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d50:	4b06      	ldr	r3, [pc, #24]	@ (8009d6c <prvCheckTasksWaitingTermination+0x58>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e1      	bne.n	8009d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000f58 	.word	0x20000f58
 8009d68:	20000f84 	.word	0x20000f84
 8009d6c:	20000f6c 	.word	0x20000f6c

08009d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3354      	adds	r3, #84	@ 0x54
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f002 f9e9 	bl	800c154 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d108      	bne.n	8009d9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 f9a9 	bl	800b0e8 <vPortFree>
				vPortFree( pxTCB );
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f001 f9a6 	bl	800b0e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d9c:	e019      	b.n	8009dd2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d103      	bne.n	8009db0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f99d 	bl	800b0e8 <vPortFree>
	}
 8009dae:	e010      	b.n	8009dd2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d00b      	beq.n	8009dd2 <prvDeleteTCB+0x62>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	60fb      	str	r3, [r7, #12]
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	e7fd      	b.n	8009dce <prvDeleteTCB+0x5e>
	}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009de2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e14 <prvResetNextTaskUnblockTime+0x38>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d104      	bne.n	8009df6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dec:	4b0a      	ldr	r3, [pc, #40]	@ (8009e18 <prvResetNextTaskUnblockTime+0x3c>)
 8009dee:	f04f 32ff 	mov.w	r2, #4294967295
 8009df2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009df4:	e008      	b.n	8009e08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df6:	4b07      	ldr	r3, [pc, #28]	@ (8009e14 <prvResetNextTaskUnblockTime+0x38>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	4a04      	ldr	r2, [pc, #16]	@ (8009e18 <prvResetNextTaskUnblockTime+0x3c>)
 8009e06:	6013      	str	r3, [r2, #0]
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	20000f3c 	.word	0x20000f3c
 8009e18:	20000fa4 	.word	0x20000fa4

08009e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e22:	4b0b      	ldr	r3, [pc, #44]	@ (8009e50 <xTaskGetSchedulerState+0x34>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	607b      	str	r3, [r7, #4]
 8009e2e:	e008      	b.n	8009e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e30:	4b08      	ldr	r3, [pc, #32]	@ (8009e54 <xTaskGetSchedulerState+0x38>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e38:	2302      	movs	r3, #2
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	e001      	b.n	8009e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e42:	687b      	ldr	r3, [r7, #4]
	}
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	20000f90 	.word	0x20000f90
 8009e54:	20000fac 	.word	0x20000fac

08009e58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d058      	beq.n	8009f20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8009f2c <xTaskPriorityDisinherit+0xd4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d00b      	beq.n	8009e90 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	60fb      	str	r3, [r7, #12]
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10b      	bne.n	8009eb0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	60bb      	str	r3, [r7, #8]
}
 8009eaa:	bf00      	nop
 8009eac:	bf00      	nop
 8009eae:	e7fd      	b.n	8009eac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d02c      	beq.n	8009f20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d128      	bne.n	8009f20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fc26 	bl	8008724 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8009f30 <xTaskPriorityDisinherit+0xd8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d903      	bls.n	8009f00 <xTaskPriorityDisinherit+0xa8>
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efc:	4a0c      	ldr	r2, [pc, #48]	@ (8009f30 <xTaskPriorityDisinherit+0xd8>)
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4a09      	ldr	r2, [pc, #36]	@ (8009f34 <xTaskPriorityDisinherit+0xdc>)
 8009f0e:	441a      	add	r2, r3
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fe fba7 	bl	800866a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f20:	697b      	ldr	r3, [r7, #20]
	}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000ab0 	.word	0x20000ab0
 8009f30:	20000f8c 	.word	0x20000f8c
 8009f34:	20000ab4 	.word	0x20000ab4

08009f38 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009f46:	f000 fedf 	bl	800ad08 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f4a:	4b29      	ldr	r3, [pc, #164]	@ (8009ff0 <xTaskNotifyWait+0xb8>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d01c      	beq.n	8009f92 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009f58:	4b25      	ldr	r3, [pc, #148]	@ (8009ff0 <xTaskNotifyWait+0xb8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	43d2      	mvns	r2, r2
 8009f64:	400a      	ands	r2, r1
 8009f66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009f6a:	4b21      	ldr	r3, [pc, #132]	@ (8009ff0 <xTaskNotifyWait+0xb8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00b      	beq.n	8009f92 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	6838      	ldr	r0, [r7, #0]
 8009f7e:	f000 f9e3 	bl	800a348 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009f82:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff4 <xTaskNotifyWait+0xbc>)
 8009f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f92:	f000 feeb 	bl	800ad6c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009f96:	f000 feb7 	bl	800ad08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d005      	beq.n	8009fac <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009fa0:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <xTaskNotifyWait+0xb8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009fac:	4b10      	ldr	r3, [pc, #64]	@ (8009ff0 <xTaskNotifyWait+0xb8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d002      	beq.n	8009fc0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	617b      	str	r3, [r7, #20]
 8009fbe:	e00a      	b.n	8009fd6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff0 <xTaskNotifyWait+0xb8>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	43d2      	mvns	r2, r2
 8009fcc:	400a      	ands	r2, r1
 8009fce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fd6:	4b06      	ldr	r3, [pc, #24]	@ (8009ff0 <xTaskNotifyWait+0xb8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8009fe0:	f000 fec4 	bl	800ad6c <vPortExitCritical>

		return xReturn;
 8009fe4:	697b      	ldr	r3, [r7, #20]
	}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000ab0 	.word	0x20000ab0
 8009ff4:	e000ed04 	.word	0xe000ed04

08009ff8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08a      	sub	sp, #40	@ 0x28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	4613      	mov	r3, r2
 800a006:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a008:	2301      	movs	r3, #1
 800a00a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <xTaskGenericNotify+0x32>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	61bb      	str	r3, [r7, #24]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a02e:	f000 fe6b 	bl	800ad08 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a048:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	2202      	movs	r2, #2
 800a04e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	2b04      	cmp	r3, #4
 800a056:	d82e      	bhi.n	800a0b6 <xTaskGenericNotify+0xbe>
 800a058:	a201      	add	r2, pc, #4	@ (adr r2, 800a060 <xTaskGenericNotify+0x68>)
 800a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05e:	bf00      	nop
 800a060:	0800a0db 	.word	0x0800a0db
 800a064:	0800a075 	.word	0x0800a075
 800a068:	0800a087 	.word	0x0800a087
 800a06c:	0800a097 	.word	0x0800a097
 800a070:	0800a0a1 	.word	0x0800a0a1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	431a      	orrs	r2, r3
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a084:	e02c      	b.n	800a0e0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a094:	e024      	b.n	800a0e0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a09e:	e01f      	b.n	800a0e0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a0a0:	7ffb      	ldrb	r3, [r7, #31]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d004      	beq.n	800a0b0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a0ae:	e017      	b.n	800a0e0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a0b4:	e014      	b.n	800a0e0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c0:	d00d      	beq.n	800a0de <xTaskGenericNotify+0xe6>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	617b      	str	r3, [r7, #20]
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	e7fd      	b.n	800a0d6 <xTaskGenericNotify+0xde>
					break;
 800a0da:	bf00      	nop
 800a0dc:	e000      	b.n	800a0e0 <xTaskGenericNotify+0xe8>

					break;
 800a0de:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a0e0:	7ffb      	ldrb	r3, [r7, #31]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d13b      	bne.n	800a15e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fb1a 	bl	8008724 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f4:	4b1d      	ldr	r3, [pc, #116]	@ (800a16c <xTaskGenericNotify+0x174>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d903      	bls.n	800a104 <xTaskGenericNotify+0x10c>
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a100:	4a1a      	ldr	r2, [pc, #104]	@ (800a16c <xTaskGenericNotify+0x174>)
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4a17      	ldr	r2, [pc, #92]	@ (800a170 <xTaskGenericNotify+0x178>)
 800a112:	441a      	add	r2, r3
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	3304      	adds	r3, #4
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f7fe faa5 	bl	800866a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <xTaskGenericNotify+0x148>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	613b      	str	r3, [r7, #16]
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a144:	4b0b      	ldr	r3, [pc, #44]	@ (800a174 <xTaskGenericNotify+0x17c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d907      	bls.n	800a15e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a14e:	4b0a      	ldr	r3, [pc, #40]	@ (800a178 <xTaskGenericNotify+0x180>)
 800a150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a15e:	f000 fe05 	bl	800ad6c <vPortExitCritical>

		return xReturn;
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a164:	4618      	mov	r0, r3
 800a166:	3728      	adds	r7, #40	@ 0x28
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20000f8c 	.word	0x20000f8c
 800a170:	20000ab4 	.word	0x20000ab4
 800a174:	20000ab0 	.word	0x20000ab0
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08e      	sub	sp, #56	@ 0x38
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a18c:	2301      	movs	r3, #1
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10b      	bne.n	800a1ae <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	e7fd      	b.n	800a1aa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ae:	f000 fe8b 	bl	800aec8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800a1b6:	f3ef 8211 	mrs	r2, BASEPRI
 800a1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	623a      	str	r2, [r7, #32]
 800a1cc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a1ce:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d004      	beq.n	800a1e2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a1e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d82e      	bhi.n	800a258 <xTaskGenericNotifyFromISR+0xdc>
 800a1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a200 <xTaskGenericNotifyFromISR+0x84>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a27d 	.word	0x0800a27d
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a227 	.word	0x0800a227
 800a20c:	0800a237 	.word	0x0800a237
 800a210:	0800a241 	.word	0x0800a241
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a216:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	431a      	orrs	r2, r3
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a224:	e02d      	b.n	800a282 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a230:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a234:	e025      	b.n	800a282 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800a23e:	e020      	b.n	800a282 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a240:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a244:	2b02      	cmp	r3, #2
 800a246:	d004      	beq.n	800a252 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a250:	e017      	b.n	800a282 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800a252:	2300      	movs	r3, #0
 800a254:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800a256:	e014      	b.n	800a282 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a262:	d00d      	beq.n	800a280 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	61bb      	str	r3, [r7, #24]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	e7fd      	b.n	800a278 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a27c:	bf00      	nop
 800a27e:	e000      	b.n	800a282 <xTaskGenericNotifyFromISR+0x106>
					break;
 800a280:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a282:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a286:	2b01      	cmp	r3, #1
 800a288:	d147      	bne.n	800a31a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	617b      	str	r3, [r7, #20]
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop
 800a2a8:	e7fd      	b.n	800a2a6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2aa:	4b21      	ldr	r3, [pc, #132]	@ (800a330 <xTaskGenericNotifyFromISR+0x1b4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d11d      	bne.n	800a2ee <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fa34 	bl	8008724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a334 <xTaskGenericNotifyFromISR+0x1b8>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d903      	bls.n	800a2d0 <xTaskGenericNotifyFromISR+0x154>
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2cc:	4a19      	ldr	r2, [pc, #100]	@ (800a334 <xTaskGenericNotifyFromISR+0x1b8>)
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4a16      	ldr	r2, [pc, #88]	@ (800a338 <xTaskGenericNotifyFromISR+0x1bc>)
 800a2de:	441a      	add	r2, r3
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f7fe f9bf 	bl	800866a <vListInsertEnd>
 800a2ec:	e005      	b.n	800a2fa <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f0:	3318      	adds	r3, #24
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4811      	ldr	r0, [pc, #68]	@ (800a33c <xTaskGenericNotifyFromISR+0x1c0>)
 800a2f6:	f7fe f9b8 	bl	800866a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	4b10      	ldr	r3, [pc, #64]	@ (800a340 <xTaskGenericNotifyFromISR+0x1c4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a304:	429a      	cmp	r2, r3
 800a306:	d908      	bls.n	800a31a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a30e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a310:	2201      	movs	r2, #1
 800a312:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a314:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <xTaskGenericNotifyFromISR+0x1c8>)
 800a316:	2201      	movs	r2, #1
 800a318:	601a      	str	r2, [r3, #0]
 800a31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f383 8811 	msr	BASEPRI, r3
}
 800a324:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a328:	4618      	mov	r0, r3
 800a32a:	3738      	adds	r7, #56	@ 0x38
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20000fac 	.word	0x20000fac
 800a334:	20000f8c 	.word	0x20000f8c
 800a338:	20000ab4 	.word	0x20000ab4
 800a33c:	20000f44 	.word	0x20000f44
 800a340:	20000ab0 	.word	0x20000ab0
 800a344:	20000f98 	.word	0x20000f98

0800a348 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a352:	4b21      	ldr	r3, [pc, #132]	@ (800a3d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a358:	4b20      	ldr	r3, [pc, #128]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3304      	adds	r3, #4
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe f9e0 	bl	8008724 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a36a:	d10a      	bne.n	800a382 <prvAddCurrentTaskToDelayedList+0x3a>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a372:	4b1a      	ldr	r3, [pc, #104]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3304      	adds	r3, #4
 800a378:	4619      	mov	r1, r3
 800a37a:	4819      	ldr	r0, [pc, #100]	@ (800a3e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a37c:	f7fe f975 	bl	800866a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a380:	e026      	b.n	800a3d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4413      	add	r3, r2
 800a388:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a38a:	4b14      	ldr	r3, [pc, #80]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	429a      	cmp	r2, r3
 800a398:	d209      	bcs.n	800a3ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a39a:	4b12      	ldr	r3, [pc, #72]	@ (800a3e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	f7fe f983 	bl	80086b2 <vListInsert>
}
 800a3ac:	e010      	b.n	800a3d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f7fe f979 	bl	80086b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d202      	bcs.n	800a3d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3ca:	4a08      	ldr	r2, [pc, #32]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6013      	str	r3, [r2, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000f88 	.word	0x20000f88
 800a3dc:	20000ab0 	.word	0x20000ab0
 800a3e0:	20000f70 	.word	0x20000f70
 800a3e4:	20000f40 	.word	0x20000f40
 800a3e8:	20000f3c 	.word	0x20000f3c
 800a3ec:	20000fa4 	.word	0x20000fa4

0800a3f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08a      	sub	sp, #40	@ 0x28
 800a3f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3fa:	f000 fb13 	bl	800aa24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a474 <xTimerCreateTimerTask+0x84>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d021      	beq.n	800a44a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a40e:	1d3a      	adds	r2, r7, #4
 800a410:	f107 0108 	add.w	r1, r7, #8
 800a414:	f107 030c 	add.w	r3, r7, #12
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fe f8df 	bl	80085dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	9202      	str	r2, [sp, #8]
 800a426:	9301      	str	r3, [sp, #4]
 800a428:	2302      	movs	r3, #2
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	2300      	movs	r3, #0
 800a42e:	460a      	mov	r2, r1
 800a430:	4911      	ldr	r1, [pc, #68]	@ (800a478 <xTimerCreateTimerTask+0x88>)
 800a432:	4812      	ldr	r0, [pc, #72]	@ (800a47c <xTimerCreateTimerTask+0x8c>)
 800a434:	f7fe fe9a 	bl	800916c <xTaskCreateStatic>
 800a438:	4603      	mov	r3, r0
 800a43a:	4a11      	ldr	r2, [pc, #68]	@ (800a480 <xTimerCreateTimerTask+0x90>)
 800a43c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a43e:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <xTimerCreateTimerTask+0x90>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a446:	2301      	movs	r3, #1
 800a448:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10b      	bne.n	800a468 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	613b      	str	r3, [r7, #16]
}
 800a462:	bf00      	nop
 800a464:	bf00      	nop
 800a466:	e7fd      	b.n	800a464 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a468:	697b      	ldr	r3, [r7, #20]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20000fe0 	.word	0x20000fe0
 800a478:	0800da84 	.word	0x0800da84
 800a47c:	0800a5bd 	.word	0x0800a5bd
 800a480:	20000fe4 	.word	0x20000fe4

0800a484 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08a      	sub	sp, #40	@ 0x28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a492:	2300      	movs	r3, #0
 800a494:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10b      	bne.n	800a4b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	623b      	str	r3, [r7, #32]
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	e7fd      	b.n	800a4b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4b4:	4b19      	ldr	r3, [pc, #100]	@ (800a51c <xTimerGenericCommand+0x98>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d02a      	beq.n	800a512 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	dc18      	bgt.n	800a500 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4ce:	f7ff fca5 	bl	8009e1c <xTaskGetSchedulerState>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d109      	bne.n	800a4ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4d8:	4b10      	ldr	r3, [pc, #64]	@ (800a51c <xTimerGenericCommand+0x98>)
 800a4da:	6818      	ldr	r0, [r3, #0]
 800a4dc:	f107 0110 	add.w	r1, r7, #16
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4e4:	f7fe fa52 	bl	800898c <xQueueGenericSend>
 800a4e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a4ea:	e012      	b.n	800a512 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a51c <xTimerGenericCommand+0x98>)
 800a4ee:	6818      	ldr	r0, [r3, #0]
 800a4f0:	f107 0110 	add.w	r1, r7, #16
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f7fe fa48 	bl	800898c <xQueueGenericSend>
 800a4fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a4fe:	e008      	b.n	800a512 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a500:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <xTimerGenericCommand+0x98>)
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	f107 0110 	add.w	r1, r7, #16
 800a508:	2300      	movs	r3, #0
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	f7fe fb40 	bl	8008b90 <xQueueGenericSendFromISR>
 800a510:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a514:	4618      	mov	r0, r3
 800a516:	3728      	adds	r7, #40	@ 0x28
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20000fe0 	.word	0x20000fe0

0800a520 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af02      	add	r7, sp, #8
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52a:	4b23      	ldr	r3, [pc, #140]	@ (800a5b8 <prvProcessExpiredTimer+0x98>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	3304      	adds	r3, #4
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe f8f3 	bl	8008724 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d023      	beq.n	800a594 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	699a      	ldr	r2, [r3, #24]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	18d1      	adds	r1, r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	6978      	ldr	r0, [r7, #20]
 800a55a:	f000 f8d5 	bl	800a708 <prvInsertTimerInActiveList>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d020      	beq.n	800a5a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a564:	2300      	movs	r3, #0
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	2300      	movs	r3, #0
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	2100      	movs	r1, #0
 800a56e:	6978      	ldr	r0, [r7, #20]
 800a570:	f7ff ff88 	bl	800a484 <xTimerGenericCommand>
 800a574:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d114      	bne.n	800a5a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	60fb      	str	r3, [r7, #12]
}
 800a58e:	bf00      	nop
 800a590:	bf00      	nop
 800a592:	e7fd      	b.n	800a590 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a59a:	f023 0301 	bic.w	r3, r3, #1
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	6978      	ldr	r0, [r7, #20]
 800a5ac:	4798      	blx	r3
}
 800a5ae:	bf00      	nop
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20000fd8 	.word	0x20000fd8

0800a5bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5c4:	f107 0308 	add.w	r3, r7, #8
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 f859 	bl	800a680 <prvGetNextExpireTime>
 800a5ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f805 	bl	800a5e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5da:	f000 f8d7 	bl	800a78c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5de:	bf00      	nop
 800a5e0:	e7f0      	b.n	800a5c4 <prvTimerTask+0x8>
	...

0800a5e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5ee:	f7ff f821 	bl	8009634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5f2:	f107 0308 	add.w	r3, r7, #8
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f866 	bl	800a6c8 <prvSampleTimeNow>
 800a5fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d130      	bne.n	800a666 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <prvProcessTimerOrBlockTask+0x3c>
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d806      	bhi.n	800a620 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a612:	f7ff f81d 	bl	8009650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a616:	68f9      	ldr	r1, [r7, #12]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff ff81 	bl	800a520 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a61e:	e024      	b.n	800a66a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d008      	beq.n	800a638 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a626:	4b13      	ldr	r3, [pc, #76]	@ (800a674 <prvProcessTimerOrBlockTask+0x90>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <prvProcessTimerOrBlockTask+0x50>
 800a630:	2301      	movs	r3, #1
 800a632:	e000      	b.n	800a636 <prvProcessTimerOrBlockTask+0x52>
 800a634:	2300      	movs	r3, #0
 800a636:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a638:	4b0f      	ldr	r3, [pc, #60]	@ (800a678 <prvProcessTimerOrBlockTask+0x94>)
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	4619      	mov	r1, r3
 800a646:	f7fe fd5d 	bl	8009104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a64a:	f7ff f801 	bl	8009650 <xTaskResumeAll>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a654:	4b09      	ldr	r3, [pc, #36]	@ (800a67c <prvProcessTimerOrBlockTask+0x98>)
 800a656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	f3bf 8f6f 	isb	sy
}
 800a664:	e001      	b.n	800a66a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a666:	f7fe fff3 	bl	8009650 <xTaskResumeAll>
}
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000fdc 	.word	0x20000fdc
 800a678:	20000fe0 	.word	0x20000fe0
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a688:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c4 <prvGetNextExpireTime+0x44>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <prvGetNextExpireTime+0x16>
 800a692:	2201      	movs	r2, #1
 800a694:	e000      	b.n	800a698 <prvGetNextExpireTime+0x18>
 800a696:	2200      	movs	r2, #0
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6a4:	4b07      	ldr	r3, [pc, #28]	@ (800a6c4 <prvGetNextExpireTime+0x44>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	e001      	b.n	800a6b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20000fd8 	.word	0x20000fd8

0800a6c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6d0:	f7ff f85c 	bl	800978c <xTaskGetTickCount>
 800a6d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a704 <prvSampleTimeNow+0x3c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d205      	bcs.n	800a6ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6e0:	f000 f93a 	bl	800a958 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e002      	b.n	800a6f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6f2:	4a04      	ldr	r2, [pc, #16]	@ (800a704 <prvSampleTimeNow+0x3c>)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20000fe8 	.word	0x20000fe8

0800a708 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a716:	2300      	movs	r3, #0
 800a718:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d812      	bhi.n	800a754 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	1ad2      	subs	r2, r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d302      	bcc.n	800a742 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a73c:	2301      	movs	r3, #1
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	e01b      	b.n	800a77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a742:	4b10      	ldr	r3, [pc, #64]	@ (800a784 <prvInsertTimerInActiveList+0x7c>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fd ffb0 	bl	80086b2 <vListInsert>
 800a752:	e012      	b.n	800a77a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d206      	bcs.n	800a76a <prvInsertTimerInActiveList+0x62>
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d302      	bcc.n	800a76a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a764:	2301      	movs	r3, #1
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e007      	b.n	800a77a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a76a:	4b07      	ldr	r3, [pc, #28]	@ (800a788 <prvInsertTimerInActiveList+0x80>)
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3304      	adds	r3, #4
 800a772:	4619      	mov	r1, r3
 800a774:	4610      	mov	r0, r2
 800a776:	f7fd ff9c 	bl	80086b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a77a:	697b      	ldr	r3, [r7, #20]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	20000fdc 	.word	0x20000fdc
 800a788:	20000fd8 	.word	0x20000fd8

0800a78c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08e      	sub	sp, #56	@ 0x38
 800a790:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a792:	e0ce      	b.n	800a932 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	da19      	bge.n	800a7ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a79a:	1d3b      	adds	r3, r7, #4
 800a79c:	3304      	adds	r3, #4
 800a79e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10b      	bne.n	800a7be <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	61fb      	str	r3, [r7, #28]
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	e7fd      	b.n	800a7ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7c4:	6850      	ldr	r0, [r2, #4]
 800a7c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7c8:	6892      	ldr	r2, [r2, #8]
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f2c0 80ae 	blt.w	800a932 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fd ff9c 	bl	8008724 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff ff6a 	bl	800a6c8 <prvSampleTimeNow>
 800a7f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b09      	cmp	r3, #9
 800a7fa:	f200 8097 	bhi.w	800a92c <prvProcessReceivedCommands+0x1a0>
 800a7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a804 <prvProcessReceivedCommands+0x78>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a82d 	.word	0x0800a82d
 800a808:	0800a82d 	.word	0x0800a82d
 800a80c:	0800a82d 	.word	0x0800a82d
 800a810:	0800a8a3 	.word	0x0800a8a3
 800a814:	0800a8b7 	.word	0x0800a8b7
 800a818:	0800a903 	.word	0x0800a903
 800a81c:	0800a82d 	.word	0x0800a82d
 800a820:	0800a82d 	.word	0x0800a82d
 800a824:	0800a8a3 	.word	0x0800a8a3
 800a828:	0800a8b7 	.word	0x0800a8b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a832:	f043 0301 	orr.w	r3, r3, #1
 800a836:	b2da      	uxtb	r2, r3
 800a838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	18d1      	adds	r1, r2, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a84a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a84c:	f7ff ff5c 	bl	800a708 <prvInsertTimerInActiveList>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d06c      	beq.n	800a930 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a85c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d061      	beq.n	800a930 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	441a      	add	r2, r3
 800a874:	2300      	movs	r3, #0
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	2300      	movs	r3, #0
 800a87a:	2100      	movs	r1, #0
 800a87c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a87e:	f7ff fe01 	bl	800a484 <xTimerGenericCommand>
 800a882:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a884:	6a3b      	ldr	r3, [r7, #32]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d152      	bne.n	800a930 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	61bb      	str	r3, [r7, #24]
}
 800a89c:	bf00      	nop
 800a89e:	bf00      	nop
 800a8a0:	e7fd      	b.n	800a89e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8a8:	f023 0301 	bic.w	r3, r3, #1
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a8b4:	e03d      	b.n	800a932 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8bc:	f043 0301 	orr.w	r3, r3, #1
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10b      	bne.n	800a8ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	617b      	str	r3, [r7, #20]
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	e7fd      	b.n	800a8ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f4:	18d1      	adds	r1, r2, r3
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8fc:	f7ff ff04 	bl	800a708 <prvInsertTimerInActiveList>
					break;
 800a900:	e017      	b.n	800a932 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a908:	f003 0302 	and.w	r3, r3, #2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d103      	bne.n	800a918 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a912:	f000 fbe9 	bl	800b0e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a916:	e00c      	b.n	800a932 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a91e:	f023 0301 	bic.w	r3, r3, #1
 800a922:	b2da      	uxtb	r2, r3
 800a924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a92a:	e002      	b.n	800a932 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a92c:	bf00      	nop
 800a92e:	e000      	b.n	800a932 <prvProcessReceivedCommands+0x1a6>
					break;
 800a930:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a932:	4b08      	ldr	r3, [pc, #32]	@ (800a954 <prvProcessReceivedCommands+0x1c8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	1d39      	adds	r1, r7, #4
 800a938:	2200      	movs	r2, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe f9c6 	bl	8008ccc <xQueueReceive>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	f47f af26 	bne.w	800a794 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	3730      	adds	r7, #48	@ 0x30
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000fe0 	.word	0x20000fe0

0800a958 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a95e:	e049      	b.n	800a9f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a960:	4b2e      	ldr	r3, [pc, #184]	@ (800aa1c <prvSwitchTimerLists+0xc4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a96a:	4b2c      	ldr	r3, [pc, #176]	@ (800aa1c <prvSwitchTimerLists+0xc4>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3304      	adds	r3, #4
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fd fed3 	bl	8008724 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d02f      	beq.n	800a9f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	4413      	add	r3, r2
 800a99c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d90e      	bls.n	800a9c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9b2:	4b1a      	ldr	r3, [pc, #104]	@ (800aa1c <prvSwitchTimerLists+0xc4>)
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f7fd fe78 	bl	80086b2 <vListInsert>
 800a9c2:	e017      	b.n	800a9f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff fd58 	bl	800a484 <xTimerGenericCommand>
 800a9d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10b      	bne.n	800a9f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	603b      	str	r3, [r7, #0]
}
 800a9ee:	bf00      	nop
 800a9f0:	bf00      	nop
 800a9f2:	e7fd      	b.n	800a9f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9f4:	4b09      	ldr	r3, [pc, #36]	@ (800aa1c <prvSwitchTimerLists+0xc4>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1b0      	bne.n	800a960 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9fe:	4b07      	ldr	r3, [pc, #28]	@ (800aa1c <prvSwitchTimerLists+0xc4>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <prvSwitchTimerLists+0xc8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a04      	ldr	r2, [pc, #16]	@ (800aa1c <prvSwitchTimerLists+0xc4>)
 800aa0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa0c:	4a04      	ldr	r2, [pc, #16]	@ (800aa20 <prvSwitchTimerLists+0xc8>)
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	6013      	str	r3, [r2, #0]
}
 800aa12:	bf00      	nop
 800aa14:	3718      	adds	r7, #24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20000fd8 	.word	0x20000fd8
 800aa20:	20000fdc 	.word	0x20000fdc

0800aa24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa2a:	f000 f96d 	bl	800ad08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa2e:	4b15      	ldr	r3, [pc, #84]	@ (800aa84 <prvCheckForValidListAndQueue+0x60>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d120      	bne.n	800aa78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa36:	4814      	ldr	r0, [pc, #80]	@ (800aa88 <prvCheckForValidListAndQueue+0x64>)
 800aa38:	f7fd fdea 	bl	8008610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa3c:	4813      	ldr	r0, [pc, #76]	@ (800aa8c <prvCheckForValidListAndQueue+0x68>)
 800aa3e:	f7fd fde7 	bl	8008610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa42:	4b13      	ldr	r3, [pc, #76]	@ (800aa90 <prvCheckForValidListAndQueue+0x6c>)
 800aa44:	4a10      	ldr	r2, [pc, #64]	@ (800aa88 <prvCheckForValidListAndQueue+0x64>)
 800aa46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa48:	4b12      	ldr	r3, [pc, #72]	@ (800aa94 <prvCheckForValidListAndQueue+0x70>)
 800aa4a:	4a10      	ldr	r2, [pc, #64]	@ (800aa8c <prvCheckForValidListAndQueue+0x68>)
 800aa4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	4b11      	ldr	r3, [pc, #68]	@ (800aa98 <prvCheckForValidListAndQueue+0x74>)
 800aa54:	4a11      	ldr	r2, [pc, #68]	@ (800aa9c <prvCheckForValidListAndQueue+0x78>)
 800aa56:	2110      	movs	r1, #16
 800aa58:	200a      	movs	r0, #10
 800aa5a:	f7fd fef7 	bl	800884c <xQueueGenericCreateStatic>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4a08      	ldr	r2, [pc, #32]	@ (800aa84 <prvCheckForValidListAndQueue+0x60>)
 800aa62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa64:	4b07      	ldr	r3, [pc, #28]	@ (800aa84 <prvCheckForValidListAndQueue+0x60>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa6c:	4b05      	ldr	r3, [pc, #20]	@ (800aa84 <prvCheckForValidListAndQueue+0x60>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	490b      	ldr	r1, [pc, #44]	@ (800aaa0 <prvCheckForValidListAndQueue+0x7c>)
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fb1c 	bl	80090b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa78:	f000 f978 	bl	800ad6c <vPortExitCritical>
}
 800aa7c:	bf00      	nop
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20000fe0 	.word	0x20000fe0
 800aa88:	20000fb0 	.word	0x20000fb0
 800aa8c:	20000fc4 	.word	0x20000fc4
 800aa90:	20000fd8 	.word	0x20000fd8
 800aa94:	20000fdc 	.word	0x20000fdc
 800aa98:	2000108c 	.word	0x2000108c
 800aa9c:	20000fec 	.word	0x20000fec
 800aaa0:	0800da8c 	.word	0x0800da8c

0800aaa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3b04      	subs	r3, #4
 800aab4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aabc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3b04      	subs	r3, #4
 800aac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f023 0201 	bic.w	r2, r3, #1
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3b04      	subs	r3, #4
 800aad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aad4:	4a0c      	ldr	r2, [pc, #48]	@ (800ab08 <pxPortInitialiseStack+0x64>)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3b14      	subs	r3, #20
 800aade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	3b04      	subs	r3, #4
 800aaea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f06f 0202 	mvn.w	r2, #2
 800aaf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3b20      	subs	r3, #32
 800aaf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aafa:	68fb      	ldr	r3, [r7, #12]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	0800ab0d 	.word	0x0800ab0d

0800ab0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab16:	4b13      	ldr	r3, [pc, #76]	@ (800ab64 <prvTaskExitError+0x58>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1e:	d00b      	beq.n	800ab38 <prvTaskExitError+0x2c>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	60fb      	str	r3, [r7, #12]
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	e7fd      	b.n	800ab34 <prvTaskExitError+0x28>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	60bb      	str	r3, [r7, #8]
}
 800ab4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab4c:	bf00      	nop
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d0fc      	beq.n	800ab4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	2000009c 	.word	0x2000009c
	...

0800ab70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab70:	4b07      	ldr	r3, [pc, #28]	@ (800ab90 <pxCurrentTCBConst2>)
 800ab72:	6819      	ldr	r1, [r3, #0]
 800ab74:	6808      	ldr	r0, [r1, #0]
 800ab76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	f380 8809 	msr	PSP, r0
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f04f 0000 	mov.w	r0, #0
 800ab86:	f380 8811 	msr	BASEPRI, r0
 800ab8a:	4770      	bx	lr
 800ab8c:	f3af 8000 	nop.w

0800ab90 <pxCurrentTCBConst2>:
 800ab90:	20000ab0 	.word	0x20000ab0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop

0800ab98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab98:	4808      	ldr	r0, [pc, #32]	@ (800abbc <prvPortStartFirstTask+0x24>)
 800ab9a:	6800      	ldr	r0, [r0, #0]
 800ab9c:	6800      	ldr	r0, [r0, #0]
 800ab9e:	f380 8808 	msr	MSP, r0
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8814 	msr	CONTROL, r0
 800abaa:	b662      	cpsie	i
 800abac:	b661      	cpsie	f
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	df00      	svc	0
 800abb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abba:	bf00      	nop
 800abbc:	e000ed08 	.word	0xe000ed08

0800abc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abc6:	4b47      	ldr	r3, [pc, #284]	@ (800ace4 <xPortStartScheduler+0x124>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a47      	ldr	r2, [pc, #284]	@ (800ace8 <xPortStartScheduler+0x128>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d10b      	bne.n	800abe8 <xPortStartScheduler+0x28>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	613b      	str	r3, [r7, #16]
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abe8:	4b3e      	ldr	r3, [pc, #248]	@ (800ace4 <xPortStartScheduler+0x124>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a3f      	ldr	r2, [pc, #252]	@ (800acec <xPortStartScheduler+0x12c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d10b      	bne.n	800ac0a <xPortStartScheduler+0x4a>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	60fb      	str	r3, [r7, #12]
}
 800ac04:	bf00      	nop
 800ac06:	bf00      	nop
 800ac08:	e7fd      	b.n	800ac06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac0a:	4b39      	ldr	r3, [pc, #228]	@ (800acf0 <xPortStartScheduler+0x130>)
 800ac0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	22ff      	movs	r2, #255	@ 0xff
 800ac1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	4b31      	ldr	r3, [pc, #196]	@ (800acf4 <xPortStartScheduler+0x134>)
 800ac30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac32:	4b31      	ldr	r3, [pc, #196]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac34:	2207      	movs	r2, #7
 800ac36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac38:	e009      	b.n	800ac4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ac3a:	4b2f      	ldr	r3, [pc, #188]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	4a2d      	ldr	r2, [pc, #180]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac4e:	78fb      	ldrb	r3, [r7, #3]
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac56:	2b80      	cmp	r3, #128	@ 0x80
 800ac58:	d0ef      	beq.n	800ac3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac5a:	4b27      	ldr	r3, [pc, #156]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f1c3 0307 	rsb	r3, r3, #7
 800ac62:	2b04      	cmp	r3, #4
 800ac64:	d00b      	beq.n	800ac7e <xPortStartScheduler+0xbe>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	60bb      	str	r3, [r7, #8]
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	e7fd      	b.n	800ac7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac7e:	4b1e      	ldr	r3, [pc, #120]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	021b      	lsls	r3, r3, #8
 800ac84:	4a1c      	ldr	r2, [pc, #112]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac88:	4b1b      	ldr	r3, [pc, #108]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ac90:	4a19      	ldr	r2, [pc, #100]	@ (800acf8 <xPortStartScheduler+0x138>)
 800ac92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac9c:	4b17      	ldr	r3, [pc, #92]	@ (800acfc <xPortStartScheduler+0x13c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a16      	ldr	r2, [pc, #88]	@ (800acfc <xPortStartScheduler+0x13c>)
 800aca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aca6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aca8:	4b14      	ldr	r3, [pc, #80]	@ (800acfc <xPortStartScheduler+0x13c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a13      	ldr	r2, [pc, #76]	@ (800acfc <xPortStartScheduler+0x13c>)
 800acae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800acb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acb4:	f000 f8da 	bl	800ae6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acb8:	4b11      	ldr	r3, [pc, #68]	@ (800ad00 <xPortStartScheduler+0x140>)
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acbe:	f000 f8f9 	bl	800aeb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acc2:	4b10      	ldr	r3, [pc, #64]	@ (800ad04 <xPortStartScheduler+0x144>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a0f      	ldr	r2, [pc, #60]	@ (800ad04 <xPortStartScheduler+0x144>)
 800acc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800accc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acce:	f7ff ff63 	bl	800ab98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acd2:	f7fe fe25 	bl	8009920 <vTaskSwitchContext>
	prvTaskExitError();
 800acd6:	f7ff ff19 	bl	800ab0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	e000ed00 	.word	0xe000ed00
 800ace8:	410fc271 	.word	0x410fc271
 800acec:	410fc270 	.word	0x410fc270
 800acf0:	e000e400 	.word	0xe000e400
 800acf4:	200010dc 	.word	0x200010dc
 800acf8:	200010e0 	.word	0x200010e0
 800acfc:	e000ed20 	.word	0xe000ed20
 800ad00:	2000009c 	.word	0x2000009c
 800ad04:	e000ef34 	.word	0xe000ef34

0800ad08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	607b      	str	r3, [r7, #4]
}
 800ad20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad22:	4b10      	ldr	r3, [pc, #64]	@ (800ad64 <vPortEnterCritical+0x5c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3301      	adds	r3, #1
 800ad28:	4a0e      	ldr	r2, [pc, #56]	@ (800ad64 <vPortEnterCritical+0x5c>)
 800ad2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad64 <vPortEnterCritical+0x5c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d110      	bne.n	800ad56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad34:	4b0c      	ldr	r3, [pc, #48]	@ (800ad68 <vPortEnterCritical+0x60>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00b      	beq.n	800ad56 <vPortEnterCritical+0x4e>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	603b      	str	r3, [r7, #0]
}
 800ad50:	bf00      	nop
 800ad52:	bf00      	nop
 800ad54:	e7fd      	b.n	800ad52 <vPortEnterCritical+0x4a>
	}
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	2000009c 	.word	0x2000009c
 800ad68:	e000ed04 	.word	0xe000ed04

0800ad6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad72:	4b12      	ldr	r3, [pc, #72]	@ (800adbc <vPortExitCritical+0x50>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10b      	bne.n	800ad92 <vPortExitCritical+0x26>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	607b      	str	r3, [r7, #4]
}
 800ad8c:	bf00      	nop
 800ad8e:	bf00      	nop
 800ad90:	e7fd      	b.n	800ad8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad92:	4b0a      	ldr	r3, [pc, #40]	@ (800adbc <vPortExitCritical+0x50>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	4a08      	ldr	r2, [pc, #32]	@ (800adbc <vPortExitCritical+0x50>)
 800ad9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad9c:	4b07      	ldr	r3, [pc, #28]	@ (800adbc <vPortExitCritical+0x50>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d105      	bne.n	800adb0 <vPortExitCritical+0x44>
 800ada4:	2300      	movs	r3, #0
 800ada6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	f383 8811 	msr	BASEPRI, r3
}
 800adae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	2000009c 	.word	0x2000009c

0800adc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adc0:	f3ef 8009 	mrs	r0, PSP
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	4b15      	ldr	r3, [pc, #84]	@ (800ae20 <pxCurrentTCBConst>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f01e 0f10 	tst.w	lr, #16
 800add0:	bf08      	it	eq
 800add2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800add6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	6010      	str	r0, [r2, #0]
 800addc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ade0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ade4:	f380 8811 	msr	BASEPRI, r0
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f7fe fd96 	bl	8009920 <vTaskSwitchContext>
 800adf4:	f04f 0000 	mov.w	r0, #0
 800adf8:	f380 8811 	msr	BASEPRI, r0
 800adfc:	bc09      	pop	{r0, r3}
 800adfe:	6819      	ldr	r1, [r3, #0]
 800ae00:	6808      	ldr	r0, [r1, #0]
 800ae02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae06:	f01e 0f10 	tst.w	lr, #16
 800ae0a:	bf08      	it	eq
 800ae0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae10:	f380 8809 	msr	PSP, r0
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst>:
 800ae20:	20000ab0 	.word	0x20000ab0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	607b      	str	r3, [r7, #4]
}
 800ae40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae42:	f7fe fcb3 	bl	80097ac <xTaskIncrementTick>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae4c:	4b06      	ldr	r3, [pc, #24]	@ (800ae68 <xPortSysTickHandler+0x40>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	2300      	movs	r3, #0
 800ae56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	f383 8811 	msr	BASEPRI, r3
}
 800ae5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae70:	4b0b      	ldr	r3, [pc, #44]	@ (800aea0 <vPortSetupTimerInterrupt+0x34>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae76:	4b0b      	ldr	r3, [pc, #44]	@ (800aea4 <vPortSetupTimerInterrupt+0x38>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aea8 <vPortSetupTimerInterrupt+0x3c>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a0a      	ldr	r2, [pc, #40]	@ (800aeac <vPortSetupTimerInterrupt+0x40>)
 800ae82:	fba2 2303 	umull	r2, r3, r2, r3
 800ae86:	099b      	lsrs	r3, r3, #6
 800ae88:	4a09      	ldr	r2, [pc, #36]	@ (800aeb0 <vPortSetupTimerInterrupt+0x44>)
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae8e:	4b04      	ldr	r3, [pc, #16]	@ (800aea0 <vPortSetupTimerInterrupt+0x34>)
 800ae90:	2207      	movs	r2, #7
 800ae92:	601a      	str	r2, [r3, #0]
}
 800ae94:	bf00      	nop
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	e000e010 	.word	0xe000e010
 800aea4:	e000e018 	.word	0xe000e018
 800aea8:	20000004 	.word	0x20000004
 800aeac:	10624dd3 	.word	0x10624dd3
 800aeb0:	e000e014 	.word	0xe000e014

0800aeb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aeb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aec4 <vPortEnableVFP+0x10>
 800aeb8:	6801      	ldr	r1, [r0, #0]
 800aeba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aebe:	6001      	str	r1, [r0, #0]
 800aec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aec2:	bf00      	nop
 800aec4:	e000ed88 	.word	0xe000ed88

0800aec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aece:	f3ef 8305 	mrs	r3, IPSR
 800aed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b0f      	cmp	r3, #15
 800aed8:	d915      	bls.n	800af06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aeda:	4a18      	ldr	r2, [pc, #96]	@ (800af3c <vPortValidateInterruptPriority+0x74>)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aee4:	4b16      	ldr	r3, [pc, #88]	@ (800af40 <vPortValidateInterruptPriority+0x78>)
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	7afa      	ldrb	r2, [r7, #11]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d20b      	bcs.n	800af06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	607b      	str	r3, [r7, #4]
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	e7fd      	b.n	800af02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af06:	4b0f      	ldr	r3, [pc, #60]	@ (800af44 <vPortValidateInterruptPriority+0x7c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af0e:	4b0e      	ldr	r3, [pc, #56]	@ (800af48 <vPortValidateInterruptPriority+0x80>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	d90b      	bls.n	800af2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	603b      	str	r3, [r7, #0]
}
 800af28:	bf00      	nop
 800af2a:	bf00      	nop
 800af2c:	e7fd      	b.n	800af2a <vPortValidateInterruptPriority+0x62>
	}
 800af2e:	bf00      	nop
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	e000e3f0 	.word	0xe000e3f0
 800af40:	200010dc 	.word	0x200010dc
 800af44:	e000ed0c 	.word	0xe000ed0c
 800af48:	200010e0 	.word	0x200010e0

0800af4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08a      	sub	sp, #40	@ 0x28
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af54:	2300      	movs	r3, #0
 800af56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af58:	f7fe fb6c 	bl	8009634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af5c:	4b5c      	ldr	r3, [pc, #368]	@ (800b0d0 <pvPortMalloc+0x184>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af64:	f000 f924 	bl	800b1b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af68:	4b5a      	ldr	r3, [pc, #360]	@ (800b0d4 <pvPortMalloc+0x188>)
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4013      	ands	r3, r2
 800af70:	2b00      	cmp	r3, #0
 800af72:	f040 8095 	bne.w	800b0a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01e      	beq.n	800afba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800af7c:	2208      	movs	r2, #8
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4413      	add	r3, r2
 800af82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f003 0307 	and.w	r3, r3, #7
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d015      	beq.n	800afba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f023 0307 	bic.w	r3, r3, #7
 800af94:	3308      	adds	r3, #8
 800af96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f003 0307 	and.w	r3, r3, #7
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00b      	beq.n	800afba <pvPortMalloc+0x6e>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	617b      	str	r3, [r7, #20]
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	e7fd      	b.n	800afb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d06f      	beq.n	800b0a0 <pvPortMalloc+0x154>
 800afc0:	4b45      	ldr	r3, [pc, #276]	@ (800b0d8 <pvPortMalloc+0x18c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d86a      	bhi.n	800b0a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afca:	4b44      	ldr	r3, [pc, #272]	@ (800b0dc <pvPortMalloc+0x190>)
 800afcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afce:	4b43      	ldr	r3, [pc, #268]	@ (800b0dc <pvPortMalloc+0x190>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd4:	e004      	b.n	800afe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d903      	bls.n	800aff2 <pvPortMalloc+0xa6>
 800afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f1      	bne.n	800afd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aff2:	4b37      	ldr	r3, [pc, #220]	@ (800b0d0 <pvPortMalloc+0x184>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aff8:	429a      	cmp	r2, r3
 800affa:	d051      	beq.n	800b0a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2208      	movs	r2, #8
 800b002:	4413      	add	r3, r2
 800b004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	1ad2      	subs	r2, r2, r3
 800b016:	2308      	movs	r3, #8
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d920      	bls.n	800b060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b01e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4413      	add	r3, r2
 800b024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00b      	beq.n	800b048 <pvPortMalloc+0xfc>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	613b      	str	r3, [r7, #16]
}
 800b042:	bf00      	nop
 800b044:	bf00      	nop
 800b046:	e7fd      	b.n	800b044 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	1ad2      	subs	r2, r2, r3
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b05a:	69b8      	ldr	r0, [r7, #24]
 800b05c:	f000 f90a 	bl	800b274 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b060:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d8 <pvPortMalloc+0x18c>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	4a1b      	ldr	r2, [pc, #108]	@ (800b0d8 <pvPortMalloc+0x18c>)
 800b06c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b06e:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d8 <pvPortMalloc+0x18c>)
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4b1b      	ldr	r3, [pc, #108]	@ (800b0e0 <pvPortMalloc+0x194>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d203      	bcs.n	800b082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b07a:	4b17      	ldr	r3, [pc, #92]	@ (800b0d8 <pvPortMalloc+0x18c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a18      	ldr	r2, [pc, #96]	@ (800b0e0 <pvPortMalloc+0x194>)
 800b080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	4b13      	ldr	r3, [pc, #76]	@ (800b0d4 <pvPortMalloc+0x188>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	431a      	orrs	r2, r3
 800b08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b096:	4b13      	ldr	r3, [pc, #76]	@ (800b0e4 <pvPortMalloc+0x198>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3301      	adds	r3, #1
 800b09c:	4a11      	ldr	r2, [pc, #68]	@ (800b0e4 <pvPortMalloc+0x198>)
 800b09e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0a0:	f7fe fad6 	bl	8009650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	f003 0307 	and.w	r3, r3, #7
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00b      	beq.n	800b0c6 <pvPortMalloc+0x17a>
	__asm volatile
 800b0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b2:	f383 8811 	msr	BASEPRI, r3
 800b0b6:	f3bf 8f6f 	isb	sy
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	60fb      	str	r3, [r7, #12]
}
 800b0c0:	bf00      	nop
 800b0c2:	bf00      	nop
 800b0c4:	e7fd      	b.n	800b0c2 <pvPortMalloc+0x176>
	return pvReturn;
 800b0c6:	69fb      	ldr	r3, [r7, #28]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3728      	adds	r7, #40	@ 0x28
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20004cec 	.word	0x20004cec
 800b0d4:	20004d00 	.word	0x20004d00
 800b0d8:	20004cf0 	.word	0x20004cf0
 800b0dc:	20004ce4 	.word	0x20004ce4
 800b0e0:	20004cf4 	.word	0x20004cf4
 800b0e4:	20004cf8 	.word	0x20004cf8

0800b0e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d04f      	beq.n	800b19a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0fa:	2308      	movs	r3, #8
 800b0fc:	425b      	negs	r3, r3
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4413      	add	r3, r2
 800b102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	4b25      	ldr	r3, [pc, #148]	@ (800b1a4 <vPortFree+0xbc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4013      	ands	r3, r2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10b      	bne.n	800b12e <vPortFree+0x46>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	60fb      	str	r3, [r7, #12]
}
 800b128:	bf00      	nop
 800b12a:	bf00      	nop
 800b12c:	e7fd      	b.n	800b12a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00b      	beq.n	800b14e <vPortFree+0x66>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	60bb      	str	r3, [r7, #8]
}
 800b148:	bf00      	nop
 800b14a:	bf00      	nop
 800b14c:	e7fd      	b.n	800b14a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	685a      	ldr	r2, [r3, #4]
 800b152:	4b14      	ldr	r3, [pc, #80]	@ (800b1a4 <vPortFree+0xbc>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4013      	ands	r3, r2
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d01e      	beq.n	800b19a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d11a      	bne.n	800b19a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a4 <vPortFree+0xbc>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	43db      	mvns	r3, r3
 800b16e:	401a      	ands	r2, r3
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b174:	f7fe fa5e 	bl	8009634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a8 <vPortFree+0xc0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4413      	add	r3, r2
 800b182:	4a09      	ldr	r2, [pc, #36]	@ (800b1a8 <vPortFree+0xc0>)
 800b184:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b186:	6938      	ldr	r0, [r7, #16]
 800b188:	f000 f874 	bl	800b274 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b18c:	4b07      	ldr	r3, [pc, #28]	@ (800b1ac <vPortFree+0xc4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3301      	adds	r3, #1
 800b192:	4a06      	ldr	r2, [pc, #24]	@ (800b1ac <vPortFree+0xc4>)
 800b194:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b196:	f7fe fa5b 	bl	8009650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b19a:	bf00      	nop
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20004d00 	.word	0x20004d00
 800b1a8:	20004cf0 	.word	0x20004cf0
 800b1ac:	20004cfc 	.word	0x20004cfc

0800b1b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b1ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1bc:	4b27      	ldr	r3, [pc, #156]	@ (800b25c <prvHeapInit+0xac>)
 800b1be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00c      	beq.n	800b1e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3307      	adds	r3, #7
 800b1ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 0307 	bic.w	r3, r3, #7
 800b1d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	4a1f      	ldr	r2, [pc, #124]	@ (800b25c <prvHeapInit+0xac>)
 800b1e0:	4413      	add	r3, r2
 800b1e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b260 <prvHeapInit+0xb0>)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b260 <prvHeapInit+0xb0>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1fc:	2208      	movs	r2, #8
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	1a9b      	subs	r3, r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0307 	bic.w	r3, r3, #7
 800b20a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4a15      	ldr	r2, [pc, #84]	@ (800b264 <prvHeapInit+0xb4>)
 800b210:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b212:	4b14      	ldr	r3, [pc, #80]	@ (800b264 <prvHeapInit+0xb4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2200      	movs	r2, #0
 800b218:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b21a:	4b12      	ldr	r3, [pc, #72]	@ (800b264 <prvHeapInit+0xb4>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	1ad2      	subs	r2, r2, r3
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b230:	4b0c      	ldr	r3, [pc, #48]	@ (800b264 <prvHeapInit+0xb4>)
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	4a0a      	ldr	r2, [pc, #40]	@ (800b268 <prvHeapInit+0xb8>)
 800b23e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	4a09      	ldr	r2, [pc, #36]	@ (800b26c <prvHeapInit+0xbc>)
 800b246:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b248:	4b09      	ldr	r3, [pc, #36]	@ (800b270 <prvHeapInit+0xc0>)
 800b24a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b24e:	601a      	str	r2, [r3, #0]
}
 800b250:	bf00      	nop
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	200010e4 	.word	0x200010e4
 800b260:	20004ce4 	.word	0x20004ce4
 800b264:	20004cec 	.word	0x20004cec
 800b268:	20004cf4 	.word	0x20004cf4
 800b26c:	20004cf0 	.word	0x20004cf0
 800b270:	20004d00 	.word	0x20004d00

0800b274 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b27c:	4b28      	ldr	r3, [pc, #160]	@ (800b320 <prvInsertBlockIntoFreeList+0xac>)
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	e002      	b.n	800b288 <prvInsertBlockIntoFreeList+0x14>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d8f7      	bhi.n	800b282 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	4413      	add	r3, r2
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d108      	bne.n	800b2b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	441a      	add	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	441a      	add	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d118      	bne.n	800b2fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	4b15      	ldr	r3, [pc, #84]	@ (800b324 <prvInsertBlockIntoFreeList+0xb0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d00d      	beq.n	800b2f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	441a      	add	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	601a      	str	r2, [r3, #0]
 800b2f0:	e008      	b.n	800b304 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b324 <prvInsertBlockIntoFreeList+0xb0>)
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e003      	b.n	800b304 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d002      	beq.n	800b312 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b312:	bf00      	nop
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	20004ce4 	.word	0x20004ce4
 800b324:	20004cec 	.word	0x20004cec

0800b328 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b32c:	2200      	movs	r2, #0
 800b32e:	4912      	ldr	r1, [pc, #72]	@ (800b378 <MX_USB_DEVICE_Init+0x50>)
 800b330:	4812      	ldr	r0, [pc, #72]	@ (800b37c <MX_USB_DEVICE_Init+0x54>)
 800b332:	f7fb fc39 	bl	8006ba8 <USBD_Init>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b33c:	f7f6 f914 	bl	8001568 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b340:	490f      	ldr	r1, [pc, #60]	@ (800b380 <MX_USB_DEVICE_Init+0x58>)
 800b342:	480e      	ldr	r0, [pc, #56]	@ (800b37c <MX_USB_DEVICE_Init+0x54>)
 800b344:	f7fb fc60 	bl	8006c08 <USBD_RegisterClass>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b34e:	f7f6 f90b 	bl	8001568 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b352:	490c      	ldr	r1, [pc, #48]	@ (800b384 <MX_USB_DEVICE_Init+0x5c>)
 800b354:	4809      	ldr	r0, [pc, #36]	@ (800b37c <MX_USB_DEVICE_Init+0x54>)
 800b356:	f7fb fb97 	bl	8006a88 <USBD_CDC_RegisterInterface>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b360:	f7f6 f902 	bl	8001568 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b364:	4805      	ldr	r0, [pc, #20]	@ (800b37c <MX_USB_DEVICE_Init+0x54>)
 800b366:	f7fb fc85 	bl	8006c74 <USBD_Start>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b370:	f7f6 f8fa 	bl	8001568 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b374:	bf00      	nop
 800b376:	bd80      	pop	{r7, pc}
 800b378:	200000b4 	.word	0x200000b4
 800b37c:	20004d04 	.word	0x20004d04
 800b380:	2000001c 	.word	0x2000001c
 800b384:	200000a0 	.word	0x200000a0

0800b388 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b38c:	2200      	movs	r2, #0
 800b38e:	4905      	ldr	r1, [pc, #20]	@ (800b3a4 <CDC_Init_FS+0x1c>)
 800b390:	4805      	ldr	r0, [pc, #20]	@ (800b3a8 <CDC_Init_FS+0x20>)
 800b392:	f7fb fb93 	bl	8006abc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b396:	4905      	ldr	r1, [pc, #20]	@ (800b3ac <CDC_Init_FS+0x24>)
 800b398:	4803      	ldr	r0, [pc, #12]	@ (800b3a8 <CDC_Init_FS+0x20>)
 800b39a:	f7fb fbb1 	bl	8006b00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b39e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	200057e0 	.word	0x200057e0
 800b3a8:	20004d04 	.word	0x20004d04
 800b3ac:	20004fe0 	.word	0x20004fe0

0800b3b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	6039      	str	r1, [r7, #0]
 800b3ca:	71fb      	strb	r3, [r7, #7]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	2b23      	cmp	r3, #35	@ 0x23
 800b3d4:	d84a      	bhi.n	800b46c <CDC_Control_FS+0xac>
 800b3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3dc <CDC_Control_FS+0x1c>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b46d 	.word	0x0800b46d
 800b3e0:	0800b46d 	.word	0x0800b46d
 800b3e4:	0800b46d 	.word	0x0800b46d
 800b3e8:	0800b46d 	.word	0x0800b46d
 800b3ec:	0800b46d 	.word	0x0800b46d
 800b3f0:	0800b46d 	.word	0x0800b46d
 800b3f4:	0800b46d 	.word	0x0800b46d
 800b3f8:	0800b46d 	.word	0x0800b46d
 800b3fc:	0800b46d 	.word	0x0800b46d
 800b400:	0800b46d 	.word	0x0800b46d
 800b404:	0800b46d 	.word	0x0800b46d
 800b408:	0800b46d 	.word	0x0800b46d
 800b40c:	0800b46d 	.word	0x0800b46d
 800b410:	0800b46d 	.word	0x0800b46d
 800b414:	0800b46d 	.word	0x0800b46d
 800b418:	0800b46d 	.word	0x0800b46d
 800b41c:	0800b46d 	.word	0x0800b46d
 800b420:	0800b46d 	.word	0x0800b46d
 800b424:	0800b46d 	.word	0x0800b46d
 800b428:	0800b46d 	.word	0x0800b46d
 800b42c:	0800b46d 	.word	0x0800b46d
 800b430:	0800b46d 	.word	0x0800b46d
 800b434:	0800b46d 	.word	0x0800b46d
 800b438:	0800b46d 	.word	0x0800b46d
 800b43c:	0800b46d 	.word	0x0800b46d
 800b440:	0800b46d 	.word	0x0800b46d
 800b444:	0800b46d 	.word	0x0800b46d
 800b448:	0800b46d 	.word	0x0800b46d
 800b44c:	0800b46d 	.word	0x0800b46d
 800b450:	0800b46d 	.word	0x0800b46d
 800b454:	0800b46d 	.word	0x0800b46d
 800b458:	0800b46d 	.word	0x0800b46d
 800b45c:	0800b46d 	.word	0x0800b46d
 800b460:	0800b46d 	.word	0x0800b46d
 800b464:	0800b46d 	.word	0x0800b46d
 800b468:	0800b46d 	.word	0x0800b46d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b46c:	bf00      	nop
  }

  return (USBD_OK);
 800b46e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	4805      	ldr	r0, [pc, #20]	@ (800b4a0 <CDC_Receive_FS+0x24>)
 800b48a:	f7fb fb39 	bl	8006b00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b48e:	4804      	ldr	r0, [pc, #16]	@ (800b4a0 <CDC_Receive_FS+0x24>)
 800b490:	f7fb fb54 	bl	8006b3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b494:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20004d04 	.word	0x20004d04

0800b4a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	371c      	adds	r7, #28
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	6039      	str	r1, [r7, #0]
 800b4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2212      	movs	r2, #18
 800b4d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4da:	4b03      	ldr	r3, [pc, #12]	@ (800b4e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	200000d0 	.word	0x200000d0

0800b4ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	6039      	str	r1, [r7, #0]
 800b4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2204      	movs	r2, #4
 800b4fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4fe:	4b03      	ldr	r3, [pc, #12]	@ (800b50c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	200000e4 	.word	0x200000e4

0800b510 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	6039      	str	r1, [r7, #0]
 800b51a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b51c:	79fb      	ldrb	r3, [r7, #7]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	4907      	ldr	r1, [pc, #28]	@ (800b544 <USBD_FS_ProductStrDescriptor+0x34>)
 800b526:	4808      	ldr	r0, [pc, #32]	@ (800b548 <USBD_FS_ProductStrDescriptor+0x38>)
 800b528:	f7fc fd54 	bl	8007fd4 <USBD_GetString>
 800b52c:	e004      	b.n	800b538 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	4904      	ldr	r1, [pc, #16]	@ (800b544 <USBD_FS_ProductStrDescriptor+0x34>)
 800b532:	4805      	ldr	r0, [pc, #20]	@ (800b548 <USBD_FS_ProductStrDescriptor+0x38>)
 800b534:	f7fc fd4e 	bl	8007fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b538:	4b02      	ldr	r3, [pc, #8]	@ (800b544 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20005fe0 	.word	0x20005fe0
 800b548:	0800da94 	.word	0x0800da94

0800b54c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	6039      	str	r1, [r7, #0]
 800b556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	4904      	ldr	r1, [pc, #16]	@ (800b56c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b55c:	4804      	ldr	r0, [pc, #16]	@ (800b570 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b55e:	f7fc fd39 	bl	8007fd4 <USBD_GetString>
  return USBD_StrDesc;
 800b562:	4b02      	ldr	r3, [pc, #8]	@ (800b56c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b564:	4618      	mov	r0, r3
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	20005fe0 	.word	0x20005fe0
 800b570:	0800daac 	.word	0x0800daac

0800b574 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	221a      	movs	r2, #26
 800b584:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b586:	f000 f843 	bl	800b610 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b58a:	4b02      	ldr	r3, [pc, #8]	@ (800b594 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	200000e8 	.word	0x200000e8

0800b598 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	6039      	str	r1, [r7, #0]
 800b5a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d105      	bne.n	800b5b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	4907      	ldr	r1, [pc, #28]	@ (800b5cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5ae:	4808      	ldr	r0, [pc, #32]	@ (800b5d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5b0:	f7fc fd10 	bl	8007fd4 <USBD_GetString>
 800b5b4:	e004      	b.n	800b5c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	4904      	ldr	r1, [pc, #16]	@ (800b5cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5ba:	4805      	ldr	r0, [pc, #20]	@ (800b5d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5bc:	f7fc fd0a 	bl	8007fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5c0:	4b02      	ldr	r3, [pc, #8]	@ (800b5cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20005fe0 	.word	0x20005fe0
 800b5d0:	0800dac0 	.word	0x0800dac0

0800b5d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	6039      	str	r1, [r7, #0]
 800b5de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5e0:	79fb      	ldrb	r3, [r7, #7]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d105      	bne.n	800b5f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	4907      	ldr	r1, [pc, #28]	@ (800b608 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5ea:	4808      	ldr	r0, [pc, #32]	@ (800b60c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5ec:	f7fc fcf2 	bl	8007fd4 <USBD_GetString>
 800b5f0:	e004      	b.n	800b5fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	4904      	ldr	r1, [pc, #16]	@ (800b608 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5f6:	4805      	ldr	r0, [pc, #20]	@ (800b60c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5f8:	f7fc fcec 	bl	8007fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5fc:	4b02      	ldr	r3, [pc, #8]	@ (800b608 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20005fe0 	.word	0x20005fe0
 800b60c:	0800dacc 	.word	0x0800dacc

0800b610 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b616:	4b0f      	ldr	r3, [pc, #60]	@ (800b654 <Get_SerialNum+0x44>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b61c:	4b0e      	ldr	r3, [pc, #56]	@ (800b658 <Get_SerialNum+0x48>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b622:	4b0e      	ldr	r3, [pc, #56]	@ (800b65c <Get_SerialNum+0x4c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4413      	add	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d009      	beq.n	800b64a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b636:	2208      	movs	r2, #8
 800b638:	4909      	ldr	r1, [pc, #36]	@ (800b660 <Get_SerialNum+0x50>)
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 f814 	bl	800b668 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b640:	2204      	movs	r2, #4
 800b642:	4908      	ldr	r1, [pc, #32]	@ (800b664 <Get_SerialNum+0x54>)
 800b644:	68b8      	ldr	r0, [r7, #8]
 800b646:	f000 f80f 	bl	800b668 <IntToUnicode>
  }
}
 800b64a:	bf00      	nop
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	1fff7a10 	.word	0x1fff7a10
 800b658:	1fff7a14 	.word	0x1fff7a14
 800b65c:	1fff7a18 	.word	0x1fff7a18
 800b660:	200000ea 	.word	0x200000ea
 800b664:	200000fa 	.word	0x200000fa

0800b668 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b668:	b480      	push	{r7}
 800b66a:	b087      	sub	sp, #28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	4613      	mov	r3, r2
 800b674:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b67a:	2300      	movs	r3, #0
 800b67c:	75fb      	strb	r3, [r7, #23]
 800b67e:	e027      	b.n	800b6d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	0f1b      	lsrs	r3, r3, #28
 800b684:	2b09      	cmp	r3, #9
 800b686:	d80b      	bhi.n	800b6a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	0f1b      	lsrs	r3, r3, #28
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	4619      	mov	r1, r3
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	440b      	add	r3, r1
 800b698:	3230      	adds	r2, #48	@ 0x30
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	e00a      	b.n	800b6b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	0f1b      	lsrs	r3, r3, #28
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	7dfb      	ldrb	r3, [r7, #23]
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	440b      	add	r3, r1
 800b6b0:	3237      	adds	r2, #55	@ 0x37
 800b6b2:	b2d2      	uxtb	r2, r2
 800b6b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	011b      	lsls	r3, r3, #4
 800b6ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	75fb      	strb	r3, [r7, #23]
 800b6d0:	7dfa      	ldrb	r2, [r7, #23]
 800b6d2:	79fb      	ldrb	r3, [r7, #7]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d3d3      	bcc.n	800b680 <IntToUnicode+0x18>
  }
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08a      	sub	sp, #40	@ 0x28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6f0:	f107 0314 	add.w	r3, r7, #20
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	605a      	str	r2, [r3, #4]
 800b6fa:	609a      	str	r2, [r3, #8]
 800b6fc:	60da      	str	r2, [r3, #12]
 800b6fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b708:	d13a      	bne.n	800b780 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b70a:	2300      	movs	r3, #0
 800b70c:	613b      	str	r3, [r7, #16]
 800b70e:	4b1e      	ldr	r3, [pc, #120]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b712:	4a1d      	ldr	r2, [pc, #116]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b714:	f043 0301 	orr.w	r3, r3, #1
 800b718:	6313      	str	r3, [r2, #48]	@ 0x30
 800b71a:	4b1b      	ldr	r3, [pc, #108]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b726:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b72a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b72c:	2302      	movs	r3, #2
 800b72e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b730:	2300      	movs	r3, #0
 800b732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b734:	2303      	movs	r3, #3
 800b736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b738:	230a      	movs	r3, #10
 800b73a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b73c:	f107 0314 	add.w	r3, r7, #20
 800b740:	4619      	mov	r1, r3
 800b742:	4812      	ldr	r0, [pc, #72]	@ (800b78c <HAL_PCD_MspInit+0xa4>)
 800b744:	f7f6 fa8e 	bl	8001c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b748:	4b0f      	ldr	r3, [pc, #60]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b74a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b74c:	4a0e      	ldr	r2, [pc, #56]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b752:	6353      	str	r3, [r2, #52]	@ 0x34
 800b754:	2300      	movs	r3, #0
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	4b0b      	ldr	r3, [pc, #44]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b75a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b75c:	4a0a      	ldr	r2, [pc, #40]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b75e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b762:	6453      	str	r3, [r2, #68]	@ 0x44
 800b764:	4b08      	ldr	r3, [pc, #32]	@ (800b788 <HAL_PCD_MspInit+0xa0>)
 800b766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b770:	2200      	movs	r2, #0
 800b772:	2105      	movs	r1, #5
 800b774:	2043      	movs	r0, #67	@ 0x43
 800b776:	f7f6 fa29 	bl	8001bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b77a:	2043      	movs	r0, #67	@ 0x43
 800b77c:	f7f6 fa42 	bl	8001c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b780:	bf00      	nop
 800b782:	3728      	adds	r7, #40	@ 0x28
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	40023800 	.word	0x40023800
 800b78c:	40020000 	.word	0x40020000

0800b790 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7fb fab1 	bl	8006d0e <USBD_LL_SetupStage>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b7c6:	78fa      	ldrb	r2, [r7, #3]
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	440b      	add	r3, r1
 800b7d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	78fb      	ldrb	r3, [r7, #3]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	f7fb faeb 	bl	8006db8 <USBD_LL_DataOutStage>
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b7fc:	78fa      	ldrb	r2, [r7, #3]
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	4613      	mov	r3, r2
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	4413      	add	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	440b      	add	r3, r1
 800b80a:	3320      	adds	r3, #32
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	4619      	mov	r1, r3
 800b812:	f7fb fb84 	bl	8006f1e <USBD_LL_DataInStage>
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fb fcbe 	bl	80071ae <USBD_LL_SOF>
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b842:	2301      	movs	r3, #1
 800b844:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	79db      	ldrb	r3, [r3, #7]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d102      	bne.n	800b854 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]
 800b852:	e008      	b.n	800b866 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	79db      	ldrb	r3, [r3, #7]
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d102      	bne.n	800b862 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b85c:	2301      	movs	r3, #1
 800b85e:	73fb      	strb	r3, [r7, #15]
 800b860:	e001      	b.n	800b866 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b862:	f7f5 fe81 	bl	8001568 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b86c:	7bfa      	ldrb	r2, [r7, #15]
 800b86e:	4611      	mov	r1, r2
 800b870:	4618      	mov	r0, r3
 800b872:	f7fb fc58 	bl	8007126 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fb fc00 	bl	8007082 <USBD_LL_Reset>
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fb fc53 	bl	8007146 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6812      	ldr	r2, [r2, #0]
 800b8ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b8b2:	f043 0301 	orr.w	r3, r3, #1
 800b8b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7adb      	ldrb	r3, [r3, #11]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d005      	beq.n	800b8cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8c0:	4b04      	ldr	r3, [pc, #16]	@ (800b8d4 <HAL_PCD_SuspendCallback+0x48>)
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	4a03      	ldr	r2, [pc, #12]	@ (800b8d4 <HAL_PCD_SuspendCallback+0x48>)
 800b8c6:	f043 0306 	orr.w	r3, r3, #6
 800b8ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	e000ed00 	.word	0xe000ed00

0800b8d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fb fc49 	bl	800717e <USBD_LL_Resume>
}
 800b8ec:	bf00      	nop
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	4611      	mov	r1, r2
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fb fca1 	bl	8007252 <USBD_LL_IsoOUTIncomplete>
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b92a:	78fa      	ldrb	r2, [r7, #3]
 800b92c:	4611      	mov	r1, r2
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fb fc5d 	bl	80071ee <USBD_LL_IsoINIncomplete>
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fb fcb3 	bl	80072b6 <USBD_LL_DevConnected>
}
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b966:	4618      	mov	r0, r3
 800b968:	f7fb fcb0 	bl	80072cc <USBD_LL_DevDisconnected>
}
 800b96c:	bf00      	nop
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d13c      	bne.n	800b9fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b984:	4a20      	ldr	r2, [pc, #128]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a1e      	ldr	r2, [pc, #120]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b990:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b994:	4b1c      	ldr	r3, [pc, #112]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b996:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b99a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b99c:	4b1a      	ldr	r3, [pc, #104]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b99e:	2204      	movs	r2, #4
 800b9a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b9a2:	4b19      	ldr	r3, [pc, #100]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9a8:	4b17      	ldr	r3, [pc, #92]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b9ae:	4b16      	ldr	r3, [pc, #88]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9b4:	4b14      	ldr	r3, [pc, #80]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b9ba:	4b13      	ldr	r3, [pc, #76]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b9c0:	4b11      	ldr	r3, [pc, #68]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b9c6:	4b10      	ldr	r3, [pc, #64]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b9cc:	4b0e      	ldr	r3, [pc, #56]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b9d2:	480d      	ldr	r0, [pc, #52]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9d4:	f7f6 fb46 	bl	8002064 <HAL_PCD_Init>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b9de:	f7f5 fdc3 	bl	8001568 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b9e2:	2180      	movs	r1, #128	@ 0x80
 800b9e4:	4808      	ldr	r0, [pc, #32]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9e6:	f7f7 fd70 	bl	80034ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b9ea:	2240      	movs	r2, #64	@ 0x40
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	4806      	ldr	r0, [pc, #24]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9f0:	f7f7 fd24 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b9f4:	2280      	movs	r2, #128	@ 0x80
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	4803      	ldr	r0, [pc, #12]	@ (800ba08 <USBD_LL_Init+0x94>)
 800b9fa:	f7f7 fd1f 	bl	800343c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	200061e0 	.word	0x200061e0

0800ba0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7f6 fc2d 	bl	8002282 <HAL_PCD_Start>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 f942 	bl	800bcb8 <USBD_Get_USB_Status>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4603      	mov	r3, r0
 800ba52:	70fb      	strb	r3, [r7, #3]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70bb      	strb	r3, [r7, #2]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ba6a:	78bb      	ldrb	r3, [r7, #2]
 800ba6c:	883a      	ldrh	r2, [r7, #0]
 800ba6e:	78f9      	ldrb	r1, [r7, #3]
 800ba70:	f7f7 f901 	bl	8002c76 <HAL_PCD_EP_Open>
 800ba74:	4603      	mov	r3, r0
 800ba76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba78:	7bfb      	ldrb	r3, [r7, #15]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 f91c 	bl	800bcb8 <USBD_Get_USB_Status>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	460b      	mov	r3, r1
 800ba98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baa8:	78fa      	ldrb	r2, [r7, #3]
 800baaa:	4611      	mov	r1, r2
 800baac:	4618      	mov	r0, r3
 800baae:	f7f7 f94a 	bl	8002d46 <HAL_PCD_EP_Close>
 800bab2:	4603      	mov	r3, r0
 800bab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 f8fd 	bl	800bcb8 <USBD_Get_USB_Status>
 800babe:	4603      	mov	r3, r0
 800bac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bac2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bae6:	78fa      	ldrb	r2, [r7, #3]
 800bae8:	4611      	mov	r1, r2
 800baea:	4618      	mov	r0, r3
 800baec:	f7f7 fa02 	bl	8002ef4 <HAL_PCD_EP_SetStall>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 f8de 	bl	800bcb8 <USBD_Get_USB_Status>
 800bafc:	4603      	mov	r3, r0
 800bafe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb24:	78fa      	ldrb	r2, [r7, #3]
 800bb26:	4611      	mov	r1, r2
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f7 fa46 	bl	8002fba <HAL_PCD_EP_ClrStall>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 f8bf 	bl	800bcb8 <USBD_Get_USB_Status>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da0b      	bge.n	800bb7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb64:	78fb      	ldrb	r3, [r7, #3]
 800bb66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb6a:	68f9      	ldr	r1, [r7, #12]
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	00db      	lsls	r3, r3, #3
 800bb70:	4413      	add	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	440b      	add	r3, r1
 800bb76:	3316      	adds	r3, #22
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	e00b      	b.n	800bb94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb7c:	78fb      	ldrb	r3, [r7, #3]
 800bb7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb82:	68f9      	ldr	r1, [r7, #12]
 800bb84:	4613      	mov	r3, r2
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	4413      	add	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	440b      	add	r3, r1
 800bb8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bb92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbba:	78fa      	ldrb	r2, [r7, #3]
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7f7 f835 	bl	8002c2e <HAL_PCD_SetAddress>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 f874 	bl	800bcb8 <USBD_Get_USB_Status>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b086      	sub	sp, #24
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	60f8      	str	r0, [r7, #12]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
 800bbea:	460b      	mov	r3, r1
 800bbec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bbfc:	7af9      	ldrb	r1, [r7, #11]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	f7f7 f93d 	bl	8002e80 <HAL_PCD_EP_Transmit>
 800bc06:	4603      	mov	r3, r0
 800bc08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 f853 	bl	800bcb8 <USBD_Get_USB_Status>
 800bc12:	4603      	mov	r3, r0
 800bc14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc16:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	607a      	str	r2, [r7, #4]
 800bc2a:	603b      	str	r3, [r7, #0]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc3e:	7af9      	ldrb	r1, [r7, #11]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	f7f7 f8c9 	bl	8002dda <HAL_PCD_EP_Receive>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 f832 	bl	800bcb8 <USBD_Get_USB_Status>
 800bc54:	4603      	mov	r3, r0
 800bc56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc58:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc74:	78fa      	ldrb	r2, [r7, #3]
 800bc76:	4611      	mov	r1, r2
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7f7 f8e9 	bl	8002e50 <HAL_PCD_EP_GetRxCount>
 800bc7e:	4603      	mov	r3, r0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc90:	4b03      	ldr	r3, [pc, #12]	@ (800bca0 <USBD_static_malloc+0x18>)
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	200066c4 	.word	0x200066c4

0800bca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]

}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d817      	bhi.n	800bcfc <USBD_Get_USB_Status+0x44>
 800bccc:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd4 <USBD_Get_USB_Status+0x1c>)
 800bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd2:	bf00      	nop
 800bcd4:	0800bce5 	.word	0x0800bce5
 800bcd8:	0800bceb 	.word	0x0800bceb
 800bcdc:	0800bcf1 	.word	0x0800bcf1
 800bce0:	0800bcf7 	.word	0x0800bcf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
    break;
 800bce8:	e00b      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcea:	2303      	movs	r3, #3
 800bcec:	73fb      	strb	r3, [r7, #15]
    break;
 800bcee:	e008      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf4:	e005      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfa:	e002      	b.n	800bd02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	73fb      	strb	r3, [r7, #15]
    break;
 800bd00:	bf00      	nop
  }
  return usb_status;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <std>:
 800bd10:	2300      	movs	r3, #0
 800bd12:	b510      	push	{r4, lr}
 800bd14:	4604      	mov	r4, r0
 800bd16:	e9c0 3300 	strd	r3, r3, [r0]
 800bd1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd1e:	6083      	str	r3, [r0, #8]
 800bd20:	8181      	strh	r1, [r0, #12]
 800bd22:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd24:	81c2      	strh	r2, [r0, #14]
 800bd26:	6183      	str	r3, [r0, #24]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	2208      	movs	r2, #8
 800bd2c:	305c      	adds	r0, #92	@ 0x5c
 800bd2e:	f000 f9f9 	bl	800c124 <memset>
 800bd32:	4b0d      	ldr	r3, [pc, #52]	@ (800bd68 <std+0x58>)
 800bd34:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd36:	4b0d      	ldr	r3, [pc, #52]	@ (800bd6c <std+0x5c>)
 800bd38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <std+0x60>)
 800bd3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <std+0x64>)
 800bd40:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd42:	4b0d      	ldr	r3, [pc, #52]	@ (800bd78 <std+0x68>)
 800bd44:	6224      	str	r4, [r4, #32]
 800bd46:	429c      	cmp	r4, r3
 800bd48:	d006      	beq.n	800bd58 <std+0x48>
 800bd4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd4e:	4294      	cmp	r4, r2
 800bd50:	d002      	beq.n	800bd58 <std+0x48>
 800bd52:	33d0      	adds	r3, #208	@ 0xd0
 800bd54:	429c      	cmp	r4, r3
 800bd56:	d105      	bne.n	800bd64 <std+0x54>
 800bd58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd60:	f000 baae 	b.w	800c2c0 <__retarget_lock_init_recursive>
 800bd64:	bd10      	pop	{r4, pc}
 800bd66:	bf00      	nop
 800bd68:	0800bf75 	.word	0x0800bf75
 800bd6c:	0800bf97 	.word	0x0800bf97
 800bd70:	0800bfcf 	.word	0x0800bfcf
 800bd74:	0800bff3 	.word	0x0800bff3
 800bd78:	200068e4 	.word	0x200068e4

0800bd7c <stdio_exit_handler>:
 800bd7c:	4a02      	ldr	r2, [pc, #8]	@ (800bd88 <stdio_exit_handler+0xc>)
 800bd7e:	4903      	ldr	r1, [pc, #12]	@ (800bd8c <stdio_exit_handler+0x10>)
 800bd80:	4803      	ldr	r0, [pc, #12]	@ (800bd90 <stdio_exit_handler+0x14>)
 800bd82:	f000 b869 	b.w	800be58 <_fwalk_sglue>
 800bd86:	bf00      	nop
 800bd88:	20000104 	.word	0x20000104
 800bd8c:	0800cb7d 	.word	0x0800cb7d
 800bd90:	20000114 	.word	0x20000114

0800bd94 <cleanup_stdio>:
 800bd94:	6841      	ldr	r1, [r0, #4]
 800bd96:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc8 <cleanup_stdio+0x34>)
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	b510      	push	{r4, lr}
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	d001      	beq.n	800bda4 <cleanup_stdio+0x10>
 800bda0:	f000 feec 	bl	800cb7c <_fflush_r>
 800bda4:	68a1      	ldr	r1, [r4, #8]
 800bda6:	4b09      	ldr	r3, [pc, #36]	@ (800bdcc <cleanup_stdio+0x38>)
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d002      	beq.n	800bdb2 <cleanup_stdio+0x1e>
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fee5 	bl	800cb7c <_fflush_r>
 800bdb2:	68e1      	ldr	r1, [r4, #12]
 800bdb4:	4b06      	ldr	r3, [pc, #24]	@ (800bdd0 <cleanup_stdio+0x3c>)
 800bdb6:	4299      	cmp	r1, r3
 800bdb8:	d004      	beq.n	800bdc4 <cleanup_stdio+0x30>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc0:	f000 bedc 	b.w	800cb7c <_fflush_r>
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200068e4 	.word	0x200068e4
 800bdcc:	2000694c 	.word	0x2000694c
 800bdd0:	200069b4 	.word	0x200069b4

0800bdd4 <global_stdio_init.part.0>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	@ (800be04 <global_stdio_init.part.0+0x30>)
 800bdd8:	4c0b      	ldr	r4, [pc, #44]	@ (800be08 <global_stdio_init.part.0+0x34>)
 800bdda:	4a0c      	ldr	r2, [pc, #48]	@ (800be0c <global_stdio_init.part.0+0x38>)
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	4620      	mov	r0, r4
 800bde0:	2200      	movs	r2, #0
 800bde2:	2104      	movs	r1, #4
 800bde4:	f7ff ff94 	bl	800bd10 <std>
 800bde8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdec:	2201      	movs	r2, #1
 800bdee:	2109      	movs	r1, #9
 800bdf0:	f7ff ff8e 	bl	800bd10 <std>
 800bdf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfe:	2112      	movs	r1, #18
 800be00:	f7ff bf86 	b.w	800bd10 <std>
 800be04:	20006a1c 	.word	0x20006a1c
 800be08:	200068e4 	.word	0x200068e4
 800be0c:	0800bd7d 	.word	0x0800bd7d

0800be10 <__sfp_lock_acquire>:
 800be10:	4801      	ldr	r0, [pc, #4]	@ (800be18 <__sfp_lock_acquire+0x8>)
 800be12:	f000 ba56 	b.w	800c2c2 <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	20006a25 	.word	0x20006a25

0800be1c <__sfp_lock_release>:
 800be1c:	4801      	ldr	r0, [pc, #4]	@ (800be24 <__sfp_lock_release+0x8>)
 800be1e:	f000 ba51 	b.w	800c2c4 <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	20006a25 	.word	0x20006a25

0800be28 <__sinit>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	f7ff fff0 	bl	800be10 <__sfp_lock_acquire>
 800be30:	6a23      	ldr	r3, [r4, #32]
 800be32:	b11b      	cbz	r3, 800be3c <__sinit+0x14>
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f7ff bff0 	b.w	800be1c <__sfp_lock_release>
 800be3c:	4b04      	ldr	r3, [pc, #16]	@ (800be50 <__sinit+0x28>)
 800be3e:	6223      	str	r3, [r4, #32]
 800be40:	4b04      	ldr	r3, [pc, #16]	@ (800be54 <__sinit+0x2c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f5      	bne.n	800be34 <__sinit+0xc>
 800be48:	f7ff ffc4 	bl	800bdd4 <global_stdio_init.part.0>
 800be4c:	e7f2      	b.n	800be34 <__sinit+0xc>
 800be4e:	bf00      	nop
 800be50:	0800bd95 	.word	0x0800bd95
 800be54:	20006a1c 	.word	0x20006a1c

0800be58 <_fwalk_sglue>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	4607      	mov	r7, r0
 800be5e:	4688      	mov	r8, r1
 800be60:	4614      	mov	r4, r2
 800be62:	2600      	movs	r6, #0
 800be64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be68:	f1b9 0901 	subs.w	r9, r9, #1
 800be6c:	d505      	bpl.n	800be7a <_fwalk_sglue+0x22>
 800be6e:	6824      	ldr	r4, [r4, #0]
 800be70:	2c00      	cmp	r4, #0
 800be72:	d1f7      	bne.n	800be64 <_fwalk_sglue+0xc>
 800be74:	4630      	mov	r0, r6
 800be76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d907      	bls.n	800be90 <_fwalk_sglue+0x38>
 800be80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be84:	3301      	adds	r3, #1
 800be86:	d003      	beq.n	800be90 <_fwalk_sglue+0x38>
 800be88:	4629      	mov	r1, r5
 800be8a:	4638      	mov	r0, r7
 800be8c:	47c0      	blx	r8
 800be8e:	4306      	orrs	r6, r0
 800be90:	3568      	adds	r5, #104	@ 0x68
 800be92:	e7e9      	b.n	800be68 <_fwalk_sglue+0x10>

0800be94 <iprintf>:
 800be94:	b40f      	push	{r0, r1, r2, r3}
 800be96:	b507      	push	{r0, r1, r2, lr}
 800be98:	4906      	ldr	r1, [pc, #24]	@ (800beb4 <iprintf+0x20>)
 800be9a:	ab04      	add	r3, sp, #16
 800be9c:	6808      	ldr	r0, [r1, #0]
 800be9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea2:	6881      	ldr	r1, [r0, #8]
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	f000 fb3f 	bl	800c528 <_vfiprintf_r>
 800beaa:	b003      	add	sp, #12
 800beac:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb0:	b004      	add	sp, #16
 800beb2:	4770      	bx	lr
 800beb4:	20000110 	.word	0x20000110

0800beb8 <_puts_r>:
 800beb8:	6a03      	ldr	r3, [r0, #32]
 800beba:	b570      	push	{r4, r5, r6, lr}
 800bebc:	6884      	ldr	r4, [r0, #8]
 800bebe:	4605      	mov	r5, r0
 800bec0:	460e      	mov	r6, r1
 800bec2:	b90b      	cbnz	r3, 800bec8 <_puts_r+0x10>
 800bec4:	f7ff ffb0 	bl	800be28 <__sinit>
 800bec8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800beca:	07db      	lsls	r3, r3, #31
 800becc:	d405      	bmi.n	800beda <_puts_r+0x22>
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	0598      	lsls	r0, r3, #22
 800bed2:	d402      	bmi.n	800beda <_puts_r+0x22>
 800bed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bed6:	f000 f9f4 	bl	800c2c2 <__retarget_lock_acquire_recursive>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	0719      	lsls	r1, r3, #28
 800bede:	d502      	bpl.n	800bee6 <_puts_r+0x2e>
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d135      	bne.n	800bf52 <_puts_r+0x9a>
 800bee6:	4621      	mov	r1, r4
 800bee8:	4628      	mov	r0, r5
 800beea:	f000 f8c5 	bl	800c078 <__swsetup_r>
 800beee:	b380      	cbz	r0, 800bf52 <_puts_r+0x9a>
 800bef0:	f04f 35ff 	mov.w	r5, #4294967295
 800bef4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bef6:	07da      	lsls	r2, r3, #31
 800bef8:	d405      	bmi.n	800bf06 <_puts_r+0x4e>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	059b      	lsls	r3, r3, #22
 800befe:	d402      	bmi.n	800bf06 <_puts_r+0x4e>
 800bf00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf02:	f000 f9df 	bl	800c2c4 <__retarget_lock_release_recursive>
 800bf06:	4628      	mov	r0, r5
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da04      	bge.n	800bf18 <_puts_r+0x60>
 800bf0e:	69a2      	ldr	r2, [r4, #24]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	dc17      	bgt.n	800bf44 <_puts_r+0x8c>
 800bf14:	290a      	cmp	r1, #10
 800bf16:	d015      	beq.n	800bf44 <_puts_r+0x8c>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	6022      	str	r2, [r4, #0]
 800bf1e:	7019      	strb	r1, [r3, #0]
 800bf20:	68a3      	ldr	r3, [r4, #8]
 800bf22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf26:	3b01      	subs	r3, #1
 800bf28:	60a3      	str	r3, [r4, #8]
 800bf2a:	2900      	cmp	r1, #0
 800bf2c:	d1ed      	bne.n	800bf0a <_puts_r+0x52>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	da11      	bge.n	800bf56 <_puts_r+0x9e>
 800bf32:	4622      	mov	r2, r4
 800bf34:	210a      	movs	r1, #10
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 f85f 	bl	800bffa <__swbuf_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d0d7      	beq.n	800bef0 <_puts_r+0x38>
 800bf40:	250a      	movs	r5, #10
 800bf42:	e7d7      	b.n	800bef4 <_puts_r+0x3c>
 800bf44:	4622      	mov	r2, r4
 800bf46:	4628      	mov	r0, r5
 800bf48:	f000 f857 	bl	800bffa <__swbuf_r>
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	d1e7      	bne.n	800bf20 <_puts_r+0x68>
 800bf50:	e7ce      	b.n	800bef0 <_puts_r+0x38>
 800bf52:	3e01      	subs	r6, #1
 800bf54:	e7e4      	b.n	800bf20 <_puts_r+0x68>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	1c5a      	adds	r2, r3, #1
 800bf5a:	6022      	str	r2, [r4, #0]
 800bf5c:	220a      	movs	r2, #10
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	e7ee      	b.n	800bf40 <_puts_r+0x88>
	...

0800bf64 <puts>:
 800bf64:	4b02      	ldr	r3, [pc, #8]	@ (800bf70 <puts+0xc>)
 800bf66:	4601      	mov	r1, r0
 800bf68:	6818      	ldr	r0, [r3, #0]
 800bf6a:	f7ff bfa5 	b.w	800beb8 <_puts_r>
 800bf6e:	bf00      	nop
 800bf70:	20000110 	.word	0x20000110

0800bf74 <__sread>:
 800bf74:	b510      	push	{r4, lr}
 800bf76:	460c      	mov	r4, r1
 800bf78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf7c:	f000 f952 	bl	800c224 <_read_r>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	bfab      	itete	ge
 800bf84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf86:	89a3      	ldrhlt	r3, [r4, #12]
 800bf88:	181b      	addge	r3, r3, r0
 800bf8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf8e:	bfac      	ite	ge
 800bf90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf92:	81a3      	strhlt	r3, [r4, #12]
 800bf94:	bd10      	pop	{r4, pc}

0800bf96 <__swrite>:
 800bf96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9a:	461f      	mov	r7, r3
 800bf9c:	898b      	ldrh	r3, [r1, #12]
 800bf9e:	05db      	lsls	r3, r3, #23
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	4616      	mov	r6, r2
 800bfa6:	d505      	bpl.n	800bfb4 <__swrite+0x1e>
 800bfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfac:	2302      	movs	r3, #2
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f000 f926 	bl	800c200 <_lseek_r>
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfbe:	81a3      	strh	r3, [r4, #12]
 800bfc0:	4632      	mov	r2, r6
 800bfc2:	463b      	mov	r3, r7
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfca:	f000 b93d 	b.w	800c248 <_write_r>

0800bfce <__sseek>:
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	460c      	mov	r4, r1
 800bfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd6:	f000 f913 	bl	800c200 <_lseek_r>
 800bfda:	1c43      	adds	r3, r0, #1
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	bf15      	itete	ne
 800bfe0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bfe2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bfe6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bfea:	81a3      	strheq	r3, [r4, #12]
 800bfec:	bf18      	it	ne
 800bfee:	81a3      	strhne	r3, [r4, #12]
 800bff0:	bd10      	pop	{r4, pc}

0800bff2 <__sclose>:
 800bff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff6:	f000 b89d 	b.w	800c134 <_close_r>

0800bffa <__swbuf_r>:
 800bffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffc:	460e      	mov	r6, r1
 800bffe:	4614      	mov	r4, r2
 800c000:	4605      	mov	r5, r0
 800c002:	b118      	cbz	r0, 800c00c <__swbuf_r+0x12>
 800c004:	6a03      	ldr	r3, [r0, #32]
 800c006:	b90b      	cbnz	r3, 800c00c <__swbuf_r+0x12>
 800c008:	f7ff ff0e 	bl	800be28 <__sinit>
 800c00c:	69a3      	ldr	r3, [r4, #24]
 800c00e:	60a3      	str	r3, [r4, #8]
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	071a      	lsls	r2, r3, #28
 800c014:	d501      	bpl.n	800c01a <__swbuf_r+0x20>
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	b943      	cbnz	r3, 800c02c <__swbuf_r+0x32>
 800c01a:	4621      	mov	r1, r4
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 f82b 	bl	800c078 <__swsetup_r>
 800c022:	b118      	cbz	r0, 800c02c <__swbuf_r+0x32>
 800c024:	f04f 37ff 	mov.w	r7, #4294967295
 800c028:	4638      	mov	r0, r7
 800c02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c02c:	6823      	ldr	r3, [r4, #0]
 800c02e:	6922      	ldr	r2, [r4, #16]
 800c030:	1a98      	subs	r0, r3, r2
 800c032:	6963      	ldr	r3, [r4, #20]
 800c034:	b2f6      	uxtb	r6, r6
 800c036:	4283      	cmp	r3, r0
 800c038:	4637      	mov	r7, r6
 800c03a:	dc05      	bgt.n	800c048 <__swbuf_r+0x4e>
 800c03c:	4621      	mov	r1, r4
 800c03e:	4628      	mov	r0, r5
 800c040:	f000 fd9c 	bl	800cb7c <_fflush_r>
 800c044:	2800      	cmp	r0, #0
 800c046:	d1ed      	bne.n	800c024 <__swbuf_r+0x2a>
 800c048:	68a3      	ldr	r3, [r4, #8]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	60a3      	str	r3, [r4, #8]
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	6022      	str	r2, [r4, #0]
 800c054:	701e      	strb	r6, [r3, #0]
 800c056:	6962      	ldr	r2, [r4, #20]
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d004      	beq.n	800c068 <__swbuf_r+0x6e>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	07db      	lsls	r3, r3, #31
 800c062:	d5e1      	bpl.n	800c028 <__swbuf_r+0x2e>
 800c064:	2e0a      	cmp	r6, #10
 800c066:	d1df      	bne.n	800c028 <__swbuf_r+0x2e>
 800c068:	4621      	mov	r1, r4
 800c06a:	4628      	mov	r0, r5
 800c06c:	f000 fd86 	bl	800cb7c <_fflush_r>
 800c070:	2800      	cmp	r0, #0
 800c072:	d0d9      	beq.n	800c028 <__swbuf_r+0x2e>
 800c074:	e7d6      	b.n	800c024 <__swbuf_r+0x2a>
	...

0800c078 <__swsetup_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4b29      	ldr	r3, [pc, #164]	@ (800c120 <__swsetup_r+0xa8>)
 800c07c:	4605      	mov	r5, r0
 800c07e:	6818      	ldr	r0, [r3, #0]
 800c080:	460c      	mov	r4, r1
 800c082:	b118      	cbz	r0, 800c08c <__swsetup_r+0x14>
 800c084:	6a03      	ldr	r3, [r0, #32]
 800c086:	b90b      	cbnz	r3, 800c08c <__swsetup_r+0x14>
 800c088:	f7ff fece 	bl	800be28 <__sinit>
 800c08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c090:	0719      	lsls	r1, r3, #28
 800c092:	d422      	bmi.n	800c0da <__swsetup_r+0x62>
 800c094:	06da      	lsls	r2, r3, #27
 800c096:	d407      	bmi.n	800c0a8 <__swsetup_r+0x30>
 800c098:	2209      	movs	r2, #9
 800c09a:	602a      	str	r2, [r5, #0]
 800c09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a0:	81a3      	strh	r3, [r4, #12]
 800c0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a6:	e033      	b.n	800c110 <__swsetup_r+0x98>
 800c0a8:	0758      	lsls	r0, r3, #29
 800c0aa:	d512      	bpl.n	800c0d2 <__swsetup_r+0x5a>
 800c0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0ae:	b141      	cbz	r1, 800c0c2 <__swsetup_r+0x4a>
 800c0b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0b4:	4299      	cmp	r1, r3
 800c0b6:	d002      	beq.n	800c0be <__swsetup_r+0x46>
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f000 f913 	bl	800c2e4 <_free_r>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	6063      	str	r3, [r4, #4]
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	f043 0308 	orr.w	r3, r3, #8
 800c0d8:	81a3      	strh	r3, [r4, #12]
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	b94b      	cbnz	r3, 800c0f2 <__swsetup_r+0x7a>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0e8:	d003      	beq.n	800c0f2 <__swsetup_r+0x7a>
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f000 fd93 	bl	800cc18 <__smakebuf_r>
 800c0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f6:	f013 0201 	ands.w	r2, r3, #1
 800c0fa:	d00a      	beq.n	800c112 <__swsetup_r+0x9a>
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	60a2      	str	r2, [r4, #8]
 800c100:	6962      	ldr	r2, [r4, #20]
 800c102:	4252      	negs	r2, r2
 800c104:	61a2      	str	r2, [r4, #24]
 800c106:	6922      	ldr	r2, [r4, #16]
 800c108:	b942      	cbnz	r2, 800c11c <__swsetup_r+0xa4>
 800c10a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c10e:	d1c5      	bne.n	800c09c <__swsetup_r+0x24>
 800c110:	bd38      	pop	{r3, r4, r5, pc}
 800c112:	0799      	lsls	r1, r3, #30
 800c114:	bf58      	it	pl
 800c116:	6962      	ldrpl	r2, [r4, #20]
 800c118:	60a2      	str	r2, [r4, #8]
 800c11a:	e7f4      	b.n	800c106 <__swsetup_r+0x8e>
 800c11c:	2000      	movs	r0, #0
 800c11e:	e7f7      	b.n	800c110 <__swsetup_r+0x98>
 800c120:	20000110 	.word	0x20000110

0800c124 <memset>:
 800c124:	4402      	add	r2, r0
 800c126:	4603      	mov	r3, r0
 800c128:	4293      	cmp	r3, r2
 800c12a:	d100      	bne.n	800c12e <memset+0xa>
 800c12c:	4770      	bx	lr
 800c12e:	f803 1b01 	strb.w	r1, [r3], #1
 800c132:	e7f9      	b.n	800c128 <memset+0x4>

0800c134 <_close_r>:
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	4d06      	ldr	r5, [pc, #24]	@ (800c150 <_close_r+0x1c>)
 800c138:	2300      	movs	r3, #0
 800c13a:	4604      	mov	r4, r0
 800c13c:	4608      	mov	r0, r1
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	f7f5 fb7f 	bl	8001842 <_close>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_close_r+0x1a>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_close_r+0x1a>
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	20006a20 	.word	0x20006a20

0800c154 <_reclaim_reent>:
 800c154:	4b29      	ldr	r3, [pc, #164]	@ (800c1fc <_reclaim_reent+0xa8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4283      	cmp	r3, r0
 800c15a:	b570      	push	{r4, r5, r6, lr}
 800c15c:	4604      	mov	r4, r0
 800c15e:	d04b      	beq.n	800c1f8 <_reclaim_reent+0xa4>
 800c160:	69c3      	ldr	r3, [r0, #28]
 800c162:	b1ab      	cbz	r3, 800c190 <_reclaim_reent+0x3c>
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	b16b      	cbz	r3, 800c184 <_reclaim_reent+0x30>
 800c168:	2500      	movs	r5, #0
 800c16a:	69e3      	ldr	r3, [r4, #28]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	5959      	ldr	r1, [r3, r5]
 800c170:	2900      	cmp	r1, #0
 800c172:	d13b      	bne.n	800c1ec <_reclaim_reent+0x98>
 800c174:	3504      	adds	r5, #4
 800c176:	2d80      	cmp	r5, #128	@ 0x80
 800c178:	d1f7      	bne.n	800c16a <_reclaim_reent+0x16>
 800c17a:	69e3      	ldr	r3, [r4, #28]
 800c17c:	4620      	mov	r0, r4
 800c17e:	68d9      	ldr	r1, [r3, #12]
 800c180:	f000 f8b0 	bl	800c2e4 <_free_r>
 800c184:	69e3      	ldr	r3, [r4, #28]
 800c186:	6819      	ldr	r1, [r3, #0]
 800c188:	b111      	cbz	r1, 800c190 <_reclaim_reent+0x3c>
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 f8aa 	bl	800c2e4 <_free_r>
 800c190:	6961      	ldr	r1, [r4, #20]
 800c192:	b111      	cbz	r1, 800c19a <_reclaim_reent+0x46>
 800c194:	4620      	mov	r0, r4
 800c196:	f000 f8a5 	bl	800c2e4 <_free_r>
 800c19a:	69e1      	ldr	r1, [r4, #28]
 800c19c:	b111      	cbz	r1, 800c1a4 <_reclaim_reent+0x50>
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 f8a0 	bl	800c2e4 <_free_r>
 800c1a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c1a6:	b111      	cbz	r1, 800c1ae <_reclaim_reent+0x5a>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 f89b 	bl	800c2e4 <_free_r>
 800c1ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1b0:	b111      	cbz	r1, 800c1b8 <_reclaim_reent+0x64>
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 f896 	bl	800c2e4 <_free_r>
 800c1b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c1ba:	b111      	cbz	r1, 800c1c2 <_reclaim_reent+0x6e>
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 f891 	bl	800c2e4 <_free_r>
 800c1c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c1c4:	b111      	cbz	r1, 800c1cc <_reclaim_reent+0x78>
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 f88c 	bl	800c2e4 <_free_r>
 800c1cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c1ce:	b111      	cbz	r1, 800c1d6 <_reclaim_reent+0x82>
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f000 f887 	bl	800c2e4 <_free_r>
 800c1d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c1d8:	b111      	cbz	r1, 800c1e0 <_reclaim_reent+0x8c>
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 f882 	bl	800c2e4 <_free_r>
 800c1e0:	6a23      	ldr	r3, [r4, #32]
 800c1e2:	b14b      	cbz	r3, 800c1f8 <_reclaim_reent+0xa4>
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1ea:	4718      	bx	r3
 800c1ec:	680e      	ldr	r6, [r1, #0]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 f878 	bl	800c2e4 <_free_r>
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	e7bb      	b.n	800c170 <_reclaim_reent+0x1c>
 800c1f8:	bd70      	pop	{r4, r5, r6, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000110 	.word	0x20000110

0800c200 <_lseek_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d07      	ldr	r5, [pc, #28]	@ (800c220 <_lseek_r+0x20>)
 800c204:	4604      	mov	r4, r0
 800c206:	4608      	mov	r0, r1
 800c208:	4611      	mov	r1, r2
 800c20a:	2200      	movs	r2, #0
 800c20c:	602a      	str	r2, [r5, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f7f5 fb3e 	bl	8001890 <_lseek>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_lseek_r+0x1e>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_lseek_r+0x1e>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	20006a20 	.word	0x20006a20

0800c224 <_read_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	@ (800c244 <_read_r+0x20>)
 800c228:	4604      	mov	r4, r0
 800c22a:	4608      	mov	r0, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	602a      	str	r2, [r5, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	f7f5 facc 	bl	80017d0 <_read>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_read_r+0x1e>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_read_r+0x1e>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	20006a20 	.word	0x20006a20

0800c248 <_write_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4d07      	ldr	r5, [pc, #28]	@ (800c268 <_write_r+0x20>)
 800c24c:	4604      	mov	r4, r0
 800c24e:	4608      	mov	r0, r1
 800c250:	4611      	mov	r1, r2
 800c252:	2200      	movs	r2, #0
 800c254:	602a      	str	r2, [r5, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	f7f5 fad7 	bl	800180a <_write>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d102      	bne.n	800c266 <_write_r+0x1e>
 800c260:	682b      	ldr	r3, [r5, #0]
 800c262:	b103      	cbz	r3, 800c266 <_write_r+0x1e>
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	bd38      	pop	{r3, r4, r5, pc}
 800c268:	20006a20 	.word	0x20006a20

0800c26c <__errno>:
 800c26c:	4b01      	ldr	r3, [pc, #4]	@ (800c274 <__errno+0x8>)
 800c26e:	6818      	ldr	r0, [r3, #0]
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	20000110 	.word	0x20000110

0800c278 <__libc_init_array>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	4d0d      	ldr	r5, [pc, #52]	@ (800c2b0 <__libc_init_array+0x38>)
 800c27c:	4c0d      	ldr	r4, [pc, #52]	@ (800c2b4 <__libc_init_array+0x3c>)
 800c27e:	1b64      	subs	r4, r4, r5
 800c280:	10a4      	asrs	r4, r4, #2
 800c282:	2600      	movs	r6, #0
 800c284:	42a6      	cmp	r6, r4
 800c286:	d109      	bne.n	800c29c <__libc_init_array+0x24>
 800c288:	4d0b      	ldr	r5, [pc, #44]	@ (800c2b8 <__libc_init_array+0x40>)
 800c28a:	4c0c      	ldr	r4, [pc, #48]	@ (800c2bc <__libc_init_array+0x44>)
 800c28c:	f001 fb88 	bl	800d9a0 <_init>
 800c290:	1b64      	subs	r4, r4, r5
 800c292:	10a4      	asrs	r4, r4, #2
 800c294:	2600      	movs	r6, #0
 800c296:	42a6      	cmp	r6, r4
 800c298:	d105      	bne.n	800c2a6 <__libc_init_array+0x2e>
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a0:	4798      	blx	r3
 800c2a2:	3601      	adds	r6, #1
 800c2a4:	e7ee      	b.n	800c284 <__libc_init_array+0xc>
 800c2a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2aa:	4798      	blx	r3
 800c2ac:	3601      	adds	r6, #1
 800c2ae:	e7f2      	b.n	800c296 <__libc_init_array+0x1e>
 800c2b0:	0800dbc8 	.word	0x0800dbc8
 800c2b4:	0800dbc8 	.word	0x0800dbc8
 800c2b8:	0800dbc8 	.word	0x0800dbc8
 800c2bc:	0800dbcc 	.word	0x0800dbcc

0800c2c0 <__retarget_lock_init_recursive>:
 800c2c0:	4770      	bx	lr

0800c2c2 <__retarget_lock_acquire_recursive>:
 800c2c2:	4770      	bx	lr

0800c2c4 <__retarget_lock_release_recursive>:
 800c2c4:	4770      	bx	lr

0800c2c6 <memcpy>:
 800c2c6:	440a      	add	r2, r1
 800c2c8:	4291      	cmp	r1, r2
 800c2ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2ce:	d100      	bne.n	800c2d2 <memcpy+0xc>
 800c2d0:	4770      	bx	lr
 800c2d2:	b510      	push	{r4, lr}
 800c2d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2dc:	4291      	cmp	r1, r2
 800c2de:	d1f9      	bne.n	800c2d4 <memcpy+0xe>
 800c2e0:	bd10      	pop	{r4, pc}
	...

0800c2e4 <_free_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	2900      	cmp	r1, #0
 800c2ea:	d041      	beq.n	800c370 <_free_r+0x8c>
 800c2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f0:	1f0c      	subs	r4, r1, #4
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bfb8      	it	lt
 800c2f6:	18e4      	addlt	r4, r4, r3
 800c2f8:	f000 f8e0 	bl	800c4bc <__malloc_lock>
 800c2fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c374 <_free_r+0x90>)
 800c2fe:	6813      	ldr	r3, [r2, #0]
 800c300:	b933      	cbnz	r3, 800c310 <_free_r+0x2c>
 800c302:	6063      	str	r3, [r4, #4]
 800c304:	6014      	str	r4, [r2, #0]
 800c306:	4628      	mov	r0, r5
 800c308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c30c:	f000 b8dc 	b.w	800c4c8 <__malloc_unlock>
 800c310:	42a3      	cmp	r3, r4
 800c312:	d908      	bls.n	800c326 <_free_r+0x42>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	1821      	adds	r1, r4, r0
 800c318:	428b      	cmp	r3, r1
 800c31a:	bf01      	itttt	eq
 800c31c:	6819      	ldreq	r1, [r3, #0]
 800c31e:	685b      	ldreq	r3, [r3, #4]
 800c320:	1809      	addeq	r1, r1, r0
 800c322:	6021      	streq	r1, [r4, #0]
 800c324:	e7ed      	b.n	800c302 <_free_r+0x1e>
 800c326:	461a      	mov	r2, r3
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	b10b      	cbz	r3, 800c330 <_free_r+0x4c>
 800c32c:	42a3      	cmp	r3, r4
 800c32e:	d9fa      	bls.n	800c326 <_free_r+0x42>
 800c330:	6811      	ldr	r1, [r2, #0]
 800c332:	1850      	adds	r0, r2, r1
 800c334:	42a0      	cmp	r0, r4
 800c336:	d10b      	bne.n	800c350 <_free_r+0x6c>
 800c338:	6820      	ldr	r0, [r4, #0]
 800c33a:	4401      	add	r1, r0
 800c33c:	1850      	adds	r0, r2, r1
 800c33e:	4283      	cmp	r3, r0
 800c340:	6011      	str	r1, [r2, #0]
 800c342:	d1e0      	bne.n	800c306 <_free_r+0x22>
 800c344:	6818      	ldr	r0, [r3, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	6053      	str	r3, [r2, #4]
 800c34a:	4408      	add	r0, r1
 800c34c:	6010      	str	r0, [r2, #0]
 800c34e:	e7da      	b.n	800c306 <_free_r+0x22>
 800c350:	d902      	bls.n	800c358 <_free_r+0x74>
 800c352:	230c      	movs	r3, #12
 800c354:	602b      	str	r3, [r5, #0]
 800c356:	e7d6      	b.n	800c306 <_free_r+0x22>
 800c358:	6820      	ldr	r0, [r4, #0]
 800c35a:	1821      	adds	r1, r4, r0
 800c35c:	428b      	cmp	r3, r1
 800c35e:	bf04      	itt	eq
 800c360:	6819      	ldreq	r1, [r3, #0]
 800c362:	685b      	ldreq	r3, [r3, #4]
 800c364:	6063      	str	r3, [r4, #4]
 800c366:	bf04      	itt	eq
 800c368:	1809      	addeq	r1, r1, r0
 800c36a:	6021      	streq	r1, [r4, #0]
 800c36c:	6054      	str	r4, [r2, #4]
 800c36e:	e7ca      	b.n	800c306 <_free_r+0x22>
 800c370:	bd38      	pop	{r3, r4, r5, pc}
 800c372:	bf00      	nop
 800c374:	20006a2c 	.word	0x20006a2c

0800c378 <sbrk_aligned>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	4e0f      	ldr	r6, [pc, #60]	@ (800c3b8 <sbrk_aligned+0x40>)
 800c37c:	460c      	mov	r4, r1
 800c37e:	6831      	ldr	r1, [r6, #0]
 800c380:	4605      	mov	r5, r0
 800c382:	b911      	cbnz	r1, 800c38a <sbrk_aligned+0x12>
 800c384:	f000 fca6 	bl	800ccd4 <_sbrk_r>
 800c388:	6030      	str	r0, [r6, #0]
 800c38a:	4621      	mov	r1, r4
 800c38c:	4628      	mov	r0, r5
 800c38e:	f000 fca1 	bl	800ccd4 <_sbrk_r>
 800c392:	1c43      	adds	r3, r0, #1
 800c394:	d103      	bne.n	800c39e <sbrk_aligned+0x26>
 800c396:	f04f 34ff 	mov.w	r4, #4294967295
 800c39a:	4620      	mov	r0, r4
 800c39c:	bd70      	pop	{r4, r5, r6, pc}
 800c39e:	1cc4      	adds	r4, r0, #3
 800c3a0:	f024 0403 	bic.w	r4, r4, #3
 800c3a4:	42a0      	cmp	r0, r4
 800c3a6:	d0f8      	beq.n	800c39a <sbrk_aligned+0x22>
 800c3a8:	1a21      	subs	r1, r4, r0
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f000 fc92 	bl	800ccd4 <_sbrk_r>
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d1f2      	bne.n	800c39a <sbrk_aligned+0x22>
 800c3b4:	e7ef      	b.n	800c396 <sbrk_aligned+0x1e>
 800c3b6:	bf00      	nop
 800c3b8:	20006a28 	.word	0x20006a28

0800c3bc <_malloc_r>:
 800c3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	1ccd      	adds	r5, r1, #3
 800c3c2:	f025 0503 	bic.w	r5, r5, #3
 800c3c6:	3508      	adds	r5, #8
 800c3c8:	2d0c      	cmp	r5, #12
 800c3ca:	bf38      	it	cc
 800c3cc:	250c      	movcc	r5, #12
 800c3ce:	2d00      	cmp	r5, #0
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	db01      	blt.n	800c3d8 <_malloc_r+0x1c>
 800c3d4:	42a9      	cmp	r1, r5
 800c3d6:	d904      	bls.n	800c3e2 <_malloc_r+0x26>
 800c3d8:	230c      	movs	r3, #12
 800c3da:	6033      	str	r3, [r6, #0]
 800c3dc:	2000      	movs	r0, #0
 800c3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c4b8 <_malloc_r+0xfc>
 800c3e6:	f000 f869 	bl	800c4bc <__malloc_lock>
 800c3ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ee:	461c      	mov	r4, r3
 800c3f0:	bb44      	cbnz	r4, 800c444 <_malloc_r+0x88>
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7ff ffbf 	bl	800c378 <sbrk_aligned>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	d158      	bne.n	800c4b2 <_malloc_r+0xf6>
 800c400:	f8d8 4000 	ldr.w	r4, [r8]
 800c404:	4627      	mov	r7, r4
 800c406:	2f00      	cmp	r7, #0
 800c408:	d143      	bne.n	800c492 <_malloc_r+0xd6>
 800c40a:	2c00      	cmp	r4, #0
 800c40c:	d04b      	beq.n	800c4a6 <_malloc_r+0xea>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	4639      	mov	r1, r7
 800c412:	4630      	mov	r0, r6
 800c414:	eb04 0903 	add.w	r9, r4, r3
 800c418:	f000 fc5c 	bl	800ccd4 <_sbrk_r>
 800c41c:	4581      	cmp	r9, r0
 800c41e:	d142      	bne.n	800c4a6 <_malloc_r+0xea>
 800c420:	6821      	ldr	r1, [r4, #0]
 800c422:	1a6d      	subs	r5, r5, r1
 800c424:	4629      	mov	r1, r5
 800c426:	4630      	mov	r0, r6
 800c428:	f7ff ffa6 	bl	800c378 <sbrk_aligned>
 800c42c:	3001      	adds	r0, #1
 800c42e:	d03a      	beq.n	800c4a6 <_malloc_r+0xea>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	442b      	add	r3, r5
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	f8d8 3000 	ldr.w	r3, [r8]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	bb62      	cbnz	r2, 800c498 <_malloc_r+0xdc>
 800c43e:	f8c8 7000 	str.w	r7, [r8]
 800c442:	e00f      	b.n	800c464 <_malloc_r+0xa8>
 800c444:	6822      	ldr	r2, [r4, #0]
 800c446:	1b52      	subs	r2, r2, r5
 800c448:	d420      	bmi.n	800c48c <_malloc_r+0xd0>
 800c44a:	2a0b      	cmp	r2, #11
 800c44c:	d917      	bls.n	800c47e <_malloc_r+0xc2>
 800c44e:	1961      	adds	r1, r4, r5
 800c450:	42a3      	cmp	r3, r4
 800c452:	6025      	str	r5, [r4, #0]
 800c454:	bf18      	it	ne
 800c456:	6059      	strne	r1, [r3, #4]
 800c458:	6863      	ldr	r3, [r4, #4]
 800c45a:	bf08      	it	eq
 800c45c:	f8c8 1000 	streq.w	r1, [r8]
 800c460:	5162      	str	r2, [r4, r5]
 800c462:	604b      	str	r3, [r1, #4]
 800c464:	4630      	mov	r0, r6
 800c466:	f000 f82f 	bl	800c4c8 <__malloc_unlock>
 800c46a:	f104 000b 	add.w	r0, r4, #11
 800c46e:	1d23      	adds	r3, r4, #4
 800c470:	f020 0007 	bic.w	r0, r0, #7
 800c474:	1ac2      	subs	r2, r0, r3
 800c476:	bf1c      	itt	ne
 800c478:	1a1b      	subne	r3, r3, r0
 800c47a:	50a3      	strne	r3, [r4, r2]
 800c47c:	e7af      	b.n	800c3de <_malloc_r+0x22>
 800c47e:	6862      	ldr	r2, [r4, #4]
 800c480:	42a3      	cmp	r3, r4
 800c482:	bf0c      	ite	eq
 800c484:	f8c8 2000 	streq.w	r2, [r8]
 800c488:	605a      	strne	r2, [r3, #4]
 800c48a:	e7eb      	b.n	800c464 <_malloc_r+0xa8>
 800c48c:	4623      	mov	r3, r4
 800c48e:	6864      	ldr	r4, [r4, #4]
 800c490:	e7ae      	b.n	800c3f0 <_malloc_r+0x34>
 800c492:	463c      	mov	r4, r7
 800c494:	687f      	ldr	r7, [r7, #4]
 800c496:	e7b6      	b.n	800c406 <_malloc_r+0x4a>
 800c498:	461a      	mov	r2, r3
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	d1fb      	bne.n	800c498 <_malloc_r+0xdc>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	6053      	str	r3, [r2, #4]
 800c4a4:	e7de      	b.n	800c464 <_malloc_r+0xa8>
 800c4a6:	230c      	movs	r3, #12
 800c4a8:	6033      	str	r3, [r6, #0]
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f000 f80c 	bl	800c4c8 <__malloc_unlock>
 800c4b0:	e794      	b.n	800c3dc <_malloc_r+0x20>
 800c4b2:	6005      	str	r5, [r0, #0]
 800c4b4:	e7d6      	b.n	800c464 <_malloc_r+0xa8>
 800c4b6:	bf00      	nop
 800c4b8:	20006a2c 	.word	0x20006a2c

0800c4bc <__malloc_lock>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	@ (800c4c4 <__malloc_lock+0x8>)
 800c4be:	f7ff bf00 	b.w	800c2c2 <__retarget_lock_acquire_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	20006a24 	.word	0x20006a24

0800c4c8 <__malloc_unlock>:
 800c4c8:	4801      	ldr	r0, [pc, #4]	@ (800c4d0 <__malloc_unlock+0x8>)
 800c4ca:	f7ff befb 	b.w	800c2c4 <__retarget_lock_release_recursive>
 800c4ce:	bf00      	nop
 800c4d0:	20006a24 	.word	0x20006a24

0800c4d4 <__sfputc_r>:
 800c4d4:	6893      	ldr	r3, [r2, #8]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	b410      	push	{r4}
 800c4dc:	6093      	str	r3, [r2, #8]
 800c4de:	da08      	bge.n	800c4f2 <__sfputc_r+0x1e>
 800c4e0:	6994      	ldr	r4, [r2, #24]
 800c4e2:	42a3      	cmp	r3, r4
 800c4e4:	db01      	blt.n	800c4ea <__sfputc_r+0x16>
 800c4e6:	290a      	cmp	r1, #10
 800c4e8:	d103      	bne.n	800c4f2 <__sfputc_r+0x1e>
 800c4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ee:	f7ff bd84 	b.w	800bffa <__swbuf_r>
 800c4f2:	6813      	ldr	r3, [r2, #0]
 800c4f4:	1c58      	adds	r0, r3, #1
 800c4f6:	6010      	str	r0, [r2, #0]
 800c4f8:	7019      	strb	r1, [r3, #0]
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <__sfputs_r>:
 800c502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c504:	4606      	mov	r6, r0
 800c506:	460f      	mov	r7, r1
 800c508:	4614      	mov	r4, r2
 800c50a:	18d5      	adds	r5, r2, r3
 800c50c:	42ac      	cmp	r4, r5
 800c50e:	d101      	bne.n	800c514 <__sfputs_r+0x12>
 800c510:	2000      	movs	r0, #0
 800c512:	e007      	b.n	800c524 <__sfputs_r+0x22>
 800c514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c518:	463a      	mov	r2, r7
 800c51a:	4630      	mov	r0, r6
 800c51c:	f7ff ffda 	bl	800c4d4 <__sfputc_r>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d1f3      	bne.n	800c50c <__sfputs_r+0xa>
 800c524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c528 <_vfiprintf_r>:
 800c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	460d      	mov	r5, r1
 800c52e:	b09d      	sub	sp, #116	@ 0x74
 800c530:	4614      	mov	r4, r2
 800c532:	4698      	mov	r8, r3
 800c534:	4606      	mov	r6, r0
 800c536:	b118      	cbz	r0, 800c540 <_vfiprintf_r+0x18>
 800c538:	6a03      	ldr	r3, [r0, #32]
 800c53a:	b90b      	cbnz	r3, 800c540 <_vfiprintf_r+0x18>
 800c53c:	f7ff fc74 	bl	800be28 <__sinit>
 800c540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c542:	07d9      	lsls	r1, r3, #31
 800c544:	d405      	bmi.n	800c552 <_vfiprintf_r+0x2a>
 800c546:	89ab      	ldrh	r3, [r5, #12]
 800c548:	059a      	lsls	r2, r3, #22
 800c54a:	d402      	bmi.n	800c552 <_vfiprintf_r+0x2a>
 800c54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c54e:	f7ff feb8 	bl	800c2c2 <__retarget_lock_acquire_recursive>
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	071b      	lsls	r3, r3, #28
 800c556:	d501      	bpl.n	800c55c <_vfiprintf_r+0x34>
 800c558:	692b      	ldr	r3, [r5, #16]
 800c55a:	b99b      	cbnz	r3, 800c584 <_vfiprintf_r+0x5c>
 800c55c:	4629      	mov	r1, r5
 800c55e:	4630      	mov	r0, r6
 800c560:	f7ff fd8a 	bl	800c078 <__swsetup_r>
 800c564:	b170      	cbz	r0, 800c584 <_vfiprintf_r+0x5c>
 800c566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c568:	07dc      	lsls	r4, r3, #31
 800c56a:	d504      	bpl.n	800c576 <_vfiprintf_r+0x4e>
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	b01d      	add	sp, #116	@ 0x74
 800c572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c576:	89ab      	ldrh	r3, [r5, #12]
 800c578:	0598      	lsls	r0, r3, #22
 800c57a:	d4f7      	bmi.n	800c56c <_vfiprintf_r+0x44>
 800c57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c57e:	f7ff fea1 	bl	800c2c4 <__retarget_lock_release_recursive>
 800c582:	e7f3      	b.n	800c56c <_vfiprintf_r+0x44>
 800c584:	2300      	movs	r3, #0
 800c586:	9309      	str	r3, [sp, #36]	@ 0x24
 800c588:	2320      	movs	r3, #32
 800c58a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c592:	2330      	movs	r3, #48	@ 0x30
 800c594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c744 <_vfiprintf_r+0x21c>
 800c598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c59c:	f04f 0901 	mov.w	r9, #1
 800c5a0:	4623      	mov	r3, r4
 800c5a2:	469a      	mov	sl, r3
 800c5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5a8:	b10a      	cbz	r2, 800c5ae <_vfiprintf_r+0x86>
 800c5aa:	2a25      	cmp	r2, #37	@ 0x25
 800c5ac:	d1f9      	bne.n	800c5a2 <_vfiprintf_r+0x7a>
 800c5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c5b2:	d00b      	beq.n	800c5cc <_vfiprintf_r+0xa4>
 800c5b4:	465b      	mov	r3, fp
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7ff ffa1 	bl	800c502 <__sfputs_r>
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	f000 80a7 	beq.w	800c714 <_vfiprintf_r+0x1ec>
 800c5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5c8:	445a      	add	r2, fp
 800c5ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 809f 	beq.w	800c714 <_vfiprintf_r+0x1ec>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5e0:	f10a 0a01 	add.w	sl, sl, #1
 800c5e4:	9304      	str	r3, [sp, #16]
 800c5e6:	9307      	str	r3, [sp, #28]
 800c5e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5ee:	4654      	mov	r4, sl
 800c5f0:	2205      	movs	r2, #5
 800c5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f6:	4853      	ldr	r0, [pc, #332]	@ (800c744 <_vfiprintf_r+0x21c>)
 800c5f8:	f7f3 fdea 	bl	80001d0 <memchr>
 800c5fc:	9a04      	ldr	r2, [sp, #16]
 800c5fe:	b9d8      	cbnz	r0, 800c638 <_vfiprintf_r+0x110>
 800c600:	06d1      	lsls	r1, r2, #27
 800c602:	bf44      	itt	mi
 800c604:	2320      	movmi	r3, #32
 800c606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c60a:	0713      	lsls	r3, r2, #28
 800c60c:	bf44      	itt	mi
 800c60e:	232b      	movmi	r3, #43	@ 0x2b
 800c610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c614:	f89a 3000 	ldrb.w	r3, [sl]
 800c618:	2b2a      	cmp	r3, #42	@ 0x2a
 800c61a:	d015      	beq.n	800c648 <_vfiprintf_r+0x120>
 800c61c:	9a07      	ldr	r2, [sp, #28]
 800c61e:	4654      	mov	r4, sl
 800c620:	2000      	movs	r0, #0
 800c622:	f04f 0c0a 	mov.w	ip, #10
 800c626:	4621      	mov	r1, r4
 800c628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c62c:	3b30      	subs	r3, #48	@ 0x30
 800c62e:	2b09      	cmp	r3, #9
 800c630:	d94b      	bls.n	800c6ca <_vfiprintf_r+0x1a2>
 800c632:	b1b0      	cbz	r0, 800c662 <_vfiprintf_r+0x13a>
 800c634:	9207      	str	r2, [sp, #28]
 800c636:	e014      	b.n	800c662 <_vfiprintf_r+0x13a>
 800c638:	eba0 0308 	sub.w	r3, r0, r8
 800c63c:	fa09 f303 	lsl.w	r3, r9, r3
 800c640:	4313      	orrs	r3, r2
 800c642:	9304      	str	r3, [sp, #16]
 800c644:	46a2      	mov	sl, r4
 800c646:	e7d2      	b.n	800c5ee <_vfiprintf_r+0xc6>
 800c648:	9b03      	ldr	r3, [sp, #12]
 800c64a:	1d19      	adds	r1, r3, #4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	9103      	str	r1, [sp, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	bfbb      	ittet	lt
 800c654:	425b      	neglt	r3, r3
 800c656:	f042 0202 	orrlt.w	r2, r2, #2
 800c65a:	9307      	strge	r3, [sp, #28]
 800c65c:	9307      	strlt	r3, [sp, #28]
 800c65e:	bfb8      	it	lt
 800c660:	9204      	strlt	r2, [sp, #16]
 800c662:	7823      	ldrb	r3, [r4, #0]
 800c664:	2b2e      	cmp	r3, #46	@ 0x2e
 800c666:	d10a      	bne.n	800c67e <_vfiprintf_r+0x156>
 800c668:	7863      	ldrb	r3, [r4, #1]
 800c66a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c66c:	d132      	bne.n	800c6d4 <_vfiprintf_r+0x1ac>
 800c66e:	9b03      	ldr	r3, [sp, #12]
 800c670:	1d1a      	adds	r2, r3, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	9203      	str	r2, [sp, #12]
 800c676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c67a:	3402      	adds	r4, #2
 800c67c:	9305      	str	r3, [sp, #20]
 800c67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c754 <_vfiprintf_r+0x22c>
 800c682:	7821      	ldrb	r1, [r4, #0]
 800c684:	2203      	movs	r2, #3
 800c686:	4650      	mov	r0, sl
 800c688:	f7f3 fda2 	bl	80001d0 <memchr>
 800c68c:	b138      	cbz	r0, 800c69e <_vfiprintf_r+0x176>
 800c68e:	9b04      	ldr	r3, [sp, #16]
 800c690:	eba0 000a 	sub.w	r0, r0, sl
 800c694:	2240      	movs	r2, #64	@ 0x40
 800c696:	4082      	lsls	r2, r0
 800c698:	4313      	orrs	r3, r2
 800c69a:	3401      	adds	r4, #1
 800c69c:	9304      	str	r3, [sp, #16]
 800c69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a2:	4829      	ldr	r0, [pc, #164]	@ (800c748 <_vfiprintf_r+0x220>)
 800c6a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6a8:	2206      	movs	r2, #6
 800c6aa:	f7f3 fd91 	bl	80001d0 <memchr>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d03f      	beq.n	800c732 <_vfiprintf_r+0x20a>
 800c6b2:	4b26      	ldr	r3, [pc, #152]	@ (800c74c <_vfiprintf_r+0x224>)
 800c6b4:	bb1b      	cbnz	r3, 800c6fe <_vfiprintf_r+0x1d6>
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	3307      	adds	r3, #7
 800c6ba:	f023 0307 	bic.w	r3, r3, #7
 800c6be:	3308      	adds	r3, #8
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c4:	443b      	add	r3, r7
 800c6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6c8:	e76a      	b.n	800c5a0 <_vfiprintf_r+0x78>
 800c6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	2001      	movs	r0, #1
 800c6d2:	e7a8      	b.n	800c626 <_vfiprintf_r+0xfe>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	3401      	adds	r4, #1
 800c6d8:	9305      	str	r3, [sp, #20]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	f04f 0c0a 	mov.w	ip, #10
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e6:	3a30      	subs	r2, #48	@ 0x30
 800c6e8:	2a09      	cmp	r2, #9
 800c6ea:	d903      	bls.n	800c6f4 <_vfiprintf_r+0x1cc>
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0c6      	beq.n	800c67e <_vfiprintf_r+0x156>
 800c6f0:	9105      	str	r1, [sp, #20]
 800c6f2:	e7c4      	b.n	800c67e <_vfiprintf_r+0x156>
 800c6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e7f0      	b.n	800c6e0 <_vfiprintf_r+0x1b8>
 800c6fe:	ab03      	add	r3, sp, #12
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	462a      	mov	r2, r5
 800c704:	4b12      	ldr	r3, [pc, #72]	@ (800c750 <_vfiprintf_r+0x228>)
 800c706:	a904      	add	r1, sp, #16
 800c708:	4630      	mov	r0, r6
 800c70a:	f3af 8000 	nop.w
 800c70e:	4607      	mov	r7, r0
 800c710:	1c78      	adds	r0, r7, #1
 800c712:	d1d6      	bne.n	800c6c2 <_vfiprintf_r+0x19a>
 800c714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c716:	07d9      	lsls	r1, r3, #31
 800c718:	d405      	bmi.n	800c726 <_vfiprintf_r+0x1fe>
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	059a      	lsls	r2, r3, #22
 800c71e:	d402      	bmi.n	800c726 <_vfiprintf_r+0x1fe>
 800c720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c722:	f7ff fdcf 	bl	800c2c4 <__retarget_lock_release_recursive>
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	065b      	lsls	r3, r3, #25
 800c72a:	f53f af1f 	bmi.w	800c56c <_vfiprintf_r+0x44>
 800c72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c730:	e71e      	b.n	800c570 <_vfiprintf_r+0x48>
 800c732:	ab03      	add	r3, sp, #12
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	462a      	mov	r2, r5
 800c738:	4b05      	ldr	r3, [pc, #20]	@ (800c750 <_vfiprintf_r+0x228>)
 800c73a:	a904      	add	r1, sp, #16
 800c73c:	4630      	mov	r0, r6
 800c73e:	f000 f879 	bl	800c834 <_printf_i>
 800c742:	e7e4      	b.n	800c70e <_vfiprintf_r+0x1e6>
 800c744:	0800db3c 	.word	0x0800db3c
 800c748:	0800db46 	.word	0x0800db46
 800c74c:	00000000 	.word	0x00000000
 800c750:	0800c503 	.word	0x0800c503
 800c754:	0800db42 	.word	0x0800db42

0800c758 <_printf_common>:
 800c758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c75c:	4616      	mov	r6, r2
 800c75e:	4698      	mov	r8, r3
 800c760:	688a      	ldr	r2, [r1, #8]
 800c762:	690b      	ldr	r3, [r1, #16]
 800c764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c768:	4293      	cmp	r3, r2
 800c76a:	bfb8      	it	lt
 800c76c:	4613      	movlt	r3, r2
 800c76e:	6033      	str	r3, [r6, #0]
 800c770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c774:	4607      	mov	r7, r0
 800c776:	460c      	mov	r4, r1
 800c778:	b10a      	cbz	r2, 800c77e <_printf_common+0x26>
 800c77a:	3301      	adds	r3, #1
 800c77c:	6033      	str	r3, [r6, #0]
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	0699      	lsls	r1, r3, #26
 800c782:	bf42      	ittt	mi
 800c784:	6833      	ldrmi	r3, [r6, #0]
 800c786:	3302      	addmi	r3, #2
 800c788:	6033      	strmi	r3, [r6, #0]
 800c78a:	6825      	ldr	r5, [r4, #0]
 800c78c:	f015 0506 	ands.w	r5, r5, #6
 800c790:	d106      	bne.n	800c7a0 <_printf_common+0x48>
 800c792:	f104 0a19 	add.w	sl, r4, #25
 800c796:	68e3      	ldr	r3, [r4, #12]
 800c798:	6832      	ldr	r2, [r6, #0]
 800c79a:	1a9b      	subs	r3, r3, r2
 800c79c:	42ab      	cmp	r3, r5
 800c79e:	dc26      	bgt.n	800c7ee <_printf_common+0x96>
 800c7a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7a4:	6822      	ldr	r2, [r4, #0]
 800c7a6:	3b00      	subs	r3, #0
 800c7a8:	bf18      	it	ne
 800c7aa:	2301      	movne	r3, #1
 800c7ac:	0692      	lsls	r2, r2, #26
 800c7ae:	d42b      	bmi.n	800c808 <_printf_common+0xb0>
 800c7b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7b4:	4641      	mov	r1, r8
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	47c8      	blx	r9
 800c7ba:	3001      	adds	r0, #1
 800c7bc:	d01e      	beq.n	800c7fc <_printf_common+0xa4>
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	6922      	ldr	r2, [r4, #16]
 800c7c2:	f003 0306 	and.w	r3, r3, #6
 800c7c6:	2b04      	cmp	r3, #4
 800c7c8:	bf02      	ittt	eq
 800c7ca:	68e5      	ldreq	r5, [r4, #12]
 800c7cc:	6833      	ldreq	r3, [r6, #0]
 800c7ce:	1aed      	subeq	r5, r5, r3
 800c7d0:	68a3      	ldr	r3, [r4, #8]
 800c7d2:	bf0c      	ite	eq
 800c7d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7d8:	2500      	movne	r5, #0
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	bfc4      	itt	gt
 800c7de:	1a9b      	subgt	r3, r3, r2
 800c7e0:	18ed      	addgt	r5, r5, r3
 800c7e2:	2600      	movs	r6, #0
 800c7e4:	341a      	adds	r4, #26
 800c7e6:	42b5      	cmp	r5, r6
 800c7e8:	d11a      	bne.n	800c820 <_printf_common+0xc8>
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	e008      	b.n	800c800 <_printf_common+0xa8>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	4652      	mov	r2, sl
 800c7f2:	4641      	mov	r1, r8
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	47c8      	blx	r9
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d103      	bne.n	800c804 <_printf_common+0xac>
 800c7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c804:	3501      	adds	r5, #1
 800c806:	e7c6      	b.n	800c796 <_printf_common+0x3e>
 800c808:	18e1      	adds	r1, r4, r3
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	2030      	movs	r0, #48	@ 0x30
 800c80e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c812:	4422      	add	r2, r4
 800c814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c81c:	3302      	adds	r3, #2
 800c81e:	e7c7      	b.n	800c7b0 <_printf_common+0x58>
 800c820:	2301      	movs	r3, #1
 800c822:	4622      	mov	r2, r4
 800c824:	4641      	mov	r1, r8
 800c826:	4638      	mov	r0, r7
 800c828:	47c8      	blx	r9
 800c82a:	3001      	adds	r0, #1
 800c82c:	d0e6      	beq.n	800c7fc <_printf_common+0xa4>
 800c82e:	3601      	adds	r6, #1
 800c830:	e7d9      	b.n	800c7e6 <_printf_common+0x8e>
	...

0800c834 <_printf_i>:
 800c834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c838:	7e0f      	ldrb	r7, [r1, #24]
 800c83a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c83c:	2f78      	cmp	r7, #120	@ 0x78
 800c83e:	4691      	mov	r9, r2
 800c840:	4680      	mov	r8, r0
 800c842:	460c      	mov	r4, r1
 800c844:	469a      	mov	sl, r3
 800c846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c84a:	d807      	bhi.n	800c85c <_printf_i+0x28>
 800c84c:	2f62      	cmp	r7, #98	@ 0x62
 800c84e:	d80a      	bhi.n	800c866 <_printf_i+0x32>
 800c850:	2f00      	cmp	r7, #0
 800c852:	f000 80d2 	beq.w	800c9fa <_printf_i+0x1c6>
 800c856:	2f58      	cmp	r7, #88	@ 0x58
 800c858:	f000 80b9 	beq.w	800c9ce <_printf_i+0x19a>
 800c85c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c864:	e03a      	b.n	800c8dc <_printf_i+0xa8>
 800c866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c86a:	2b15      	cmp	r3, #21
 800c86c:	d8f6      	bhi.n	800c85c <_printf_i+0x28>
 800c86e:	a101      	add	r1, pc, #4	@ (adr r1, 800c874 <_printf_i+0x40>)
 800c870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c874:	0800c8cd 	.word	0x0800c8cd
 800c878:	0800c8e1 	.word	0x0800c8e1
 800c87c:	0800c85d 	.word	0x0800c85d
 800c880:	0800c85d 	.word	0x0800c85d
 800c884:	0800c85d 	.word	0x0800c85d
 800c888:	0800c85d 	.word	0x0800c85d
 800c88c:	0800c8e1 	.word	0x0800c8e1
 800c890:	0800c85d 	.word	0x0800c85d
 800c894:	0800c85d 	.word	0x0800c85d
 800c898:	0800c85d 	.word	0x0800c85d
 800c89c:	0800c85d 	.word	0x0800c85d
 800c8a0:	0800c9e1 	.word	0x0800c9e1
 800c8a4:	0800c90b 	.word	0x0800c90b
 800c8a8:	0800c99b 	.word	0x0800c99b
 800c8ac:	0800c85d 	.word	0x0800c85d
 800c8b0:	0800c85d 	.word	0x0800c85d
 800c8b4:	0800ca03 	.word	0x0800ca03
 800c8b8:	0800c85d 	.word	0x0800c85d
 800c8bc:	0800c90b 	.word	0x0800c90b
 800c8c0:	0800c85d 	.word	0x0800c85d
 800c8c4:	0800c85d 	.word	0x0800c85d
 800c8c8:	0800c9a3 	.word	0x0800c9a3
 800c8cc:	6833      	ldr	r3, [r6, #0]
 800c8ce:	1d1a      	adds	r2, r3, #4
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6032      	str	r2, [r6, #0]
 800c8d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e09d      	b.n	800ca1c <_printf_i+0x1e8>
 800c8e0:	6833      	ldr	r3, [r6, #0]
 800c8e2:	6820      	ldr	r0, [r4, #0]
 800c8e4:	1d19      	adds	r1, r3, #4
 800c8e6:	6031      	str	r1, [r6, #0]
 800c8e8:	0606      	lsls	r6, r0, #24
 800c8ea:	d501      	bpl.n	800c8f0 <_printf_i+0xbc>
 800c8ec:	681d      	ldr	r5, [r3, #0]
 800c8ee:	e003      	b.n	800c8f8 <_printf_i+0xc4>
 800c8f0:	0645      	lsls	r5, r0, #25
 800c8f2:	d5fb      	bpl.n	800c8ec <_printf_i+0xb8>
 800c8f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c8f8:	2d00      	cmp	r5, #0
 800c8fa:	da03      	bge.n	800c904 <_printf_i+0xd0>
 800c8fc:	232d      	movs	r3, #45	@ 0x2d
 800c8fe:	426d      	negs	r5, r5
 800c900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c904:	4859      	ldr	r0, [pc, #356]	@ (800ca6c <_printf_i+0x238>)
 800c906:	230a      	movs	r3, #10
 800c908:	e011      	b.n	800c92e <_printf_i+0xfa>
 800c90a:	6821      	ldr	r1, [r4, #0]
 800c90c:	6833      	ldr	r3, [r6, #0]
 800c90e:	0608      	lsls	r0, r1, #24
 800c910:	f853 5b04 	ldr.w	r5, [r3], #4
 800c914:	d402      	bmi.n	800c91c <_printf_i+0xe8>
 800c916:	0649      	lsls	r1, r1, #25
 800c918:	bf48      	it	mi
 800c91a:	b2ad      	uxthmi	r5, r5
 800c91c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c91e:	4853      	ldr	r0, [pc, #332]	@ (800ca6c <_printf_i+0x238>)
 800c920:	6033      	str	r3, [r6, #0]
 800c922:	bf14      	ite	ne
 800c924:	230a      	movne	r3, #10
 800c926:	2308      	moveq	r3, #8
 800c928:	2100      	movs	r1, #0
 800c92a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c92e:	6866      	ldr	r6, [r4, #4]
 800c930:	60a6      	str	r6, [r4, #8]
 800c932:	2e00      	cmp	r6, #0
 800c934:	bfa2      	ittt	ge
 800c936:	6821      	ldrge	r1, [r4, #0]
 800c938:	f021 0104 	bicge.w	r1, r1, #4
 800c93c:	6021      	strge	r1, [r4, #0]
 800c93e:	b90d      	cbnz	r5, 800c944 <_printf_i+0x110>
 800c940:	2e00      	cmp	r6, #0
 800c942:	d04b      	beq.n	800c9dc <_printf_i+0x1a8>
 800c944:	4616      	mov	r6, r2
 800c946:	fbb5 f1f3 	udiv	r1, r5, r3
 800c94a:	fb03 5711 	mls	r7, r3, r1, r5
 800c94e:	5dc7      	ldrb	r7, [r0, r7]
 800c950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c954:	462f      	mov	r7, r5
 800c956:	42bb      	cmp	r3, r7
 800c958:	460d      	mov	r5, r1
 800c95a:	d9f4      	bls.n	800c946 <_printf_i+0x112>
 800c95c:	2b08      	cmp	r3, #8
 800c95e:	d10b      	bne.n	800c978 <_printf_i+0x144>
 800c960:	6823      	ldr	r3, [r4, #0]
 800c962:	07df      	lsls	r7, r3, #31
 800c964:	d508      	bpl.n	800c978 <_printf_i+0x144>
 800c966:	6923      	ldr	r3, [r4, #16]
 800c968:	6861      	ldr	r1, [r4, #4]
 800c96a:	4299      	cmp	r1, r3
 800c96c:	bfde      	ittt	le
 800c96e:	2330      	movle	r3, #48	@ 0x30
 800c970:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c974:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c978:	1b92      	subs	r2, r2, r6
 800c97a:	6122      	str	r2, [r4, #16]
 800c97c:	f8cd a000 	str.w	sl, [sp]
 800c980:	464b      	mov	r3, r9
 800c982:	aa03      	add	r2, sp, #12
 800c984:	4621      	mov	r1, r4
 800c986:	4640      	mov	r0, r8
 800c988:	f7ff fee6 	bl	800c758 <_printf_common>
 800c98c:	3001      	adds	r0, #1
 800c98e:	d14a      	bne.n	800ca26 <_printf_i+0x1f2>
 800c990:	f04f 30ff 	mov.w	r0, #4294967295
 800c994:	b004      	add	sp, #16
 800c996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	f043 0320 	orr.w	r3, r3, #32
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	4833      	ldr	r0, [pc, #204]	@ (800ca70 <_printf_i+0x23c>)
 800c9a4:	2778      	movs	r7, #120	@ 0x78
 800c9a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	6831      	ldr	r1, [r6, #0]
 800c9ae:	061f      	lsls	r7, r3, #24
 800c9b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9b4:	d402      	bmi.n	800c9bc <_printf_i+0x188>
 800c9b6:	065f      	lsls	r7, r3, #25
 800c9b8:	bf48      	it	mi
 800c9ba:	b2ad      	uxthmi	r5, r5
 800c9bc:	6031      	str	r1, [r6, #0]
 800c9be:	07d9      	lsls	r1, r3, #31
 800c9c0:	bf44      	itt	mi
 800c9c2:	f043 0320 	orrmi.w	r3, r3, #32
 800c9c6:	6023      	strmi	r3, [r4, #0]
 800c9c8:	b11d      	cbz	r5, 800c9d2 <_printf_i+0x19e>
 800c9ca:	2310      	movs	r3, #16
 800c9cc:	e7ac      	b.n	800c928 <_printf_i+0xf4>
 800c9ce:	4827      	ldr	r0, [pc, #156]	@ (800ca6c <_printf_i+0x238>)
 800c9d0:	e7e9      	b.n	800c9a6 <_printf_i+0x172>
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	f023 0320 	bic.w	r3, r3, #32
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	e7f6      	b.n	800c9ca <_printf_i+0x196>
 800c9dc:	4616      	mov	r6, r2
 800c9de:	e7bd      	b.n	800c95c <_printf_i+0x128>
 800c9e0:	6833      	ldr	r3, [r6, #0]
 800c9e2:	6825      	ldr	r5, [r4, #0]
 800c9e4:	6961      	ldr	r1, [r4, #20]
 800c9e6:	1d18      	adds	r0, r3, #4
 800c9e8:	6030      	str	r0, [r6, #0]
 800c9ea:	062e      	lsls	r6, r5, #24
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	d501      	bpl.n	800c9f4 <_printf_i+0x1c0>
 800c9f0:	6019      	str	r1, [r3, #0]
 800c9f2:	e002      	b.n	800c9fa <_printf_i+0x1c6>
 800c9f4:	0668      	lsls	r0, r5, #25
 800c9f6:	d5fb      	bpl.n	800c9f0 <_printf_i+0x1bc>
 800c9f8:	8019      	strh	r1, [r3, #0]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	4616      	mov	r6, r2
 800ca00:	e7bc      	b.n	800c97c <_printf_i+0x148>
 800ca02:	6833      	ldr	r3, [r6, #0]
 800ca04:	1d1a      	adds	r2, r3, #4
 800ca06:	6032      	str	r2, [r6, #0]
 800ca08:	681e      	ldr	r6, [r3, #0]
 800ca0a:	6862      	ldr	r2, [r4, #4]
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7f3 fbde 	bl	80001d0 <memchr>
 800ca14:	b108      	cbz	r0, 800ca1a <_printf_i+0x1e6>
 800ca16:	1b80      	subs	r0, r0, r6
 800ca18:	6060      	str	r0, [r4, #4]
 800ca1a:	6863      	ldr	r3, [r4, #4]
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca24:	e7aa      	b.n	800c97c <_printf_i+0x148>
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	4632      	mov	r2, r6
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	4640      	mov	r0, r8
 800ca2e:	47d0      	blx	sl
 800ca30:	3001      	adds	r0, #1
 800ca32:	d0ad      	beq.n	800c990 <_printf_i+0x15c>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	079b      	lsls	r3, r3, #30
 800ca38:	d413      	bmi.n	800ca62 <_printf_i+0x22e>
 800ca3a:	68e0      	ldr	r0, [r4, #12]
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	4298      	cmp	r0, r3
 800ca40:	bfb8      	it	lt
 800ca42:	4618      	movlt	r0, r3
 800ca44:	e7a6      	b.n	800c994 <_printf_i+0x160>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	47d0      	blx	sl
 800ca50:	3001      	adds	r0, #1
 800ca52:	d09d      	beq.n	800c990 <_printf_i+0x15c>
 800ca54:	3501      	adds	r5, #1
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	9903      	ldr	r1, [sp, #12]
 800ca5a:	1a5b      	subs	r3, r3, r1
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	dcf2      	bgt.n	800ca46 <_printf_i+0x212>
 800ca60:	e7eb      	b.n	800ca3a <_printf_i+0x206>
 800ca62:	2500      	movs	r5, #0
 800ca64:	f104 0619 	add.w	r6, r4, #25
 800ca68:	e7f5      	b.n	800ca56 <_printf_i+0x222>
 800ca6a:	bf00      	nop
 800ca6c:	0800db4d 	.word	0x0800db4d
 800ca70:	0800db5e 	.word	0x0800db5e

0800ca74 <__sflush_r>:
 800ca74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	0716      	lsls	r6, r2, #28
 800ca7e:	4605      	mov	r5, r0
 800ca80:	460c      	mov	r4, r1
 800ca82:	d454      	bmi.n	800cb2e <__sflush_r+0xba>
 800ca84:	684b      	ldr	r3, [r1, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	dc02      	bgt.n	800ca90 <__sflush_r+0x1c>
 800ca8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dd48      	ble.n	800cb22 <__sflush_r+0xae>
 800ca90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	d045      	beq.n	800cb22 <__sflush_r+0xae>
 800ca96:	2300      	movs	r3, #0
 800ca98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca9c:	682f      	ldr	r7, [r5, #0]
 800ca9e:	6a21      	ldr	r1, [r4, #32]
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	d030      	beq.n	800cb06 <__sflush_r+0x92>
 800caa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	0759      	lsls	r1, r3, #29
 800caaa:	d505      	bpl.n	800cab8 <__sflush_r+0x44>
 800caac:	6863      	ldr	r3, [r4, #4]
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cab2:	b10b      	cbz	r3, 800cab8 <__sflush_r+0x44>
 800cab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cab6:	1ad2      	subs	r2, r2, r3
 800cab8:	2300      	movs	r3, #0
 800caba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cabc:	6a21      	ldr	r1, [r4, #32]
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b0      	blx	r6
 800cac2:	1c43      	adds	r3, r0, #1
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	d106      	bne.n	800cad6 <__sflush_r+0x62>
 800cac8:	6829      	ldr	r1, [r5, #0]
 800caca:	291d      	cmp	r1, #29
 800cacc:	d82b      	bhi.n	800cb26 <__sflush_r+0xb2>
 800cace:	4a2a      	ldr	r2, [pc, #168]	@ (800cb78 <__sflush_r+0x104>)
 800cad0:	410a      	asrs	r2, r1
 800cad2:	07d6      	lsls	r6, r2, #31
 800cad4:	d427      	bmi.n	800cb26 <__sflush_r+0xb2>
 800cad6:	2200      	movs	r2, #0
 800cad8:	6062      	str	r2, [r4, #4]
 800cada:	04d9      	lsls	r1, r3, #19
 800cadc:	6922      	ldr	r2, [r4, #16]
 800cade:	6022      	str	r2, [r4, #0]
 800cae0:	d504      	bpl.n	800caec <__sflush_r+0x78>
 800cae2:	1c42      	adds	r2, r0, #1
 800cae4:	d101      	bne.n	800caea <__sflush_r+0x76>
 800cae6:	682b      	ldr	r3, [r5, #0]
 800cae8:	b903      	cbnz	r3, 800caec <__sflush_r+0x78>
 800caea:	6560      	str	r0, [r4, #84]	@ 0x54
 800caec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caee:	602f      	str	r7, [r5, #0]
 800caf0:	b1b9      	cbz	r1, 800cb22 <__sflush_r+0xae>
 800caf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caf6:	4299      	cmp	r1, r3
 800caf8:	d002      	beq.n	800cb00 <__sflush_r+0x8c>
 800cafa:	4628      	mov	r0, r5
 800cafc:	f7ff fbf2 	bl	800c2e4 <_free_r>
 800cb00:	2300      	movs	r3, #0
 800cb02:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb04:	e00d      	b.n	800cb22 <__sflush_r+0xae>
 800cb06:	2301      	movs	r3, #1
 800cb08:	4628      	mov	r0, r5
 800cb0a:	47b0      	blx	r6
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	1c50      	adds	r0, r2, #1
 800cb10:	d1c9      	bne.n	800caa6 <__sflush_r+0x32>
 800cb12:	682b      	ldr	r3, [r5, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0c6      	beq.n	800caa6 <__sflush_r+0x32>
 800cb18:	2b1d      	cmp	r3, #29
 800cb1a:	d001      	beq.n	800cb20 <__sflush_r+0xac>
 800cb1c:	2b16      	cmp	r3, #22
 800cb1e:	d11e      	bne.n	800cb5e <__sflush_r+0xea>
 800cb20:	602f      	str	r7, [r5, #0]
 800cb22:	2000      	movs	r0, #0
 800cb24:	e022      	b.n	800cb6c <__sflush_r+0xf8>
 800cb26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb2a:	b21b      	sxth	r3, r3
 800cb2c:	e01b      	b.n	800cb66 <__sflush_r+0xf2>
 800cb2e:	690f      	ldr	r7, [r1, #16]
 800cb30:	2f00      	cmp	r7, #0
 800cb32:	d0f6      	beq.n	800cb22 <__sflush_r+0xae>
 800cb34:	0793      	lsls	r3, r2, #30
 800cb36:	680e      	ldr	r6, [r1, #0]
 800cb38:	bf08      	it	eq
 800cb3a:	694b      	ldreq	r3, [r1, #20]
 800cb3c:	600f      	str	r7, [r1, #0]
 800cb3e:	bf18      	it	ne
 800cb40:	2300      	movne	r3, #0
 800cb42:	eba6 0807 	sub.w	r8, r6, r7
 800cb46:	608b      	str	r3, [r1, #8]
 800cb48:	f1b8 0f00 	cmp.w	r8, #0
 800cb4c:	dde9      	ble.n	800cb22 <__sflush_r+0xae>
 800cb4e:	6a21      	ldr	r1, [r4, #32]
 800cb50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb52:	4643      	mov	r3, r8
 800cb54:	463a      	mov	r2, r7
 800cb56:	4628      	mov	r0, r5
 800cb58:	47b0      	blx	r6
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	dc08      	bgt.n	800cb70 <__sflush_r+0xfc>
 800cb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb66:	81a3      	strh	r3, [r4, #12]
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb70:	4407      	add	r7, r0
 800cb72:	eba8 0800 	sub.w	r8, r8, r0
 800cb76:	e7e7      	b.n	800cb48 <__sflush_r+0xd4>
 800cb78:	dfbffffe 	.word	0xdfbffffe

0800cb7c <_fflush_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	690b      	ldr	r3, [r1, #16]
 800cb80:	4605      	mov	r5, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b913      	cbnz	r3, 800cb8c <_fflush_r+0x10>
 800cb86:	2500      	movs	r5, #0
 800cb88:	4628      	mov	r0, r5
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	b118      	cbz	r0, 800cb96 <_fflush_r+0x1a>
 800cb8e:	6a03      	ldr	r3, [r0, #32]
 800cb90:	b90b      	cbnz	r3, 800cb96 <_fflush_r+0x1a>
 800cb92:	f7ff f949 	bl	800be28 <__sinit>
 800cb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d0f3      	beq.n	800cb86 <_fflush_r+0xa>
 800cb9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cba0:	07d0      	lsls	r0, r2, #31
 800cba2:	d404      	bmi.n	800cbae <_fflush_r+0x32>
 800cba4:	0599      	lsls	r1, r3, #22
 800cba6:	d402      	bmi.n	800cbae <_fflush_r+0x32>
 800cba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbaa:	f7ff fb8a 	bl	800c2c2 <__retarget_lock_acquire_recursive>
 800cbae:	4628      	mov	r0, r5
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	f7ff ff5f 	bl	800ca74 <__sflush_r>
 800cbb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbb8:	07da      	lsls	r2, r3, #31
 800cbba:	4605      	mov	r5, r0
 800cbbc:	d4e4      	bmi.n	800cb88 <_fflush_r+0xc>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	059b      	lsls	r3, r3, #22
 800cbc2:	d4e1      	bmi.n	800cb88 <_fflush_r+0xc>
 800cbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbc6:	f7ff fb7d 	bl	800c2c4 <__retarget_lock_release_recursive>
 800cbca:	e7dd      	b.n	800cb88 <_fflush_r+0xc>

0800cbcc <__swhatbuf_r>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	460c      	mov	r4, r1
 800cbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	b096      	sub	sp, #88	@ 0x58
 800cbd8:	4615      	mov	r5, r2
 800cbda:	461e      	mov	r6, r3
 800cbdc:	da0d      	bge.n	800cbfa <__swhatbuf_r+0x2e>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbe4:	f04f 0100 	mov.w	r1, #0
 800cbe8:	bf14      	ite	ne
 800cbea:	2340      	movne	r3, #64	@ 0x40
 800cbec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	6031      	str	r1, [r6, #0]
 800cbf4:	602b      	str	r3, [r5, #0]
 800cbf6:	b016      	add	sp, #88	@ 0x58
 800cbf8:	bd70      	pop	{r4, r5, r6, pc}
 800cbfa:	466a      	mov	r2, sp
 800cbfc:	f000 f848 	bl	800cc90 <_fstat_r>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	dbec      	blt.n	800cbde <__swhatbuf_r+0x12>
 800cc04:	9901      	ldr	r1, [sp, #4]
 800cc06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc0e:	4259      	negs	r1, r3
 800cc10:	4159      	adcs	r1, r3
 800cc12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc16:	e7eb      	b.n	800cbf0 <__swhatbuf_r+0x24>

0800cc18 <__smakebuf_r>:
 800cc18:	898b      	ldrh	r3, [r1, #12]
 800cc1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc1c:	079d      	lsls	r5, r3, #30
 800cc1e:	4606      	mov	r6, r0
 800cc20:	460c      	mov	r4, r1
 800cc22:	d507      	bpl.n	800cc34 <__smakebuf_r+0x1c>
 800cc24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	6123      	str	r3, [r4, #16]
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	6163      	str	r3, [r4, #20]
 800cc30:	b003      	add	sp, #12
 800cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc34:	ab01      	add	r3, sp, #4
 800cc36:	466a      	mov	r2, sp
 800cc38:	f7ff ffc8 	bl	800cbcc <__swhatbuf_r>
 800cc3c:	9f00      	ldr	r7, [sp, #0]
 800cc3e:	4605      	mov	r5, r0
 800cc40:	4639      	mov	r1, r7
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff fbba 	bl	800c3bc <_malloc_r>
 800cc48:	b948      	cbnz	r0, 800cc5e <__smakebuf_r+0x46>
 800cc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc4e:	059a      	lsls	r2, r3, #22
 800cc50:	d4ee      	bmi.n	800cc30 <__smakebuf_r+0x18>
 800cc52:	f023 0303 	bic.w	r3, r3, #3
 800cc56:	f043 0302 	orr.w	r3, r3, #2
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	e7e2      	b.n	800cc24 <__smakebuf_r+0xc>
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	6020      	str	r0, [r4, #0]
 800cc62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc6e:	b15b      	cbz	r3, 800cc88 <__smakebuf_r+0x70>
 800cc70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc74:	4630      	mov	r0, r6
 800cc76:	f000 f81d 	bl	800ccb4 <_isatty_r>
 800cc7a:	b128      	cbz	r0, 800cc88 <__smakebuf_r+0x70>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	f043 0301 	orr.w	r3, r3, #1
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	431d      	orrs	r5, r3
 800cc8c:	81a5      	strh	r5, [r4, #12]
 800cc8e:	e7cf      	b.n	800cc30 <__smakebuf_r+0x18>

0800cc90 <_fstat_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d07      	ldr	r5, [pc, #28]	@ (800ccb0 <_fstat_r+0x20>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	602b      	str	r3, [r5, #0]
 800cc9e:	f7f4 fddc 	bl	800185a <_fstat>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d102      	bne.n	800ccac <_fstat_r+0x1c>
 800cca6:	682b      	ldr	r3, [r5, #0]
 800cca8:	b103      	cbz	r3, 800ccac <_fstat_r+0x1c>
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	bd38      	pop	{r3, r4, r5, pc}
 800ccae:	bf00      	nop
 800ccb0:	20006a20 	.word	0x20006a20

0800ccb4 <_isatty_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	@ (800ccd0 <_isatty_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7f4 fddb 	bl	800187a <_isatty>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_isatty_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_isatty_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	20006a20 	.word	0x20006a20

0800ccd4 <_sbrk_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d06      	ldr	r5, [pc, #24]	@ (800ccf0 <_sbrk_r+0x1c>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	f7f4 fde4 	bl	80018ac <_sbrk>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_sbrk_r+0x1a>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_sbrk_r+0x1a>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	20006a20 	.word	0x20006a20

0800ccf4 <asinf>:
 800ccf4:	b508      	push	{r3, lr}
 800ccf6:	ed2d 8b02 	vpush	{d8}
 800ccfa:	eeb0 8a40 	vmov.f32	s16, s0
 800ccfe:	f000 f895 	bl	800ce2c <__ieee754_asinf>
 800cd02:	eeb4 8a48 	vcmp.f32	s16, s16
 800cd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0a:	eef0 8a40 	vmov.f32	s17, s0
 800cd0e:	d615      	bvs.n	800cd3c <asinf+0x48>
 800cd10:	eeb0 0a48 	vmov.f32	s0, s16
 800cd14:	f000 f873 	bl	800cdfe <fabsf>
 800cd18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cd1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd24:	dd0a      	ble.n	800cd3c <asinf+0x48>
 800cd26:	f7ff faa1 	bl	800c26c <__errno>
 800cd2a:	ecbd 8b02 	vpop	{d8}
 800cd2e:	2321      	movs	r3, #33	@ 0x21
 800cd30:	6003      	str	r3, [r0, #0]
 800cd32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cd36:	4804      	ldr	r0, [pc, #16]	@ (800cd48 <asinf+0x54>)
 800cd38:	f000 b872 	b.w	800ce20 <nanf>
 800cd3c:	eeb0 0a68 	vmov.f32	s0, s17
 800cd40:	ecbd 8b02 	vpop	{d8}
 800cd44:	bd08      	pop	{r3, pc}
 800cd46:	bf00      	nop
 800cd48:	0800db41 	.word	0x0800db41

0800cd4c <atan2f>:
 800cd4c:	f000 b954 	b.w	800cff8 <__ieee754_atan2f>

0800cd50 <powf>:
 800cd50:	b508      	push	{r3, lr}
 800cd52:	ed2d 8b04 	vpush	{d8-d9}
 800cd56:	eeb0 8a60 	vmov.f32	s16, s1
 800cd5a:	eeb0 9a40 	vmov.f32	s18, s0
 800cd5e:	f000 f9eb 	bl	800d138 <__ieee754_powf>
 800cd62:	eeb4 8a48 	vcmp.f32	s16, s16
 800cd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6a:	eef0 8a40 	vmov.f32	s17, s0
 800cd6e:	d63e      	bvs.n	800cdee <powf+0x9e>
 800cd70:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd78:	d112      	bne.n	800cda0 <powf+0x50>
 800cd7a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd82:	d039      	beq.n	800cdf8 <powf+0xa8>
 800cd84:	eeb0 0a48 	vmov.f32	s0, s16
 800cd88:	f000 f840 	bl	800ce0c <finitef>
 800cd8c:	b378      	cbz	r0, 800cdee <powf+0x9e>
 800cd8e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd96:	d52a      	bpl.n	800cdee <powf+0x9e>
 800cd98:	f7ff fa68 	bl	800c26c <__errno>
 800cd9c:	2322      	movs	r3, #34	@ 0x22
 800cd9e:	e014      	b.n	800cdca <powf+0x7a>
 800cda0:	f000 f834 	bl	800ce0c <finitef>
 800cda4:	b998      	cbnz	r0, 800cdce <powf+0x7e>
 800cda6:	eeb0 0a49 	vmov.f32	s0, s18
 800cdaa:	f000 f82f 	bl	800ce0c <finitef>
 800cdae:	b170      	cbz	r0, 800cdce <powf+0x7e>
 800cdb0:	eeb0 0a48 	vmov.f32	s0, s16
 800cdb4:	f000 f82a 	bl	800ce0c <finitef>
 800cdb8:	b148      	cbz	r0, 800cdce <powf+0x7e>
 800cdba:	eef4 8a68 	vcmp.f32	s17, s17
 800cdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc2:	d7e9      	bvc.n	800cd98 <powf+0x48>
 800cdc4:	f7ff fa52 	bl	800c26c <__errno>
 800cdc8:	2321      	movs	r3, #33	@ 0x21
 800cdca:	6003      	str	r3, [r0, #0]
 800cdcc:	e00f      	b.n	800cdee <powf+0x9e>
 800cdce:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd6:	d10a      	bne.n	800cdee <powf+0x9e>
 800cdd8:	eeb0 0a49 	vmov.f32	s0, s18
 800cddc:	f000 f816 	bl	800ce0c <finitef>
 800cde0:	b128      	cbz	r0, 800cdee <powf+0x9e>
 800cde2:	eeb0 0a48 	vmov.f32	s0, s16
 800cde6:	f000 f811 	bl	800ce0c <finitef>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d1d4      	bne.n	800cd98 <powf+0x48>
 800cdee:	eeb0 0a68 	vmov.f32	s0, s17
 800cdf2:	ecbd 8b04 	vpop	{d8-d9}
 800cdf6:	bd08      	pop	{r3, pc}
 800cdf8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800cdfc:	e7f7      	b.n	800cdee <powf+0x9e>

0800cdfe <fabsf>:
 800cdfe:	ee10 3a10 	vmov	r3, s0
 800ce02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce06:	ee00 3a10 	vmov	s0, r3
 800ce0a:	4770      	bx	lr

0800ce0c <finitef>:
 800ce0c:	ee10 3a10 	vmov	r3, s0
 800ce10:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ce14:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ce18:	bfac      	ite	ge
 800ce1a:	2000      	movge	r0, #0
 800ce1c:	2001      	movlt	r0, #1
 800ce1e:	4770      	bx	lr

0800ce20 <nanf>:
 800ce20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ce28 <nanf+0x8>
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	7fc00000 	.word	0x7fc00000

0800ce2c <__ieee754_asinf>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	ee10 5a10 	vmov	r5, s0
 800ce32:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ce36:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800ce3a:	ed2d 8b04 	vpush	{d8-d9}
 800ce3e:	d10c      	bne.n	800ce5a <__ieee754_asinf+0x2e>
 800ce40:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800cfb8 <__ieee754_asinf+0x18c>
 800ce44:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800cfbc <__ieee754_asinf+0x190>
 800ce48:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ce4c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ce50:	eeb0 0a67 	vmov.f32	s0, s15
 800ce54:	ecbd 8b04 	vpop	{d8-d9}
 800ce58:	bd38      	pop	{r3, r4, r5, pc}
 800ce5a:	d904      	bls.n	800ce66 <__ieee754_asinf+0x3a>
 800ce5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ce60:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ce64:	e7f6      	b.n	800ce54 <__ieee754_asinf+0x28>
 800ce66:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ce6a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ce6e:	d20b      	bcs.n	800ce88 <__ieee754_asinf+0x5c>
 800ce70:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800ce74:	d252      	bcs.n	800cf1c <__ieee754_asinf+0xf0>
 800ce76:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800cfc0 <__ieee754_asinf+0x194>
 800ce7a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ce7e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ce82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce86:	dce5      	bgt.n	800ce54 <__ieee754_asinf+0x28>
 800ce88:	f7ff ffb9 	bl	800cdfe <fabsf>
 800ce8c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800ce90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ce94:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ce98:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800cfc4 <__ieee754_asinf+0x198>
 800ce9c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800cfc8 <__ieee754_asinf+0x19c>
 800cea0:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800cfcc <__ieee754_asinf+0x1a0>
 800cea4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800cea8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800cfd0 <__ieee754_asinf+0x1a4>
 800ceac:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ceb0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800cfd4 <__ieee754_asinf+0x1a8>
 800ceb4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ceb8:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800cfd8 <__ieee754_asinf+0x1ac>
 800cebc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cec0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800cfdc <__ieee754_asinf+0x1b0>
 800cec4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800cec8:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800cfe0 <__ieee754_asinf+0x1b4>
 800cecc:	eee8 7a07 	vfma.f32	s15, s16, s14
 800ced0:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800cfe4 <__ieee754_asinf+0x1b8>
 800ced4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ced8:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800cfe8 <__ieee754_asinf+0x1bc>
 800cedc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cee0:	eeb0 0a48 	vmov.f32	s0, s16
 800cee4:	eee7 8a88 	vfma.f32	s17, s15, s16
 800cee8:	f000 fd56 	bl	800d998 <__ieee754_sqrtf>
 800ceec:	4b3f      	ldr	r3, [pc, #252]	@ (800cfec <__ieee754_asinf+0x1c0>)
 800ceee:	ee29 9a08 	vmul.f32	s18, s18, s16
 800cef2:	429c      	cmp	r4, r3
 800cef4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800cef8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800cefc:	d93d      	bls.n	800cf7a <__ieee754_asinf+0x14e>
 800cefe:	eea0 0a06 	vfma.f32	s0, s0, s12
 800cf02:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800cff0 <__ieee754_asinf+0x1c4>
 800cf06:	eee0 7a26 	vfma.f32	s15, s0, s13
 800cf0a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800cfbc <__ieee754_asinf+0x190>
 800cf0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf12:	2d00      	cmp	r5, #0
 800cf14:	bfd8      	it	le
 800cf16:	eeb1 0a40 	vnegle.f32	s0, s0
 800cf1a:	e79b      	b.n	800ce54 <__ieee754_asinf+0x28>
 800cf1c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800cf20:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800cfc8 <__ieee754_asinf+0x19c>
 800cf24:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800cfc4 <__ieee754_asinf+0x198>
 800cf28:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800cfdc <__ieee754_asinf+0x1b0>
 800cf2c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cf30:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800cfd0 <__ieee754_asinf+0x1a4>
 800cf34:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cf38:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800cfd4 <__ieee754_asinf+0x1a8>
 800cf3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf40:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800cfd8 <__ieee754_asinf+0x1ac>
 800cf44:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cf48:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800cfcc <__ieee754_asinf+0x1a0>
 800cf4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf50:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800cfe0 <__ieee754_asinf+0x1b4>
 800cf54:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cf58:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800cfe4 <__ieee754_asinf+0x1b8>
 800cf5c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800cf60:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800cfe8 <__ieee754_asinf+0x1bc>
 800cf64:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cf68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf6c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800cf70:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cf74:	eea0 0a27 	vfma.f32	s0, s0, s15
 800cf78:	e76c      	b.n	800ce54 <__ieee754_asinf+0x28>
 800cf7a:	ee10 3a10 	vmov	r3, s0
 800cf7e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cf82:	f023 030f 	bic.w	r3, r3, #15
 800cf86:	ee07 3a10 	vmov	s14, r3
 800cf8a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800cf8e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800cf92:	ee30 0a07 	vadd.f32	s0, s0, s14
 800cf96:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cfb8 <__ieee754_asinf+0x18c>
 800cf9a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800cf9e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800cff4 <__ieee754_asinf+0x1c8>
 800cfa2:	eee5 7a66 	vfms.f32	s15, s10, s13
 800cfa6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800cfaa:	eeb0 6a40 	vmov.f32	s12, s0
 800cfae:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cfb2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cfb6:	e7aa      	b.n	800cf0e <__ieee754_asinf+0xe2>
 800cfb8:	b33bbd2e 	.word	0xb33bbd2e
 800cfbc:	3fc90fdb 	.word	0x3fc90fdb
 800cfc0:	7149f2ca 	.word	0x7149f2ca
 800cfc4:	3a4f7f04 	.word	0x3a4f7f04
 800cfc8:	3811ef08 	.word	0x3811ef08
 800cfcc:	3e2aaaab 	.word	0x3e2aaaab
 800cfd0:	bd241146 	.word	0xbd241146
 800cfd4:	3e4e0aa8 	.word	0x3e4e0aa8
 800cfd8:	bea6b090 	.word	0xbea6b090
 800cfdc:	3d9dc62e 	.word	0x3d9dc62e
 800cfe0:	bf303361 	.word	0xbf303361
 800cfe4:	4001572d 	.word	0x4001572d
 800cfe8:	c019d139 	.word	0xc019d139
 800cfec:	3f799999 	.word	0x3f799999
 800cff0:	333bbd2e 	.word	0x333bbd2e
 800cff4:	3f490fdb 	.word	0x3f490fdb

0800cff8 <__ieee754_atan2f>:
 800cff8:	ee10 2a90 	vmov	r2, s1
 800cffc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d000:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d004:	b510      	push	{r4, lr}
 800d006:	eef0 7a40 	vmov.f32	s15, s0
 800d00a:	d806      	bhi.n	800d01a <__ieee754_atan2f+0x22>
 800d00c:	ee10 0a10 	vmov	r0, s0
 800d010:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d014:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d018:	d904      	bls.n	800d024 <__ieee754_atan2f+0x2c>
 800d01a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d01e:	eeb0 0a67 	vmov.f32	s0, s15
 800d022:	bd10      	pop	{r4, pc}
 800d024:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d028:	d103      	bne.n	800d032 <__ieee754_atan2f+0x3a>
 800d02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d02e:	f000 bb53 	b.w	800d6d8 <atanf>
 800d032:	1794      	asrs	r4, r2, #30
 800d034:	f004 0402 	and.w	r4, r4, #2
 800d038:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d03c:	b943      	cbnz	r3, 800d050 <__ieee754_atan2f+0x58>
 800d03e:	2c02      	cmp	r4, #2
 800d040:	d05e      	beq.n	800d100 <__ieee754_atan2f+0x108>
 800d042:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d114 <__ieee754_atan2f+0x11c>
 800d046:	2c03      	cmp	r4, #3
 800d048:	bf08      	it	eq
 800d04a:	eef0 7a47 	vmoveq.f32	s15, s14
 800d04e:	e7e6      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d050:	b941      	cbnz	r1, 800d064 <__ieee754_atan2f+0x6c>
 800d052:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d118 <__ieee754_atan2f+0x120>
 800d056:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d11c <__ieee754_atan2f+0x124>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	bfb8      	it	lt
 800d05e:	eef0 7a47 	vmovlt.f32	s15, s14
 800d062:	e7dc      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d064:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d068:	d110      	bne.n	800d08c <__ieee754_atan2f+0x94>
 800d06a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d06e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d072:	d107      	bne.n	800d084 <__ieee754_atan2f+0x8c>
 800d074:	2c02      	cmp	r4, #2
 800d076:	d846      	bhi.n	800d106 <__ieee754_atan2f+0x10e>
 800d078:	4b29      	ldr	r3, [pc, #164]	@ (800d120 <__ieee754_atan2f+0x128>)
 800d07a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d07e:	edd3 7a00 	vldr	s15, [r3]
 800d082:	e7cc      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d084:	2c02      	cmp	r4, #2
 800d086:	d841      	bhi.n	800d10c <__ieee754_atan2f+0x114>
 800d088:	4b26      	ldr	r3, [pc, #152]	@ (800d124 <__ieee754_atan2f+0x12c>)
 800d08a:	e7f6      	b.n	800d07a <__ieee754_atan2f+0x82>
 800d08c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d090:	d0df      	beq.n	800d052 <__ieee754_atan2f+0x5a>
 800d092:	1a5b      	subs	r3, r3, r1
 800d094:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d098:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d09c:	da1a      	bge.n	800d0d4 <__ieee754_atan2f+0xdc>
 800d09e:	2a00      	cmp	r2, #0
 800d0a0:	da01      	bge.n	800d0a6 <__ieee754_atan2f+0xae>
 800d0a2:	313c      	adds	r1, #60	@ 0x3c
 800d0a4:	db19      	blt.n	800d0da <__ieee754_atan2f+0xe2>
 800d0a6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d0aa:	f7ff fea8 	bl	800cdfe <fabsf>
 800d0ae:	f000 fb13 	bl	800d6d8 <atanf>
 800d0b2:	eef0 7a40 	vmov.f32	s15, s0
 800d0b6:	2c01      	cmp	r4, #1
 800d0b8:	d012      	beq.n	800d0e0 <__ieee754_atan2f+0xe8>
 800d0ba:	2c02      	cmp	r4, #2
 800d0bc:	d017      	beq.n	800d0ee <__ieee754_atan2f+0xf6>
 800d0be:	2c00      	cmp	r4, #0
 800d0c0:	d0ad      	beq.n	800d01e <__ieee754_atan2f+0x26>
 800d0c2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d128 <__ieee754_atan2f+0x130>
 800d0c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0ca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d12c <__ieee754_atan2f+0x134>
 800d0ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0d2:	e7a4      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d0d4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d118 <__ieee754_atan2f+0x120>
 800d0d8:	e7ed      	b.n	800d0b6 <__ieee754_atan2f+0xbe>
 800d0da:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d130 <__ieee754_atan2f+0x138>
 800d0de:	e7ea      	b.n	800d0b6 <__ieee754_atan2f+0xbe>
 800d0e0:	ee17 3a90 	vmov	r3, s15
 800d0e4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d0e8:	ee07 3a90 	vmov	s15, r3
 800d0ec:	e797      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d0ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d128 <__ieee754_atan2f+0x130>
 800d0f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d12c <__ieee754_atan2f+0x134>
 800d0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0fe:	e78e      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d100:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d12c <__ieee754_atan2f+0x134>
 800d104:	e78b      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d106:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d134 <__ieee754_atan2f+0x13c>
 800d10a:	e788      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d10c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d130 <__ieee754_atan2f+0x138>
 800d110:	e785      	b.n	800d01e <__ieee754_atan2f+0x26>
 800d112:	bf00      	nop
 800d114:	c0490fdb 	.word	0xc0490fdb
 800d118:	3fc90fdb 	.word	0x3fc90fdb
 800d11c:	bfc90fdb 	.word	0xbfc90fdb
 800d120:	0800db7c 	.word	0x0800db7c
 800d124:	0800db70 	.word	0x0800db70
 800d128:	33bbbd2e 	.word	0x33bbbd2e
 800d12c:	40490fdb 	.word	0x40490fdb
 800d130:	00000000 	.word	0x00000000
 800d134:	3f490fdb 	.word	0x3f490fdb

0800d138 <__ieee754_powf>:
 800d138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d13c:	ee10 4a90 	vmov	r4, s1
 800d140:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800d144:	ed2d 8b02 	vpush	{d8}
 800d148:	ee10 6a10 	vmov	r6, s0
 800d14c:	eeb0 8a40 	vmov.f32	s16, s0
 800d150:	eef0 8a60 	vmov.f32	s17, s1
 800d154:	d10c      	bne.n	800d170 <__ieee754_powf+0x38>
 800d156:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800d15a:	0076      	lsls	r6, r6, #1
 800d15c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800d160:	f240 829c 	bls.w	800d69c <__ieee754_powf+0x564>
 800d164:	ee38 0a28 	vadd.f32	s0, s16, s17
 800d168:	ecbd 8b02 	vpop	{d8}
 800d16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d170:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800d174:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800d178:	d802      	bhi.n	800d180 <__ieee754_powf+0x48>
 800d17a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d17e:	d908      	bls.n	800d192 <__ieee754_powf+0x5a>
 800d180:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800d184:	d1ee      	bne.n	800d164 <__ieee754_powf+0x2c>
 800d186:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d18a:	0064      	lsls	r4, r4, #1
 800d18c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d190:	e7e6      	b.n	800d160 <__ieee754_powf+0x28>
 800d192:	2e00      	cmp	r6, #0
 800d194:	da1e      	bge.n	800d1d4 <__ieee754_powf+0x9c>
 800d196:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800d19a:	d22b      	bcs.n	800d1f4 <__ieee754_powf+0xbc>
 800d19c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d1a0:	d332      	bcc.n	800d208 <__ieee754_powf+0xd0>
 800d1a2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800d1a6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d1aa:	fa49 f503 	asr.w	r5, r9, r3
 800d1ae:	fa05 f303 	lsl.w	r3, r5, r3
 800d1b2:	454b      	cmp	r3, r9
 800d1b4:	d126      	bne.n	800d204 <__ieee754_powf+0xcc>
 800d1b6:	f005 0501 	and.w	r5, r5, #1
 800d1ba:	f1c5 0502 	rsb	r5, r5, #2
 800d1be:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d1c2:	d122      	bne.n	800d20a <__ieee754_powf+0xd2>
 800d1c4:	2c00      	cmp	r4, #0
 800d1c6:	f280 826f 	bge.w	800d6a8 <__ieee754_powf+0x570>
 800d1ca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d1ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d1d2:	e7c9      	b.n	800d168 <__ieee754_powf+0x30>
 800d1d4:	2500      	movs	r5, #0
 800d1d6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d1da:	d1f0      	bne.n	800d1be <__ieee754_powf+0x86>
 800d1dc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800d1e0:	f000 825c 	beq.w	800d69c <__ieee754_powf+0x564>
 800d1e4:	d908      	bls.n	800d1f8 <__ieee754_powf+0xc0>
 800d1e6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800d548 <__ieee754_powf+0x410>
 800d1ea:	2c00      	cmp	r4, #0
 800d1ec:	bfa8      	it	ge
 800d1ee:	eeb0 0a68 	vmovge.f32	s0, s17
 800d1f2:	e7b9      	b.n	800d168 <__ieee754_powf+0x30>
 800d1f4:	2502      	movs	r5, #2
 800d1f6:	e7ee      	b.n	800d1d6 <__ieee754_powf+0x9e>
 800d1f8:	2c00      	cmp	r4, #0
 800d1fa:	f280 8252 	bge.w	800d6a2 <__ieee754_powf+0x56a>
 800d1fe:	eeb1 0a68 	vneg.f32	s0, s17
 800d202:	e7b1      	b.n	800d168 <__ieee754_powf+0x30>
 800d204:	2500      	movs	r5, #0
 800d206:	e7da      	b.n	800d1be <__ieee754_powf+0x86>
 800d208:	2500      	movs	r5, #0
 800d20a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800d20e:	d102      	bne.n	800d216 <__ieee754_powf+0xde>
 800d210:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d214:	e7a8      	b.n	800d168 <__ieee754_powf+0x30>
 800d216:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d21a:	d109      	bne.n	800d230 <__ieee754_powf+0xf8>
 800d21c:	2e00      	cmp	r6, #0
 800d21e:	db07      	blt.n	800d230 <__ieee754_powf+0xf8>
 800d220:	eeb0 0a48 	vmov.f32	s0, s16
 800d224:	ecbd 8b02 	vpop	{d8}
 800d228:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d22c:	f000 bbb4 	b.w	800d998 <__ieee754_sqrtf>
 800d230:	eeb0 0a48 	vmov.f32	s0, s16
 800d234:	f7ff fde3 	bl	800cdfe <fabsf>
 800d238:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800d23c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d240:	4647      	mov	r7, r8
 800d242:	d002      	beq.n	800d24a <__ieee754_powf+0x112>
 800d244:	f1b8 0f00 	cmp.w	r8, #0
 800d248:	d117      	bne.n	800d27a <__ieee754_powf+0x142>
 800d24a:	2c00      	cmp	r4, #0
 800d24c:	bfbc      	itt	lt
 800d24e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800d252:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d256:	2e00      	cmp	r6, #0
 800d258:	da86      	bge.n	800d168 <__ieee754_powf+0x30>
 800d25a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800d25e:	ea58 0805 	orrs.w	r8, r8, r5
 800d262:	d104      	bne.n	800d26e <__ieee754_powf+0x136>
 800d264:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d268:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d26c:	e77c      	b.n	800d168 <__ieee754_powf+0x30>
 800d26e:	2d01      	cmp	r5, #1
 800d270:	f47f af7a 	bne.w	800d168 <__ieee754_powf+0x30>
 800d274:	eeb1 0a40 	vneg.f32	s0, s0
 800d278:	e776      	b.n	800d168 <__ieee754_powf+0x30>
 800d27a:	0ff0      	lsrs	r0, r6, #31
 800d27c:	3801      	subs	r0, #1
 800d27e:	ea55 0300 	orrs.w	r3, r5, r0
 800d282:	d104      	bne.n	800d28e <__ieee754_powf+0x156>
 800d284:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d288:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d28c:	e76c      	b.n	800d168 <__ieee754_powf+0x30>
 800d28e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800d292:	d973      	bls.n	800d37c <__ieee754_powf+0x244>
 800d294:	4bad      	ldr	r3, [pc, #692]	@ (800d54c <__ieee754_powf+0x414>)
 800d296:	4598      	cmp	r8, r3
 800d298:	d808      	bhi.n	800d2ac <__ieee754_powf+0x174>
 800d29a:	2c00      	cmp	r4, #0
 800d29c:	da0b      	bge.n	800d2b6 <__ieee754_powf+0x17e>
 800d29e:	2000      	movs	r0, #0
 800d2a0:	ecbd 8b02 	vpop	{d8}
 800d2a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a8:	f000 bb70 	b.w	800d98c <__math_oflowf>
 800d2ac:	4ba8      	ldr	r3, [pc, #672]	@ (800d550 <__ieee754_powf+0x418>)
 800d2ae:	4598      	cmp	r8, r3
 800d2b0:	d908      	bls.n	800d2c4 <__ieee754_powf+0x18c>
 800d2b2:	2c00      	cmp	r4, #0
 800d2b4:	dcf3      	bgt.n	800d29e <__ieee754_powf+0x166>
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	ecbd 8b02 	vpop	{d8}
 800d2bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2c0:	f000 bb5e 	b.w	800d980 <__math_uflowf>
 800d2c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d2c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d2cc:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800d554 <__ieee754_powf+0x41c>
 800d2d0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800d2d4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d2d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d2dc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d2e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d2e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2e8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800d558 <__ieee754_powf+0x420>
 800d2ec:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800d2f0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800d55c <__ieee754_powf+0x424>
 800d2f4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d2f8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800d560 <__ieee754_powf+0x428>
 800d2fc:	eef0 6a67 	vmov.f32	s13, s15
 800d300:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d304:	ee16 3a90 	vmov	r3, s13
 800d308:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d30c:	f023 030f 	bic.w	r3, r3, #15
 800d310:	ee06 3a90 	vmov	s13, r3
 800d314:	eee0 6a47 	vfms.f32	s13, s0, s14
 800d318:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d31c:	3d01      	subs	r5, #1
 800d31e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800d322:	4305      	orrs	r5, r0
 800d324:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d328:	f024 040f 	bic.w	r4, r4, #15
 800d32c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800d330:	bf18      	it	ne
 800d332:	eeb0 8a47 	vmovne.f32	s16, s14
 800d336:	ee07 4a10 	vmov	s14, r4
 800d33a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d33e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d342:	ee07 3a90 	vmov	s15, r3
 800d346:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d34a:	ee07 4a10 	vmov	s14, r4
 800d34e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d352:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d356:	ee17 1a10 	vmov	r1, s14
 800d35a:	2900      	cmp	r1, #0
 800d35c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d360:	f340 80dd 	ble.w	800d51e <__ieee754_powf+0x3e6>
 800d364:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800d368:	f240 80ca 	bls.w	800d500 <__ieee754_powf+0x3c8>
 800d36c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d374:	bf4c      	ite	mi
 800d376:	2001      	movmi	r0, #1
 800d378:	2000      	movpl	r0, #0
 800d37a:	e791      	b.n	800d2a0 <__ieee754_powf+0x168>
 800d37c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800d380:	bf01      	itttt	eq
 800d382:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800d564 <__ieee754_powf+0x42c>
 800d386:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d38a:	f06f 0317 	mvneq.w	r3, #23
 800d38e:	ee17 7a90 	vmoveq	r7, s15
 800d392:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800d396:	bf18      	it	ne
 800d398:	2300      	movne	r3, #0
 800d39a:	3a7f      	subs	r2, #127	@ 0x7f
 800d39c:	441a      	add	r2, r3
 800d39e:	4b72      	ldr	r3, [pc, #456]	@ (800d568 <__ieee754_powf+0x430>)
 800d3a0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800d3a4:	429f      	cmp	r7, r3
 800d3a6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800d3aa:	dd06      	ble.n	800d3ba <__ieee754_powf+0x282>
 800d3ac:	4b6f      	ldr	r3, [pc, #444]	@ (800d56c <__ieee754_powf+0x434>)
 800d3ae:	429f      	cmp	r7, r3
 800d3b0:	f340 80a4 	ble.w	800d4fc <__ieee754_powf+0x3c4>
 800d3b4:	3201      	adds	r2, #1
 800d3b6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	4b6c      	ldr	r3, [pc, #432]	@ (800d570 <__ieee754_powf+0x438>)
 800d3be:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800d3c2:	ee07 1a10 	vmov	s14, r1
 800d3c6:	edd3 5a00 	vldr	s11, [r3]
 800d3ca:	4b6a      	ldr	r3, [pc, #424]	@ (800d574 <__ieee754_powf+0x43c>)
 800d3cc:	ee75 7a87 	vadd.f32	s15, s11, s14
 800d3d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3d4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800d3d8:	1049      	asrs	r1, r1, #1
 800d3da:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800d3de:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800d3e2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800d3e6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800d3ea:	ee07 1a90 	vmov	s15, r1
 800d3ee:	ee26 5a24 	vmul.f32	s10, s12, s9
 800d3f2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800d3f6:	ee15 7a10 	vmov	r7, s10
 800d3fa:	401f      	ands	r7, r3
 800d3fc:	ee06 7a90 	vmov	s13, r7
 800d400:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800d404:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d408:	ee65 7a05 	vmul.f32	s15, s10, s10
 800d40c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d410:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d578 <__ieee754_powf+0x440>
 800d414:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800d57c <__ieee754_powf+0x444>
 800d418:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d41c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800d580 <__ieee754_powf+0x448>
 800d420:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d424:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800d554 <__ieee754_powf+0x41c>
 800d428:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d42c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800d584 <__ieee754_powf+0x44c>
 800d430:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d434:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800d588 <__ieee754_powf+0x450>
 800d438:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d43c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d440:	ee35 7a26 	vadd.f32	s14, s10, s13
 800d444:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800d448:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d44c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800d450:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800d454:	eef0 5a67 	vmov.f32	s11, s15
 800d458:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800d45c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d460:	ee15 1a90 	vmov	r1, s11
 800d464:	4019      	ands	r1, r3
 800d466:	ee05 1a90 	vmov	s11, r1
 800d46a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800d46e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800d472:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d476:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d47a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d47e:	eeb0 6a67 	vmov.f32	s12, s15
 800d482:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d486:	ee16 1a10 	vmov	r1, s12
 800d48a:	4019      	ands	r1, r3
 800d48c:	ee06 1a10 	vmov	s12, r1
 800d490:	eeb0 7a46 	vmov.f32	s14, s12
 800d494:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800d498:	493c      	ldr	r1, [pc, #240]	@ (800d58c <__ieee754_powf+0x454>)
 800d49a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800d49e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4a2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800d590 <__ieee754_powf+0x458>
 800d4a6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800d594 <__ieee754_powf+0x45c>
 800d4aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4ae:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800d598 <__ieee754_powf+0x460>
 800d4b2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d4b6:	ed91 7a00 	vldr	s14, [r1]
 800d4ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4be:	ee07 2a10 	vmov	s14, r2
 800d4c2:	eef0 6a67 	vmov.f32	s13, s15
 800d4c6:	4a35      	ldr	r2, [pc, #212]	@ (800d59c <__ieee754_powf+0x464>)
 800d4c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d4cc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800d4d0:	ed92 5a00 	vldr	s10, [r2]
 800d4d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d4d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d4dc:	ee76 6a87 	vadd.f32	s13, s13, s14
 800d4e0:	ee16 2a90 	vmov	r2, s13
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	ee06 3a90 	vmov	s13, r3
 800d4ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d4ee:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d4f2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d4f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4fa:	e70f      	b.n	800d31c <__ieee754_powf+0x1e4>
 800d4fc:	2601      	movs	r6, #1
 800d4fe:	e75d      	b.n	800d3bc <__ieee754_powf+0x284>
 800d500:	d152      	bne.n	800d5a8 <__ieee754_powf+0x470>
 800d502:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d5a0 <__ieee754_powf+0x468>
 800d506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d50a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d50e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d516:	f73f af29 	bgt.w	800d36c <__ieee754_powf+0x234>
 800d51a:	2386      	movs	r3, #134	@ 0x86
 800d51c:	e048      	b.n	800d5b0 <__ieee754_powf+0x478>
 800d51e:	4a21      	ldr	r2, [pc, #132]	@ (800d5a4 <__ieee754_powf+0x46c>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d907      	bls.n	800d534 <__ieee754_powf+0x3fc>
 800d524:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d52c:	bf4c      	ite	mi
 800d52e:	2001      	movmi	r0, #1
 800d530:	2000      	movpl	r0, #0
 800d532:	e6c1      	b.n	800d2b8 <__ieee754_powf+0x180>
 800d534:	d138      	bne.n	800d5a8 <__ieee754_powf+0x470>
 800d536:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d53a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d542:	dbea      	blt.n	800d51a <__ieee754_powf+0x3e2>
 800d544:	e7ee      	b.n	800d524 <__ieee754_powf+0x3ec>
 800d546:	bf00      	nop
 800d548:	00000000 	.word	0x00000000
 800d54c:	3f7ffff3 	.word	0x3f7ffff3
 800d550:	3f800007 	.word	0x3f800007
 800d554:	3eaaaaab 	.word	0x3eaaaaab
 800d558:	3fb8aa3b 	.word	0x3fb8aa3b
 800d55c:	36eca570 	.word	0x36eca570
 800d560:	3fb8aa00 	.word	0x3fb8aa00
 800d564:	4b800000 	.word	0x4b800000
 800d568:	001cc471 	.word	0x001cc471
 800d56c:	005db3d6 	.word	0x005db3d6
 800d570:	0800db98 	.word	0x0800db98
 800d574:	fffff000 	.word	0xfffff000
 800d578:	3e6c3255 	.word	0x3e6c3255
 800d57c:	3e53f142 	.word	0x3e53f142
 800d580:	3e8ba305 	.word	0x3e8ba305
 800d584:	3edb6db7 	.word	0x3edb6db7
 800d588:	3f19999a 	.word	0x3f19999a
 800d58c:	0800db88 	.word	0x0800db88
 800d590:	3f76384f 	.word	0x3f76384f
 800d594:	3f763800 	.word	0x3f763800
 800d598:	369dc3a0 	.word	0x369dc3a0
 800d59c:	0800db90 	.word	0x0800db90
 800d5a0:	3338aa3c 	.word	0x3338aa3c
 800d5a4:	43160000 	.word	0x43160000
 800d5a8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d5ac:	d971      	bls.n	800d692 <__ieee754_powf+0x55a>
 800d5ae:	15db      	asrs	r3, r3, #23
 800d5b0:	3b7e      	subs	r3, #126	@ 0x7e
 800d5b2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800d5b6:	4118      	asrs	r0, r3
 800d5b8:	4408      	add	r0, r1
 800d5ba:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d5be:	4a3c      	ldr	r2, [pc, #240]	@ (800d6b0 <__ieee754_powf+0x578>)
 800d5c0:	3b7f      	subs	r3, #127	@ 0x7f
 800d5c2:	411a      	asrs	r2, r3
 800d5c4:	4002      	ands	r2, r0
 800d5c6:	ee07 2a10 	vmov	s14, r2
 800d5ca:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800d5ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d5d2:	f1c3 0317 	rsb	r3, r3, #23
 800d5d6:	4118      	asrs	r0, r3
 800d5d8:	2900      	cmp	r1, #0
 800d5da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5de:	bfb8      	it	lt
 800d5e0:	4240      	neglt	r0, r0
 800d5e2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d5e6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800d6b4 <__ieee754_powf+0x57c>
 800d5ea:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800d6b8 <__ieee754_powf+0x580>
 800d5ee:	ee17 3a10 	vmov	r3, s14
 800d5f2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d5f6:	f023 030f 	bic.w	r3, r3, #15
 800d5fa:	ee07 3a10 	vmov	s14, r3
 800d5fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d602:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d606:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d60a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800d6bc <__ieee754_powf+0x584>
 800d60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d612:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d616:	eef0 6a67 	vmov.f32	s13, s15
 800d61a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d61e:	eef0 5a66 	vmov.f32	s11, s13
 800d622:	eee7 5a46 	vfms.f32	s11, s14, s12
 800d626:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d62a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d62e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800d6c0 <__ieee754_powf+0x588>
 800d632:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800d6c4 <__ieee754_powf+0x58c>
 800d636:	eea7 6a25 	vfma.f32	s12, s14, s11
 800d63a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800d6c8 <__ieee754_powf+0x590>
 800d63e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d642:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800d6cc <__ieee754_powf+0x594>
 800d646:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d64a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800d6d0 <__ieee754_powf+0x598>
 800d64e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d652:	eeb0 6a66 	vmov.f32	s12, s13
 800d656:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800d65a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d65e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800d662:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d666:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800d66a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800d66e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d672:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d676:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d67a:	ee10 3a10 	vmov	r3, s0
 800d67e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d682:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d686:	da06      	bge.n	800d696 <__ieee754_powf+0x55e>
 800d688:	f000 f8fa 	bl	800d880 <scalbnf>
 800d68c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d690:	e56a      	b.n	800d168 <__ieee754_powf+0x30>
 800d692:	2000      	movs	r0, #0
 800d694:	e7a5      	b.n	800d5e2 <__ieee754_powf+0x4aa>
 800d696:	ee00 3a10 	vmov	s0, r3
 800d69a:	e7f7      	b.n	800d68c <__ieee754_powf+0x554>
 800d69c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d6a0:	e562      	b.n	800d168 <__ieee754_powf+0x30>
 800d6a2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800d6d4 <__ieee754_powf+0x59c>
 800d6a6:	e55f      	b.n	800d168 <__ieee754_powf+0x30>
 800d6a8:	eeb0 0a48 	vmov.f32	s0, s16
 800d6ac:	e55c      	b.n	800d168 <__ieee754_powf+0x30>
 800d6ae:	bf00      	nop
 800d6b0:	ff800000 	.word	0xff800000
 800d6b4:	3f317218 	.word	0x3f317218
 800d6b8:	3f317200 	.word	0x3f317200
 800d6bc:	35bfbe8c 	.word	0x35bfbe8c
 800d6c0:	b5ddea0e 	.word	0xb5ddea0e
 800d6c4:	3331bb4c 	.word	0x3331bb4c
 800d6c8:	388ab355 	.word	0x388ab355
 800d6cc:	bb360b61 	.word	0xbb360b61
 800d6d0:	3e2aaaab 	.word	0x3e2aaaab
 800d6d4:	00000000 	.word	0x00000000

0800d6d8 <atanf>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	ee10 5a10 	vmov	r5, s0
 800d6de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d6e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d6e6:	eef0 7a40 	vmov.f32	s15, s0
 800d6ea:	d310      	bcc.n	800d70e <atanf+0x36>
 800d6ec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d6f0:	d904      	bls.n	800d6fc <atanf+0x24>
 800d6f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d6f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d834 <atanf+0x15c>
 800d700:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d838 <atanf+0x160>
 800d704:	2d00      	cmp	r5, #0
 800d706:	bfc8      	it	gt
 800d708:	eef0 7a47 	vmovgt.f32	s15, s14
 800d70c:	e7f3      	b.n	800d6f6 <atanf+0x1e>
 800d70e:	4b4b      	ldr	r3, [pc, #300]	@ (800d83c <atanf+0x164>)
 800d710:	429c      	cmp	r4, r3
 800d712:	d810      	bhi.n	800d736 <atanf+0x5e>
 800d714:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d718:	d20a      	bcs.n	800d730 <atanf+0x58>
 800d71a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d840 <atanf+0x168>
 800d71e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d726:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72e:	dce2      	bgt.n	800d6f6 <atanf+0x1e>
 800d730:	f04f 33ff 	mov.w	r3, #4294967295
 800d734:	e013      	b.n	800d75e <atanf+0x86>
 800d736:	f7ff fb62 	bl	800cdfe <fabsf>
 800d73a:	4b42      	ldr	r3, [pc, #264]	@ (800d844 <atanf+0x16c>)
 800d73c:	429c      	cmp	r4, r3
 800d73e:	d84f      	bhi.n	800d7e0 <atanf+0x108>
 800d740:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d744:	429c      	cmp	r4, r3
 800d746:	d841      	bhi.n	800d7cc <atanf+0xf4>
 800d748:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d74c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d750:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d754:	2300      	movs	r3, #0
 800d756:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d75a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d75e:	1c5a      	adds	r2, r3, #1
 800d760:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d764:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d848 <atanf+0x170>
 800d768:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d84c <atanf+0x174>
 800d76c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d850 <atanf+0x178>
 800d770:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d774:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d778:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d854 <atanf+0x17c>
 800d77c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d780:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d858 <atanf+0x180>
 800d784:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d788:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d85c <atanf+0x184>
 800d78c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d790:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d860 <atanf+0x188>
 800d794:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d798:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d864 <atanf+0x18c>
 800d79c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d7a0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d868 <atanf+0x190>
 800d7a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d7a8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d86c <atanf+0x194>
 800d7ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d7b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d870 <atanf+0x198>
 800d7b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d7b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d7bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d7c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d7c4:	d121      	bne.n	800d80a <atanf+0x132>
 800d7c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7ca:	e794      	b.n	800d6f6 <atanf+0x1e>
 800d7cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d7d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d7d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d7d8:	2301      	movs	r3, #1
 800d7da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d7de:	e7be      	b.n	800d75e <atanf+0x86>
 800d7e0:	4b24      	ldr	r3, [pc, #144]	@ (800d874 <atanf+0x19c>)
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d80b      	bhi.n	800d7fe <atanf+0x126>
 800d7e6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d7ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d7f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fc:	e7af      	b.n	800d75e <atanf+0x86>
 800d7fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d802:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d806:	2303      	movs	r3, #3
 800d808:	e7a9      	b.n	800d75e <atanf+0x86>
 800d80a:	4a1b      	ldr	r2, [pc, #108]	@ (800d878 <atanf+0x1a0>)
 800d80c:	491b      	ldr	r1, [pc, #108]	@ (800d87c <atanf+0x1a4>)
 800d80e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d812:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d816:	edd3 6a00 	vldr	s13, [r3]
 800d81a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d81e:	2d00      	cmp	r5, #0
 800d820:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d824:	edd2 7a00 	vldr	s15, [r2]
 800d828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d82c:	bfb8      	it	lt
 800d82e:	eef1 7a67 	vneglt.f32	s15, s15
 800d832:	e760      	b.n	800d6f6 <atanf+0x1e>
 800d834:	bfc90fdb 	.word	0xbfc90fdb
 800d838:	3fc90fdb 	.word	0x3fc90fdb
 800d83c:	3edfffff 	.word	0x3edfffff
 800d840:	7149f2ca 	.word	0x7149f2ca
 800d844:	3f97ffff 	.word	0x3f97ffff
 800d848:	3c8569d7 	.word	0x3c8569d7
 800d84c:	3d4bda59 	.word	0x3d4bda59
 800d850:	bd6ef16b 	.word	0xbd6ef16b
 800d854:	3d886b35 	.word	0x3d886b35
 800d858:	3dba2e6e 	.word	0x3dba2e6e
 800d85c:	3e124925 	.word	0x3e124925
 800d860:	3eaaaaab 	.word	0x3eaaaaab
 800d864:	bd15a221 	.word	0xbd15a221
 800d868:	bd9d8795 	.word	0xbd9d8795
 800d86c:	bde38e38 	.word	0xbde38e38
 800d870:	be4ccccd 	.word	0xbe4ccccd
 800d874:	401bffff 	.word	0x401bffff
 800d878:	0800dbb0 	.word	0x0800dbb0
 800d87c:	0800dba0 	.word	0x0800dba0

0800d880 <scalbnf>:
 800d880:	ee10 3a10 	vmov	r3, s0
 800d884:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d888:	d02b      	beq.n	800d8e2 <scalbnf+0x62>
 800d88a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d88e:	d302      	bcc.n	800d896 <scalbnf+0x16>
 800d890:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d894:	4770      	bx	lr
 800d896:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d89a:	d123      	bne.n	800d8e4 <scalbnf+0x64>
 800d89c:	4b24      	ldr	r3, [pc, #144]	@ (800d930 <scalbnf+0xb0>)
 800d89e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d934 <scalbnf+0xb4>
 800d8a2:	4298      	cmp	r0, r3
 800d8a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d8a8:	db17      	blt.n	800d8da <scalbnf+0x5a>
 800d8aa:	ee10 3a10 	vmov	r3, s0
 800d8ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d8b2:	3a19      	subs	r2, #25
 800d8b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d8b8:	4288      	cmp	r0, r1
 800d8ba:	dd15      	ble.n	800d8e8 <scalbnf+0x68>
 800d8bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d938 <scalbnf+0xb8>
 800d8c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d93c <scalbnf+0xbc>
 800d8c4:	ee10 3a10 	vmov	r3, s0
 800d8c8:	eeb0 7a67 	vmov.f32	s14, s15
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	bfb8      	it	lt
 800d8d0:	eef0 7a66 	vmovlt.f32	s15, s13
 800d8d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d8d8:	4770      	bx	lr
 800d8da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d940 <scalbnf+0xc0>
 800d8de:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d8e2:	4770      	bx	lr
 800d8e4:	0dd2      	lsrs	r2, r2, #23
 800d8e6:	e7e5      	b.n	800d8b4 <scalbnf+0x34>
 800d8e8:	4410      	add	r0, r2
 800d8ea:	28fe      	cmp	r0, #254	@ 0xfe
 800d8ec:	dce6      	bgt.n	800d8bc <scalbnf+0x3c>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	dd06      	ble.n	800d900 <scalbnf+0x80>
 800d8f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d8f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d8fa:	ee00 3a10 	vmov	s0, r3
 800d8fe:	4770      	bx	lr
 800d900:	f110 0f16 	cmn.w	r0, #22
 800d904:	da09      	bge.n	800d91a <scalbnf+0x9a>
 800d906:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d940 <scalbnf+0xc0>
 800d90a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d944 <scalbnf+0xc4>
 800d90e:	ee10 3a10 	vmov	r3, s0
 800d912:	eeb0 7a67 	vmov.f32	s14, s15
 800d916:	2b00      	cmp	r3, #0
 800d918:	e7d9      	b.n	800d8ce <scalbnf+0x4e>
 800d91a:	3019      	adds	r0, #25
 800d91c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d920:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d924:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d948 <scalbnf+0xc8>
 800d928:	ee07 3a90 	vmov	s15, r3
 800d92c:	e7d7      	b.n	800d8de <scalbnf+0x5e>
 800d92e:	bf00      	nop
 800d930:	ffff3cb0 	.word	0xffff3cb0
 800d934:	4c000000 	.word	0x4c000000
 800d938:	7149f2ca 	.word	0x7149f2ca
 800d93c:	f149f2ca 	.word	0xf149f2ca
 800d940:	0da24260 	.word	0x0da24260
 800d944:	8da24260 	.word	0x8da24260
 800d948:	33000000 	.word	0x33000000

0800d94c <with_errnof>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	ed2d 8b02 	vpush	{d8}
 800d952:	eeb0 8a40 	vmov.f32	s16, s0
 800d956:	4604      	mov	r4, r0
 800d958:	f7fe fc88 	bl	800c26c <__errno>
 800d95c:	eeb0 0a48 	vmov.f32	s0, s16
 800d960:	ecbd 8b02 	vpop	{d8}
 800d964:	6004      	str	r4, [r0, #0]
 800d966:	bd10      	pop	{r4, pc}

0800d968 <xflowf>:
 800d968:	b130      	cbz	r0, 800d978 <xflowf+0x10>
 800d96a:	eef1 7a40 	vneg.f32	s15, s0
 800d96e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d972:	2022      	movs	r0, #34	@ 0x22
 800d974:	f7ff bfea 	b.w	800d94c <with_errnof>
 800d978:	eef0 7a40 	vmov.f32	s15, s0
 800d97c:	e7f7      	b.n	800d96e <xflowf+0x6>
	...

0800d980 <__math_uflowf>:
 800d980:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d988 <__math_uflowf+0x8>
 800d984:	f7ff bff0 	b.w	800d968 <xflowf>
 800d988:	10000000 	.word	0x10000000

0800d98c <__math_oflowf>:
 800d98c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d994 <__math_oflowf+0x8>
 800d990:	f7ff bfea 	b.w	800d968 <xflowf>
 800d994:	70000000 	.word	0x70000000

0800d998 <__ieee754_sqrtf>:
 800d998:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d99c:	4770      	bx	lr
	...

0800d9a0 <_init>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	bf00      	nop
 800d9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a6:	bc08      	pop	{r3}
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	4770      	bx	lr

0800d9ac <_fini>:
 800d9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ae:	bf00      	nop
 800d9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b2:	bc08      	pop	{r3}
 800d9b4:	469e      	mov	lr, r3
 800d9b6:	4770      	bx	lr
