
naebshiki_rocketa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006600  08006600  00007600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006648  08006648  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006650  08006650  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006654  08006654  00007654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006658  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00004b84  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004be4  20004be4  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c86d  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003832  00000000  00000000  000248fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00028130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001408  00000000  00000000  00029aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023149  00000000  00000000  0002aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dec5  00000000  00000000  0004dff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db7b3  00000000  00000000  0006beb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147669  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007084  00000000  00000000  001476ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0014e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065e8 	.word	0x080065e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080065e8 	.word	0x080065e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f001 fc11 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f83f 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 fd93 	bl	800102c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000506:	f000 f8a3 	bl	8000650 <MX_ADC1_Init>
  MX_TIM1_Init();
 800050a:	f000 fa5f 	bl	80009cc <MX_TIM1_Init>
  MX_ADC2_Init();
 800050e:	f000 f8f1 	bl	80006f4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000512:	f000 f941 	bl	8000798 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000516:	f000 f991 	bl	800083c <MX_I2C1_Init>
  MX_I2C2_Init();
 800051a:	f000 f9bd 	bl	8000898 <MX_I2C2_Init>
  MX_SPI1_Init();
 800051e:	f000 f9e9 	bl	80008f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000522:	f000 fa1d 	bl	8000960 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000526:	f000 fad5 	bl	8000ad4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052a:	f000 fb2b 	bl	8000b84 <MX_TIM3_Init>
  MX_TIM4_Init();
 800052e:	f000 fb83 	bl	8000c38 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000532:	f000 fbdb 	bl	8000cec <MX_TIM8_Init>
  MX_TIM12_Init();
 8000536:	f000 fc5d 	bl	8000df4 <MX_TIM12_Init>
  MX_UART5_Init();
 800053a:	f000 fca1 	bl	8000e80 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800053e:	f000 fcc9 	bl	8000ed4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000542:	f000 fcf1 	bl	8000f28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000546:	f000 fd19 	bl	8000f7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054a:	f000 fd41 	bl	8000fd0 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <main+0x84>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f004 fcf5 	bl	8004f54 <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a03      	ldr	r2, [pc, #12]	@ (800057c <main+0x88>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f004 fce9 	bl	8004f46 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x80>
 8000578:	0800660c 	.word	0x0800660c
 800057c:	20000d00 	.word	0x20000d00

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 ff50 	bl	8006434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <SystemClock_Config+0xc8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a26      	ldr	r2, [pc, #152]	@ (8000648 <SystemClock_Config+0xc8>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b21      	ldr	r3, [pc, #132]	@ (800064c <SystemClock_Config+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a20      	ldr	r2, [pc, #128]	@ (800064c <SystemClock_Config+0xcc>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f4:	2348      	movs	r3, #72	@ 0x48
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fb3f 	bl	8002c88 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000610:	f000 fdcc 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fda1 	bl	8003178 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800063c:	f000 fdb6 	bl	80011ac <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	@ 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000662:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_ADC1_Init+0x98>)
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <MX_ADC1_Init+0x9c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_ADC1_Init+0x98>)
 800066a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800066e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000676:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_ADC1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_ADC1_Init+0x98>)
 8000692:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <MX_ADC1_Init+0xa0>)
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_ADC1_Init+0x98>)
 800069e:	2201      	movs	r2, #1
 80006a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_ADC1_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <MX_ADC1_Init+0x98>)
 80006b2:	f001 fb9b 	bl	8001dec <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006bc:	f000 fd76 	bl	80011ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_ADC1_Init+0x98>)
 80006d2:	f001 fbcf 	bl	8001e74 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006dc:	f000 fd66 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000031c 	.word	0x2000031c
 80006ec:	40012000 	.word	0x40012000
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_ADC2_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <MX_ADC2_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_ADC2_Init+0x98>)
 800070e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_ADC2_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_ADC2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_ADC2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_ADC2_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_ADC2_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_ADC2_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <MX_ADC2_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_ADC2_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_ADC2_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_ADC2_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_ADC2_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_ADC2_Init+0x98>)
 8000756:	f001 fb49 	bl	8001dec <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 fd24 	bl	80011ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_ADC2_Init+0x98>)
 8000776:	f001 fb7d 	bl	8001e74 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 fd14 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000364 	.word	0x20000364
 8000790:	40012100 	.word	0x40012100
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <MX_ADC3_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <MX_ADC3_Init+0xa0>)
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_ADC3_Init+0x98>)
 80007fa:	f001 faf7 	bl	8001dec <HAL_ADC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 fcd2 	bl	80011ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000808:	230a      	movs	r3, #10
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_ADC3_Init+0x98>)
 800081a:	f001 fb2b 	bl	8001e74 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 fcc2 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200003ac 	.word	0x200003ac
 8000834:	40012200 	.word	0x40012200
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_I2C1_Init+0x50>)
 8000842:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <MX_I2C1_Init+0x54>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_I2C1_Init+0x50>)
 8000848:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <MX_I2C1_Init+0x58>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_I2C1_Init+0x50>)
 800085a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <MX_I2C1_Init+0x50>)
 800087a:	f001 ffb1 	bl	80027e0 <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 fc92 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200003f4 	.word	0x200003f4
 8000890:	40005400 	.word	0x40005400
 8000894:	000186a0 	.word	0x000186a0

08000898 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_I2C2_Init+0x50>)
 800089e:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <MX_I2C2_Init+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008a4:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <MX_I2C2_Init+0x58>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_I2C2_Init+0x50>)
 80008d6:	f001 ff83 	bl	80027e0 <HAL_I2C_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008e0:	f000 fc64 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000448 	.word	0x20000448
 80008ec:	40005800 	.word	0x40005800
 80008f0:	000186a0 	.word	0x000186a0

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_SPI1_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	@ (800095c <MX_SPI1_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_SPI1_Init+0x64>)
 8000946:	f002 fe69 	bl	800361c <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 fc2c 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000049c 	.word	0x2000049c
 800095c:	40013000 	.word	0x40013000

08000960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000966:	4a18      	ldr	r2, [pc, #96]	@ (80009c8 <MX_SPI2_Init+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800096c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800098c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_SPI2_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_SPI2_Init+0x64>)
 80009b2:	f002 fe33 	bl	800361c <HAL_SPI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 fbf6 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200004f4 	.word	0x200004f4
 80009c8:	40003800 	.word	0x40003800

080009cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b092      	sub	sp, #72	@ 0x48
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2220      	movs	r2, #32
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 fd1c 	bl	8006434 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009fc:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <MX_TIM1_Init+0x100>)
 80009fe:	4a34      	ldr	r2, [pc, #208]	@ (8000ad0 <MX_TIM1_Init+0x104>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a02:	4b32      	ldr	r3, [pc, #200]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a28:	4828      	ldr	r0, [pc, #160]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a2a:	f002 ff49 	bl	80038c0 <HAL_TIM_PWM_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a34:	f000 fbba 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a44:	4619      	mov	r1, r3
 8000a46:	4821      	ldr	r0, [pc, #132]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a48:	f003 fbc0 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a52:	f000 fbab 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a56:	2360      	movs	r3, #96	@ 0x60
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4814      	ldr	r0, [pc, #80]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000a7c:	f003 f860 	bl	8003b40 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a86:	f000 fb91 	bl	80011ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4807      	ldr	r0, [pc, #28]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000aae:	f003 fc09 	bl	80042c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ab8:	f000 fb78 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000abc:	4803      	ldr	r0, [pc, #12]	@ (8000acc <MX_TIM1_Init+0x100>)
 8000abe:	f000 fdfd 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8000ac2:	bf00      	nop
 8000ac4:	3748      	adds	r7, #72	@ 0x48
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000054c 	.word	0x2000054c
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af6:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000af8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b1e:	4818      	ldr	r0, [pc, #96]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b20:	f002 fece 	bl	80038c0 <HAL_TIM_PWM_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b2a:	f000 fb3f 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4810      	ldr	r0, [pc, #64]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b3e:	f003 fb45 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b48:	f000 fb30 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	2360      	movs	r3, #96	@ 0x60
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b64:	f002 ffec 	bl	8003b40 <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b6e:	f000 fb1d 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <MX_TIM2_Init+0xac>)
 8000b74:	f000 fda2 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000594 	.word	0x20000594

08000b84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba6:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000ba8:	4a22      	ldr	r2, [pc, #136]	@ (8000c34 <MX_TIM3_Init+0xb0>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bac:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000bba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bcc:	4818      	ldr	r0, [pc, #96]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000bce:	f002 fe77 	bl	80038c0 <HAL_TIM_PWM_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f000 fae8 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	4619      	mov	r1, r3
 8000bea:	4811      	ldr	r0, [pc, #68]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000bec:	f003 faee 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000bf6:	f000 fad9 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfa:	2360      	movs	r3, #96	@ 0x60
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000c12:	f002 ff95 	bl	8003b40 <HAL_TIM_PWM_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c1c:	f000 fac6 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <MX_TIM3_Init+0xac>)
 8000c22:	f000 fd4b 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200005dc 	.word	0x200005dc
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000c5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c80:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000c82:	f002 fe1d 	bl	80038c0 <HAL_TIM_PWM_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f000 fa8e 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000ca0:	f003 fa94 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000caa:	f000 fa7f 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cae:	2360      	movs	r3, #96	@ 0x60
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000cc6:	f002 ff3b 	bl	8003b40 <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000cd0:	f000 fa6c 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <MX_TIM4_Init+0xac>)
 8000cd6:	f000 fcf1 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000624 	.word	0x20000624
 8000ce8:	40000800 	.word	0x40000800

08000cec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b092      	sub	sp, #72	@ 0x48
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2220      	movs	r2, #32
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 fb8c 	bl	8006434 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d1c:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d1e:	4a34      	ldr	r2, [pc, #208]	@ (8000df0 <MX_TIM8_Init+0x104>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d22:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d48:	4828      	ldr	r0, [pc, #160]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d4a:	f002 fdb9 	bl	80038c0 <HAL_TIM_PWM_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000d54:	f000 fa2a 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d64:	4619      	mov	r1, r3
 8000d66:	4821      	ldr	r0, [pc, #132]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d68:	f003 fa30 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000d72:	f000 fa1b 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2360      	movs	r3, #96	@ 0x60
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000d9c:	f002 fed0 	bl	8003b40 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000da6:	f000 fa01 	bl	80011ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000dce:	f003 fa79 	bl	80042c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000dd8:	f000 f9e8 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ddc:	4803      	ldr	r0, [pc, #12]	@ (8000dec <MX_TIM8_Init+0x100>)
 8000dde:	f000 fc6d 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3748      	adds	r7, #72	@ 0x48
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000066c 	.word	0x2000066c
 8000df0:	40010400 	.word	0x40010400

08000df4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <MX_TIM12_Init+0x88>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000e12:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e24:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e32:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e34:	f002 fd44 	bl	80038c0 <HAL_TIM_PWM_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000e3e:	f000 f9b5 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2360      	movs	r3, #96	@ 0x60
 8000e44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e5a:	f002 fe71 	bl	8003b40 <HAL_TIM_PWM_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000e64:	f000 f9a2 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e68:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <MX_TIM12_Init+0x84>)
 8000e6a:	f000 fc27 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8000e6e:	bf00      	nop
 8000e70:	3720      	adds	r7, #32
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200006b4 	.word	0x200006b4
 8000e7c:	40001800 	.word	0x40001800

08000e80 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <MX_UART5_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_UART5_Init+0x4c>)
 8000eb8:	f003 fa6a 	bl	8004390 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f000 f973 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200006fc 	.word	0x200006fc
 8000ed0:	40005000 	.word	0x40005000

08000ed4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_USART1_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f0c:	f003 fa40 	bl	8004390 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 f949 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000744 	.word	0x20000744
 8000f24:	40011000 	.word	0x40011000

08000f28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <MX_USART2_UART_Init+0x50>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f003 fa16 	bl	8004390 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6a:	f000 f91f 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000078c 	.word	0x2000078c
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_USART3_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f003 f9ec 	bl	8004390 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f8f5 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200007d4 	.word	0x200007d4
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	f001 fd28 	bl	8002a68 <HAL_PCD_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800101e:	f000 f8c5 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000081c 	.word	0x2000081c

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b48      	ldr	r3, [pc, #288]	@ (8001168 <MX_GPIO_Init+0x13c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a47      	ldr	r2, [pc, #284]	@ (8001168 <MX_GPIO_Init+0x13c>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b45      	ldr	r3, [pc, #276]	@ (8001168 <MX_GPIO_Init+0x13c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b41      	ldr	r3, [pc, #260]	@ (8001168 <MX_GPIO_Init+0x13c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a40      	ldr	r2, [pc, #256]	@ (8001168 <MX_GPIO_Init+0x13c>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b3e      	ldr	r3, [pc, #248]	@ (8001168 <MX_GPIO_Init+0x13c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <MX_GPIO_Init+0x13c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a39      	ldr	r2, [pc, #228]	@ (8001168 <MX_GPIO_Init+0x13c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <MX_GPIO_Init+0x13c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <MX_GPIO_Init+0x13c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a32      	ldr	r2, [pc, #200]	@ (8001168 <MX_GPIO_Init+0x13c>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <MX_GPIO_Init+0x13c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <MX_GPIO_Init+0x13c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001168 <MX_GPIO_Init+0x13c>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <MX_GPIO_Init+0x13c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BNO85_RST_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f242 0120 	movw	r1, #8224	@ 0x2020
 80010d4:	4825      	ldr	r0, [pc, #148]	@ (800116c <MX_GPIO_Init+0x140>)
 80010d6:	f001 fb69 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2110      	movs	r1, #16
 80010de:	4824      	ldr	r0, [pc, #144]	@ (8001170 <MX_GPIO_Init+0x144>)
 80010e0:	f001 fb64 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO85_WEAK_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f241 0101 	movw	r1, #4097	@ 0x1001
 80010ea:	4822      	ldr	r0, [pc, #136]	@ (8001174 <MX_GPIO_Init+0x148>)
 80010ec:	f001 fb5e 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BNO85_RST_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BNO85_RST_Pin;
 80010f0:	f242 0320 	movw	r3, #8224	@ 0x2020
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4818      	ldr	r0, [pc, #96]	@ (800116c <MX_GPIO_Init+0x140>)
 800110a:	f001 f9b3 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800110e:	2310      	movs	r3, #16
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4812      	ldr	r0, [pc, #72]	@ (8001170 <MX_GPIO_Init+0x144>)
 8001126:	f001 f9a5 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO85_INT_Pin */
  GPIO_InitStruct.Pin = BNO85_INT_Pin;
 800112a:	2310      	movs	r3, #16
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNO85_INT_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <MX_GPIO_Init+0x140>)
 800113e:	f001 f999 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO85_WEAK_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = BNO85_WEAK_Pin|SPI2_CS_Pin;
 8001142:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <MX_GPIO_Init+0x148>)
 800115c:	f001 f98a 	bl	8002474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400

08001178 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f003 ff33 	bl	8004fec <osDelay>
 8001186:	e7fb      	b.n	8001180 <StartDefaultTask+0x8>

08001188 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800119a:	f000 fde3 	bl	8001d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40002000 	.word	0x40002000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <Error_Handler+0x8>

080011b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_MspInit+0x54>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	4a11      	ldr	r2, [pc, #68]	@ (800120c <HAL_MspInit+0x54>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <HAL_MspInit+0x54>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_MspInit+0x54>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_MspInit+0x54>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_MspInit+0x54>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	210f      	movs	r1, #15
 80011fa:	f06f 0001 	mvn.w	r0, #1
 80011fe:	f001 f90f 	bl	8002420 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	@ 0x38
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a45      	ldr	r2, [pc, #276]	@ (8001344 <HAL_ADC_MspInit+0x134>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d128      	bne.n	8001284 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	4b44      	ldr	r3, [pc, #272]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a43      	ldr	r2, [pc, #268]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	4833      	ldr	r0, [pc, #204]	@ (800134c <HAL_ADC_MspInit+0x13c>)
 800127e:	f001 f8f9 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001282:	e05a      	b.n	800133a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a31      	ldr	r2, [pc, #196]	@ (8001350 <HAL_ADC_MspInit+0x140>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d128      	bne.n	80012e0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a2c      	ldr	r2, [pc, #176]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001298:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a25      	ldr	r2, [pc, #148]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012c6:	2302      	movs	r3, #2
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	481c      	ldr	r0, [pc, #112]	@ (800134c <HAL_ADC_MspInit+0x13c>)
 80012da:	f001 f8cb 	bl	8002474 <HAL_GPIO_Init>
}
 80012de:	e02c      	b.n	800133a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <HAL_ADC_MspInit+0x144>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d127      	bne.n	800133a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 80012f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_ADC_MspInit+0x138>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001322:	2303      	movs	r3, #3
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001332:	4619      	mov	r1, r3
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <HAL_ADC_MspInit+0x148>)
 8001336:	f001 f89d 	bl	8002474 <HAL_GPIO_Init>
}
 800133a:	bf00      	nop
 800133c:	3738      	adds	r7, #56	@ 0x38
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40012000 	.word	0x40012000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000
 8001350:	40012100 	.word	0x40012100
 8001354:	40012200 	.word	0x40012200
 8001358:	40020800 	.word	0x40020800

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	@ 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a33      	ldr	r2, [pc, #204]	@ (8001448 <HAL_I2C_MspInit+0xec>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12d      	bne.n	80013da <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	4b32      	ldr	r3, [pc, #200]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a31      	ldr	r2, [pc, #196]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b2f      	ldr	r3, [pc, #188]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800139a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a0:	2312      	movs	r3, #18
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4826      	ldr	r0, [pc, #152]	@ (8001450 <HAL_I2C_MspInit+0xf4>)
 80013b8:	f001 f85c 	bl	8002474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	4a21      	ldr	r2, [pc, #132]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 80013c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013d8:	e031      	b.n	800143e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <HAL_I2C_MspInit+0xf8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d12c      	bne.n	800143e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	4a17      	ldr	r2, [pc, #92]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001400:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001412:	2304      	movs	r3, #4
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <HAL_I2C_MspInit+0xf4>)
 800141e:	f001 f829 	bl	8002474 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 800142c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_I2C_MspInit+0xf0>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	bf00      	nop
 8001440:	3730      	adds	r7, #48	@ 0x30
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40005400 	.word	0x40005400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400
 8001454:	40005800 	.word	0x40005800

08001458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a41      	ldr	r2, [pc, #260]	@ (800157c <HAL_SPI_MspInit+0x124>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12c      	bne.n	80014d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b40      	ldr	r3, [pc, #256]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a3f      	ldr	r2, [pc, #252]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001484:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a38      	ldr	r2, [pc, #224]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014b2:	23e0      	movs	r3, #224	@ 0xe0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c2:	2305      	movs	r3, #5
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	482d      	ldr	r0, [pc, #180]	@ (8001584 <HAL_SPI_MspInit+0x12c>)
 80014ce:	f000 ffd1 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014d2:	e04f      	b.n	8001574 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001588 <HAL_SPI_MspInit+0x130>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d14a      	bne.n	8001574 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ee:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a1f      	ldr	r2, [pc, #124]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a18      	ldr	r2, [pc, #96]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001532:	230c      	movs	r3, #12
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001542:	2305      	movs	r3, #5
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	480f      	ldr	r0, [pc, #60]	@ (800158c <HAL_SPI_MspInit+0x134>)
 800154e:	f000 ff91 	bl	8002474 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001564:	2305      	movs	r3, #5
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4808      	ldr	r0, [pc, #32]	@ (8001590 <HAL_SPI_MspInit+0x138>)
 8001570:	f000 ff80 	bl	8002474 <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	@ 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013000 	.word	0x40013000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40003800 	.word	0x40003800
 800158c:	40020800 	.word	0x40020800
 8001590:	40020400 	.word	0x40020400

08001594 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a40      	ldr	r2, [pc, #256]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x110>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10e      	bne.n	80015c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	4b3f      	ldr	r3, [pc, #252]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	4a3e      	ldr	r2, [pc, #248]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b6:	4b3c      	ldr	r3, [pc, #240]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80015c2:	e06a      	b.n	800169a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015cc:	d10e      	bne.n	80015ec <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	4a34      	ldr	r2, [pc, #208]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015de:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
}
 80015ea:	e056      	b.n	800169a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a2e      	ldr	r2, [pc, #184]	@ (80016ac <HAL_TIM_PWM_MspInit+0x118>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d10e      	bne.n	8001614 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a2a      	ldr	r2, [pc, #168]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b28      	ldr	r3, [pc, #160]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
}
 8001612:	e042      	b.n	800169a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM4)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a25      	ldr	r2, [pc, #148]	@ (80016b0 <HAL_TIM_PWM_MspInit+0x11c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10e      	bne.n	800163c <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a20      	ldr	r2, [pc, #128]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
}
 800163a:	e02e      	b.n	800169a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM8)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <HAL_TIM_PWM_MspInit+0x120>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d116      	bne.n	8001674 <HAL_TIM_PWM_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	210f      	movs	r1, #15
 8001666:	202d      	movs	r0, #45	@ 0x2d
 8001668:	f000 feda 	bl	8002420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800166c:	202d      	movs	r0, #45	@ 0x2d
 800166e:	f000 fef3 	bl	8002458 <HAL_NVIC_EnableIRQ>
}
 8001672:	e012      	b.n	800169a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM12)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x124>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10d      	bne.n	800169a <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x114>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40000400 	.word	0x40000400
 80016b0:	40000800 	.word	0x40000800
 80016b4:	40010400 	.word	0x40010400
 80016b8:	40001800 	.word	0x40001800

080016bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	@ 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6d      	ldr	r2, [pc, #436]	@ (8001890 <HAL_TIM_MspPostInit+0x1d4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d11f      	bne.n	800171e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a6b      	ldr	r2, [pc, #428]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b69      	ldr	r3, [pc, #420]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800170c:	2301      	movs	r3, #1
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4860      	ldr	r0, [pc, #384]	@ (8001898 <HAL_TIM_MspPostInit+0x1dc>)
 8001718:	f000 feac 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800171c:	e0b4      	b.n	8001888 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001726:	d11f      	bne.n	8001768 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001730:	4a58      	ldr	r2, [pc, #352]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6313      	str	r3, [r2, #48]	@ 0x30
 8001738:	4b56      	ldr	r3, [pc, #344]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001756:	2301      	movs	r3, #1
 8001758:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	484d      	ldr	r0, [pc, #308]	@ (8001898 <HAL_TIM_MspPostInit+0x1dc>)
 8001762:	f000 fe87 	bl	8002474 <HAL_GPIO_Init>
}
 8001766:	e08f      	b.n	8001888 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a4b      	ldr	r2, [pc, #300]	@ (800189c <HAL_TIM_MspPostInit+0x1e0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d11e      	bne.n	80017b0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a46      	ldr	r2, [pc, #280]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800178e:	2310      	movs	r3, #16
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800179e:	2302      	movs	r3, #2
 80017a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	483d      	ldr	r0, [pc, #244]	@ (80018a0 <HAL_TIM_MspPostInit+0x1e4>)
 80017aa:	f000 fe63 	bl	8002474 <HAL_GPIO_Init>
}
 80017ae:	e06b      	b.n	8001888 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM4)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a3b      	ldr	r2, [pc, #236]	@ (80018a4 <HAL_TIM_MspPostInit+0x1e8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11e      	bne.n	80017f8 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a34      	ldr	r2, [pc, #208]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d6:	2340      	movs	r3, #64	@ 0x40
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017e6:	2302      	movs	r3, #2
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	482b      	ldr	r0, [pc, #172]	@ (80018a0 <HAL_TIM_MspPostInit+0x1e4>)
 80017f2:	f000 fe3f 	bl	8002474 <HAL_GPIO_Init>
}
 80017f6:	e047      	b.n	8001888 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM8)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2a      	ldr	r2, [pc, #168]	@ (80018a8 <HAL_TIM_MspPostInit+0x1ec>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d11e      	bne.n	8001840 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a22      	ldr	r2, [pc, #136]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181e:	2340      	movs	r3, #64	@ 0x40
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800182e:	2303      	movs	r3, #3
 8001830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	481c      	ldr	r0, [pc, #112]	@ (80018ac <HAL_TIM_MspPostInit+0x1f0>)
 800183a:	f000 fe1b 	bl	8002474 <HAL_GPIO_Init>
}
 800183e:	e023      	b.n	8001888 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <HAL_TIM_MspPostInit+0x1f4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d11e      	bne.n	8001888 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_TIM_MspPostInit+0x1d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001866:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001878:	2309      	movs	r3, #9
 800187a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <HAL_TIM_MspPostInit+0x1e4>)
 8001884:	f000 fdf6 	bl	8002474 <HAL_GPIO_Init>
}
 8001888:	bf00      	nop
 800188a:	3738      	adds	r7, #56	@ 0x38
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40010000 	.word	0x40010000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40000400 	.word	0x40000400
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40000800 	.word	0x40000800
 80018a8:	40010400 	.word	0x40010400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40001800 	.word	0x40001800

080018b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	@ 0x40
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a74      	ldr	r2, [pc, #464]	@ (8001aa4 <HAL_UART_MspInit+0x1f0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d14b      	bne.n	800196e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018da:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a72      	ldr	r2, [pc, #456]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80018e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b70      	ldr	r3, [pc, #448]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f6:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b69      	ldr	r3, [pc, #420]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
 8001912:	4b65      	ldr	r3, [pc, #404]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a64      	ldr	r2, [pc, #400]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b62      	ldr	r3, [pc, #392]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800192a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800193c:	2308      	movs	r3, #8
 800193e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4859      	ldr	r0, [pc, #356]	@ (8001aac <HAL_UART_MspInit+0x1f8>)
 8001948:	f000 fd94 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800194c:	2304      	movs	r3, #4
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800195c:	2308      	movs	r3, #8
 800195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4852      	ldr	r0, [pc, #328]	@ (8001ab0 <HAL_UART_MspInit+0x1fc>)
 8001968:	f000 fd84 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800196c:	e096      	b.n	8001a9c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a50      	ldr	r2, [pc, #320]	@ (8001ab4 <HAL_UART_MspInit+0x200>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12d      	bne.n	80019d4 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	4a49      	ldr	r2, [pc, #292]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6453      	str	r3, [r2, #68]	@ 0x44
 8001988:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	4b43      	ldr	r3, [pc, #268]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	4a42      	ldr	r2, [pc, #264]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a4:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c2:	2307      	movs	r3, #7
 80019c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ca:	4619      	mov	r1, r3
 80019cc:	483a      	ldr	r0, [pc, #232]	@ (8001ab8 <HAL_UART_MspInit+0x204>)
 80019ce:	f000 fd51 	bl	8002474 <HAL_GPIO_Init>
}
 80019d2:	e063      	b.n	8001a9c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a38      	ldr	r2, [pc, #224]	@ (8001abc <HAL_UART_MspInit+0x208>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12c      	bne.n	8001a38 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a30      	ldr	r2, [pc, #192]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a16:	230c      	movs	r3, #12
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a26:	2307      	movs	r3, #7
 8001a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4821      	ldr	r0, [pc, #132]	@ (8001ab8 <HAL_UART_MspInit+0x204>)
 8001a32:	f000 fd1f 	bl	8002474 <HAL_GPIO_Init>
}
 8001a36:	e031      	b.n	8001a9c <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <HAL_UART_MspInit+0x20c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12c      	bne.n	8001a9c <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_UART_MspInit+0x1f4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a7a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <HAL_UART_MspInit+0x1f8>)
 8001a98:	f000 fcec 	bl	8002474 <HAL_GPIO_Init>
}
 8001a9c:	bf00      	nop
 8001a9e:	3740      	adds	r7, #64	@ 0x40
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40005000 	.word	0x40005000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40011000 	.word	0x40011000
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40004400 	.word	0x40004400
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ae4:	d132      	bne.n	8001b4c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b02:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b14:	230a      	movs	r3, #10
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480e      	ldr	r0, [pc, #56]	@ (8001b58 <HAL_PCD_MspInit+0x94>)
 8001b20:	f000 fca8 	bl	8002474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b2e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001b3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <HAL_PCD_MspInit+0x90>)
 8001b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	@ 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000

08001b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	@ 0x38
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <HAL_InitTick+0xe4>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	4a32      	ldr	r2, [pc, #200]	@ (8001c40 <HAL_InitTick+0xe4>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7c:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <HAL_InitTick+0xe4>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b88:	f107 0210 	add.w	r2, r7, #16
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fd10 	bl	80035b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ba2:	f001 fce1 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8001ba6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ba8:	e004      	b.n	8001bb4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001baa:	f001 fcdd 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bb6:	4a23      	ldr	r2, [pc, #140]	@ (8001c44 <HAL_InitTick+0xe8>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9b      	lsrs	r3, r3, #18
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_InitTick+0xec>)
 8001bc4:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <HAL_InitTick+0xf0>)
 8001bc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <HAL_InitTick+0xec>)
 8001bca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bce:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c48 <HAL_InitTick+0xec>)
 8001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <HAL_InitTick+0xec>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <HAL_InitTick+0xec>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_InitTick+0xec>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001be8:	4817      	ldr	r0, [pc, #92]	@ (8001c48 <HAL_InitTick+0xec>)
 8001bea:	f001 fda0 	bl	800372e <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d11b      	bne.n	8001c34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001bfc:	4812      	ldr	r0, [pc, #72]	@ (8001c48 <HAL_InitTick+0xec>)
 8001bfe:	f001 fdef 	bl	80037e0 <HAL_TIM_Base_Start_IT>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d111      	bne.n	8001c34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c10:	202d      	movs	r0, #45	@ 0x2d
 8001c12:	f000 fc21 	bl	8002458 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d808      	bhi.n	8001c2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	202d      	movs	r0, #45	@ 0x2d
 8001c22:	f000 fbfd 	bl	8002420 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <HAL_InitTick+0xf4>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e002      	b.n	8001c34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3738      	adds	r7, #56	@ 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	20000d04 	.word	0x20000d04
 8001c4c:	40002000 	.word	0x40002000
 8001c50:	20000004 	.word	0x20000004

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c90:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8001c92:	f001 fe64 	bl	800395e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8001c96:	4803      	ldr	r0, [pc, #12]	@ (8001ca4 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8001c98:	f001 fe61 	bl	800395e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000066c 	.word	0x2000066c
 8001ca4:	20000d04 	.word	0x20000d04

08001ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cd0:	f7ff ffea 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	@ (8001d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f004 fbf9 	bl	80064f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7fe fbf9 	bl	80004f4 <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d10:	08006658 	.word	0x08006658
  ldr r2, =_sbss
 8001d14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d18:	20004be4 	.word	0x20004be4

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <HAL_Init+0x40>)
 8001d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_Init+0x40>)
 8001d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <HAL_Init+0x40>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f000 fb5e 	bl	800240a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4e:	200f      	movs	r0, #15
 8001d50:	f7ff ff04 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d54:	f7ff fa30 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000d4c 	.word	0x20000d4c

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000d4c 	.word	0x20000d4c

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e033      	b.n	8001e6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fa00 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e32:	f023 0302 	bic.w	r3, r3, #2
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f93a 	bl	80020b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5a:	e001      	b.n	8001e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1c>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e105      	b.n	800209c <HAL_ADC_ConfigChannel+0x228>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	d925      	bls.n	8001eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68d9      	ldr	r1, [r3, #12]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b1e      	subs	r3, #30
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4403      	add	r3, r0
 8001ede:	3b1e      	subs	r3, #30
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	e022      	b.n	8001f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	2207      	movs	r2, #7
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4403      	add	r3, r0
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d824      	bhi.n	8001f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b05      	subs	r3, #5
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	3b05      	subs	r3, #5
 8001f76:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f82:	e04c      	b.n	800201e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	d824      	bhi.n	8001fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b23      	subs	r3, #35	@ 0x23
 8001f9e:	221f      	movs	r2, #31
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b23      	subs	r3, #35	@ 0x23
 8001fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fd4:	e023      	b.n	800201e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b41      	subs	r3, #65	@ 0x41
 8001fe8:	221f      	movs	r2, #31
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b41      	subs	r3, #65	@ 0x41
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800201e:	4b22      	ldr	r3, [pc, #136]	@ (80020a8 <HAL_ADC_ConfigChannel+0x234>)
 8002020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_ADC_ConfigChannel+0x238>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d109      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1cc>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b12      	cmp	r3, #18
 8002032:	d105      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_ADC_ConfigChannel+0x238>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d123      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x21e>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b10      	cmp	r3, #16
 8002050:	d003      	beq.n	800205a <HAL_ADC_ConfigChannel+0x1e6>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b11      	cmp	r3, #17
 8002058:	d11b      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b10      	cmp	r3, #16
 800206c:	d111      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <HAL_ADC_ConfigChannel+0x240>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	0c9a      	lsrs	r2, r3, #18
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002084:	e002      	b.n	800208c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3b01      	subs	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40012300 	.word	0x40012300
 80020ac:	40012000 	.word	0x40012000
 80020b0:	20000000 	.word	0x20000000
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c0:	4b79      	ldr	r3, [pc, #484]	@ (80022a8 <ADC_Init+0x1f0>)
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	021a      	lsls	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	4a58      	ldr	r2, [pc, #352]	@ (80022ac <ADC_Init+0x1f4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d022      	beq.n	8002196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800215e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e00f      	b.n	80021b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0202 	bic.w	r2, r2, #2
 80021c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7e1b      	ldrb	r3, [r3, #24]
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6859      	ldr	r1, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	3b01      	subs	r3, #1
 8002210:	035a      	lsls	r2, r3, #13
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	e007      	b.n	800222c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800222a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	3b01      	subs	r3, #1
 8002248:	051a      	lsls	r2, r3, #20
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800226e:	025a      	lsls	r2, r3, #9
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	029a      	lsls	r2, r3, #10
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40012300 	.word	0x40012300
 80022ac:	0f000001 	.word	0x0f000001

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff4c 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002432:	f7ff ff61 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002436:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f7ff ffb1 	bl	80023a4 <NVIC_EncodePriority>
 8002442:	4602      	mov	r2, r0
 8002444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff80 	bl	8002350 <__NVIC_SetPriority>
}
 8002450:	bf00      	nop
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff54 	bl	8002314 <__NVIC_EnableIRQ>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e16b      	b.n	8002768 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	f040 815a 	bne.w	8002762 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d005      	beq.n	80024c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d130      	bne.n	8002528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	2203      	movs	r2, #3
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0201 	and.w	r2, r3, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b03      	cmp	r3, #3
 8002532:	d017      	beq.n	8002564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d123      	bne.n	80025b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	08da      	lsrs	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3208      	adds	r2, #8
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	69b9      	ldr	r1, [r7, #24]
 80025b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80b4 	beq.w	8002762 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b60      	ldr	r3, [pc, #384]	@ (8002780 <HAL_GPIO_Init+0x30c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	4a5f      	ldr	r2, [pc, #380]	@ (8002780 <HAL_GPIO_Init+0x30c>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002608:	6453      	str	r3, [r2, #68]	@ 0x44
 800260a:	4b5d      	ldr	r3, [pc, #372]	@ (8002780 <HAL_GPIO_Init+0x30c>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002616:	4a5b      	ldr	r2, [pc, #364]	@ (8002784 <HAL_GPIO_Init+0x310>)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a52      	ldr	r2, [pc, #328]	@ (8002788 <HAL_GPIO_Init+0x314>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d02b      	beq.n	800269a <HAL_GPIO_Init+0x226>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a51      	ldr	r2, [pc, #324]	@ (800278c <HAL_GPIO_Init+0x318>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d025      	beq.n	8002696 <HAL_GPIO_Init+0x222>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a50      	ldr	r2, [pc, #320]	@ (8002790 <HAL_GPIO_Init+0x31c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01f      	beq.n	8002692 <HAL_GPIO_Init+0x21e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4f      	ldr	r2, [pc, #316]	@ (8002794 <HAL_GPIO_Init+0x320>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x21a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4e      	ldr	r2, [pc, #312]	@ (8002798 <HAL_GPIO_Init+0x324>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x216>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4d      	ldr	r2, [pc, #308]	@ (800279c <HAL_GPIO_Init+0x328>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x212>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4c      	ldr	r2, [pc, #304]	@ (80027a0 <HAL_GPIO_Init+0x32c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x20e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4b      	ldr	r2, [pc, #300]	@ (80027a4 <HAL_GPIO_Init+0x330>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x20a>
 800267a:	2307      	movs	r3, #7
 800267c:	e00e      	b.n	800269c <HAL_GPIO_Init+0x228>
 800267e:	2308      	movs	r3, #8
 8002680:	e00c      	b.n	800269c <HAL_GPIO_Init+0x228>
 8002682:	2306      	movs	r3, #6
 8002684:	e00a      	b.n	800269c <HAL_GPIO_Init+0x228>
 8002686:	2305      	movs	r3, #5
 8002688:	e008      	b.n	800269c <HAL_GPIO_Init+0x228>
 800268a:	2304      	movs	r3, #4
 800268c:	e006      	b.n	800269c <HAL_GPIO_Init+0x228>
 800268e:	2303      	movs	r3, #3
 8002690:	e004      	b.n	800269c <HAL_GPIO_Init+0x228>
 8002692:	2302      	movs	r3, #2
 8002694:	e002      	b.n	800269c <HAL_GPIO_Init+0x228>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_GPIO_Init+0x228>
 800269a:	2300      	movs	r3, #0
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	f002 0203 	and.w	r2, r2, #3
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	4093      	lsls	r3, r2
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026ac:	4935      	ldr	r1, [pc, #212]	@ (8002784 <HAL_GPIO_Init+0x310>)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	3302      	adds	r3, #2
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ba:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026de:	4a32      	ldr	r2, [pc, #200]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e4:	4b30      	ldr	r3, [pc, #192]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002708:	4a27      	ldr	r2, [pc, #156]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800270e:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002732:	4a1d      	ldr	r2, [pc, #116]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800275c:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <HAL_GPIO_Init+0x334>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3301      	adds	r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	f67f ae90 	bls.w	8002490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3724      	adds	r7, #36	@ 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	40013800 	.word	0x40013800
 8002788:	40020000 	.word	0x40020000
 800278c:	40020400 	.word	0x40020400
 8002790:	40020800 	.word	0x40020800
 8002794:	40020c00 	.word	0x40020c00
 8002798:	40021000 	.word	0x40021000
 800279c:	40021400 	.word	0x40021400
 80027a0:	40021800 	.word	0x40021800
 80027a4:	40021c00 	.word	0x40021c00
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c8:	e003      	b.n	80027d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e12b      	b.n	8002a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fda8 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	@ 0x24
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002844:	f000 fe90 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8002848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a81      	ldr	r2, [pc, #516]	@ (8002a54 <HAL_I2C_Init+0x274>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d807      	bhi.n	8002864 <HAL_I2C_Init+0x84>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a80      	ldr	r2, [pc, #512]	@ (8002a58 <HAL_I2C_Init+0x278>)
 8002858:	4293      	cmp	r3, r2
 800285a:	bf94      	ite	ls
 800285c:	2301      	movls	r3, #1
 800285e:	2300      	movhi	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e006      	b.n	8002872 <HAL_I2C_Init+0x92>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a7d      	ldr	r2, [pc, #500]	@ (8002a5c <HAL_I2C_Init+0x27c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0e7      	b.n	8002a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a78      	ldr	r2, [pc, #480]	@ (8002a60 <HAL_I2C_Init+0x280>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0c9b      	lsrs	r3, r3, #18
 8002884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a54 <HAL_I2C_Init+0x274>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d802      	bhi.n	80028b4 <HAL_I2C_Init+0xd4>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3301      	adds	r3, #1
 80028b2:	e009      	b.n	80028c8 <HAL_I2C_Init+0xe8>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	4a69      	ldr	r2, [pc, #420]	@ (8002a64 <HAL_I2C_Init+0x284>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	3301      	adds	r3, #1
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	495c      	ldr	r1, [pc, #368]	@ (8002a54 <HAL_I2C_Init+0x274>)
 80028e4:	428b      	cmp	r3, r1
 80028e6:	d819      	bhi.n	800291c <HAL_I2C_Init+0x13c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1e59      	subs	r1, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028fc:	400b      	ands	r3, r1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_I2C_Init+0x138>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e59      	subs	r1, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002910:	3301      	adds	r3, #1
 8002912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002916:	e051      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 8002918:	2304      	movs	r3, #4
 800291a:	e04f      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_I2C_Init+0x168>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e012      	b.n	800296e <HAL_I2C_Init+0x18e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	0099      	lsls	r1, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Init+0x196>
 8002972:	2301      	movs	r3, #1
 8002974:	e022      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <HAL_I2C_Init+0x1bc>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e58      	subs	r0, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	440b      	add	r3, r1
 800298c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800299a:	e00f      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6809      	ldr	r1, [r1, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6911      	ldr	r1, [r2, #16]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	000186a0 	.word	0x000186a0
 8002a58:	001e847f 	.word	0x001e847f
 8002a5c:	003d08ff 	.word	0x003d08ff
 8002a60:	431bde83 	.word	0x431bde83
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e101      	b.n	8002c7e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff f815 	bl	8001ac4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa8:	d102      	bne.n	8002ab0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 ff93 	bl	80049e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7c1a      	ldrb	r2, [r3, #16]
 8002ac2:	f88d 2000 	strb.w	r2, [sp]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aca:	f001 ff25 	bl	8004918 <USB_CoreInit>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0ce      	b.n	8002c7e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 ff8b 	bl	8004a02 <USB_SetCurrentMode>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0bf      	b.n	8002c7e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	e04a      	b.n	8002b9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3315      	adds	r3, #21
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3314      	adds	r3, #20
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	b298      	uxth	r0, r3
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	332e      	adds	r3, #46	@ 0x2e
 8002b40:	4602      	mov	r2, r0
 8002b42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3318      	adds	r3, #24
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	331c      	adds	r3, #28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3324      	adds	r3, #36	@ 0x24
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	3301      	adds	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	791b      	ldrb	r3, [r3, #4]
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3af      	bcc.n	8002b04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e044      	b.n	8002c34 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	3301      	adds	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	791b      	ldrb	r3, [r3, #4]
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d3b5      	bcc.n	8002baa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7c1a      	ldrb	r2, [r3, #16]
 8002c46:	f88d 2000 	strb.w	r2, [sp]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4e:	f001 ff25 	bl	8004a9c <USB_DevInit>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e00c      	b.n	8002c7e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f002 f8ed 	bl	8004e56 <USB_DevDisconnect>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e267      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d075      	beq.n	8002d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca6:	4b88      	ldr	r3, [pc, #544]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d00c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb2:	4b85      	ldr	r3, [pc, #532]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d112      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b82      	ldr	r3, [pc, #520]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x108>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d157      	bne.n	8002d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e242      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x74>
 8002cee:	4b76      	ldr	r3, [pc, #472]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a75      	ldr	r2, [pc, #468]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x98>
 8002d06:	4b70      	ldr	r3, [pc, #448]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002d20:	4b69      	ldr	r3, [pc, #420]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a68      	ldr	r2, [pc, #416]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b66      	ldr	r3, [pc, #408]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a65      	ldr	r2, [pc, #404]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7ff f824 	bl	8001d8c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff f820 	bl	8001d8c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	@ 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e207      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xc0>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7ff f810 	bl	8001d8c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff f80c 	bl	8001d8c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1f3      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	4b51      	ldr	r3, [pc, #324]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0xe8>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002daa:	4b47      	ldr	r3, [pc, #284]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d11c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db6:	4b44      	ldr	r3, [pc, #272]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d116      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	4b41      	ldr	r3, [pc, #260]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1c7      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4937      	ldr	r1, [pc, #220]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	e03a      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df8:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_RCC_OscConfig+0x244>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe ffc5 	bl	8001d8c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe ffc1 	bl	8001d8c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1a8      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4925      	ldr	r1, [pc, #148]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_RCC_OscConfig+0x244>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe ffa4 	bl	8001d8c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e48:	f7fe ffa0 	bl	8001d8c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e187      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d036      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <HAL_RCC_OscConfig+0x248>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe ff84 	bl	8001d8c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fe ff80 	bl	8001d8c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e167      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x200>
 8002ea6:	e01b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <HAL_RCC_OscConfig+0x248>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe ff6d 	bl	8001d8c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	e00e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb6:	f7fe ff69 	bl	8001d8c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d907      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e150      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	42470000 	.word	0x42470000
 8002ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	4b88      	ldr	r3, [pc, #544]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ea      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8097 	beq.w	800301c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef2:	4b81      	ldr	r3, [pc, #516]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	4b7d      	ldr	r3, [pc, #500]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	4a7c      	ldr	r2, [pc, #496]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b77      	ldr	r3, [pc, #476]	@ (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b74      	ldr	r3, [pc, #464]	@ (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a73      	ldr	r2, [pc, #460]	@ (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe ff29 	bl	8001d8c <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fe ff25 	bl	8001d8c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e10c      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b6a      	ldr	r3, [pc, #424]	@ (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2ea>
 8002f64:	4b64      	ldr	r3, [pc, #400]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f68:	4a63      	ldr	r2, [pc, #396]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f70:	e01c      	b.n	8002fac <HAL_RCC_OscConfig+0x324>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x30c>
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f86:	4b5c      	ldr	r3, [pc, #368]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0x324>
 8002f94:	4b58      	ldr	r3, [pc, #352]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f98:	4a57      	ldr	r2, [pc, #348]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa0:	4b55      	ldr	r3, [pc, #340]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa4:	4a54      	ldr	r2, [pc, #336]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d015      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe feea 	bl	8001d8c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fee6 	bl	8001d8c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0cb      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	4b49      	ldr	r3, [pc, #292]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ee      	beq.n	8002fbc <HAL_RCC_OscConfig+0x334>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fed4 	bl	8001d8c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fed0 	bl	8001d8c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0b5      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ee      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b39      	ldr	r3, [pc, #228]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	4a38      	ldr	r2, [pc, #224]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800301a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a1 	beq.w	8003168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003026:	4b34      	ldr	r3, [pc, #208]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b08      	cmp	r3, #8
 8003030:	d05c      	beq.n	80030ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d141      	bne.n	80030be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b31      	ldr	r3, [pc, #196]	@ (8003100 <HAL_RCC_OscConfig+0x478>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fea4 	bl	8001d8c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe fea0 	bl	8001d8c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e087      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	3b01      	subs	r3, #1
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	491b      	ldr	r1, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <HAL_RCC_OscConfig+0x478>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe fe79 	bl	8001d8c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309e:	f7fe fe75 	bl	8001d8c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e05c      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x416>
 80030bc:	e054      	b.n	8003168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <HAL_RCC_OscConfig+0x478>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fe62 	bl	8001d8c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fe fe5e 	bl	8001d8c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e045      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x444>
 80030ea:	e03d      	b.n	8003168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e038      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
 8003100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003104:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x4ec>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d028      	beq.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d121      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800313a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	4293      	cmp	r3, r2
 800313e:	d111      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0cc      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b68      	ldr	r3, [pc, #416]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d90c      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b65      	ldr	r3, [pc, #404]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a58      	ldr	r2, [pc, #352]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a52      	ldr	r2, [pc, #328]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d044      	beq.n	8003298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d119      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b3f      	ldr	r3, [pc, #252]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b3b      	ldr	r3, [pc, #236]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e067      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4934      	ldr	r1, [pc, #208]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fe fd90 	bl	8001d8c <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fe fd8c 	bl	8001d8c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e04f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b2b      	ldr	r3, [pc, #172]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b25      	ldr	r3, [pc, #148]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20c      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ea:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f821 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490a      	ldr	r1, [pc, #40]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fc1c 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00
 8003334:	40023800 	.word	0x40023800
 8003338:	08006630 	.word	0x08006630
 800333c:	20000000 	.word	0x20000000
 8003340:	20000004 	.word	0x20000004

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b094      	sub	sp, #80	@ 0x50
 800334a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003350:	2300      	movs	r3, #0
 8003352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003354:	2300      	movs	r3, #0
 8003356:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335c:	4b79      	ldr	r3, [pc, #484]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x200>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d00d      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x40>
 8003368:	2b08      	cmp	r3, #8
 800336a:	f200 80e1 	bhi.w	8003530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x34>
 8003372:	2b04      	cmp	r3, #4
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x3a>
 8003376:	e0db      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b73      	ldr	r3, [pc, #460]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x204>)
 800337a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800337c:	e0db      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337e:	4b73      	ldr	r3, [pc, #460]	@ (800354c <HAL_RCC_GetSysClockFreq+0x208>)
 8003380:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003382:	e0d8      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003384:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x200>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800338c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338e:	4b6d      	ldr	r3, [pc, #436]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x200>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d063      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x200>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	2200      	movs	r2, #0
 80033a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ae:	2300      	movs	r3, #0
 80033b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033b6:	4622      	mov	r2, r4
 80033b8:	462b      	mov	r3, r5
 80033ba:	f04f 0000 	mov.w	r0, #0
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	0159      	lsls	r1, r3, #5
 80033c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c8:	0150      	lsls	r0, r2, #5
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4621      	mov	r1, r4
 80033d0:	1a51      	subs	r1, r2, r1
 80033d2:	6139      	str	r1, [r7, #16]
 80033d4:	4629      	mov	r1, r5
 80033d6:	eb63 0301 	sbc.w	r3, r3, r1
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e8:	4659      	mov	r1, fp
 80033ea:	018b      	lsls	r3, r1, #6
 80033ec:	4651      	mov	r1, sl
 80033ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033f2:	4651      	mov	r1, sl
 80033f4:	018a      	lsls	r2, r1, #6
 80033f6:	4651      	mov	r1, sl
 80033f8:	ebb2 0801 	subs.w	r8, r2, r1
 80033fc:	4659      	mov	r1, fp
 80033fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800340e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003416:	4690      	mov	r8, r2
 8003418:	4699      	mov	r9, r3
 800341a:	4623      	mov	r3, r4
 800341c:	eb18 0303 	adds.w	r3, r8, r3
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	462b      	mov	r3, r5
 8003424:	eb49 0303 	adc.w	r3, r9, r3
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003436:	4629      	mov	r1, r5
 8003438:	024b      	lsls	r3, r1, #9
 800343a:	4621      	mov	r1, r4
 800343c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003440:	4621      	mov	r1, r4
 8003442:	024a      	lsls	r2, r1, #9
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344a:	2200      	movs	r2, #0
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003454:	f7fc febc 	bl	80001d0 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4613      	mov	r3, r2
 800345e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003460:	e058      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003462:	4b38      	ldr	r3, [pc, #224]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	2200      	movs	r2, #0
 800346a:	4618      	mov	r0, r3
 800346c:	4611      	mov	r1, r2
 800346e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003472:	623b      	str	r3, [r7, #32]
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
 8003478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	f04f 0000 	mov.w	r0, #0
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	0159      	lsls	r1, r3, #5
 800348a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800348e:	0150      	lsls	r0, r2, #5
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4641      	mov	r1, r8
 8003496:	ebb2 0a01 	subs.w	sl, r2, r1
 800349a:	4649      	mov	r1, r9
 800349c:	eb63 0b01 	sbc.w	fp, r3, r1
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034b4:	ebb2 040a 	subs.w	r4, r2, sl
 80034b8:	eb63 050b 	sbc.w	r5, r3, fp
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	00eb      	lsls	r3, r5, #3
 80034c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ca:	00e2      	lsls	r2, r4, #3
 80034cc:	4614      	mov	r4, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	4643      	mov	r3, r8
 80034d2:	18e3      	adds	r3, r4, r3
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	464b      	mov	r3, r9
 80034d8:	eb45 0303 	adc.w	r3, r5, r3
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ea:	4629      	mov	r1, r5
 80034ec:	028b      	lsls	r3, r1, #10
 80034ee:	4621      	mov	r1, r4
 80034f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f4:	4621      	mov	r1, r4
 80034f6:	028a      	lsls	r2, r1, #10
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fe:	2200      	movs	r2, #0
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	61fa      	str	r2, [r7, #28]
 8003504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003508:	f7fc fe62 	bl	80001d0 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4613      	mov	r3, r2
 8003512:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003514:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x200>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	0c1b      	lsrs	r3, r3, #16
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	3301      	adds	r3, #1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003524:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800352e:	e002      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x204>)
 8003532:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003538:	4618      	mov	r0, r3
 800353a:	3750      	adds	r7, #80	@ 0x50
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	00f42400 	.word	0x00f42400
 800354c:	007a1200 	.word	0x007a1200

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <HAL_RCC_GetHCLKFreq+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000000 	.word	0x20000000

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800356c:	f7ff fff0 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	@ (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	08006640 	.word	0x08006640

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003594:	f7ff ffdc 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	@ (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40023800 	.word	0x40023800
 80035b4:	08006640 	.word	0x08006640

080035b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	220f      	movs	r2, #15
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035c8:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003614 <HAL_RCC_GetClockConfig+0x5c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <HAL_RCC_GetClockConfig+0x5c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035ec:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <HAL_RCC_GetClockConfig+0x5c>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035fa:	4b07      	ldr	r3, [pc, #28]	@ (8003618 <HAL_RCC_GetClockConfig+0x60>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0207 	and.w	r2, r3, #7
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	40023c00 	.word	0x40023c00

0800361c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07b      	b.n	8003726 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800363e:	d009      	beq.n	8003654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	61da      	str	r2, [r3, #28]
 8003646:	e005      	b.n	8003654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fef2 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800368a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d8:	ea42 0103 	orr.w	r1, r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0104 	and.w	r1, r3, #4
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	f003 0210 	and.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003714:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e041      	b.n	80037c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f839 	bl	80037cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f000 fad1 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e04e      	b.n	8003896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a23      	ldr	r2, [pc, #140]	@ (80038a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d022      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003822:	d01d      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1f      	ldr	r2, [pc, #124]	@ (80038a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d018      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1c      	ldr	r2, [pc, #112]	@ (80038b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a19      	ldr	r2, [pc, #100]	@ (80038b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x80>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a18      	ldr	r2, [pc, #96]	@ (80038bc <HAL_TIM_Base_Start_IT+0xdc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d010      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003882:	e007      	b.n	8003894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40010400 	.word	0x40010400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40001800 	.word	0x40001800

080038c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e041      	b.n	8003956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fe54 	bl	8001594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 fa08 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01b      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f06f 0202 	mvn.w	r2, #2
 8003992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f995 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 80039ae:	e005      	b.n	80039bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f987 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f998 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01b      	beq.n	8003a0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0204 	mvn.w	r2, #4
 80039de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f96f 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f961 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f972 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01b      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f06f 0208 	mvn.w	r2, #8
 8003a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f949 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003a46:	e005      	b.n	8003a54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f93b 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f94c 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f06f 0210 	mvn.w	r2, #16
 8003a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f923 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003a92:	e005      	b.n	8003aa0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f915 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f926 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00c      	beq.n	8003aca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0201 	mvn.w	r2, #1
 8003ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fd fb5f 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fc47 	bl	800437c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8f7 	bl	8003d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00c      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0220 	mvn.w	r2, #32
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fc19 	bl	8004368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0ae      	b.n	8003cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	f200 809f 	bhi.w	8003cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003cad 	.word	0x08003cad
 8003b7c:	08003cad 	.word	0x08003cad
 8003b80:	08003cad 	.word	0x08003cad
 8003b84:	08003be9 	.word	0x08003be9
 8003b88:	08003cad 	.word	0x08003cad
 8003b8c:	08003cad 	.word	0x08003cad
 8003b90:	08003cad 	.word	0x08003cad
 8003b94:	08003c2b 	.word	0x08003c2b
 8003b98:	08003cad 	.word	0x08003cad
 8003b9c:	08003cad 	.word	0x08003cad
 8003ba0:	08003cad 	.word	0x08003cad
 8003ba4:	08003c6b 	.word	0x08003c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f95c 	bl	8003e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0208 	orr.w	r2, r2, #8
 8003bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6999      	ldr	r1, [r3, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	619a      	str	r2, [r3, #24]
      break;
 8003be6:	e064      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f9ac 	bl	8003f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6999      	ldr	r1, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	021a      	lsls	r2, r3, #8
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	619a      	str	r2, [r3, #24]
      break;
 8003c28:	e043      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fa01 	bl	8004038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0208 	orr.w	r2, r2, #8
 8003c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0204 	bic.w	r2, r2, #4
 8003c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69d9      	ldr	r1, [r3, #28]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	61da      	str	r2, [r3, #28]
      break;
 8003c68:	e023      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fa55 	bl	8004120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	021a      	lsls	r2, r3, #8
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	61da      	str	r2, [r3, #28]
      break;
 8003caa:	e002      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a46      	ldr	r2, [pc, #280]	@ (8003e40 <TIM_Base_SetConfig+0x12c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d32:	d00f      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a43      	ldr	r2, [pc, #268]	@ (8003e44 <TIM_Base_SetConfig+0x130>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00b      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a42      	ldr	r2, [pc, #264]	@ (8003e48 <TIM_Base_SetConfig+0x134>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d007      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a41      	ldr	r2, [pc, #260]	@ (8003e4c <TIM_Base_SetConfig+0x138>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a40      	ldr	r2, [pc, #256]	@ (8003e50 <TIM_Base_SetConfig+0x13c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d108      	bne.n	8003d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a35      	ldr	r2, [pc, #212]	@ (8003e40 <TIM_Base_SetConfig+0x12c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d027      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a32      	ldr	r2, [pc, #200]	@ (8003e44 <TIM_Base_SetConfig+0x130>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d023      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a31      	ldr	r2, [pc, #196]	@ (8003e48 <TIM_Base_SetConfig+0x134>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a30      	ldr	r2, [pc, #192]	@ (8003e4c <TIM_Base_SetConfig+0x138>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2f      	ldr	r2, [pc, #188]	@ (8003e50 <TIM_Base_SetConfig+0x13c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2e      	ldr	r2, [pc, #184]	@ (8003e54 <TIM_Base_SetConfig+0x140>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e58 <TIM_Base_SetConfig+0x144>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e5c <TIM_Base_SetConfig+0x148>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e60 <TIM_Base_SetConfig+0x14c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e64 <TIM_Base_SetConfig+0x150>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a29      	ldr	r2, [pc, #164]	@ (8003e68 <TIM_Base_SetConfig+0x154>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a10      	ldr	r2, [pc, #64]	@ (8003e40 <TIM_Base_SetConfig+0x12c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_Base_SetConfig+0xf8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a12      	ldr	r2, [pc, #72]	@ (8003e50 <TIM_Base_SetConfig+0x13c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d103      	bne.n	8003e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d105      	bne.n	8003e32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f023 0201 	bic.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	611a      	str	r2, [r3, #16]
  }
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40010400 	.word	0x40010400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400
 8003e5c:	40014800 	.word	0x40014800
 8003e60:	40001800 	.word	0x40001800
 8003e64:	40001c00 	.word	0x40001c00
 8003e68:	40002000 	.word	0x40002000

08003e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f023 0201 	bic.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 0302 	bic.w	r3, r3, #2
 8003eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a20      	ldr	r2, [pc, #128]	@ (8003f44 <TIM_OC1_SetConfig+0xd8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_OC1_SetConfig+0x64>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <TIM_OC1_SetConfig+0xdc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d10c      	bne.n	8003eea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 0308 	bic.w	r3, r3, #8
 8003ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <TIM_OC1_SetConfig+0xd8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_OC1_SetConfig+0x8e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	@ (8003f48 <TIM_OC1_SetConfig+0xdc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d111      	bne.n	8003f1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40010400 	.word	0x40010400

08003f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f023 0210 	bic.w	r2, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0320 	bic.w	r3, r3, #32
 8003f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a22      	ldr	r2, [pc, #136]	@ (8004030 <TIM_OC2_SetConfig+0xe4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC2_SetConfig+0x68>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a21      	ldr	r2, [pc, #132]	@ (8004034 <TIM_OC2_SetConfig+0xe8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10d      	bne.n	8003fd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a17      	ldr	r2, [pc, #92]	@ (8004030 <TIM_OC2_SetConfig+0xe4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_OC2_SetConfig+0x94>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a16      	ldr	r2, [pc, #88]	@ (8004034 <TIM_OC2_SetConfig+0xe8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d113      	bne.n	8004008 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fe6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40010000 	.word	0x40010000
 8004034:	40010400 	.word	0x40010400

08004038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a21      	ldr	r2, [pc, #132]	@ (8004118 <TIM_OC3_SetConfig+0xe0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_OC3_SetConfig+0x66>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a20      	ldr	r2, [pc, #128]	@ (800411c <TIM_OC3_SetConfig+0xe4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10d      	bne.n	80040ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a16      	ldr	r2, [pc, #88]	@ (8004118 <TIM_OC3_SetConfig+0xe0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC3_SetConfig+0x92>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a15      	ldr	r2, [pc, #84]	@ (800411c <TIM_OC3_SetConfig+0xe4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d113      	bne.n	80040f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40010000 	.word	0x40010000
 800411c:	40010400 	.word	0x40010400

08004120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800416a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a12      	ldr	r2, [pc, #72]	@ (80041c4 <TIM_OC4_SetConfig+0xa4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_OC4_SetConfig+0x68>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a11      	ldr	r2, [pc, #68]	@ (80041c8 <TIM_OC4_SetConfig+0xa8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d109      	bne.n	800419c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800418e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	019b      	lsls	r3, r3, #6
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40010400 	.word	0x40010400

080041cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e05a      	b.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a21      	ldr	r2, [pc, #132]	@ (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004230:	d01d      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1d      	ldr	r2, [pc, #116]	@ (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a18      	ldr	r2, [pc, #96]	@ (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a15      	ldr	r2, [pc, #84]	@ (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10c      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4313      	orrs	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40000c00 	.word	0x40000c00
 80042b8:	40010400 	.word	0x40010400
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40001800 	.word	0x40001800

080042c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e03d      	b.n	800435c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e042      	b.n	8004428 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd fa7c 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	@ 0x24
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f82b 	bl	8004430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004434:	b0c0      	sub	sp, #256	@ 0x100
 8004436:	af00      	add	r7, sp, #0
 8004438:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	68d9      	ldr	r1, [r3, #12]
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	ea40 0301 	orr.w	r3, r0, r1
 8004458:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	431a      	orrs	r2, r3
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	431a      	orrs	r2, r3
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004488:	f021 010c 	bic.w	r1, r1, #12
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004496:	430b      	orrs	r3, r1
 8004498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044aa:	6999      	ldr	r1, [r3, #24]
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	ea40 0301 	orr.w	r3, r0, r1
 80044b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b8f      	ldr	r3, [pc, #572]	@ (80046fc <UART_SetConfig+0x2cc>)
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d005      	beq.n	80044d0 <UART_SetConfig+0xa0>
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004700 <UART_SetConfig+0x2d0>)
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d104      	bne.n	80044da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d0:	f7ff f85e 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 80044d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044d8:	e003      	b.n	80044e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044da:	f7ff f845 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 80044de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ec:	f040 810c 	bne.w	8004708 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004502:	4622      	mov	r2, r4
 8004504:	462b      	mov	r3, r5
 8004506:	1891      	adds	r1, r2, r2
 8004508:	65b9      	str	r1, [r7, #88]	@ 0x58
 800450a:	415b      	adcs	r3, r3
 800450c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800450e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004512:	4621      	mov	r1, r4
 8004514:	eb12 0801 	adds.w	r8, r2, r1
 8004518:	4629      	mov	r1, r5
 800451a:	eb43 0901 	adc.w	r9, r3, r1
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800452a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800452e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004532:	4690      	mov	r8, r2
 8004534:	4699      	mov	r9, r3
 8004536:	4623      	mov	r3, r4
 8004538:	eb18 0303 	adds.w	r3, r8, r3
 800453c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004540:	462b      	mov	r3, r5
 8004542:	eb49 0303 	adc.w	r3, r9, r3
 8004546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004556:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800455a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800455e:	460b      	mov	r3, r1
 8004560:	18db      	adds	r3, r3, r3
 8004562:	653b      	str	r3, [r7, #80]	@ 0x50
 8004564:	4613      	mov	r3, r2
 8004566:	eb42 0303 	adc.w	r3, r2, r3
 800456a:	657b      	str	r3, [r7, #84]	@ 0x54
 800456c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004570:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004574:	f7fb fe2c 	bl	80001d0 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4b61      	ldr	r3, [pc, #388]	@ (8004704 <UART_SetConfig+0x2d4>)
 800457e:	fba3 2302 	umull	r2, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	011c      	lsls	r4, r3, #4
 8004586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004590:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004594:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004598:	4642      	mov	r2, r8
 800459a:	464b      	mov	r3, r9
 800459c:	1891      	adds	r1, r2, r2
 800459e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045a0:	415b      	adcs	r3, r3
 80045a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045a8:	4641      	mov	r1, r8
 80045aa:	eb12 0a01 	adds.w	sl, r2, r1
 80045ae:	4649      	mov	r1, r9
 80045b0:	eb43 0b01 	adc.w	fp, r3, r1
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045c8:	4692      	mov	sl, r2
 80045ca:	469b      	mov	fp, r3
 80045cc:	4643      	mov	r3, r8
 80045ce:	eb1a 0303 	adds.w	r3, sl, r3
 80045d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045d6:	464b      	mov	r3, r9
 80045d8:	eb4b 0303 	adc.w	r3, fp, r3
 80045dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045f4:	460b      	mov	r3, r1
 80045f6:	18db      	adds	r3, r3, r3
 80045f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80045fa:	4613      	mov	r3, r2
 80045fc:	eb42 0303 	adc.w	r3, r2, r3
 8004600:	647b      	str	r3, [r7, #68]	@ 0x44
 8004602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004606:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800460a:	f7fb fde1 	bl	80001d0 <__aeabi_uldivmod>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4611      	mov	r1, r2
 8004614:	4b3b      	ldr	r3, [pc, #236]	@ (8004704 <UART_SetConfig+0x2d4>)
 8004616:	fba3 2301 	umull	r2, r3, r3, r1
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2264      	movs	r2, #100	@ 0x64
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	1acb      	subs	r3, r1, r3
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800462a:	4b36      	ldr	r3, [pc, #216]	@ (8004704 <UART_SetConfig+0x2d4>)
 800462c:	fba3 2302 	umull	r2, r3, r3, r2
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004638:	441c      	add	r4, r3
 800463a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004644:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004648:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004654:	415b      	adcs	r3, r3
 8004656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800465c:	4641      	mov	r1, r8
 800465e:	1851      	adds	r1, r2, r1
 8004660:	6339      	str	r1, [r7, #48]	@ 0x30
 8004662:	4649      	mov	r1, r9
 8004664:	414b      	adcs	r3, r1
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004674:	4659      	mov	r1, fp
 8004676:	00cb      	lsls	r3, r1, #3
 8004678:	4651      	mov	r1, sl
 800467a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467e:	4651      	mov	r1, sl
 8004680:	00ca      	lsls	r2, r1, #3
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	4603      	mov	r3, r0
 8004688:	4642      	mov	r2, r8
 800468a:	189b      	adds	r3, r3, r2
 800468c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004690:	464b      	mov	r3, r9
 8004692:	460a      	mov	r2, r1
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046b0:	460b      	mov	r3, r1
 80046b2:	18db      	adds	r3, r3, r3
 80046b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b6:	4613      	mov	r3, r2
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046c6:	f7fb fd83 	bl	80001d0 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <UART_SetConfig+0x2d4>)
 80046d0:	fba3 1302 	umull	r1, r3, r3, r2
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	2164      	movs	r1, #100	@ 0x64
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	3332      	adds	r3, #50	@ 0x32
 80046e2:	4a08      	ldr	r2, [pc, #32]	@ (8004704 <UART_SetConfig+0x2d4>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	f003 0207 	and.w	r2, r3, #7
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4422      	add	r2, r4
 80046f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046f8:	e106      	b.n	8004908 <UART_SetConfig+0x4d8>
 80046fa:	bf00      	nop
 80046fc:	40011000 	.word	0x40011000
 8004700:	40011400 	.word	0x40011400
 8004704:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800470c:	2200      	movs	r2, #0
 800470e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004712:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004716:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800471a:	4642      	mov	r2, r8
 800471c:	464b      	mov	r3, r9
 800471e:	1891      	adds	r1, r2, r2
 8004720:	6239      	str	r1, [r7, #32]
 8004722:	415b      	adcs	r3, r3
 8004724:	627b      	str	r3, [r7, #36]	@ 0x24
 8004726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800472a:	4641      	mov	r1, r8
 800472c:	1854      	adds	r4, r2, r1
 800472e:	4649      	mov	r1, r9
 8004730:	eb43 0501 	adc.w	r5, r3, r1
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	00eb      	lsls	r3, r5, #3
 800473e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004742:	00e2      	lsls	r2, r4, #3
 8004744:	4614      	mov	r4, r2
 8004746:	461d      	mov	r5, r3
 8004748:	4643      	mov	r3, r8
 800474a:	18e3      	adds	r3, r4, r3
 800474c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004750:	464b      	mov	r3, r9
 8004752:	eb45 0303 	adc.w	r3, r5, r3
 8004756:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004766:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004776:	4629      	mov	r1, r5
 8004778:	008b      	lsls	r3, r1, #2
 800477a:	4621      	mov	r1, r4
 800477c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004780:	4621      	mov	r1, r4
 8004782:	008a      	lsls	r2, r1, #2
 8004784:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004788:	f7fb fd22 	bl	80001d0 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4b60      	ldr	r3, [pc, #384]	@ (8004914 <UART_SetConfig+0x4e4>)
 8004792:	fba3 2302 	umull	r2, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	011c      	lsls	r4, r3, #4
 800479a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	1891      	adds	r1, r2, r2
 80047b2:	61b9      	str	r1, [r7, #24]
 80047b4:	415b      	adcs	r3, r3
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047bc:	4641      	mov	r1, r8
 80047be:	1851      	adds	r1, r2, r1
 80047c0:	6139      	str	r1, [r7, #16]
 80047c2:	4649      	mov	r1, r9
 80047c4:	414b      	adcs	r3, r1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d4:	4659      	mov	r1, fp
 80047d6:	00cb      	lsls	r3, r1, #3
 80047d8:	4651      	mov	r1, sl
 80047da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047de:	4651      	mov	r1, sl
 80047e0:	00ca      	lsls	r2, r1, #3
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	4603      	mov	r3, r0
 80047e8:	4642      	mov	r2, r8
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047f0:	464b      	mov	r3, r9
 80047f2:	460a      	mov	r2, r1
 80047f4:	eb42 0303 	adc.w	r3, r2, r3
 80047f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004806:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004814:	4649      	mov	r1, r9
 8004816:	008b      	lsls	r3, r1, #2
 8004818:	4641      	mov	r1, r8
 800481a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800481e:	4641      	mov	r1, r8
 8004820:	008a      	lsls	r2, r1, #2
 8004822:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004826:	f7fb fcd3 	bl	80001d0 <__aeabi_uldivmod>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4611      	mov	r1, r2
 8004830:	4b38      	ldr	r3, [pc, #224]	@ (8004914 <UART_SetConfig+0x4e4>)
 8004832:	fba3 2301 	umull	r2, r3, r3, r1
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2264      	movs	r2, #100	@ 0x64
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	1acb      	subs	r3, r1, r3
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	3332      	adds	r3, #50	@ 0x32
 8004844:	4a33      	ldr	r2, [pc, #204]	@ (8004914 <UART_SetConfig+0x4e4>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004850:	441c      	add	r4, r3
 8004852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004856:	2200      	movs	r2, #0
 8004858:	673b      	str	r3, [r7, #112]	@ 0x70
 800485a:	677a      	str	r2, [r7, #116]	@ 0x74
 800485c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	1891      	adds	r1, r2, r2
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	415b      	adcs	r3, r3
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004870:	4641      	mov	r1, r8
 8004872:	1851      	adds	r1, r2, r1
 8004874:	6039      	str	r1, [r7, #0]
 8004876:	4649      	mov	r1, r9
 8004878:	414b      	adcs	r3, r1
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004888:	4659      	mov	r1, fp
 800488a:	00cb      	lsls	r3, r1, #3
 800488c:	4651      	mov	r1, sl
 800488e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004892:	4651      	mov	r1, sl
 8004894:	00ca      	lsls	r2, r1, #3
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	4603      	mov	r3, r0
 800489c:	4642      	mov	r2, r8
 800489e:	189b      	adds	r3, r3, r2
 80048a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048a2:	464b      	mov	r3, r9
 80048a4:	460a      	mov	r2, r1
 80048a6:	eb42 0303 	adc.w	r3, r2, r3
 80048aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80048b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048c4:	4649      	mov	r1, r9
 80048c6:	008b      	lsls	r3, r1, #2
 80048c8:	4641      	mov	r1, r8
 80048ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ce:	4641      	mov	r1, r8
 80048d0:	008a      	lsls	r2, r1, #2
 80048d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048d6:	f7fb fc7b 	bl	80001d0 <__aeabi_uldivmod>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <UART_SetConfig+0x4e4>)
 80048e0:	fba3 1302 	umull	r1, r3, r3, r2
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	2164      	movs	r1, #100	@ 0x64
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	3332      	adds	r3, #50	@ 0x32
 80048f2:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <UART_SetConfig+0x4e4>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4422      	add	r2, r4
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800490e:	46bd      	mov	sp, r7
 8004910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004914:	51eb851f 	.word	0x51eb851f

08004918 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004918:	b084      	sub	sp, #16
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	f107 001c 	add.w	r0, r7, #28
 8004926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800492a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800492e:	2b01      	cmp	r3, #1
 8004930:	d123      	bne.n	800497a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800495a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 faa0 	bl	8004eb4 <USB_CoreReset>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e01b      	b.n	80049b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa94 	bl	8004eb4 <USB_CoreReset>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004990:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80049a4:	e005      	b.n	80049b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049b2:	7fbb      	ldrb	r3, [r7, #30]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10b      	bne.n	80049d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f043 0206 	orr.w	r2, r3, #6
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049dc:	b004      	add	sp, #16
 80049de:	4770      	bx	lr

080049e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 0201 	bic.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d115      	bne.n	8004a50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a30:	200a      	movs	r0, #10
 8004a32:	f7fd f9b7 	bl	8001da4 <HAL_Delay>
      ms += 10U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	330a      	adds	r3, #10
 8004a3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fa2b 	bl	8004e98 <USB_GetMode>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d01e      	beq.n	8004a86 <USB_SetCurrentMode+0x84>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a4c:	d9f0      	bls.n	8004a30 <USB_SetCurrentMode+0x2e>
 8004a4e:	e01a      	b.n	8004a86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d115      	bne.n	8004a82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a62:	200a      	movs	r0, #10
 8004a64:	f7fd f99e 	bl	8001da4 <HAL_Delay>
      ms += 10U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	330a      	adds	r3, #10
 8004a6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa12 	bl	8004e98 <USB_GetMode>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <USB_SetCurrentMode+0x84>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a7e:	d9f0      	bls.n	8004a62 <USB_SetCurrentMode+0x60>
 8004a80:	e001      	b.n	8004a86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e005      	b.n	8004a92 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a8a:	d101      	bne.n	8004a90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	e009      	b.n	8004ad0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3340      	adds	r3, #64	@ 0x40
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3301      	adds	r3, #1
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b0e      	cmp	r3, #14
 8004ad4:	d9f2      	bls.n	8004abc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ad6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11c      	bne.n	8004b18 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b16:	e00b      	b.n	8004b30 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b28:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b36:	461a      	mov	r2, r3
 8004b38:	2300      	movs	r3, #0
 8004b3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10d      	bne.n	8004b60 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f968 	bl	8004e24 <USB_SetDevSpeed>
 8004b54:	e008      	b.n	8004b68 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b56:	2101      	movs	r1, #1
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f963 	bl	8004e24 <USB_SetDevSpeed>
 8004b5e:	e003      	b.n	8004b68 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b60:	2103      	movs	r1, #3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f95e 	bl	8004e24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b68:	2110      	movs	r1, #16
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8fa 	bl	8004d64 <USB_FlushTxFifo>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f924 	bl	8004dc8 <USB_FlushRxFifo>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2300      	movs	r3, #0
 8004bac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	e043      	b.n	8004c3c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bca:	d118      	bne.n	8004bfe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bde:	461a      	mov	r2, r3
 8004be0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e013      	b.n	8004c10 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e008      	b.n	8004c10 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c40:	461a      	mov	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d3b5      	bcc.n	8004bb4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e043      	b.n	8004cd6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c64:	d118      	bne.n	8004c98 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e013      	b.n	8004caa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e008      	b.n	8004caa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cda:	461a      	mov	r2, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d3b5      	bcc.n	8004c4e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f043 0210 	orr.w	r2, r3, #16
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <USB_DevInit+0x2c4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f043 0208 	orr.w	r2, r3, #8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d107      	bne.n	8004d50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d5c:	b004      	add	sp, #16
 8004d5e:	4770      	bx	lr
 8004d60:	803c3800 	.word	0x803c3800

08004d64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3301      	adds	r3, #1
 8004d76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d7e:	d901      	bls.n	8004d84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e01b      	b.n	8004dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	daf2      	bge.n	8004d72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	019b      	lsls	r3, r3, #6
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da8:	d901      	bls.n	8004dae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e006      	b.n	8004dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d0f0      	beq.n	8004d9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004de0:	d901      	bls.n	8004de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e018      	b.n	8004e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	daf2      	bge.n	8004dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2210      	movs	r2, #16
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e04:	d901      	bls.n	8004e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e70:	f023 0303 	bic.w	r3, r3, #3
 8004e74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e84:	f043 0302 	orr.w	r3, r3, #2
 8004e88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ecc:	d901      	bls.n	8004ed2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e01b      	b.n	8004f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	daf2      	bge.n	8004ec0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ef6:	d901      	bls.n	8004efc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e006      	b.n	8004f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d0f0      	beq.n	8004eea <USB_CoreReset+0x36>

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f28:	2b84      	cmp	r3, #132	@ 0x84
 8004f2a:	d005      	beq.n	8004f38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	3303      	adds	r3, #3
 8004f36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f38:	68fb      	ldr	r3, [r7, #12]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f4a:	f000 fafd 	bl	8005548 <vTaskStartScheduler>
  
  return osOK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f56:	b089      	sub	sp, #36	@ 0x24
 8004f58:	af04      	add	r7, sp, #16
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d020      	beq.n	8004fa8 <osThreadCreate+0x54>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685c      	ldr	r4, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691e      	ldr	r6, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ffc8 	bl	8004f16 <makeFreeRtosPriority>
 8004f86:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f90:	9202      	str	r2, [sp, #8]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	9100      	str	r1, [sp, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	4632      	mov	r2, r6
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 f8ed 	bl	800517c <xTaskCreateStatic>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e01c      	b.n	8004fe2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685c      	ldr	r4, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ffaa 	bl	8004f16 <makeFreeRtosPriority>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	f107 030c 	add.w	r3, r7, #12
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	9200      	str	r2, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	4632      	mov	r2, r6
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 f932 	bl	800523c <xTaskCreate>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <osDelay+0x16>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	e000      	b.n	8005004 <osDelay+0x18>
 8005002:	2301      	movs	r3, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fa69 	bl	80054dc <vTaskDelay>
  
  return osOK;
 800500a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f103 0208 	add.w	r2, r3, #8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f103 0208 	add.w	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f103 0208 	add.w	r2, r3, #8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d103      	bne.n	80050d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e00c      	b.n	80050f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3308      	adds	r3, #8
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e002      	b.n	80050e4 <vListInsert+0x2e>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d2f6      	bcs.n	80050de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6852      	ldr	r2, [r2, #4]
 8005148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d103      	bne.n	800515c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08e      	sub	sp, #56	@ 0x38
 8005180:	af04      	add	r7, sp, #16
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800518a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	61fb      	str	r3, [r7, #28]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051c6:	23a0      	movs	r3, #160	@ 0xa0
 80051c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80051ce:	d00b      	beq.n	80051e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61bb      	str	r3, [r7, #24]
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01e      	beq.n	800522e <xTaskCreateStatic+0xb2>
 80051f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01b      	beq.n	800522e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	2202      	movs	r2, #2
 8005204:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005208:	2300      	movs	r3, #0
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f851 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005228:	f000 f8ee 	bl	8005408 <prvAddNewTaskToReadyList>
 800522c:	e001      	b.n	8005232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005232:	697b      	ldr	r3, [r7, #20]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	3728      	adds	r7, #40	@ 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	@ 0x30
 8005240:	af04      	add	r7, sp, #16
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 ff01 	bl	8006058 <pvPortMalloc>
 8005256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800525e:	20a0      	movs	r0, #160	@ 0xa0
 8005260:	f000 fefa 	bl	8006058 <pvPortMalloc>
 8005264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	631a      	str	r2, [r3, #48]	@ 0x30
 8005272:	e005      	b.n	8005280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005274:	6978      	ldr	r0, [r7, #20]
 8005276:	f000 ffbd 	bl	80061f4 <vPortFree>
 800527a:	e001      	b.n	8005280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	2300      	movs	r3, #0
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f80f 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052aa:	69f8      	ldr	r0, [r7, #28]
 80052ac:	f000 f8ac 	bl	8005408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e002      	b.n	80052bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052bc:	69bb      	ldr	r3, [r7, #24]
	}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052e0:	3b01      	subs	r3, #1
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	617b      	str	r3, [r7, #20]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01f      	beq.n	8005358 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e012      	b.n	8005344 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	7819      	ldrb	r1, [r3, #0]
 8005326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	3334      	adds	r3, #52	@ 0x34
 800532e:	460a      	mov	r2, r1
 8005330:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d006      	beq.n	800534c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3301      	adds	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d9e9      	bls.n	800531e <prvInitialiseNewTask+0x56>
 800534a:	e000      	b.n	800534e <prvInitialiseNewTask+0x86>
			{
				break;
 800534c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005356:	e003      	b.n	8005360 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	2b06      	cmp	r3, #6
 8005364:	d901      	bls.n	800536a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005366:	2306      	movs	r3, #6
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800536e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005374:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	2200      	movs	r2, #0
 800537a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	3304      	adds	r3, #4
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fe67 	bl	8005054 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	3318      	adds	r3, #24
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fe62 	bl	8005054 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	f1c3 0207 	rsb	r2, r3, #7
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	334c      	adds	r3, #76	@ 0x4c
 80053ba:	224c      	movs	r2, #76	@ 0x4c
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 f838 	bl	8006434 <memset>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	4a0d      	ldr	r2, [pc, #52]	@ (80053fc <prvInitialiseNewTask+0x134>)
 80053c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005400 <prvInitialiseNewTask+0x138>)
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005404 <prvInitialiseNewTask+0x13c>)
 80053d4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	69b8      	ldr	r0, [r7, #24]
 80053dc:	f000 fc2a 	bl	8005c34 <pxPortInitialiseStack>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f2:	bf00      	nop
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20004aa4 	.word	0x20004aa4
 8005400:	20004b0c 	.word	0x20004b0c
 8005404:	20004b74 	.word	0x20004b74

08005408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005410:	f000 fd42 	bl	8005e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005414:	4b2a      	ldr	r3, [pc, #168]	@ (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 800541c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800541e:	4b29      	ldr	r3, [pc, #164]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005426:	4a27      	ldr	r2, [pc, #156]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800542c:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d110      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005434:	f000 fad4 	bl	80059e0 <prvInitialiseTaskLists>
 8005438:	e00d      	b.n	8005456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800543a:	4b23      	ldr	r3, [pc, #140]	@ (80054c8 <prvAddNewTaskToReadyList+0xc0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005442:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d802      	bhi.n	8005456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005450:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005456:	4b1d      	ldr	r3, [pc, #116]	@ (80054cc <prvAddNewTaskToReadyList+0xc4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <prvAddNewTaskToReadyList+0xc4>)
 800545e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <prvAddNewTaskToReadyList+0xcc>)
 8005480:	441a      	add	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7ff fdf0 	bl	800506e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800548e:	f000 fd35 	bl	8005efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <prvAddNewTaskToReadyList+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800549a:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d207      	bcs.n	80054b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <prvAddNewTaskToReadyList+0xd0>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000e50 	.word	0x20000e50
 80054c4:	20000d50 	.word	0x20000d50
 80054c8:	20000e5c 	.word	0x20000e5c
 80054cc:	20000e6c 	.word	0x20000e6c
 80054d0:	20000e58 	.word	0x20000e58
 80054d4:	20000d54 	.word	0x20000d54
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d018      	beq.n	8005520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054ee:	4b14      	ldr	r3, [pc, #80]	@ (8005540 <vTaskDelay+0x64>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <vTaskDelay+0x32>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60bb      	str	r3, [r7, #8]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800550e:	f000 f885 	bl	800561c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005512:	2100      	movs	r1, #0
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb27 	bl	8005b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800551a:	f000 f88d 	bl	8005638 <xTaskResumeAll>
 800551e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005526:	4b07      	ldr	r3, [pc, #28]	@ (8005544 <vTaskDelay+0x68>)
 8005528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000e78 	.word	0x20000e78
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	@ 0x28
 800554c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005556:	463a      	mov	r2, r7
 8005558:	1d39      	adds	r1, r7, #4
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	4618      	mov	r0, r3
 8005560:	f7fa ffae 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	2300      	movs	r3, #0
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	460a      	mov	r2, r1
 8005576:	4921      	ldr	r1, [pc, #132]	@ (80055fc <vTaskStartScheduler+0xb4>)
 8005578:	4821      	ldr	r0, [pc, #132]	@ (8005600 <vTaskStartScheduler+0xb8>)
 800557a:	f7ff fdff 	bl	800517c <xTaskCreateStatic>
 800557e:	4603      	mov	r3, r0
 8005580:	4a20      	ldr	r2, [pc, #128]	@ (8005604 <vTaskStartScheduler+0xbc>)
 8005582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005584:	4b1f      	ldr	r3, [pc, #124]	@ (8005604 <vTaskStartScheduler+0xbc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e001      	b.n	8005596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d11b      	bne.n	80055d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	613b      	str	r3, [r7, #16]
}
 80055ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055b0:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <vTaskStartScheduler+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	334c      	adds	r3, #76	@ 0x4c
 80055b6:	4a15      	ldr	r2, [pc, #84]	@ (800560c <vTaskStartScheduler+0xc4>)
 80055b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ba:	4b15      	ldr	r3, [pc, #84]	@ (8005610 <vTaskStartScheduler+0xc8>)
 80055bc:	f04f 32ff 	mov.w	r2, #4294967295
 80055c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055c2:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <vTaskStartScheduler+0xcc>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055c8:	4b13      	ldr	r3, [pc, #76]	@ (8005618 <vTaskStartScheduler+0xd0>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ce:	f000 fbbf 	bl	8005d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055d2:	e00f      	b.n	80055f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d10b      	bne.n	80055f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <vTaskStartScheduler+0xa8>
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	08006628 	.word	0x08006628
 8005600:	080059b1 	.word	0x080059b1
 8005604:	20000e74 	.word	0x20000e74
 8005608:	20000d50 	.word	0x20000d50
 800560c:	20000010 	.word	0x20000010
 8005610:	20000e70 	.word	0x20000e70
 8005614:	20000e5c 	.word	0x20000e5c
 8005618:	20000e54 	.word	0x20000e54

0800561c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005620:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <vTaskSuspendAll+0x18>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a03      	ldr	r2, [pc, #12]	@ (8005634 <vTaskSuspendAll+0x18>)
 8005628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000e78 	.word	0x20000e78

08005638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005646:	4b42      	ldr	r3, [pc, #264]	@ (8005750 <xTaskResumeAll+0x118>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10b      	bne.n	8005666 <xTaskResumeAll+0x2e>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	603b      	str	r3, [r7, #0]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005666:	f000 fc17 	bl	8005e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800566a:	4b39      	ldr	r3, [pc, #228]	@ (8005750 <xTaskResumeAll+0x118>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3b01      	subs	r3, #1
 8005670:	4a37      	ldr	r2, [pc, #220]	@ (8005750 <xTaskResumeAll+0x118>)
 8005672:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005674:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <xTaskResumeAll+0x118>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d161      	bne.n	8005740 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800567c:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <xTaskResumeAll+0x11c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d05d      	beq.n	8005740 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005684:	e02e      	b.n	80056e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005686:	4b34      	ldr	r3, [pc, #208]	@ (8005758 <xTaskResumeAll+0x120>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3318      	adds	r3, #24
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fd48 	bl	8005128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3304      	adds	r3, #4
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff fd43 	bl	8005128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	2201      	movs	r2, #1
 80056a8:	409a      	lsls	r2, r3
 80056aa:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <xTaskResumeAll+0x124>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	4a2a      	ldr	r2, [pc, #168]	@ (800575c <xTaskResumeAll+0x124>)
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4a27      	ldr	r2, [pc, #156]	@ (8005760 <xTaskResumeAll+0x128>)
 80056c2:	441a      	add	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f7ff fccf 	bl	800506e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d4:	4b23      	ldr	r3, [pc, #140]	@ (8005764 <xTaskResumeAll+0x12c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056de:	4b22      	ldr	r3, [pc, #136]	@ (8005768 <xTaskResumeAll+0x130>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005758 <xTaskResumeAll+0x120>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1cc      	bne.n	8005686 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056f2:	f000 fa19 	bl	8005b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <xTaskResumeAll+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005702:	f000 f837 	bl	8005774 <xTaskIncrementTick>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800570c:	4b16      	ldr	r3, [pc, #88]	@ (8005768 <xTaskResumeAll+0x130>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3b01      	subs	r3, #1
 8005716:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f1      	bne.n	8005702 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800571e:	4b13      	ldr	r3, [pc, #76]	@ (800576c <xTaskResumeAll+0x134>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005724:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <xTaskResumeAll+0x130>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d009      	beq.n	8005740 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005730:	4b0f      	ldr	r3, [pc, #60]	@ (8005770 <xTaskResumeAll+0x138>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005740:	f000 fbdc 	bl	8005efc <vPortExitCritical>

	return xAlreadyYielded;
 8005744:	68bb      	ldr	r3, [r7, #8]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000e78 	.word	0x20000e78
 8005754:	20000e50 	.word	0x20000e50
 8005758:	20000e10 	.word	0x20000e10
 800575c:	20000e58 	.word	0x20000e58
 8005760:	20000d54 	.word	0x20000d54
 8005764:	20000d50 	.word	0x20000d50
 8005768:	20000e64 	.word	0x20000e64
 800576c:	20000e60 	.word	0x20000e60
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577e:	4b4f      	ldr	r3, [pc, #316]	@ (80058bc <xTaskIncrementTick+0x148>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 808f 	bne.w	80058a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005788:	4b4d      	ldr	r3, [pc, #308]	@ (80058c0 <xTaskIncrementTick+0x14c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005790:	4a4b      	ldr	r2, [pc, #300]	@ (80058c0 <xTaskIncrementTick+0x14c>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d121      	bne.n	80057e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800579c:	4b49      	ldr	r3, [pc, #292]	@ (80058c4 <xTaskIncrementTick+0x150>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <xTaskIncrementTick+0x4a>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	603b      	str	r3, [r7, #0]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <xTaskIncrementTick+0x46>
 80057be:	4b41      	ldr	r3, [pc, #260]	@ (80058c4 <xTaskIncrementTick+0x150>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	4b40      	ldr	r3, [pc, #256]	@ (80058c8 <xTaskIncrementTick+0x154>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a3e      	ldr	r2, [pc, #248]	@ (80058c4 <xTaskIncrementTick+0x150>)
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4a3e      	ldr	r2, [pc, #248]	@ (80058c8 <xTaskIncrementTick+0x154>)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b3e      	ldr	r3, [pc, #248]	@ (80058cc <xTaskIncrementTick+0x158>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a3c      	ldr	r2, [pc, #240]	@ (80058cc <xTaskIncrementTick+0x158>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	f000 f9a4 	bl	8005b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057e0:	4b3b      	ldr	r3, [pc, #236]	@ (80058d0 <xTaskIncrementTick+0x15c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d348      	bcc.n	800587c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ea:	4b36      	ldr	r3, [pc, #216]	@ (80058c4 <xTaskIncrementTick+0x150>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f4:	4b36      	ldr	r3, [pc, #216]	@ (80058d0 <xTaskIncrementTick+0x15c>)
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295
 80057fa:	601a      	str	r2, [r3, #0]
					break;
 80057fc:	e03e      	b.n	800587c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057fe:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <xTaskIncrementTick+0x150>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d203      	bcs.n	800581e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005816:	4a2e      	ldr	r2, [pc, #184]	@ (80058d0 <xTaskIncrementTick+0x15c>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800581c:	e02e      	b.n	800587c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3304      	adds	r3, #4
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fc80 	bl	8005128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	3318      	adds	r3, #24
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fc77 	bl	8005128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583e:	2201      	movs	r2, #1
 8005840:	409a      	lsls	r2, r3
 8005842:	4b24      	ldr	r3, [pc, #144]	@ (80058d4 <xTaskIncrementTick+0x160>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4313      	orrs	r3, r2
 8005848:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <xTaskIncrementTick+0x160>)
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4a1f      	ldr	r2, [pc, #124]	@ (80058d8 <xTaskIncrementTick+0x164>)
 800585a:	441a      	add	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7ff fc03 	bl	800506e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586c:	4b1b      	ldr	r3, [pc, #108]	@ (80058dc <xTaskIncrementTick+0x168>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	429a      	cmp	r2, r3
 8005874:	d3b9      	bcc.n	80057ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587a:	e7b6      	b.n	80057ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800587c:	4b17      	ldr	r3, [pc, #92]	@ (80058dc <xTaskIncrementTick+0x168>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005882:	4915      	ldr	r1, [pc, #84]	@ (80058d8 <xTaskIncrementTick+0x164>)
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d901      	bls.n	8005898 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005898:	4b11      	ldr	r3, [pc, #68]	@ (80058e0 <xTaskIncrementTick+0x16c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e004      	b.n	80058b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058a6:	4b0f      	ldr	r3, [pc, #60]	@ (80058e4 <xTaskIncrementTick+0x170>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	4a0d      	ldr	r2, [pc, #52]	@ (80058e4 <xTaskIncrementTick+0x170>)
 80058ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000e78 	.word	0x20000e78
 80058c0:	20000e54 	.word	0x20000e54
 80058c4:	20000e08 	.word	0x20000e08
 80058c8:	20000e0c 	.word	0x20000e0c
 80058cc:	20000e68 	.word	0x20000e68
 80058d0:	20000e70 	.word	0x20000e70
 80058d4:	20000e58 	.word	0x20000e58
 80058d8:	20000d54 	.word	0x20000d54
 80058dc:	20000d50 	.word	0x20000d50
 80058e0:	20000e64 	.word	0x20000e64
 80058e4:	20000e60 	.word	0x20000e60

080058e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005998 <vTaskSwitchContext+0xb0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058f6:	4b29      	ldr	r3, [pc, #164]	@ (800599c <vTaskSwitchContext+0xb4>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058fc:	e045      	b.n	800598a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80058fe:	4b27      	ldr	r3, [pc, #156]	@ (800599c <vTaskSwitchContext+0xb4>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005904:	4b26      	ldr	r3, [pc, #152]	@ (80059a0 <vTaskSwitchContext+0xb8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005912:	7afb      	ldrb	r3, [r7, #11]
 8005914:	f1c3 031f 	rsb	r3, r3, #31
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	4922      	ldr	r1, [pc, #136]	@ (80059a4 <vTaskSwitchContext+0xbc>)
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <vTaskSwitchContext+0x5e>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <vTaskSwitchContext+0x5a>
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4a14      	ldr	r2, [pc, #80]	@ (80059a4 <vTaskSwitchContext+0xbc>)
 8005952:	4413      	add	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	3308      	adds	r3, #8
 8005968:	429a      	cmp	r2, r3
 800596a:	d104      	bne.n	8005976 <vTaskSwitchContext+0x8e>
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <vTaskSwitchContext+0xc0>)
 800597e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005980:	4b09      	ldr	r3, [pc, #36]	@ (80059a8 <vTaskSwitchContext+0xc0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	334c      	adds	r3, #76	@ 0x4c
 8005986:	4a09      	ldr	r2, [pc, #36]	@ (80059ac <vTaskSwitchContext+0xc4>)
 8005988:	6013      	str	r3, [r2, #0]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000e78 	.word	0x20000e78
 800599c:	20000e64 	.word	0x20000e64
 80059a0:	20000e58 	.word	0x20000e58
 80059a4:	20000d54 	.word	0x20000d54
 80059a8:	20000d50 	.word	0x20000d50
 80059ac:	20000010 	.word	0x20000010

080059b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059b8:	f000 f852 	bl	8005a60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <prvIdleTask+0x28>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d9f9      	bls.n	80059b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <prvIdleTask+0x2c>)
 80059c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059d4:	e7f0      	b.n	80059b8 <prvIdleTask+0x8>
 80059d6:	bf00      	nop
 80059d8:	20000d54 	.word	0x20000d54
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	e00c      	b.n	8005a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <prvInitialiseTaskLists+0x60>)
 80059f8:	4413      	add	r3, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fb0a 	bl	8005014 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3301      	adds	r3, #1
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b06      	cmp	r3, #6
 8005a0a:	d9ef      	bls.n	80059ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a0c:	480d      	ldr	r0, [pc, #52]	@ (8005a44 <prvInitialiseTaskLists+0x64>)
 8005a0e:	f7ff fb01 	bl	8005014 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a12:	480d      	ldr	r0, [pc, #52]	@ (8005a48 <prvInitialiseTaskLists+0x68>)
 8005a14:	f7ff fafe 	bl	8005014 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a18:	480c      	ldr	r0, [pc, #48]	@ (8005a4c <prvInitialiseTaskLists+0x6c>)
 8005a1a:	f7ff fafb 	bl	8005014 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a1e:	480c      	ldr	r0, [pc, #48]	@ (8005a50 <prvInitialiseTaskLists+0x70>)
 8005a20:	f7ff faf8 	bl	8005014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a24:	480b      	ldr	r0, [pc, #44]	@ (8005a54 <prvInitialiseTaskLists+0x74>)
 8005a26:	f7ff faf5 	bl	8005014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <prvInitialiseTaskLists+0x78>)
 8005a2c:	4a05      	ldr	r2, [pc, #20]	@ (8005a44 <prvInitialiseTaskLists+0x64>)
 8005a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <prvInitialiseTaskLists+0x7c>)
 8005a32:	4a05      	ldr	r2, [pc, #20]	@ (8005a48 <prvInitialiseTaskLists+0x68>)
 8005a34:	601a      	str	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000d54 	.word	0x20000d54
 8005a44:	20000de0 	.word	0x20000de0
 8005a48:	20000df4 	.word	0x20000df4
 8005a4c:	20000e10 	.word	0x20000e10
 8005a50:	20000e24 	.word	0x20000e24
 8005a54:	20000e3c 	.word	0x20000e3c
 8005a58:	20000e08 	.word	0x20000e08
 8005a5c:	20000e0c 	.word	0x20000e0c

08005a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a66:	e019      	b.n	8005a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a68:	f000 fa16 	bl	8005e98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a6c:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <prvCheckTasksWaitingTermination+0x50>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fb55 	bl	8005128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <prvCheckTasksWaitingTermination+0x54>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	4a0b      	ldr	r2, [pc, #44]	@ (8005ab4 <prvCheckTasksWaitingTermination+0x54>)
 8005a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a88:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <prvCheckTasksWaitingTermination+0x58>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <prvCheckTasksWaitingTermination+0x58>)
 8005a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a92:	f000 fa33 	bl	8005efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f810 	bl	8005abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <prvCheckTasksWaitingTermination+0x58>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e1      	bne.n	8005a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000e24 	.word	0x20000e24
 8005ab4:	20000e50 	.word	0x20000e50
 8005ab8:	20000e38 	.word	0x20000e38

08005abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	334c      	adds	r3, #76	@ 0x4c
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fcbb 	bl	8006444 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d108      	bne.n	8005aea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fb89 	bl	80061f4 <vPortFree>
				vPortFree( pxTCB );
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fb86 	bl	80061f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ae8:	e019      	b.n	8005b1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d103      	bne.n	8005afc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb7d 	bl	80061f4 <vPortFree>
	}
 8005afa:	e010      	b.n	8005b1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d00b      	beq.n	8005b1e <prvDeleteTCB+0x62>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60fb      	str	r3, [r7, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <prvDeleteTCB+0x5e>
	}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <prvResetNextTaskUnblockTime+0x38>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b38:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <prvResetNextTaskUnblockTime+0x3c>)
 8005b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b40:	e008      	b.n	8005b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b42:	4b07      	ldr	r3, [pc, #28]	@ (8005b60 <prvResetNextTaskUnblockTime+0x38>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a04      	ldr	r2, [pc, #16]	@ (8005b64 <prvResetNextTaskUnblockTime+0x3c>)
 8005b52:	6013      	str	r3, [r2, #0]
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	20000e08 	.word	0x20000e08
 8005b64:	20000e70 	.word	0x20000e70

08005b68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b72:	4b29      	ldr	r3, [pc, #164]	@ (8005c18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b78:	4b28      	ldr	r3, [pc, #160]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fad2 	bl	8005128 <uxListRemove>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b8a:	4b24      	ldr	r3, [pc, #144]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	2201      	movs	r2, #1
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43da      	mvns	r2, r3
 8005b98:	4b21      	ldr	r3, [pc, #132]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	4a20      	ldr	r2, [pc, #128]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ba0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d10a      	bne.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x58>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	481a      	ldr	r0, [pc, #104]	@ (8005c24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bba:	f7ff fa58 	bl	800506e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bbe:	e026      	b.n	8005c0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bc8:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d209      	bcs.n	8005bec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd8:	4b13      	ldr	r3, [pc, #76]	@ (8005c28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f7ff fa66 	bl	80050b6 <vListInsert>
}
 8005bea:	e010      	b.n	8005c0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bec:	4b0f      	ldr	r3, [pc, #60]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7ff fa5c 	bl	80050b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d202      	bcs.n	8005c0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c08:	4a09      	ldr	r2, [pc, #36]	@ (8005c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6013      	str	r3, [r2, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000e54 	.word	0x20000e54
 8005c1c:	20000d50 	.word	0x20000d50
 8005c20:	20000e58 	.word	0x20000e58
 8005c24:	20000e3c 	.word	0x20000e3c
 8005c28:	20000e0c 	.word	0x20000e0c
 8005c2c:	20000e08 	.word	0x20000e08
 8005c30:	20000e70 	.word	0x20000e70

08005c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3b04      	subs	r3, #4
 8005c44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0201 	bic.w	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3b04      	subs	r3, #4
 8005c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c64:	4a0c      	ldr	r2, [pc, #48]	@ (8005c98 <pxPortInitialiseStack+0x64>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3b14      	subs	r3, #20
 8005c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3b04      	subs	r3, #4
 8005c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f06f 0202 	mvn.w	r2, #2
 8005c82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b20      	subs	r3, #32
 8005c88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	08005c9d 	.word	0x08005c9d

08005c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ca6:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <prvTaskExitError+0x58>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d00b      	beq.n	8005cc8 <prvTaskExitError+0x2c>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <prvTaskExitError+0x28>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60bb      	str	r3, [r7, #8]
}
 8005cda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cdc:	bf00      	nop
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0fc      	beq.n	8005cde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	2000000c 	.word	0x2000000c
	...

08005d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d00:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <pxCurrentTCBConst2>)
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	f380 8809 	msr	PSP, r0
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8811 	msr	BASEPRI, r0
 8005d1a:	4770      	bx	lr
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst2>:
 8005d20:	20000d50 	.word	0x20000d50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d28:	4808      	ldr	r0, [pc, #32]	@ (8005d4c <prvPortStartFirstTask+0x24>)
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f380 8808 	msr	MSP, r0
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8814 	msr	CONTROL, r0
 8005d3a:	b662      	cpsie	i
 8005d3c:	b661      	cpsie	f
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	df00      	svc	0
 8005d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d4a:	bf00      	nop
 8005d4c:	e000ed08 	.word	0xe000ed08

08005d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d56:	4b47      	ldr	r3, [pc, #284]	@ (8005e74 <xPortStartScheduler+0x124>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a47      	ldr	r2, [pc, #284]	@ (8005e78 <xPortStartScheduler+0x128>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10b      	bne.n	8005d78 <xPortStartScheduler+0x28>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d78:	4b3e      	ldr	r3, [pc, #248]	@ (8005e74 <xPortStartScheduler+0x124>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e7c <xPortStartScheduler+0x12c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10b      	bne.n	8005d9a <xPortStartScheduler+0x4a>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60fb      	str	r3, [r7, #12]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d9a:	4b39      	ldr	r3, [pc, #228]	@ (8005e80 <xPortStartScheduler+0x130>)
 8005d9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	22ff      	movs	r2, #255	@ 0xff
 8005daa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <xPortStartScheduler+0x134>)
 8005dc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dc2:	4b31      	ldr	r3, [pc, #196]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dc8:	e009      	b.n	8005dde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005dca:	4b2f      	ldr	r3, [pc, #188]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de6:	2b80      	cmp	r3, #128	@ 0x80
 8005de8:	d0ef      	beq.n	8005dca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dea:	4b27      	ldr	r3, [pc, #156]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1c3 0307 	rsb	r3, r3, #7
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d00b      	beq.n	8005e0e <xPortStartScheduler+0xbe>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	60bb      	str	r3, [r7, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	e7fd      	b.n	8005e0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	4a1c      	ldr	r2, [pc, #112]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e18:	4b1b      	ldr	r3, [pc, #108]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e20:	4a19      	ldr	r2, [pc, #100]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e2c:	4b17      	ldr	r3, [pc, #92]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e38:	4b14      	ldr	r3, [pc, #80]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e44:	f000 f8da 	bl	8005ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e48:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <xPortStartScheduler+0x140>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e4e:	f000 f8f9 	bl	8006044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <xPortStartScheduler+0x144>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a0f      	ldr	r2, [pc, #60]	@ (8005e94 <xPortStartScheduler+0x144>)
 8005e58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e5e:	f7ff ff63 	bl	8005d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e62:	f7ff fd41 	bl	80058e8 <vTaskSwitchContext>
	prvTaskExitError();
 8005e66:	f7ff ff19 	bl	8005c9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	e000ed00 	.word	0xe000ed00
 8005e78:	410fc271 	.word	0x410fc271
 8005e7c:	410fc270 	.word	0x410fc270
 8005e80:	e000e400 	.word	0xe000e400
 8005e84:	20000e7c 	.word	0x20000e7c
 8005e88:	20000e80 	.word	0x20000e80
 8005e8c:	e000ed20 	.word	0xe000ed20
 8005e90:	2000000c 	.word	0x2000000c
 8005e94:	e000ef34 	.word	0xe000ef34

08005e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005eb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <vPortEnterCritical+0x5c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ef4 <vPortEnterCritical+0x5c>)
 8005eba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <vPortEnterCritical+0x5c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d110      	bne.n	8005ee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <vPortEnterCritical+0x60>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	603b      	str	r3, [r7, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <vPortEnterCritical+0x4a>
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	2000000c 	.word	0x2000000c
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f02:	4b12      	ldr	r3, [pc, #72]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <vPortExitCritical+0x26>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	607b      	str	r3, [r7, #4]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f22:	4b0a      	ldr	r3, [pc, #40]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	4a08      	ldr	r2, [pc, #32]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <vPortExitCritical+0x44>
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	2000000c 	.word	0x2000000c

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <pxCurrentTCBConst>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f01e 0f10 	tst.w	lr, #16
 8005f60:	bf08      	it	eq
 8005f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f74:	f380 8811 	msr	BASEPRI, r0
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f7ff fcb2 	bl	80058e8 <vTaskSwitchContext>
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f380 8811 	msr	BASEPRI, r0
 8005f8c:	bc09      	pop	{r0, r3}
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	6808      	ldr	r0, [r1, #0]
 8005f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f96:	f01e 0f10 	tst.w	lr, #16
 8005f9a:	bf08      	it	eq
 8005f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fa0:	f380 8809 	msr	PSP, r0
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst>:
 8005fb0:	20000d50 	.word	0x20000d50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fd2:	f7ff fbcf 	bl	8005774 <xTaskIncrementTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <SysTick_Handler+0x40>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f383 8811 	msr	BASEPRI, r3
}
 8005fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006000:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <vPortSetupTimerInterrupt+0x38>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800600c:	4b0a      	ldr	r3, [pc, #40]	@ (8006038 <vPortSetupTimerInterrupt+0x3c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0a      	ldr	r2, [pc, #40]	@ (800603c <vPortSetupTimerInterrupt+0x40>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	4a09      	ldr	r2, [pc, #36]	@ (8006040 <vPortSetupTimerInterrupt+0x44>)
 800601a:	3b01      	subs	r3, #1
 800601c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800601e:	4b04      	ldr	r3, [pc, #16]	@ (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	e000e010 	.word	0xe000e010
 8006034:	e000e018 	.word	0xe000e018
 8006038:	20000000 	.word	0x20000000
 800603c:	10624dd3 	.word	0x10624dd3
 8006040:	e000e014 	.word	0xe000e014

08006044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006054 <vPortEnableVFP+0x10>
 8006048:	6801      	ldr	r1, [r0, #0]
 800604a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800604e:	6001      	str	r1, [r0, #0]
 8006050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006052:	bf00      	nop
 8006054:	e000ed88 	.word	0xe000ed88

08006058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	@ 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006064:	f7ff fada 	bl	800561c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006068:	4b5c      	ldr	r3, [pc, #368]	@ (80061dc <pvPortMalloc+0x184>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006070:	f000 f924 	bl	80062bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006074:	4b5a      	ldr	r3, [pc, #360]	@ (80061e0 <pvPortMalloc+0x188>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 8095 	bne.w	80061ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01e      	beq.n	80060c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006088:	2208      	movs	r2, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d015      	beq.n	80060c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	3308      	adds	r3, #8
 80060a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <pvPortMalloc+0x6e>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	617b      	str	r3, [r7, #20]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d06f      	beq.n	80061ac <pvPortMalloc+0x154>
 80060cc:	4b45      	ldr	r3, [pc, #276]	@ (80061e4 <pvPortMalloc+0x18c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d86a      	bhi.n	80061ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060d6:	4b44      	ldr	r3, [pc, #272]	@ (80061e8 <pvPortMalloc+0x190>)
 80060d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060da:	4b43      	ldr	r3, [pc, #268]	@ (80061e8 <pvPortMalloc+0x190>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060e0:	e004      	b.n	80060ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d903      	bls.n	80060fe <pvPortMalloc+0xa6>
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f1      	bne.n	80060e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060fe:	4b37      	ldr	r3, [pc, #220]	@ (80061dc <pvPortMalloc+0x184>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	429a      	cmp	r2, r3
 8006106:	d051      	beq.n	80061ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2208      	movs	r2, #8
 800610e:	4413      	add	r3, r2
 8006110:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	2308      	movs	r3, #8
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	429a      	cmp	r2, r3
 8006128:	d920      	bls.n	800616c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800612a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4413      	add	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <pvPortMalloc+0xfc>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	613b      	str	r3, [r7, #16]
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	e7fd      	b.n	8006150 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006166:	69b8      	ldr	r0, [r7, #24]
 8006168:	f000 f90a 	bl	8006380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800616c:	4b1d      	ldr	r3, [pc, #116]	@ (80061e4 <pvPortMalloc+0x18c>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <pvPortMalloc+0x18c>)
 8006178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800617a:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <pvPortMalloc+0x18c>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b1b      	ldr	r3, [pc, #108]	@ (80061ec <pvPortMalloc+0x194>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d203      	bcs.n	800618e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006186:	4b17      	ldr	r3, [pc, #92]	@ (80061e4 <pvPortMalloc+0x18c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <pvPortMalloc+0x194>)
 800618c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	4b13      	ldr	r3, [pc, #76]	@ (80061e0 <pvPortMalloc+0x188>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	431a      	orrs	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061a2:	4b13      	ldr	r3, [pc, #76]	@ (80061f0 <pvPortMalloc+0x198>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a11      	ldr	r2, [pc, #68]	@ (80061f0 <pvPortMalloc+0x198>)
 80061aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061ac:	f7ff fa44 	bl	8005638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <pvPortMalloc+0x17a>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <pvPortMalloc+0x176>
	return pvReturn;
 80061d2:	69fb      	ldr	r3, [r7, #28]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3728      	adds	r7, #40	@ 0x28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20004a8c 	.word	0x20004a8c
 80061e0:	20004aa0 	.word	0x20004aa0
 80061e4:	20004a90 	.word	0x20004a90
 80061e8:	20004a84 	.word	0x20004a84
 80061ec:	20004a94 	.word	0x20004a94
 80061f0:	20004a98 	.word	0x20004a98

080061f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d04f      	beq.n	80062a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006206:	2308      	movs	r3, #8
 8006208:	425b      	negs	r3, r3
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	4b25      	ldr	r3, [pc, #148]	@ (80062b0 <vPortFree+0xbc>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <vPortFree+0x46>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60fb      	str	r3, [r7, #12]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <vPortFree+0x66>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	60bb      	str	r3, [r7, #8]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	4b14      	ldr	r3, [pc, #80]	@ (80062b0 <vPortFree+0xbc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01e      	beq.n	80062a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11a      	bne.n	80062a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4b0e      	ldr	r3, [pc, #56]	@ (80062b0 <vPortFree+0xbc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	43db      	mvns	r3, r3
 800627a:	401a      	ands	r2, r3
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006280:	f7ff f9cc 	bl	800561c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <vPortFree+0xc0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4413      	add	r3, r2
 800628e:	4a09      	ldr	r2, [pc, #36]	@ (80062b4 <vPortFree+0xc0>)
 8006290:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006292:	6938      	ldr	r0, [r7, #16]
 8006294:	f000 f874 	bl	8006380 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006298:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <vPortFree+0xc4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	4a06      	ldr	r2, [pc, #24]	@ (80062b8 <vPortFree+0xc4>)
 80062a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062a2:	f7ff f9c9 	bl	8005638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062a6:	bf00      	nop
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20004aa0 	.word	0x20004aa0
 80062b4:	20004a90 	.word	0x20004a90
 80062b8:	20004a9c 	.word	0x20004a9c

080062bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80062c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062c8:	4b27      	ldr	r3, [pc, #156]	@ (8006368 <prvHeapInit+0xac>)
 80062ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3307      	adds	r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006368 <prvHeapInit+0xac>)
 80062ec:	4413      	add	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062f4:	4a1d      	ldr	r2, [pc, #116]	@ (800636c <prvHeapInit+0xb0>)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062fa:	4b1c      	ldr	r3, [pc, #112]	@ (800636c <prvHeapInit+0xb0>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4413      	add	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006308:	2208      	movs	r2, #8
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <prvHeapInit+0xb4>)
 800631c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800631e:	4b14      	ldr	r3, [pc, #80]	@ (8006370 <prvHeapInit+0xb4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006326:	4b12      	ldr	r3, [pc, #72]	@ (8006370 <prvHeapInit+0xb4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	1ad2      	subs	r2, r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800633c:	4b0c      	ldr	r3, [pc, #48]	@ (8006370 <prvHeapInit+0xb4>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <prvHeapInit+0xb8>)
 800634a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a09      	ldr	r2, [pc, #36]	@ (8006378 <prvHeapInit+0xbc>)
 8006352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006354:	4b09      	ldr	r3, [pc, #36]	@ (800637c <prvHeapInit+0xc0>)
 8006356:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800635a:	601a      	str	r2, [r3, #0]
}
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000e84 	.word	0x20000e84
 800636c:	20004a84 	.word	0x20004a84
 8006370:	20004a8c 	.word	0x20004a8c
 8006374:	20004a94 	.word	0x20004a94
 8006378:	20004a90 	.word	0x20004a90
 800637c:	20004aa0 	.word	0x20004aa0

08006380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006388:	4b28      	ldr	r3, [pc, #160]	@ (800642c <prvInsertBlockIntoFreeList+0xac>)
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e002      	b.n	8006394 <prvInsertBlockIntoFreeList+0x14>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d8f7      	bhi.n	800638e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d108      	bne.n	80063c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	441a      	add	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	441a      	add	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d118      	bne.n	8006408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <prvInsertBlockIntoFreeList+0xb0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d00d      	beq.n	80063fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	e008      	b.n	8006410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <prvInsertBlockIntoFreeList+0xb0>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e003      	b.n	8006410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d002      	beq.n	800641e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20004a84 	.word	0x20004a84
 8006430:	20004a8c 	.word	0x20004a8c

08006434 <memset>:
 8006434:	4402      	add	r2, r0
 8006436:	4603      	mov	r3, r0
 8006438:	4293      	cmp	r3, r2
 800643a:	d100      	bne.n	800643e <memset+0xa>
 800643c:	4770      	bx	lr
 800643e:	f803 1b01 	strb.w	r1, [r3], #1
 8006442:	e7f9      	b.n	8006438 <memset+0x4>

08006444 <_reclaim_reent>:
 8006444:	4b29      	ldr	r3, [pc, #164]	@ (80064ec <_reclaim_reent+0xa8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4283      	cmp	r3, r0
 800644a:	b570      	push	{r4, r5, r6, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	d04b      	beq.n	80064e8 <_reclaim_reent+0xa4>
 8006450:	69c3      	ldr	r3, [r0, #28]
 8006452:	b1ab      	cbz	r3, 8006480 <_reclaim_reent+0x3c>
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	b16b      	cbz	r3, 8006474 <_reclaim_reent+0x30>
 8006458:	2500      	movs	r5, #0
 800645a:	69e3      	ldr	r3, [r4, #28]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	5959      	ldr	r1, [r3, r5]
 8006460:	2900      	cmp	r1, #0
 8006462:	d13b      	bne.n	80064dc <_reclaim_reent+0x98>
 8006464:	3504      	adds	r5, #4
 8006466:	2d80      	cmp	r5, #128	@ 0x80
 8006468:	d1f7      	bne.n	800645a <_reclaim_reent+0x16>
 800646a:	69e3      	ldr	r3, [r4, #28]
 800646c:	4620      	mov	r0, r4
 800646e:	68d9      	ldr	r1, [r3, #12]
 8006470:	f000 f864 	bl	800653c <_free_r>
 8006474:	69e3      	ldr	r3, [r4, #28]
 8006476:	6819      	ldr	r1, [r3, #0]
 8006478:	b111      	cbz	r1, 8006480 <_reclaim_reent+0x3c>
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f85e 	bl	800653c <_free_r>
 8006480:	6961      	ldr	r1, [r4, #20]
 8006482:	b111      	cbz	r1, 800648a <_reclaim_reent+0x46>
 8006484:	4620      	mov	r0, r4
 8006486:	f000 f859 	bl	800653c <_free_r>
 800648a:	69e1      	ldr	r1, [r4, #28]
 800648c:	b111      	cbz	r1, 8006494 <_reclaim_reent+0x50>
 800648e:	4620      	mov	r0, r4
 8006490:	f000 f854 	bl	800653c <_free_r>
 8006494:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006496:	b111      	cbz	r1, 800649e <_reclaim_reent+0x5a>
 8006498:	4620      	mov	r0, r4
 800649a:	f000 f84f 	bl	800653c <_free_r>
 800649e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064a0:	b111      	cbz	r1, 80064a8 <_reclaim_reent+0x64>
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 f84a 	bl	800653c <_free_r>
 80064a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80064aa:	b111      	cbz	r1, 80064b2 <_reclaim_reent+0x6e>
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 f845 	bl	800653c <_free_r>
 80064b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80064b4:	b111      	cbz	r1, 80064bc <_reclaim_reent+0x78>
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f840 	bl	800653c <_free_r>
 80064bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80064be:	b111      	cbz	r1, 80064c6 <_reclaim_reent+0x82>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 f83b 	bl	800653c <_free_r>
 80064c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80064c8:	b111      	cbz	r1, 80064d0 <_reclaim_reent+0x8c>
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 f836 	bl	800653c <_free_r>
 80064d0:	6a23      	ldr	r3, [r4, #32]
 80064d2:	b14b      	cbz	r3, 80064e8 <_reclaim_reent+0xa4>
 80064d4:	4620      	mov	r0, r4
 80064d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064da:	4718      	bx	r3
 80064dc:	680e      	ldr	r6, [r1, #0]
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 f82c 	bl	800653c <_free_r>
 80064e4:	4631      	mov	r1, r6
 80064e6:	e7bb      	b.n	8006460 <_reclaim_reent+0x1c>
 80064e8:	bd70      	pop	{r4, r5, r6, pc}
 80064ea:	bf00      	nop
 80064ec:	20000010 	.word	0x20000010

080064f0 <__libc_init_array>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006528 <__libc_init_array+0x38>)
 80064f4:	4c0d      	ldr	r4, [pc, #52]	@ (800652c <__libc_init_array+0x3c>)
 80064f6:	1b64      	subs	r4, r4, r5
 80064f8:	10a4      	asrs	r4, r4, #2
 80064fa:	2600      	movs	r6, #0
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	d109      	bne.n	8006514 <__libc_init_array+0x24>
 8006500:	4d0b      	ldr	r5, [pc, #44]	@ (8006530 <__libc_init_array+0x40>)
 8006502:	4c0c      	ldr	r4, [pc, #48]	@ (8006534 <__libc_init_array+0x44>)
 8006504:	f000 f870 	bl	80065e8 <_init>
 8006508:	1b64      	subs	r4, r4, r5
 800650a:	10a4      	asrs	r4, r4, #2
 800650c:	2600      	movs	r6, #0
 800650e:	42a6      	cmp	r6, r4
 8006510:	d105      	bne.n	800651e <__libc_init_array+0x2e>
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	f855 3b04 	ldr.w	r3, [r5], #4
 8006518:	4798      	blx	r3
 800651a:	3601      	adds	r6, #1
 800651c:	e7ee      	b.n	80064fc <__libc_init_array+0xc>
 800651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006522:	4798      	blx	r3
 8006524:	3601      	adds	r6, #1
 8006526:	e7f2      	b.n	800650e <__libc_init_array+0x1e>
 8006528:	08006650 	.word	0x08006650
 800652c:	08006650 	.word	0x08006650
 8006530:	08006650 	.word	0x08006650
 8006534:	08006654 	.word	0x08006654

08006538 <__retarget_lock_acquire_recursive>:
 8006538:	4770      	bx	lr

0800653a <__retarget_lock_release_recursive>:
 800653a:	4770      	bx	lr

0800653c <_free_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4605      	mov	r5, r0
 8006540:	2900      	cmp	r1, #0
 8006542:	d041      	beq.n	80065c8 <_free_r+0x8c>
 8006544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006548:	1f0c      	subs	r4, r1, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	bfb8      	it	lt
 800654e:	18e4      	addlt	r4, r4, r3
 8006550:	f000 f83e 	bl	80065d0 <__malloc_lock>
 8006554:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <_free_r+0x90>)
 8006556:	6813      	ldr	r3, [r2, #0]
 8006558:	b933      	cbnz	r3, 8006568 <_free_r+0x2c>
 800655a:	6063      	str	r3, [r4, #4]
 800655c:	6014      	str	r4, [r2, #0]
 800655e:	4628      	mov	r0, r5
 8006560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006564:	f000 b83a 	b.w	80065dc <__malloc_unlock>
 8006568:	42a3      	cmp	r3, r4
 800656a:	d908      	bls.n	800657e <_free_r+0x42>
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	1821      	adds	r1, r4, r0
 8006570:	428b      	cmp	r3, r1
 8006572:	bf01      	itttt	eq
 8006574:	6819      	ldreq	r1, [r3, #0]
 8006576:	685b      	ldreq	r3, [r3, #4]
 8006578:	1809      	addeq	r1, r1, r0
 800657a:	6021      	streq	r1, [r4, #0]
 800657c:	e7ed      	b.n	800655a <_free_r+0x1e>
 800657e:	461a      	mov	r2, r3
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	b10b      	cbz	r3, 8006588 <_free_r+0x4c>
 8006584:	42a3      	cmp	r3, r4
 8006586:	d9fa      	bls.n	800657e <_free_r+0x42>
 8006588:	6811      	ldr	r1, [r2, #0]
 800658a:	1850      	adds	r0, r2, r1
 800658c:	42a0      	cmp	r0, r4
 800658e:	d10b      	bne.n	80065a8 <_free_r+0x6c>
 8006590:	6820      	ldr	r0, [r4, #0]
 8006592:	4401      	add	r1, r0
 8006594:	1850      	adds	r0, r2, r1
 8006596:	4283      	cmp	r3, r0
 8006598:	6011      	str	r1, [r2, #0]
 800659a:	d1e0      	bne.n	800655e <_free_r+0x22>
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	6053      	str	r3, [r2, #4]
 80065a2:	4408      	add	r0, r1
 80065a4:	6010      	str	r0, [r2, #0]
 80065a6:	e7da      	b.n	800655e <_free_r+0x22>
 80065a8:	d902      	bls.n	80065b0 <_free_r+0x74>
 80065aa:	230c      	movs	r3, #12
 80065ac:	602b      	str	r3, [r5, #0]
 80065ae:	e7d6      	b.n	800655e <_free_r+0x22>
 80065b0:	6820      	ldr	r0, [r4, #0]
 80065b2:	1821      	adds	r1, r4, r0
 80065b4:	428b      	cmp	r3, r1
 80065b6:	bf04      	itt	eq
 80065b8:	6819      	ldreq	r1, [r3, #0]
 80065ba:	685b      	ldreq	r3, [r3, #4]
 80065bc:	6063      	str	r3, [r4, #4]
 80065be:	bf04      	itt	eq
 80065c0:	1809      	addeq	r1, r1, r0
 80065c2:	6021      	streq	r1, [r4, #0]
 80065c4:	6054      	str	r4, [r2, #4]
 80065c6:	e7ca      	b.n	800655e <_free_r+0x22>
 80065c8:	bd38      	pop	{r3, r4, r5, pc}
 80065ca:	bf00      	nop
 80065cc:	20004be0 	.word	0x20004be0

080065d0 <__malloc_lock>:
 80065d0:	4801      	ldr	r0, [pc, #4]	@ (80065d8 <__malloc_lock+0x8>)
 80065d2:	f7ff bfb1 	b.w	8006538 <__retarget_lock_acquire_recursive>
 80065d6:	bf00      	nop
 80065d8:	20004bdc 	.word	0x20004bdc

080065dc <__malloc_unlock>:
 80065dc:	4801      	ldr	r0, [pc, #4]	@ (80065e4 <__malloc_unlock+0x8>)
 80065de:	f7ff bfac 	b.w	800653a <__retarget_lock_release_recursive>
 80065e2:	bf00      	nop
 80065e4:	20004bdc 	.word	0x20004bdc

080065e8 <_init>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr

080065f4 <_fini>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr
