
F401_test_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001094c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08010af0  08010af0  00011af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011050  08011050  000132cc  2**0
                  CONTENTS
  4 .ARM          00000008  08011050  08011050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011058  08011058  000132cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011058  08011058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801105c  0801105c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  08011060  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006238  200002cc  0801132c  000132cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006504  0801132c  00013504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bf4  00000000  00000000  000132fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000553e  00000000  00000000  00035ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000177a  00000000  00000000  0003d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c379  00000000  00000000  0003ea62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000232e8  00000000  00000000  0005addb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f2c1  00000000  00000000  0007e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094a8  00000000  00000000  0011d3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00126870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010ad4 	.word	0x08010ad4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	08010ad4 	.word	0x08010ad4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	
//	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
//	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
//	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
	
	CHIP_SELECT(BNO080);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb2:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <BNO080_GPIO_SPI_Initialization+0x50>)
 8000eb4:	f002 f94c 	bl	8003150 <HAL_GPIO_WritePin>
	WAKE_LOW();
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ebe:	480f      	ldr	r0, [pc, #60]	@ (8000efc <BNO080_GPIO_SPI_Initialization+0x54>)
 8000ec0:	f002 f946 	bl	8003150 <HAL_GPIO_WritePin>
	RESET_LOW();
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eca:	480c      	ldr	r0, [pc, #48]	@ (8000efc <BNO080_GPIO_SPI_Initialization+0x54>)
 8000ecc:	f002 f940 	bl	8003150 <HAL_GPIO_WritePin>
	
	

	CHIP_DESELECT(BNO080);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed6:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <BNO080_GPIO_SPI_Initialization+0x50>)
 8000ed8:	f002 f93a 	bl	8003150 <HAL_GPIO_WritePin>
	WAKE_HIGH();
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <BNO080_GPIO_SPI_Initialization+0x54>)
 8000ee4:	f002 f934 	bl	8003150 <HAL_GPIO_WritePin>
	RESET_HIGH();
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eee:	4803      	ldr	r0, [pc, #12]	@ (8000efc <BNO080_GPIO_SPI_Initialization+0x54>)
 8000ef0:	f002 f92e 	bl	8003150 <HAL_GPIO_WritePin>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020000 	.word	0x40020000

08000f00 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8000f06:	f7ff ffcf 	bl	8000ea8 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 8000f0a:	4830      	ldr	r0, [pc, #192]	@ (8000fcc <BNO080_Initialization+0xcc>)
 8000f0c:	f00c fd96 	bl	800da3c <iprintf>
	
	CHIP_DESELECT(BNO080);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f16:	482e      	ldr	r0, [pc, #184]	@ (8000fd0 <BNO080_Initialization+0xd0>)
 8000f18:	f002 f91a 	bl	8003150 <HAL_GPIO_WritePin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f22:	482c      	ldr	r0, [pc, #176]	@ (8000fd4 <BNO080_Initialization+0xd4>)
 8000f24:	f002 f914 	bl	8003150 <HAL_GPIO_WritePin>
	RESET_LOW();	//Reset BNO080
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f2e:	4829      	ldr	r0, [pc, #164]	@ (8000fd4 <BNO080_Initialization+0xd4>)
 8000f30:	f002 f90e 	bl	8003150 <HAL_GPIO_WritePin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8000f34:	20c8      	movs	r0, #200	@ 0xc8
 8000f36:	f001 fb7f 	bl	8002638 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f40:	4824      	ldr	r0, [pc, #144]	@ (8000fd4 <BNO080_Initialization+0xd4>)
 8000f42:	f002 f905 	bl	8003150 <HAL_GPIO_WritePin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8000f46:	f000 fb17 	bl	8001578 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8000f4a:	f000 fb15 	bl	8001578 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8000f4e:	f000 fb37 	bl	80015c0 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8000f52:	f000 fb11 	bl	8001578 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8000f56:	f000 fb33 	bl	80015c0 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <BNO080_Initialization+0xd8>)
 8000f5c:	22f9      	movs	r2, #249	@ 0xf9
 8000f5e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <BNO080_Initialization+0xd8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8000f66:	2102      	movs	r1, #2
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f000 fb9b 	bl	80016a4 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8000f6e:	f000 fb03 	bl	8001578 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8000f72:	f000 fb25 	bl	80015c0 <BNO080_receivePacket>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d11b      	bne.n	8000fb4 <BNO080_Initialization+0xb4>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <BNO080_Initialization+0xdc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <BNO080_Initialization+0xdc>)
 8000f84:	785b      	ldrb	r3, [r3, #1]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <BNO080_Initialization+0xdc>)
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <BNO080_Initialization+0xdc>)
 8000f90:	78db      	ldrb	r3, [r3, #3]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	4603      	mov	r3, r0
 8000f96:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <BNO080_Initialization+0xe0>)
 8000f98:	f00c fd50 	bl	800da3c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <BNO080_Initialization+0xd8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2bf8      	cmp	r3, #248	@ 0xf8
 8000fa2:	d107      	bne.n	8000fb4 <BNO080_Initialization+0xb4>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <BNO080_Initialization+0xd8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480e      	ldr	r0, [pc, #56]	@ (8000fe4 <BNO080_Initialization+0xe4>)
 8000fac:	f00c fd46 	bl	800da3c <iprintf>
			return (0);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e007      	b.n	8000fc4 <BNO080_Initialization+0xc4>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <BNO080_Initialization+0xd8>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	22f8      	movs	r2, #248	@ 0xf8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480a      	ldr	r0, [pc, #40]	@ (8000fe8 <BNO080_Initialization+0xe8>)
 8000fbe:	f00c fd3d 	bl	800da3c <iprintf>
	return (1); //Something went wrong
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08010af0 	.word	0x08010af0
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	200002ec 	.word	0x200002ec
 8000fdc:	200002e8 	.word	0x200002e8
 8000fe0:	08010b04 	.word	0x08010b04
 8000fe4:	08010b1c 	.word	0x08010b1c
 8000fe8:	08010b3c 	.word	0x08010b3c

08000fec <SPI2_SendByte>:



unsigned char SPI2_SendByte(unsigned char data)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    uint8_t rxData;

    // Transmit and receive data
    HAL_SPI_TransmitReceive(&hspi2, &data, &rxData, 1, 1);
 8000ff6:	f107 020f 	add.w	r2, r7, #15
 8000ffa:	1df9      	adds	r1, r7, #7
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	4804      	ldr	r0, [pc, #16]	@ (8001014 <SPI2_SendByte+0x28>)
 8001004:	f004 f831 	bl	800506a <HAL_SPI_TransmitReceive>
    //HAL_SPI_TransmitReceive_DMA(&hspi2, &data, &rxData, 1);




    return rxData;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200003bc 	.word	0x200003bc

08001018 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == GPIO_PIN_SET)
 800101c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001020:	4811      	ldr	r0, [pc, #68]	@ (8001068 <BNO080_dataAvailable+0x50>)
 8001022:	f002 f87d 	bl	8003120 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <BNO080_dataAvailable+0x18>
		return (0);
 800102c:	2300      	movs	r3, #0
 800102e:	e019      	b.n	8001064 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001030:	f000 fac6 	bl	80015c0 <BNO080_receivePacket>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d113      	bne.n	8001062 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <BNO080_dataAvailable+0x54>)
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d107      	bne.n	8001052 <BNO080_dataAvailable+0x3a>
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <BNO080_dataAvailable+0x58>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2bfb      	cmp	r3, #251	@ 0xfb
 8001048:	d103      	bne.n	8001052 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800104a:	f000 f82f 	bl	80010ac <BNO080_parseInputReport>
			return (1);
 800104e:	2301      	movs	r3, #1
 8001050:	e008      	b.n	8001064 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <BNO080_dataAvailable+0x54>)
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d103      	bne.n	8001062 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800105a:	f000 f80b 	bl	8001074 <BNO080_parseCommandReport>
			return (1);
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020000 	.word	0x40020000
 800106c:	200002e8 	.word	0x200002e8
 8001070:	200002ec 	.word	0x200002ec

08001074 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <BNO080_parseCommandReport+0x30>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2bf1      	cmp	r3, #241	@ 0xf1
 8001080:	d109      	bne.n	8001096 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <BNO080_parseCommandReport+0x30>)
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b07      	cmp	r3, #7
 800108c:	d103      	bne.n	8001096 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <BNO080_parseCommandReport+0x30>)
 8001090:	795a      	ldrb	r2, [r3, #5]
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <BNO080_parseCommandReport+0x34>)
 8001094:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200002ec 	.word	0x200002ec
 80010a8:	200003ac 	.word	0x200003ac

080010ac <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80010b2:	4b98      	ldr	r3, [pc, #608]	@ (8001314 <BNO080_parseInputReport+0x268>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b96      	ldr	r3, [pc, #600]	@ (8001314 <BNO080_parseInputReport+0x268>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80010c4:	8a3b      	ldrh	r3, [r7, #16]
 80010c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ca:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80010cc:	8a3b      	ldrh	r3, [r7, #16]
 80010ce:	3b04      	subs	r3, #4
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80010d4:	4b90      	ldr	r3, [pc, #576]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	061a      	lsls	r2, r3, #24
 80010da:	4b8f      	ldr	r3, [pc, #572]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80010dc:	78db      	ldrb	r3, [r3, #3]
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	431a      	orrs	r2, r3
 80010e2:	4b8d      	ldr	r3, [pc, #564]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	4313      	orrs	r3, r2
 80010ea:	4a8b      	ldr	r2, [pc, #556]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80010ec:	7852      	ldrb	r2, [r2, #1]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	4a8a      	ldr	r2, [pc, #552]	@ (800131c <BNO080_parseInputReport+0x270>)
 80010f2:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80010f4:	4b88      	ldr	r3, [pc, #544]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80010f6:	79db      	ldrb	r3, [r3, #7]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80010fe:	4b86      	ldr	r3, [pc, #536]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001100:	7a9b      	ldrb	r3, [r3, #10]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b84      	ldr	r3, [pc, #528]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001108:	7a5b      	ldrb	r3, [r3, #9]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8001112:	4b81      	ldr	r3, [pc, #516]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001114:	7b1b      	ldrb	r3, [r3, #12]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b7f      	ldr	r3, [pc, #508]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 800111c:	7adb      	ldrb	r3, [r3, #11]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001126:	4b7c      	ldr	r3, [pc, #496]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001128:	7b9b      	ldrb	r3, [r3, #14]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b7a      	ldr	r3, [pc, #488]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001130:	7b5b      	ldrb	r3, [r3, #13]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001142:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001146:	2b0e      	cmp	r3, #14
 8001148:	dd09      	ble.n	800115e <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800114a:	4b73      	ldr	r3, [pc, #460]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 800114c:	7c1b      	ldrb	r3, [r3, #16]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	4b71      	ldr	r3, [pc, #452]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001154:	7bdb      	ldrb	r3, [r3, #15]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21b      	sxth	r3, r3
 800115c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800115e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001162:	2b10      	cmp	r3, #16
 8001164:	dd09      	ble.n	800117a <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001166:	4b6c      	ldr	r3, [pc, #432]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001168:	7c9b      	ldrb	r3, [r3, #18]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b6a      	ldr	r3, [pc, #424]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 8001170:	7c5b      	ldrb	r3, [r3, #17]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800117a:	4b67      	ldr	r3, [pc, #412]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 800117c:	795b      	ldrb	r3, [r3, #5]
 800117e:	2b1e      	cmp	r3, #30
 8001180:	dc46      	bgt.n	8001210 <BNO080_parseInputReport+0x164>
 8001182:	2b00      	cmp	r3, #0
 8001184:	f340 80bf 	ble.w	8001306 <BNO080_parseInputReport+0x25a>
 8001188:	3b01      	subs	r3, #1
 800118a:	2b1d      	cmp	r3, #29
 800118c:	f200 80bb 	bhi.w	8001306 <BNO080_parseInputReport+0x25a>
 8001190:	a201      	add	r2, pc, #4	@ (adr r2, 8001198 <BNO080_parseInputReport+0xec>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	08001217 	.word	0x08001217
 800119c:	0800124f 	.word	0x0800124f
 80011a0:	0800126b 	.word	0x0800126b
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001287 	.word	0x08001287
 80011ac:	08001307 	.word	0x08001307
 80011b0:	08001307 	.word	0x08001307
 80011b4:	08001287 	.word	0x08001287
 80011b8:	08001307 	.word	0x08001307
 80011bc:	08001307 	.word	0x08001307
 80011c0:	08001307 	.word	0x08001307
 80011c4:	08001307 	.word	0x08001307
 80011c8:	08001307 	.word	0x08001307
 80011cc:	08001307 	.word	0x08001307
 80011d0:	08001307 	.word	0x08001307
 80011d4:	08001307 	.word	0x08001307
 80011d8:	080012af 	.word	0x080012af
 80011dc:	08001307 	.word	0x08001307
 80011e0:	080012b7 	.word	0x080012b7
 80011e4:	08001307 	.word	0x08001307
 80011e8:	08001307 	.word	0x08001307
 80011ec:	08001307 	.word	0x08001307
 80011f0:	08001307 	.word	0x08001307
 80011f4:	08001307 	.word	0x08001307
 80011f8:	08001307 	.word	0x08001307
 80011fc:	08001307 	.word	0x08001307
 8001200:	08001307 	.word	0x08001307
 8001204:	08001307 	.word	0x08001307
 8001208:	08001307 	.word	0x08001307
 800120c:	080012c1 	.word	0x080012c1
 8001210:	2bf1      	cmp	r3, #241	@ 0xf1
 8001212:	d06d      	beq.n	80012f0 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001214:	e077      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b41      	ldr	r3, [pc, #260]	@ (8001320 <BNO080_parseInputReport+0x274>)
 800121c:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800121e:	4a41      	ldr	r2, [pc, #260]	@ (8001324 <BNO080_parseInputReport+0x278>)
 8001220:	89bb      	ldrh	r3, [r7, #12]
 8001222:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001224:	4a40      	ldr	r2, [pc, #256]	@ (8001328 <BNO080_parseInputReport+0x27c>)
 8001226:	897b      	ldrh	r3, [r7, #10]
 8001228:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800122a:	4a40      	ldr	r2, [pc, #256]	@ (800132c <BNO080_parseInputReport+0x280>)
 800122c:	893b      	ldrh	r3, [r7, #8]
 800122e:	8013      	strh	r3, [r2, #0]
			break;
 8001230:	e069      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b3e      	ldr	r3, [pc, #248]	@ (8001330 <BNO080_parseInputReport+0x284>)
 8001238:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800123a:	4a3e      	ldr	r2, [pc, #248]	@ (8001334 <BNO080_parseInputReport+0x288>)
 800123c:	89bb      	ldrh	r3, [r7, #12]
 800123e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001240:	4a3d      	ldr	r2, [pc, #244]	@ (8001338 <BNO080_parseInputReport+0x28c>)
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001246:	4a3d      	ldr	r2, [pc, #244]	@ (800133c <BNO080_parseInputReport+0x290>)
 8001248:	893b      	ldrh	r3, [r7, #8]
 800124a:	8013      	strh	r3, [r2, #0]
			break;
 800124c:	e05b      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <BNO080_parseInputReport+0x294>)
 8001254:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8001256:	4a3b      	ldr	r2, [pc, #236]	@ (8001344 <BNO080_parseInputReport+0x298>)
 8001258:	89bb      	ldrh	r3, [r7, #12]
 800125a:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 800125c:	4a3a      	ldr	r2, [pc, #232]	@ (8001348 <BNO080_parseInputReport+0x29c>)
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001262:	4a3a      	ldr	r2, [pc, #232]	@ (800134c <BNO080_parseInputReport+0x2a0>)
 8001264:	893b      	ldrh	r3, [r7, #8]
 8001266:	8013      	strh	r3, [r2, #0]
			break;
 8001268:	e04d      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b38      	ldr	r3, [pc, #224]	@ (8001350 <BNO080_parseInputReport+0x2a4>)
 8001270:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001272:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <BNO080_parseInputReport+0x2a8>)
 8001274:	89bb      	ldrh	r3, [r7, #12]
 8001276:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001278:	4a37      	ldr	r2, [pc, #220]	@ (8001358 <BNO080_parseInputReport+0x2ac>)
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 800127e:	4a37      	ldr	r2, [pc, #220]	@ (800135c <BNO080_parseInputReport+0x2b0>)
 8001280:	893b      	ldrh	r3, [r7, #8]
 8001282:	8013      	strh	r3, [r2, #0]
			break;
 8001284:	e03f      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <BNO080_parseInputReport+0x2b4>)
 800128c:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800128e:	4a35      	ldr	r2, [pc, #212]	@ (8001364 <BNO080_parseInputReport+0x2b8>)
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001294:	4a34      	ldr	r2, [pc, #208]	@ (8001368 <BNO080_parseInputReport+0x2bc>)
 8001296:	897b      	ldrh	r3, [r7, #10]
 8001298:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800129a:	4a34      	ldr	r2, [pc, #208]	@ (800136c <BNO080_parseInputReport+0x2c0>)
 800129c:	893b      	ldrh	r3, [r7, #8]
 800129e:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80012a0:	4a33      	ldr	r2, [pc, #204]	@ (8001370 <BNO080_parseInputReport+0x2c4>)
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80012a6:	4a33      	ldr	r2, [pc, #204]	@ (8001374 <BNO080_parseInputReport+0x2c8>)
 80012a8:	8abb      	ldrh	r3, [r7, #20]
 80012aa:	8013      	strh	r3, [r2, #0]
			break;
 80012ac:	e02b      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 80012ae:	4a32      	ldr	r2, [pc, #200]	@ (8001378 <BNO080_parseInputReport+0x2cc>)
 80012b0:	893b      	ldrh	r3, [r7, #8]
 80012b2:	8013      	strh	r3, [r2, #0]
			break;
 80012b4:	e027      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80012b8:	7a5a      	ldrb	r2, [r3, #9]
 80012ba:	4b30      	ldr	r3, [pc, #192]	@ (800137c <BNO080_parseInputReport+0x2d0>)
 80012bc:	701a      	strb	r2, [r3, #0]
			break;
 80012be:	e022      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80012c2:	7a9a      	ldrb	r2, [r3, #10]
 80012c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <BNO080_parseInputReport+0x2d4>)
 80012c6:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80012c8:	2300      	movs	r3, #0
 80012ca:	74fb      	strb	r3, [r7, #19]
 80012cc:	e00c      	b.n	80012e8 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80012ce:	7cfb      	ldrb	r3, [r7, #19]
 80012d0:	f103 020b 	add.w	r2, r3, #11
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <BNO080_parseInputReport+0x2d8>)
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	7cfb      	ldrb	r3, [r7, #19]
 80012da:	440b      	add	r3, r1
 80012dc:	490e      	ldr	r1, [pc, #56]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80012de:	5c8a      	ldrb	r2, [r1, r2]
 80012e0:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80012e2:	7cfb      	ldrb	r3, [r7, #19]
 80012e4:	3301      	adds	r3, #1
 80012e6:	74fb      	strb	r3, [r7, #19]
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d9ef      	bls.n	80012ce <BNO080_parseInputReport+0x222>
			break;
 80012ee:	e00a      	b.n	8001306 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80012f2:	79db      	ldrb	r3, [r3, #7]
 80012f4:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d103      	bne.n	8001304 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <BNO080_parseInputReport+0x26c>)
 80012fe:	7a9a      	ldrb	r2, [r3, #10]
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <BNO080_parseInputReport+0x2dc>)
 8001302:	701a      	strb	r2, [r3, #0]
			break;
 8001304:	bf00      	nop
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200002e8 	.word	0x200002e8
 8001318:	200002ec 	.word	0x200002ec
 800131c:	200003a0 	.word	0x200003a0
 8001320:	20000378 	.word	0x20000378
 8001324:	20000372 	.word	0x20000372
 8001328:	20000374 	.word	0x20000374
 800132c:	20000376 	.word	0x20000376
 8001330:	20000380 	.word	0x20000380
 8001334:	2000037a 	.word	0x2000037a
 8001338:	2000037c 	.word	0x2000037c
 800133c:	2000037e 	.word	0x2000037e
 8001340:	20000388 	.word	0x20000388
 8001344:	20000382 	.word	0x20000382
 8001348:	20000384 	.word	0x20000384
 800134c:	20000386 	.word	0x20000386
 8001350:	20000390 	.word	0x20000390
 8001354:	2000038a 	.word	0x2000038a
 8001358:	2000038c 	.word	0x2000038c
 800135c:	2000038e 	.word	0x2000038e
 8001360:	2000039c 	.word	0x2000039c
 8001364:	20000392 	.word	0x20000392
 8001368:	20000394 	.word	0x20000394
 800136c:	20000396 	.word	0x20000396
 8001370:	20000398 	.word	0x20000398
 8001374:	2000039a 	.word	0x2000039a
 8001378:	2000039e 	.word	0x2000039e
 800137c:	200003a4 	.word	0x200003a4
 8001380:	200003a5 	.word	0x200003a5
 8001384:	200003a8 	.word	0x200003a8
 8001388:	200003ac 	.word	0x200003ac

0800138c <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <BNO080_getQuatI+0x24>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b21b      	sxth	r3, r3
 8001396:	4a07      	ldr	r2, [pc, #28]	@ (80013b4 <BNO080_getQuatI+0x28>)
 8001398:	f9b2 2000 	ldrsh.w	r2, [r2]
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f861 	bl	8001468 <BNO080_qToFloat>
 80013a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000392 	.word	0x20000392
 80013b4:	20000000 	.word	0x20000000

080013b8 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <BNO080_getQuatJ+0x24>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <BNO080_getQuatJ+0x28>)
 80013c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f84b 	bl	8001468 <BNO080_qToFloat>
 80013d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000394 	.word	0x20000394
 80013e0:	20000000 	.word	0x20000000

080013e4 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <BNO080_getQuatK+0x24>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4a07      	ldr	r2, [pc, #28]	@ (800140c <BNO080_getQuatK+0x28>)
 80013f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f835 	bl	8001468 <BNO080_qToFloat>
 80013fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000396 	.word	0x20000396
 800140c:	20000000 	.word	0x20000000

08001410 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <BNO080_getQuatReal+0x24>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <BNO080_getQuatReal+0x28>)
 800141c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f81f 	bl	8001468 <BNO080_qToFloat>
 800142a:	eef0 7a40 	vmov.f32	s15, s0
}
 800142e:	eeb0 0a67 	vmov.f32	s0, s15
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000398 	.word	0x20000398
 8001438:	20000000 	.word	0x20000000

0800143c <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <BNO080_getQuatRadianAccuracy+0x24>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <BNO080_getQuatRadianAccuracy+0x28>)
 8001448:	f9b2 2000 	ldrsh.w	r2, [r2]
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f809 	bl	8001468 <BNO080_qToFloat>
 8001456:	eef0 7a40 	vmov.f32	s15, s0
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000039a 	.word	0x2000039a
 8001464:	20000000 	.word	0x20000000

08001468 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	ed2d 8b02 	vpush	{d8}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	80fb      	strh	r3, [r7, #6]
 8001478:	4613      	mov	r3, r2
 800147a:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 800147c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001488:	797b      	ldrb	r3, [r7, #5]
 800148a:	425b      	negs	r3, r3
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001494:	eef0 0a67 	vmov.f32	s1, s15
 8001498:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800149c:	f00e fcf2 	bl	800fe84 <powf>
 80014a0:	eef0 7a40 	vmov.f32	s15, s0
 80014a4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	ecbd 8b02 	vpop	{d8}
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	2005      	movs	r0, #5
 80014c8:	f000 f804 	bl	80014d4 <BNO080_setFeatureCommand>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 80014e4:	22fd      	movs	r2, #253	@ 0xfd
 80014e6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80014e8:	4a22      	ldr	r2, [pc, #136]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001506:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001510:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 800151a:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	0e1b      	lsrs	r3, r3, #24
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001524:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001528:	2200      	movs	r2, #0
 800152a:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 800152e:	2200      	movs	r2, #0
 8001530:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001534:	2200      	movs	r2, #0
 8001536:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 800153a:	2200      	movs	r2, #0
 800153c:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001544:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 800154e:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001558:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0e1b      	lsrs	r3, r3, #24
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <BNO080_setFeatureCommand+0xa0>)
 8001562:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001564:	2111      	movs	r1, #17
 8001566:	2002      	movs	r0, #2
 8001568:	f000 f89c 	bl	80016a4 <BNO080_sendPacket>
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200002ec 	.word	0x200002ec

08001578 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	e00c      	b.n	800159e <BNO080_waitForSPI+0x26>
	{
		if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == GPIO_PIN_RESET)
 8001584:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001588:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <BNO080_waitForSPI+0x40>)
 800158a:	f001 fdc9 	bl	8003120 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001594:	2301      	movs	r3, #1
 8001596:	e00a      	b.n	80015ae <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3301      	adds	r3, #1
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d1ee      	bne.n	8001584 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <BNO080_waitForSPI+0x44>)
 80015a8:	f00c fab0 	bl	800db0c <puts>
	return (0);
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020000 	.word	0x40020000
 80015bc:	08010b88 	.word	0x08010b88

080015c0 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (HAL_GPIO_ReadPin(BNO080_INT_PORT, BNO080_INT_PIN) == GPIO_PIN_SET)
 80015c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015ca:	4832      	ldr	r0, [pc, #200]	@ (8001694 <BNO080_receivePacket+0xd4>)
 80015cc:	f001 fda8 	bl	8003120 <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80015d6:	2300      	movs	r3, #0
 80015d8:	e058      	b.n	800168c <BNO080_receivePacket+0xcc>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e0:	482d      	ldr	r0, [pc, #180]	@ (8001698 <BNO080_receivePacket+0xd8>)
 80015e2:	f001 fdb5 	bl	8003150 <HAL_GPIO_WritePin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fd00 	bl	8000fec <SPI2_SendByte>
 80015ec:	4603      	mov	r3, r0
 80015ee:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff fcfb 	bl	8000fec <SPI2_SendByte>
 80015f6:	4603      	mov	r3, r0
 80015f8:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fcf6 	bl	8000fec <SPI2_SendByte>
 8001600:	4603      	mov	r3, r0
 8001602:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fcf1 	bl	8000fec <SPI2_SendByte>
 800160a:	4603      	mov	r3, r0
 800160c:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 800160e:	4a23      	ldr	r2, [pc, #140]	@ (800169c <BNO080_receivePacket+0xdc>)
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001614:	4a21      	ldr	r2, [pc, #132]	@ (800169c <BNO080_receivePacket+0xdc>)
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 800161a:	4a20      	ldr	r2, [pc, #128]	@ (800169c <BNO080_receivePacket+0xdc>)
 800161c:	7afb      	ldrb	r3, [r7, #11]
 800161e:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001620:	4a1e      	ldr	r2, [pc, #120]	@ (800169c <BNO080_receivePacket+0xdc>)
 8001622:	7abb      	ldrb	r3, [r7, #10]
 8001624:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001626:	7b3b      	ldrb	r3, [r7, #12]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7b7b      	ldrb	r3, [r7, #13]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800163a:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 800163c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8001644:	2300      	movs	r3, #0
 8001646:	e021      	b.n	800168c <BNO080_receivePacket+0xcc>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001648:	893b      	ldrh	r3, [r7, #8]
 800164a:	3b04      	subs	r3, #4
 800164c:	b29b      	uxth	r3, r3
 800164e:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001650:	2300      	movs	r3, #0
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	e00e      	b.n	8001674 <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 8001656:	20ff      	movs	r0, #255	@ 0xff
 8001658:	f7ff fcc8 	bl	8000fec <SPI2_SendByte>
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	2b7f      	cmp	r3, #127	@ 0x7f
 8001664:	d803      	bhi.n	800166e <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <BNO080_receivePacket+0xe0>)
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	3301      	adds	r3, #1
 8001672:	81fb      	strh	r3, [r7, #14]
 8001674:	89fa      	ldrh	r2, [r7, #14]
 8001676:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbeb      	blt.n	8001656 <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <BNO080_receivePacket+0xd8>)
 8001686:	f001 fd63 	bl	8003150 <HAL_GPIO_WritePin>
	return (1); //We're done!
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	200002e8 	.word	0x200002e8
 80016a0:	200002ec 	.word	0x200002ec

080016a4 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	3304      	adds	r3, #4
 80016b8:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80016ba:	f7ff ff5d 	bl	8001578 <BNO080_waitForSPI>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80016c4:	2300      	movs	r3, #0
 80016c6:	e034      	b.n	8001732 <BNO080_sendPacket+0x8e>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ce:	481b      	ldr	r0, [pc, #108]	@ (800173c <BNO080_sendPacket+0x98>)
 80016d0:	f001 fd3e 	bl	8003150 <HAL_GPIO_WritePin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fc88 	bl	8000fec <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80016dc:	7bbb      	ldrb	r3, [r7, #14]
 80016de:	121b      	asrs	r3, r3, #8
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fc82 	bl	8000fec <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc7e 	bl	8000fec <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <BNO080_sendPacket+0x9c>)
 80016f4:	5cd2      	ldrb	r2, [r2, r3]
 80016f6:	1c51      	adds	r1, r2, #1
 80016f8:	b2c8      	uxtb	r0, r1
 80016fa:	4911      	ldr	r1, [pc, #68]	@ (8001740 <BNO080_sendPacket+0x9c>)
 80016fc:	54c8      	strb	r0, [r1, r3]
 80016fe:	4610      	mov	r0, r2
 8001700:	f7ff fc74 	bl	8000fec <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e008      	b.n	800171c <BNO080_sendPacket+0x78>
	{
		SPI2_SendByte(shtpData[i]);
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <BNO080_sendPacket+0xa0>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fc6b 	bl	8000fec <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	3301      	adds	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3f2      	bcc.n	800170a <BNO080_sendPacket+0x66>
	}

	CHIP_DESELECT(BNO080);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800172a:	4804      	ldr	r0, [pc, #16]	@ (800173c <BNO080_sendPacket+0x98>)
 800172c:	f001 fd10 	bl	8003150 <HAL_GPIO_WritePin>

	return (1);
 8001730:	2301      	movs	r3, #1
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40020400 	.word	0x40020400
 8001740:	2000036c 	.word	0x2000036c
 8001744:	200002ec 	.word	0x200002ec

08001748 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	ed93 7a00 	vldr	s14, [r3]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3304      	adds	r3, #4
 8001764:	edd3 6a00 	vldr	s13, [r3]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3304      	adds	r3, #4
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3308      	adds	r3, #8
 800177c:	edd3 6a00 	vldr	s13, [r3]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3308      	adds	r3, #8
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	330c      	adds	r3, #12
 8001794:	edd3 6a00 	vldr	s13, [r3]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	330c      	adds	r3, #12
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	f000 f90e 	bl	80019cc <invSqrt>
 80017b0:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80017be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c2:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3304      	adds	r3, #4
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80017d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d6:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3308      	adds	r3, #8
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	330c      	adds	r3, #12
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001802:	ed97 7a05 	vldr	s14, [r7, #20]
 8001806:	edd7 7a04 	vldr	s15, [r7, #16]
 800180a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001812:	edd7 7a03 	vldr	s15, [r7, #12]
 8001816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001822:	edd7 7a06 	vldr	s15, [r7, #24]
 8001826:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800182a:	edd7 7a05 	vldr	s15, [r7, #20]
 800182e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001836:	edd7 7a04 	vldr	s15, [r7, #16]
 800183a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800183e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001842:	edd7 7a03 	vldr	s15, [r7, #12]
 8001846:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800184a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184e:	eef0 0a67 	vmov.f32	s1, s15
 8001852:	eeb0 0a66 	vmov.f32	s0, s13
 8001856:	f00e fb13 	bl	800fe80 <atan2f>
 800185a:	eef0 7a40 	vmov.f32	s15, s0
 800185e:	4b55      	ldr	r3, [pc, #340]	@ (80019b4 <Quaternion_Update+0x26c>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8001864:	ed97 7a05 	vldr	s14, [r7, #20]
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001870:	edd7 6a06 	vldr	s13, [r7, #24]
 8001874:	edd7 7a04 	vldr	s15, [r7, #16]
 8001878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001880:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f00e face 	bl	800fe28 <asinf>
 800188c:	eef0 7a40 	vmov.f32	s15, s0
 8001890:	eef1 7a67 	vneg.f32	s15, s15
 8001894:	4b48      	ldr	r3, [pc, #288]	@ (80019b8 <Quaternion_Update+0x270>)
 8001896:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 800189a:	ed97 7a06 	vldr	s14, [r7, #24]
 800189e:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a6:	edd7 6a04 	vldr	s13, [r7, #16]
 80018aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80018be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018da:	edd7 7a03 	vldr	s15, [r7, #12]
 80018de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	eef0 0a67 	vmov.f32	s1, s15
 80018ea:	eeb0 0a66 	vmov.f32	s0, s13
 80018ee:	f00e fac7 	bl	800fe80 <atan2f>
 80018f2:	eef0 7a40 	vmov.f32	s15, s0
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <Quaternion_Update+0x274>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <Quaternion_Update+0x26c>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80019c0 <Quaternion_Update+0x278>
 8001906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190a:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <Quaternion_Update+0x26c>)
 800190c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8001910:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <Quaternion_Update+0x270>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80019c0 <Quaternion_Update+0x278>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <Quaternion_Update+0x270>)
 8001920:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8001924:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <Quaternion_Update+0x274>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80019c0 <Quaternion_Update+0x278>
 800192e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001932:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <Quaternion_Update+0x274>)
 8001934:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8001938:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <Quaternion_Update+0x274>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	db0a      	blt.n	800195e <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <Quaternion_Update+0x274>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80019c4 <Quaternion_Update+0x27c>
 8001952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <Quaternion_Update+0x274>)
 8001958:	edc3 7a00 	vstr	s15, [r3]
 800195c:	e007      	b.n	800196e <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <Quaternion_Update+0x274>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eef1 7a67 	vneg.f32	s15, s15
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <Quaternion_Update+0x274>)
 800196a:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <Quaternion_Update+0x26c>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	db0a      	blt.n	8001994 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <Quaternion_Update+0x26c>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80019c8 <Quaternion_Update+0x280>
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <Quaternion_Update+0x26c>)
 800198e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8001992:	e00b      	b.n	80019ac <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <Quaternion_Update+0x26c>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80019c8 <Quaternion_Update+0x280>
 800199e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a2:	eef1 7a67 	vneg.f32	s15, s15
 80019a6:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <Quaternion_Update+0x26c>)
 80019a8:	edc3 7a00 	vstr	s15, [r3]
}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200003b4 	.word	0x200003b4
 80019b8:	200003b0 	.word	0x200003b0
 80019bc:	200003b8 	.word	0x200003b8
 80019c0:	42652ee1 	.word	0x42652ee1
 80019c4:	43b40000 	.word	0x43b40000
 80019c8:	43340000 	.word	0x43340000

080019cc <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80019d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	105a      	asrs	r2, r3, #1
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <invSqrt+0x74>)
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001a04:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a18:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001a1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	ee07 3a90 	vmov	s15, r3
}
 8001a32:	eeb0 0a67 	vmov.f32	s0, s15
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	5f3759df 	.word	0x5f3759df

08001a44 <sendStringOverUSB>:
	if(hspi->Instance == SPI2){
		//test_number3++;
	}
}

void sendStringOverUSB(char *str) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(str); // Get the length of the string
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7fe fc17 	bl	8000280 <strlen>
 8001a52:	4603      	mov	r3, r0
 8001a54:	81fb      	strh	r3, [r7, #14]
    CDC_Transmit_FS((uint8_t*)str, len); // Transmit the string over USB
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f00a fe82 	bl	800c764 <CDC_Transmit_FS>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6c:	f000 fda2 	bl	80025b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a70:	f000 f846 	bl	8001b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a74:	f000 f972 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a78:	f000 f948 	bl	8001d0c <MX_DMA_Init>
  MX_SPI2_Init();
 8001a7c:	f000 f8ac 	bl	8001bd8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001a80:	f000 f8e0 	bl	8001c44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  BNO080_Initialization();
 8001a84:	f7ff fa3c 	bl	8000f00 <BNO080_Initialization>
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  HAL_Delay(100);
 8001a88:	2064      	movs	r0, #100	@ 0x64
 8001a8a:	f000 fdd5 	bl	8002638 <HAL_Delay>

  BNO080_enableRotationVector(2500); //enable rotation vector at 400Hz
 8001a8e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001a92:	f7ff fd10 	bl	80014b6 <BNO080_enableRotationVector>
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  HAL_Delay(100);
 8001a96:	2064      	movs	r0, #100	@ 0x64
 8001a98:	f000 fdce 	bl	8002638 <HAL_Delay>


  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4811      	ldr	r0, [pc, #68]	@ (8001ae4 <main+0x7c>)
 8001aa0:	f003 fe7c 	bl	800579c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	480f      	ldr	r0, [pc, #60]	@ (8001ae4 <main+0x7c>)
 8001aa8:	f003 fe78 	bl	800579c <HAL_TIM_PWM_Start_IT>

 TIM2->CCR2 = 10500;
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ab0:	f642 1204 	movw	r2, #10500	@ 0x2904
 8001ab4:	639a      	str	r2, [r3, #56]	@ 0x38


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ab6:	f007 ff55 	bl	8009964 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001aba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <main+0x80>)
 8001abc:	2100      	movs	r1, #0
 8001abe:	480b      	ldr	r0, [pc, #44]	@ (8001aec <main+0x84>)
 8001ac0:	f007 ff9a 	bl	80099f8 <osThreadNew>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <main+0x88>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <main+0x8c>)
 8001acc:	2100      	movs	r1, #0
 8001ace:	480a      	ldr	r0, [pc, #40]	@ (8001af8 <main+0x90>)
 8001ad0:	f007 ff92 	bl	80099f8 <osThreadNew>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <main+0x94>)
 8001ad8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ada:	f007 ff67 	bl	80099ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ade:	bf00      	nop
 8001ae0:	e7fd      	b.n	8001ade <main+0x76>
 8001ae2:	bf00      	nop
 8001ae4:	200004d4 	.word	0x200004d4
 8001ae8:	08010c28 	.word	0x08010c28
 8001aec:	08001ea5 	.word	0x08001ea5
 8001af0:	2000051c 	.word	0x2000051c
 8001af4:	08010c4c 	.word	0x08010c4c
 8001af8:	08001eb5 	.word	0x08001eb5
 8001afc:	20000520 	.word	0x20000520

08001b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b094      	sub	sp, #80	@ 0x50
 8001b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	2230      	movs	r2, #48	@ 0x30
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f00c f8fc 	bl	800dd0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	4b29      	ldr	r3, [pc, #164]	@ (8001bd0 <SystemClock_Config+0xd0>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	4a28      	ldr	r2, [pc, #160]	@ (8001bd0 <SystemClock_Config+0xd0>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <SystemClock_Config+0xd0>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <SystemClock_Config+0xd4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b4c:	4a21      	ldr	r2, [pc, #132]	@ (8001bd4 <SystemClock_Config+0xd4>)
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <SystemClock_Config+0xd4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b74:	2319      	movs	r3, #25
 8001b76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b78:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001b7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b82:	2307      	movs	r3, #7
 8001b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fd6e 	bl	800466c <HAL_RCC_OscConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b96:	f000 fa07 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001baa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 ffd0 	bl	8004b5c <HAL_RCC_ClockConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001bc2:	f000 f9f1 	bl	8001fa8 <Error_Handler>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3750      	adds	r7, #80	@ 0x50
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001bde:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <MX_SPI2_Init+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001be4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001c0c:	2218      	movs	r2, #24
 8001c0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001c24:	220a      	movs	r2, #10
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_SPI2_Init+0x64>)
 8001c2a:	f003 f995 	bl	8004f58 <HAL_SPI_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c34:	f000 f9b8 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200003bc 	.word	0x200003bc
 8001c40:	40003800 	.word	0x40003800

08001c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001c68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001c6e:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001c70:	2214      	movs	r2, #20
 8001c72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000;
 8001c7a:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001c7c:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <MX_TIM2_Init+0xc4>)
 8001c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c8c:	481d      	ldr	r0, [pc, #116]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001c8e:	f003 fd35 	bl	80056fc <HAL_TIM_PWM_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c98:	f000 f986 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4816      	ldr	r0, [pc, #88]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001cac:	f004 fa8c 	bl	80061c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001cb6:	f000 f977 	bl	8001fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cba:	2360      	movs	r3, #96	@ 0x60
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001cd2:	f003 ff51 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001cdc:	f000 f964 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4807      	ldr	r0, [pc, #28]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001ce8:	f003 ff46 	bl	8005b78 <HAL_TIM_PWM_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cf2:	f000 f959 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cf6:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <MX_TIM2_Init+0xc0>)
 8001cf8:	f000 fa5a 	bl	80021b0 <HAL_TIM_MspPostInit>

}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	@ 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200004d4 	.word	0x200004d4
 8001d08:	00013880 	.word	0x00013880

08001d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <MX_DMA_Init+0x4c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <MX_DMA_Init+0x4c>)
 8001d1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <MX_DMA_Init+0x4c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2105      	movs	r1, #5
 8001d32:	200e      	movs	r0, #14
 8001d34:	f000 fd5c 	bl	80027f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001d38:	200e      	movs	r0, #14
 8001d3a:	f000 fd75 	bl	8002828 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	200f      	movs	r0, #15
 8001d44:	f000 fd54 	bl	80027f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d48:	200f      	movs	r0, #15
 8001d4a:	f000 fd6d 	bl	8002828 <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	@ 0x28
 8001d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b47      	ldr	r3, [pc, #284]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a46      	ldr	r2, [pc, #280]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b44      	ldr	r3, [pc, #272]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a3f      	ldr	r2, [pc, #252]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a31      	ldr	r2, [pc, #196]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <MX_GPIO_Init+0x138>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de8:	482b      	ldr	r0, [pc, #172]	@ (8001e98 <MX_GPIO_Init+0x13c>)
 8001dea:	f001 f9b1 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CH_GPIO_Port, SPI2_CH_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001df4:	4829      	ldr	r0, [pc, #164]	@ (8001e9c <MX_GPIO_Init+0x140>)
 8001df6:	f001 f9ab 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BNO_WEAK_Pin|BNO_RST_Pin, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001e00:	4827      	ldr	r0, [pc, #156]	@ (8001ea0 <MX_GPIO_Init+0x144>)
 8001e02:	f001 f9a5 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481e      	ldr	r0, [pc, #120]	@ (8001e98 <MX_GPIO_Init+0x13c>)
 8001e20:	f000 fffa 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CH_Pin */
  GPIO_InitStruct.Pin = SPI2_CH_Pin;
 8001e24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CH_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4817      	ldr	r0, [pc, #92]	@ (8001e9c <MX_GPIO_Init+0x140>)
 8001e3e:	f000 ffeb 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_WEAK_Pin BNO_RST_Pin */
  GPIO_InitStruct.Pin = BNO_WEAK_Pin|BNO_RST_Pin;
 8001e42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4811      	ldr	r0, [pc, #68]	@ (8001ea0 <MX_GPIO_Init+0x144>)
 8001e5c:	f000 ffdc 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8001e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <MX_GPIO_Init+0x144>)
 8001e78:	f000 ffce 	bl	8002e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2105      	movs	r1, #5
 8001e80:	2028      	movs	r0, #40	@ 0x28
 8001e82:	f000 fcb5 	bl	80027f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e86:	2028      	movs	r0, #40	@ 0x28
 8001e88:	f000 fcce 	bl	8002828 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	@ 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001eac:	f00a fb9c 	bl	800c5e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <StartDefaultTask+0xc>

08001eb4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001eb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af04      	add	r7, sp, #16
 8001ebc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  	  osThreadFlagsWait(1, 0, osWaitForever);
 8001ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f007 fe29 	bl	8009b1c <osThreadFlagsWait>

	  	  if(BNO080_dataAvailable() == 1)
 8001eca:	f7ff f8a5 	bl	8001018 <BNO080_dataAvailable>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d1f4      	bne.n	8001ebe <StartTask02+0xa>
	  		  {
	  			  q[0] = BNO080_getQuatI();
 8001ed4:	f7ff fa5a 	bl	800138c <BNO080_getQuatI>
 8001ed8:	eef0 7a40 	vmov.f32	s15, s0
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <StartTask02+0xb4>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
	  			  q[1] = BNO080_getQuatJ();
 8001ee2:	f7ff fa69 	bl	80013b8 <BNO080_getQuatJ>
 8001ee6:	eef0 7a40 	vmov.f32	s15, s0
 8001eea:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <StartTask02+0xb4>)
 8001eec:	edc3 7a01 	vstr	s15, [r3, #4]
	  			  q[2] = BNO080_getQuatK();
 8001ef0:	f7ff fa78 	bl	80013e4 <BNO080_getQuatK>
 8001ef4:	eef0 7a40 	vmov.f32	s15, s0
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <StartTask02+0xb4>)
 8001efa:	edc3 7a02 	vstr	s15, [r3, #8]
	  			  q[3] = BNO080_getQuatReal();
 8001efe:	f7ff fa87 	bl	8001410 <BNO080_getQuatReal>
 8001f02:	eef0 7a40 	vmov.f32	s15, s0
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <StartTask02+0xb4>)
 8001f08:	edc3 7a03 	vstr	s15, [r3, #12]
	  			  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8001f0c:	f7ff fa96 	bl	800143c <BNO080_getQuatRadianAccuracy>
 8001f10:	eef0 7a40 	vmov.f32	s15, s0
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <StartTask02+0xb8>)
 8001f16:	edc3 7a00 	vstr	s15, [r3]
	  			  Quaternion_Update(&q[0]);
 8001f1a:	4813      	ldr	r0, [pc, #76]	@ (8001f68 <StartTask02+0xb4>)
 8001f1c:	f7ff fc14 	bl	8001748 <Quaternion_Update>

	  			  sprintf(str, "%.2f, %.2f, %.2f\n\r", BNO080_Pitch, BNO080_Roll, BNO080_Yaw);
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <StartTask02+0xbc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb17 	bl	8000558 <__aeabi_f2d>
 8001f2a:	4680      	mov	r8, r0
 8001f2c:	4689      	mov	r9, r1
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <StartTask02+0xc0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fb10 	bl	8000558 <__aeabi_f2d>
 8001f38:	4604      	mov	r4, r0
 8001f3a:	460d      	mov	r5, r1
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <StartTask02+0xc4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fb09 	bl	8000558 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f4e:	e9cd 4500 	strd	r4, r5, [sp]
 8001f52:	4642      	mov	r2, r8
 8001f54:	464b      	mov	r3, r9
 8001f56:	4909      	ldr	r1, [pc, #36]	@ (8001f7c <StartTask02+0xc8>)
 8001f58:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <StartTask02+0xcc>)
 8001f5a:	f00b fddf 	bl	800db1c <siprintf>
	  			  sendStringOverUSB(str);
 8001f5e:	4808      	ldr	r0, [pc, #32]	@ (8001f80 <StartTask02+0xcc>)
 8001f60:	f7ff fd70 	bl	8001a44 <sendStringOverUSB>
	  	  osThreadFlagsWait(1, 0, osWaitForever);
 8001f64:	e7ab      	b.n	8001ebe <StartTask02+0xa>
 8001f66:	bf00      	nop
 8001f68:	20000524 	.word	0x20000524
 8001f6c:	20000534 	.word	0x20000534
 8001f70:	200003b4 	.word	0x200003b4
 8001f74:	200003b0 	.word	0x200003b0
 8001f78:	200003b8 	.word	0x200003b8
 8001f7c:	08010bb4 	.word	0x08010bb4
 8001f80:	20000538 	.word	0x20000538

08001f84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f96:	f000 fb2f 	bl	80025f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <Error_Handler+0x8>

08001fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_MspInit+0x54>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_MspInit+0x54>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_MspInit+0x54>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_MspInit+0x54>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <HAL_MspInit+0x54>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <HAL_MspInit+0x54>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	f06f 0001 	mvn.w	r0, #1
 8001ffa:	f000 fbf9 	bl	80027f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a47      	ldr	r2, [pc, #284]	@ (8002148 <HAL_SPI_MspInit+0x13c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	f040 8087 	bne.w	800213e <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	4b45      	ldr	r3, [pc, #276]	@ (800214c <HAL_SPI_MspInit+0x140>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	4a44      	ldr	r2, [pc, #272]	@ (800214c <HAL_SPI_MspInit+0x140>)
 800203a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800203e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002040:	4b42      	ldr	r3, [pc, #264]	@ (800214c <HAL_SPI_MspInit+0x140>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <HAL_SPI_MspInit+0x140>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4a3d      	ldr	r2, [pc, #244]	@ (800214c <HAL_SPI_MspInit+0x140>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	6313      	str	r3, [r2, #48]	@ 0x30
 800205c:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <HAL_SPI_MspInit+0x140>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002068:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800207a:	2305      	movs	r3, #5
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4832      	ldr	r0, [pc, #200]	@ (8002150 <HAL_SPI_MspInit+0x144>)
 8002086:	f000 fec7 	bl	8002e18 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800208a:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 800208c:	4a32      	ldr	r2, [pc, #200]	@ (8002158 <HAL_SPI_MspInit+0x14c>)
 800208e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002090:	4b30      	ldr	r3, [pc, #192]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002096:	4b2f      	ldr	r3, [pc, #188]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b0:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80020b6:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020be:	2200      	movs	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c2:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80020c8:	4822      	ldr	r0, [pc, #136]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020ca:	f000 fbbb 	bl	8002844 <HAL_DMA_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80020d4:	f7ff ff68 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020de:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <HAL_SPI_MspInit+0x148>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <HAL_SPI_MspInit+0x150>)
 80020e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <HAL_SPI_MspInit+0x154>)
 80020e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <HAL_SPI_MspInit+0x150>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_SPI_MspInit+0x150>)
 80020f2:	2240      	movs	r2, #64	@ 0x40
 80020f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <HAL_SPI_MspInit+0x150>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020fc:	4b17      	ldr	r3, [pc, #92]	@ (800215c <HAL_SPI_MspInit+0x150>)
 80020fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002102:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002104:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_SPI_MspInit+0x150>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <HAL_SPI_MspInit+0x150>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_SPI_MspInit+0x150>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_SPI_MspInit+0x150>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <HAL_SPI_MspInit+0x150>)
 800211e:	2200      	movs	r2, #0
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002122:	480e      	ldr	r0, [pc, #56]	@ (800215c <HAL_SPI_MspInit+0x150>)
 8002124:	f000 fb8e 	bl	8002844 <HAL_DMA_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 800212e:	f7ff ff3b 	bl	8001fa8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_SPI_MspInit+0x150>)
 8002136:	649a      	str	r2, [r3, #72]	@ 0x48
 8002138:	4a08      	ldr	r2, [pc, #32]	@ (800215c <HAL_SPI_MspInit+0x150>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	@ 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40003800 	.word	0x40003800
 800214c:	40023800 	.word	0x40023800
 8002150:	40020400 	.word	0x40020400
 8002154:	20000414 	.word	0x20000414
 8002158:	40026058 	.word	0x40026058
 800215c:	20000474 	.word	0x20000474
 8002160:	40026070 	.word	0x40026070

08002164 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002174:	d115      	bne.n	80021a2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_TIM_PWM_MspInit+0x48>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_TIM_PWM_MspInit+0x48>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <HAL_TIM_PWM_MspInit+0x48>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2105      	movs	r1, #5
 8002196:	201c      	movs	r0, #28
 8002198:	f000 fb2a 	bl	80027f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800219c:	201c      	movs	r0, #28
 800219e:	f000 fb43 	bl	8002828 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800

080021b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d0:	d11d      	bne.n	800220e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <HAL_TIM_MspPostInit+0x68>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_TIM_MspPostInit+0x68>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_TIM_MspPostInit+0x68>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ee:	2303      	movs	r3, #3
 80021f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fe:	2301      	movs	r3, #1
 8002200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4619      	mov	r1, r3
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <HAL_TIM_MspPostInit+0x6c>)
 800220a:	f000 fe05 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000

08002220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08c      	sub	sp, #48	@ 0x30
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	4b2e      	ldr	r3, [pc, #184]	@ (80022f0 <HAL_InitTick+0xd0>)
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	4a2d      	ldr	r2, [pc, #180]	@ (80022f0 <HAL_InitTick+0xd0>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_InitTick+0xd0>)
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800224c:	f107 020c 	add.w	r2, r7, #12
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fe4c 	bl	8004ef4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800225c:	f002 fe36 	bl	8004ecc <HAL_RCC_GetPCLK2Freq>
 8002260:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <HAL_InitTick+0xd4>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0c9b      	lsrs	r3, r3, #18
 800226c:	3b01      	subs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002270:	4b21      	ldr	r3, [pc, #132]	@ (80022f8 <HAL_InitTick+0xd8>)
 8002272:	4a22      	ldr	r2, [pc, #136]	@ (80022fc <HAL_InitTick+0xdc>)
 8002274:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_InitTick+0xd8>)
 8002278:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800227c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800227e:	4a1e      	ldr	r2, [pc, #120]	@ (80022f8 <HAL_InitTick+0xd8>)
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002284:	4b1c      	ldr	r3, [pc, #112]	@ (80022f8 <HAL_InitTick+0xd8>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_InitTick+0xd8>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_InitTick+0xd8>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002296:	4818      	ldr	r0, [pc, #96]	@ (80022f8 <HAL_InitTick+0xd8>)
 8002298:	f003 f974 	bl	8005584 <HAL_TIM_Base_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80022a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11b      	bne.n	80022e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80022aa:	4813      	ldr	r0, [pc, #76]	@ (80022f8 <HAL_InitTick+0xd8>)
 80022ac:	f003 f9c4 	bl	8005638 <HAL_TIM_Base_Start_IT>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80022b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d111      	bne.n	80022e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022be:	2019      	movs	r0, #25
 80022c0:	f000 fab2 	bl	8002828 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	d808      	bhi.n	80022dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80022ca:	2200      	movs	r2, #0
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	2019      	movs	r0, #25
 80022d0:	f000 fa8e 	bl	80027f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <HAL_InitTick+0xe0>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e002      	b.n	80022e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3730      	adds	r7, #48	@ 0x30
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	431bde83 	.word	0x431bde83
 80022f8:	2000059c 	.word	0x2000059c
 80022fc:	40010000 	.word	0x40010000
 8002300:	20000008 	.word	0x20000008

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <NMI_Handler+0x4>

0800230c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <MemManage_Handler+0x4>

0800231c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <UsageFault_Handler+0x4>

0800232c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <DMA1_Stream3_IRQHandler+0x10>)
 8002342:	f000 fb2d 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000414 	.word	0x20000414

08002350 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <DMA1_Stream4_IRQHandler+0x10>)
 8002356:	f000 fb23 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000474 	.word	0x20000474

08002364 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800236a:	f003 fb15 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000059c 	.word	0x2000059c

08002378 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <TIM2_IRQHandler+0x10>)
 800237e:	f003 fb0b 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200004d4 	.word	0x200004d4

0800238c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BNO_INT_Pin);
 8002390:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002394:	f000 fef6 	bl	8003184 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <OTG_FS_IRQHandler+0x10>)
 80023a2:	f001 f856 	bl	8003452 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20005cb4 	.word	0x20005cb4

080023b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_kill>:

int _kill(int pid, int sig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ca:	f00b fd47 	bl	800de5c <__errno>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2216      	movs	r2, #22
 80023d2:	601a      	str	r2, [r3, #0]
  return -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_exit>:

void _exit (int status)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ffe7 	bl	80023c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f2:	bf00      	nop
 80023f4:	e7fd      	b.n	80023f2 <_exit+0x12>

080023f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e00a      	b.n	800241e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002408:	f3af 8000 	nop.w
 800240c:	4601      	mov	r1, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	60ba      	str	r2, [r7, #8]
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	dbf0      	blt.n	8002408 <_read+0x12>
  }

  return len;
 8002426:	687b      	ldr	r3, [r7, #4]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e009      	b.n	8002456 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	60ba      	str	r2, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	dbf1      	blt.n	8002442 <_write+0x12>
  }
  return len;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_close>:

int _close(int file)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002490:	605a      	str	r2, [r3, #4]
  return 0;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_isatty>:

int _isatty(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	@ (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f00b fcac 	bl	800de5c <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	@ (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20010000 	.word	0x20010000
 8002530:	00000400 	.word	0x00000400
 8002534:	200005e4 	.word	0x200005e4
 8002538:	20006508 	.word	0x20006508

0800253c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <SystemInit+0x20>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	4a05      	ldr	r2, [pc, #20]	@ (800255c <SystemInit+0x20>)
 8002548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800254c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002564:	f7ff ffea 	bl	800253c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002568:	480c      	ldr	r0, [pc, #48]	@ (800259c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800256a:	490d      	ldr	r1, [pc, #52]	@ (80025a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800256c:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002580:	4c0a      	ldr	r4, [pc, #40]	@ (80025ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f00b fc6b 	bl	800de68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002592:	f7ff fa69 	bl	8001a68 <main>
  bx  lr    
 8002596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002598:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80025a4:	08011060 	.word	0x08011060
  ldr r2, =_sbss
 80025a8:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80025ac:	20006504 	.word	0x20006504

080025b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC_IRQHandler>
	...

080025b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <HAL_Init+0x40>)
 80025be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_Init+0x40>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	@ (80025f4 <HAL_Init+0x40>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f8fc 	bl	80027da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	200f      	movs	r0, #15
 80025e4:	f7ff fe1c 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7ff fce4 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000000c 	.word	0x2000000c
 800261c:	200005e8 	.word	0x200005e8

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200005e8 	.word	0x200005e8

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000000c 	.word	0x2000000c

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	@ (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	@ (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff4c 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002802:	f7ff ff61 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002806:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f7ff ffb1 	bl	8002774 <NVIC_EncodePriority>
 8002812:	4602      	mov	r2, r0
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff80 	bl	8002720 <__NVIC_SetPriority>
}
 8002820:	bf00      	nop
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff54 	bl	80026e4 <__NVIC_EnableIRQ>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff fee6 	bl	8002620 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e099      	b.n	8002994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002880:	e00f      	b.n	80028a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002882:	f7ff fecd 	bl	8002620 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b05      	cmp	r3, #5
 800288e:	d908      	bls.n	80028a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2203      	movs	r2, #3
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e078      	b.n	8002994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e8      	bne.n	8002882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4b38      	ldr	r3, [pc, #224]	@ (800299c <HAL_DMA_Init+0x158>)
 80028bc:	4013      	ands	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d107      	bne.n	800290c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	4313      	orrs	r3, r2
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0307 	bic.w	r3, r3, #7
 8002922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	2b04      	cmp	r3, #4
 8002934:	d117      	bne.n	8002966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00e      	beq.n	8002966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f9e9 	bl	8002d20 <DMA_CheckFifoParam>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2240      	movs	r2, #64	@ 0x40
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002962:	2301      	movs	r3, #1
 8002964:	e016      	b.n	8002994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9a0 	bl	8002cb4 <DMA_CalcBaseAndBitshift>
 8002974:	4603      	mov	r3, r0
 8002976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	223f      	movs	r2, #63	@ 0x3f
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	f010803f 	.word	0xf010803f

080029a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029ac:	4b8e      	ldr	r3, [pc, #568]	@ (8002be8 <HAL_DMA_IRQHandler+0x248>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a8e      	ldr	r2, [pc, #568]	@ (8002bec <HAL_DMA_IRQHandler+0x24c>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0a9b      	lsrs	r3, r3, #10
 80029b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	2208      	movs	r2, #8
 80029cc:	409a      	lsls	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	2208      	movs	r2, #8
 80029fa:	409a      	lsls	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	2201      	movs	r2, #1
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	2201      	movs	r2, #1
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	2204      	movs	r2, #4
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	2204      	movs	r2, #4
 8002a66:	409a      	lsls	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d043      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03c      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d018      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d024      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	e01f      	b.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e016      	b.n	8002b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0208 	bic.w	r2, r2, #8
 8002afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	2220      	movs	r2, #32
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 808f 	beq.w	8002c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8087 	beq.w	8002c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	2220      	movs	r2, #32
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d136      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x1da>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	223f      	movs	r2, #63	@ 0x3f
 8002b90:	409a      	lsls	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07e      	beq.n	8002cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
        }
        return;
 8002bb6:	e079      	b.n	8002cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10d      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d031      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e02c      	b.n	8002c40 <HAL_DMA_IRQHandler+0x2a0>
 8002be6:	bf00      	nop
 8002be8:	20000004 	.word	0x20000004
 8002bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d023      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
 8002c00:	e01e      	b.n	8002c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10f      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0210 	bic.w	r2, r2, #16
 8002c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d032      	beq.n	8002cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d022      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2205      	movs	r2, #5
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d307      	bcc.n	8002c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f2      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x2cc>
 8002c86:	e000      	b.n	8002c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
 8002caa:	e000      	b.n	8002cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cac:	bf00      	nop
    }
  }
}
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3b10      	subs	r3, #16
 8002cc4:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <DMA_CalcBaseAndBitshift+0x64>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cce:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <DMA_CalcBaseAndBitshift+0x68>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d909      	bls.n	8002cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	1d1a      	adds	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cf4:	e007      	b.n	8002d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	aaaaaaab 	.word	0xaaaaaaab
 8002d1c:	08010c88 	.word	0x08010c88

08002d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11f      	bne.n	8002d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d856      	bhi.n	8002dee <DMA_CheckFifoParam+0xce>
 8002d40:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <DMA_CheckFifoParam+0x28>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d6b 	.word	0x08002d6b
 8002d50:	08002d59 	.word	0x08002d59
 8002d54:	08002def 	.word	0x08002def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d046      	beq.n	8002df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e043      	b.n	8002df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d72:	d140      	bne.n	8002df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e03d      	b.n	8002df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	d121      	bne.n	8002dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d837      	bhi.n	8002dfa <DMA_CheckFifoParam+0xda>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <DMA_CheckFifoParam+0x70>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002da7 	.word	0x08002da7
 8002d98:	08002da1 	.word	0x08002da1
 8002d9c:	08002db9 	.word	0x08002db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e030      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d025      	beq.n	8002dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db6:	e022      	b.n	8002dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dc0:	d11f      	bne.n	8002e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dc6:	e01c      	b.n	8002e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d903      	bls.n	8002dd6 <DMA_CheckFifoParam+0xb6>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d003      	beq.n	8002ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dd4:	e018      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dda:	e015      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00e      	beq.n	8002e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      break;
 8002dec:	e00b      	b.n	8002e06 <DMA_CheckFifoParam+0xe6>
      break;
 8002dee:	bf00      	nop
 8002df0:	e00a      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002df2:	bf00      	nop
 8002df4:	e008      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002df6:	bf00      	nop
 8002df8:	e006      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e004      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e002      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
    }
  } 
  
  return status; 
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e159      	b.n	80030e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 8148 	bne.w	80030e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d017      	beq.n	8002f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d123      	bne.n	8002f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a2 	beq.w	80030e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b57      	ldr	r3, [pc, #348]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	4a56      	ldr	r2, [pc, #344]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8002fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fae:	4b54      	ldr	r3, [pc, #336]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fba:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_GPIO_Init+0x2ec>)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a49      	ldr	r2, [pc, #292]	@ (8003108 <HAL_GPIO_Init+0x2f0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_GPIO_Init+0x202>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a48      	ldr	r2, [pc, #288]	@ (800310c <HAL_GPIO_Init+0x2f4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_Init+0x1fe>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a47      	ldr	r2, [pc, #284]	@ (8003110 <HAL_GPIO_Init+0x2f8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00d      	beq.n	8003012 <HAL_GPIO_Init+0x1fa>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a46      	ldr	r2, [pc, #280]	@ (8003114 <HAL_GPIO_Init+0x2fc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x1f6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a45      	ldr	r2, [pc, #276]	@ (8003118 <HAL_GPIO_Init+0x300>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_GPIO_Init+0x1f2>
 8003006:	2304      	movs	r3, #4
 8003008:	e008      	b.n	800301c <HAL_GPIO_Init+0x204>
 800300a:	2307      	movs	r3, #7
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x204>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x204>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x204>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x204>
 800301a:	2300      	movs	r3, #0
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800302c:	4935      	ldr	r1, [pc, #212]	@ (8003104 <HAL_GPIO_Init+0x2ec>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303a:	4b38      	ldr	r3, [pc, #224]	@ (800311c <HAL_GPIO_Init+0x304>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305e:	4a2f      	ldr	r2, [pc, #188]	@ (800311c <HAL_GPIO_Init+0x304>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003064:	4b2d      	ldr	r3, [pc, #180]	@ (800311c <HAL_GPIO_Init+0x304>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003088:	4a24      	ldr	r2, [pc, #144]	@ (800311c <HAL_GPIO_Init+0x304>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308e:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_GPIO_Init+0x304>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b2:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <HAL_GPIO_Init+0x304>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b8:	4b18      	ldr	r3, [pc, #96]	@ (800311c <HAL_GPIO_Init+0x304>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030dc:	4a0f      	ldr	r2, [pc, #60]	@ (800311c <HAL_GPIO_Init+0x304>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f67f aea2 	bls.w	8002e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3724      	adds	r7, #36	@ 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40013c00 	.word	0x40013c00

08003120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e001      	b.n	8003142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003160:	787b      	ldrb	r3, [r7, #1]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800316c:	e003      	b.n	8003176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	041a      	lsls	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	619a      	str	r2, [r3, #24]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800318e:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800319a:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f806 	bl	80031b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40013c00 	.word	0x40013c00

080031b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af02      	add	r7, sp, #8
 80031d0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e101      	b.n	80033e0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f009 fbfc 	bl	800c9f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800320a:	d102      	bne.n	8003212 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f003 f96f 	bl	80064fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7c1a      	ldrb	r2, [r3, #16]
 8003224:	f88d 2000 	strb.w	r2, [sp]
 8003228:	3304      	adds	r3, #4
 800322a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322c:	f003 f84e 	bl	80062cc <USB_CoreInit>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0ce      	b.n	80033e0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f967 	bl	800651c <USB_SetCurrentMode>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0bf      	b.n	80033e0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e04a      	b.n	80032fc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3315      	adds	r3, #21
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3314      	adds	r3, #20
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	b298      	uxth	r0, r3
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	332e      	adds	r3, #46	@ 0x2e
 80032a2:	4602      	mov	r2, r0
 80032a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3318      	adds	r3, #24
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	331c      	adds	r3, #28
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3320      	adds	r3, #32
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3324      	adds	r3, #36	@ 0x24
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	3301      	adds	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	791b      	ldrb	r3, [r3, #4]
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	429a      	cmp	r2, r3
 8003304:	d3af      	bcc.n	8003266 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
 800330a:	e044      	b.n	8003396 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	3301      	adds	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	791b      	ldrb	r3, [r3, #4]
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	429a      	cmp	r2, r3
 800339e:	d3b5      	bcc.n	800330c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7c1a      	ldrb	r2, [r3, #16]
 80033a8:	f88d 2000 	strb.w	r2, [sp]
 80033ac:	3304      	adds	r3, #4
 80033ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b0:	f003 f900 	bl	80065b4 <USB_DevInit>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00c      	b.n	80033e0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 f944 	bl	8007666 <USB_DevDisconnect>

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_PCD_Start+0x1c>
 8003400:	2302      	movs	r3, #2
 8003402:	e022      	b.n	800344a <HAL_PCD_Start+0x62>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f003 f851 	bl	80064d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 f8f2 	bl	8007624 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003452:	b590      	push	{r4, r7, lr}
 8003454:	b08d      	sub	sp, #52	@ 0x34
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f004 f9b0 	bl	80077ce <USB_GetMode>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 848c 	bne.w	8003d8e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f004 f914 	bl	80076a8 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8482 	beq.w	8003d8c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 f901 	bl	80076a8 <USB_ReadInterrupts>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d107      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f002 0202 	and.w	r2, r2, #2
 80034be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f004 f8ef 	bl	80076a8 <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d161      	bne.n	8003598 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0210 	bic.w	r2, r2, #16
 80034e2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	3304      	adds	r3, #4
 8003502:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	0c5b      	lsrs	r3, r3, #17
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2b02      	cmp	r3, #2
 800350e:	d124      	bne.n	800355a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d035      	beq.n	8003588 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352a:	b29b      	uxth	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	6a38      	ldr	r0, [r7, #32]
 8003530:	f003 ff26 	bl	8007380 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003540:	441a      	add	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003552:	441a      	add	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	615a      	str	r2, [r3, #20]
 8003558:	e016      	b.n	8003588 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	0c5b      	lsrs	r3, r3, #17
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	2b06      	cmp	r3, #6
 8003564:	d110      	bne.n	8003588 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800356c:	2208      	movs	r2, #8
 800356e:	4619      	mov	r1, r3
 8003570:	6a38      	ldr	r0, [r7, #32]
 8003572:	f003 ff05 	bl	8007380 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003582:	441a      	add	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0210 	orr.w	r2, r2, #16
 8003596:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f004 f883 	bl	80076a8 <USB_ReadInterrupts>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035ac:	f040 80a7 	bne.w	80036fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 f888 	bl	80076ce <USB_ReadDevAllOutEpInterrupt>
 80035be:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80035c0:	e099      	b.n	80036f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 808e 	beq.w	80036ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f004 f8ac 	bl	8007736 <USB_ReadDevOutEPInterrupt>
 80035de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	2301      	movs	r3, #1
 80035fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fea2 	bl	8004348 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361a:	461a      	mov	r2, r3
 800361c:	2308      	movs	r3, #8
 800361e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ff78 	bl	8004518 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	2310      	movs	r3, #16
 8003642:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d030      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d109      	bne.n	800366e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003668:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800366c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800366e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	78db      	ldrb	r3, [r3, #3]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d108      	bne.n	800369e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2200      	movs	r2, #0
 8003690:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f009 faa7 	bl	800cbec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036aa:	461a      	mov	r2, r3
 80036ac:	2302      	movs	r3, #2
 80036ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c6:	461a      	mov	r2, r3
 80036c8:	2320      	movs	r3, #32
 80036ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e2:	461a      	mov	r2, r3
 80036e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f47f af62 	bne.w	80035c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 ffd0 	bl	80076a8 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800370e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003712:	f040 80db 	bne.w	80038cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f003 fff1 	bl	8007702 <USB_ReadDevAllInEpInterrupt>
 8003720:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003726:	e0cd      	b.n	80038c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80c2 	beq.w	80038b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f004 f817 	bl	8007772 <USB_ReadDevInEPInterrupt>
 8003744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d057      	beq.n	8003800 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	2201      	movs	r2, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	43db      	mvns	r3, r3
 800376a:	69f9      	ldr	r1, [r7, #28]
 800376c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003770:	4013      	ands	r3, r2
 8003772:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003780:	461a      	mov	r2, r3
 8003782:	2301      	movs	r3, #1
 8003784:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	799b      	ldrb	r3, [r3, #6]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d132      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3320      	adds	r3, #32
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4403      	add	r3, r0
 80037ae:	331c      	adds	r3, #28
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4419      	add	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4403      	add	r3, r0
 80037c2:	3320      	adds	r3, #32
 80037c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d113      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x3a2>
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3324      	adds	r3, #36	@ 0x24
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037ec:	461a      	mov	r2, r3
 80037ee:	2101      	movs	r1, #1
 80037f0:	f004 f81e 	bl	8007830 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f009 f97b 	bl	800caf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003816:	461a      	mov	r2, r3
 8003818:	2308      	movs	r3, #8
 800381a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003832:	461a      	mov	r2, r3
 8003834:	2310      	movs	r3, #16
 8003836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384e:	461a      	mov	r2, r3
 8003850:	2340      	movs	r3, #64	@ 0x40
 8003852:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d023      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800385e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003860:	6a38      	ldr	r0, [r7, #32]
 8003862:	f003 f80b 	bl	800687c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3310      	adds	r3, #16
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	78db      	ldrb	r3, [r3, #3]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d108      	bne.n	8003894 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	b2db      	uxtb	r3, r3
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f009 f9be 	bl	800cc10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a0:	461a      	mov	r2, r3
 80038a2:	2302      	movs	r3, #2
 80038a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fcbb 	bl	800422e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	3301      	adds	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f47f af2e 	bne.w	8003728 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 fee9 	bl	80076a8 <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038e0:	d122      	bne.n	8003928 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d108      	bne.n	8003912 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003908:	2100      	movs	r1, #0
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fea2 	bl	8004654 <HAL_PCDEx_LPM_Callback>
 8003910:	e002      	b.n	8003918 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f009 f95c 	bl	800cbd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f003 febb 	bl	80076a8 <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800393c:	d112      	bne.n	8003964 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f009 f918 	bl	800cb84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003962:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f003 fe9d 	bl	80076a8 <USB_ReadInterrupts>
 800396e:	4603      	mov	r3, r0
 8003970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003978:	f040 80b7 	bne.w	8003aea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2110      	movs	r1, #16
 8003996:	4618      	mov	r0, r3
 8003998:	f002 ff70 	bl	800687c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039a0:	e046      	b.n	8003a30 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ae:	461a      	mov	r2, r3
 80039b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c6:	0151      	lsls	r1, r2, #5
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	440a      	add	r2, r1
 80039cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e2:	461a      	mov	r2, r3
 80039e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039fa:	0151      	lsls	r1, r2, #5
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	440a      	add	r2, r1
 8003a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a1a:	0151      	lsls	r1, r2, #5
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	440a      	add	r2, r1
 8003a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a28:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	791b      	ldrb	r3, [r3, #4]
 8003a34:	461a      	mov	r2, r3
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d3b2      	bcc.n	80039a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a4a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003a4e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7bdb      	ldrb	r3, [r3, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a68:	f043 030b 	orr.w	r3, r3, #11
 8003a6c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a7e:	f043 030b 	orr.w	r3, r3, #11
 8003a82:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a84:	e015      	b.n	8003ab2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a98:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003a9c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aac:	f043 030b 	orr.w	r3, r3, #11
 8003ab0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003ac4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f003 feab 	bl	8007830 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f003 fdda 	bl	80076a8 <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afe:	d123      	bne.n	8003b48 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f003 fe70 	bl	80077ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 ff2d 	bl	800696e <USB_GetDevSpeed>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681c      	ldr	r4, [r3, #0]
 8003b20:	f001 f9c8 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8003b24:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f002 fc31 	bl	8006394 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f009 f807 	bl	800cb46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fdab 	bl	80076a8 <USB_ReadInterrupts>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d10a      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f008 ffe4 	bl	800cb2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 0208 	and.w	r2, r2, #8
 8003b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f003 fd96 	bl	80076a8 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b80      	cmp	r3, #128	@ 0x80
 8003b84:	d123      	bne.n	8003bce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b92:	2301      	movs	r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b96:	e014      	b.n	8003bc2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fb08 	bl	80041cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	791b      	ldrb	r3, [r3, #4]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d3e4      	bcc.n	8003b98 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 fd68 	bl	80076a8 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003be2:	d13c      	bne.n	8003c5e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be4:	2301      	movs	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be8:	e02b      	b.n	8003c42 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3318      	adds	r3, #24
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d115      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da12      	bge.n	8003c3c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	3317      	adds	r3, #23
 8003c26:	2201      	movs	r2, #1
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fac8 	bl	80041cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	3301      	adds	r3, #1
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	791b      	ldrb	r3, [r3, #4]
 8003c46:	461a      	mov	r2, r3
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d3cd      	bcc.n	8003bea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f003 fd20 	bl	80076a8 <USB_ReadInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c72:	d156      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c74:	2301      	movs	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c78:	e045      	b.n	8003d06 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d12e      	bne.n	8003d00 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ca2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da2b      	bge.n	8003d00 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003cb4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d121      	bne.n	8003d00 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cfc:	6053      	str	r3, [r2, #4]
            break;
 8003cfe:	e008      	b.n	8003d12 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	3301      	adds	r3, #1
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	791b      	ldrb	r3, [r3, #4]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d3b3      	bcc.n	8003c7a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f003 fcbe 	bl	80076a8 <USB_ReadInterrupts>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d36:	d10a      	bne.n	8003d4e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f008 ff7b 	bl	800cc34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 fca8 	bl	80076a8 <USB_ReadInterrupts>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d115      	bne.n	8003d8e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f008 ff6b 	bl	800cc50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	e000      	b.n	8003d8e <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d8c:	bf00      	nop
    }
  }
}
 8003d8e:	3734      	adds	r7, #52	@ 0x34
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}

08003d94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_PCD_SetAddress+0x1a>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e012      	b.n	8003dd4 <HAL_PCD_SetAddress+0x40>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 fc07 	bl	80075d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	70fb      	strb	r3, [r7, #3]
 8003dee:	460b      	mov	r3, r1
 8003df0:	803b      	strh	r3, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da0f      	bge.n	8003e22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	f003 020f 	and.w	r2, r3, #15
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	3310      	adds	r3, #16
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	3304      	adds	r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	705a      	strb	r2, [r3, #1]
 8003e20:	e00f      	b.n	8003e42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	f003 020f 	and.w	r2, r3, #15
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	3304      	adds	r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e4e:	883a      	ldrh	r2, [r7, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	78ba      	ldrb	r2, [r7, #2]
 8003e58:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e6c:	78bb      	ldrb	r3, [r7, #2]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d102      	bne.n	8003e78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_PCD_EP_Open+0xaa>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e00e      	b.n	8003ea4 <HAL_PCD_EP_Open+0xc8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 fd8f 	bl	80069b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da0f      	bge.n	8003ee0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	3310      	adds	r3, #16
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	705a      	strb	r2, [r3, #1]
 8003ede:	e00f      	b.n	8003f00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_PCD_EP_Close+0x6e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e00e      	b.n	8003f38 <HAL_PCD_EP_Close+0x8c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 fdcd 	bl	8006ac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	7afb      	ldrb	r3, [r7, #11]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	799b      	ldrb	r3, [r3, #6]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d102      	bne.n	8003f9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	799b      	ldrb	r3, [r3, #6]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	f002 fe6a 	bl	8006c80 <USB_EPStartXfer>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003fd8:	681b      	ldr	r3, [r3, #0]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	3310      	adds	r3, #16
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	3304      	adds	r3, #4
 800400c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2201      	movs	r2, #1
 8004024:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004026:	7afb      	ldrb	r3, [r7, #11]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	b2da      	uxtb	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	799b      	ldrb	r3, [r3, #6]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d102      	bne.n	8004040 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	799b      	ldrb	r3, [r3, #6]
 8004048:	461a      	mov	r2, r3
 800404a:	6979      	ldr	r1, [r7, #20]
 800404c:	f002 fe18 	bl	8006c80 <USB_EPStartXfer>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	7912      	ldrb	r2, [r2, #4]
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e04f      	b.n	8004118 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407c:	2b00      	cmp	r3, #0
 800407e:	da0f      	bge.n	80040a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3310      	adds	r3, #16
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	705a      	strb	r2, [r3, #1]
 800409e:	e00d      	b.n	80040bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	3304      	adds	r3, #4
 80040b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_PCD_EP_SetStall+0x82>
 80040d8:	2302      	movs	r3, #2
 80040da:	e01d      	b.n	8004118 <HAL_PCD_EP_SetStall+0xbe>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 f9a0 	bl	8007430 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7999      	ldrb	r1, [r3, #6]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004108:	461a      	mov	r2, r3
 800410a:	f003 fb91 	bl	8007830 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	7912      	ldrb	r2, [r2, #4]
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e042      	b.n	80041c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800413e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	da0f      	bge.n	8004166 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	3310      	adds	r3, #16
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	705a      	strb	r2, [r3, #1]
 8004164:	e00f      	b.n	8004186 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_PCD_EP_ClrStall+0x86>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e00e      	b.n	80041c4 <HAL_PCD_EP_ClrStall+0xa4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 f9a9 	bl	800750c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	da0c      	bge.n	80041fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	3310      	adds	r3, #16
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	3304      	adds	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e00c      	b.n	8004214 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68f9      	ldr	r1, [r7, #12]
 800421a:	4618      	mov	r0, r3
 800421c:	f002 ffc8 	bl	80071b0 <USB_EPStopXfer>
 8004220:	4603      	mov	r3, r0
 8004222:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004224:	7afb      	ldrb	r3, [r7, #11]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08a      	sub	sp, #40	@ 0x28
 8004232:	af02      	add	r7, sp, #8
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3310      	adds	r3, #16
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	429a      	cmp	r2, r3
 8004260:	d901      	bls.n	8004266 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06b      	b.n	800433e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	429a      	cmp	r2, r3
 800427a:	d902      	bls.n	8004282 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3303      	adds	r3, #3
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800428a:	e02a      	b.n	80042e2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d902      	bls.n	80042a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3303      	adds	r3, #3
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	68d9      	ldr	r1, [r3, #12]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4603      	mov	r3, r0
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f003 f81d 	bl	8007304 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	441a      	add	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	441a      	add	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d809      	bhi.n	800430c <PCD_WriteEmptyTxFifo+0xde>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004300:	429a      	cmp	r2, r3
 8004302:	d203      	bcs.n	800430c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1bf      	bne.n	800428c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	429a      	cmp	r2, r3
 8004316:	d811      	bhi.n	800433c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	2201      	movs	r2, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	43db      	mvns	r3, r3
 8004332:	6939      	ldr	r1, [r7, #16]
 8004334:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004338:	4013      	ands	r3, r2
 800433a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	333c      	adds	r3, #60	@ 0x3c
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	799b      	ldrb	r3, [r3, #6]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d17b      	bne.n	8004476 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4a61      	ldr	r2, [pc, #388]	@ (8004510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	f240 80b9 	bls.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80b3 	beq.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043aa:	461a      	mov	r2, r3
 80043ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b0:	6093      	str	r3, [r2, #8]
 80043b2:	e0a7      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2320      	movs	r3, #32
 80043ce:	6093      	str	r3, [r2, #8]
 80043d0:	e098      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f040 8093 	bne.w	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d90f      	bls.n	8004406 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004402:	6093      	str	r3, [r2, #8]
 8004404:	e07e      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	3304      	adds	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	440b      	add	r3, r1
 8004428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d114      	bne.n	8004468 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004450:	461a      	mov	r2, r3
 8004452:	2101      	movs	r1, #1
 8004454:	f003 f9ec 	bl	8007830 <USB_EP0_OutStart>
 8004458:	e006      	b.n	8004468 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	441a      	add	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f008 fb26 	bl	800cac0 <HAL_PCD_DataOutStageCallback>
 8004474:	e046      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4a26      	ldr	r2, [pc, #152]	@ (8004514 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d124      	bne.n	80044c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449a:	6093      	str	r3, [r2, #8]
 800449c:	e032      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b4:	461a      	mov	r2, r3
 80044b6:	2320      	movs	r3, #32
 80044b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f008 fafd 	bl	800cac0 <HAL_PCD_DataOutStageCallback>
 80044c6:	e01d      	b.n	8004504 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d114      	bne.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044f0:	461a      	mov	r2, r3
 80044f2:	2100      	movs	r1, #0
 80044f4:	f003 f99c 	bl	8007830 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f008 fade 	bl	800cac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	4f54300a 	.word	0x4f54300a
 8004514:	4f54310a 	.word	0x4f54310a

08004518 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	333c      	adds	r3, #60	@ 0x3c
 8004530:	3304      	adds	r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d90e      	bls.n	800456c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800456a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f008 fa95 	bl	800ca9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d90c      	bls.n	8004594 <PCD_EP_OutSetupPacket_int+0x7c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	799b      	ldrb	r3, [r3, #6]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800458c:	461a      	mov	r2, r3
 800458e:	2101      	movs	r1, #1
 8004590:	f003 f94e 	bl	8007830 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	4f54300a 	.word	0x4f54300a

080045a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
 80045b0:	4613      	mov	r3, r2
 80045b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045c2:	883b      	ldrh	r3, [r7, #0]
 80045c4:	0419      	lsls	r1, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80045d0:	e028      	b.n	8004624 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e00d      	b.n	8004602 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3340      	adds	r3, #64	@ 0x40
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4413      	add	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	3b01      	subs	r3, #1
 8004608:	429a      	cmp	r2, r3
 800460a:	d3ec      	bcc.n	80045e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800460c:	883b      	ldrh	r3, [r7, #0]
 800460e:	0418      	lsls	r0, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	3b01      	subs	r3, #1
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	4302      	orrs	r2, r0
 800461c:	3340      	adds	r3, #64	@ 0x40
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e267      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468a:	4b88      	ldr	r3, [pc, #544]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b85      	ldr	r3, [pc, #532]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d112      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b82      	ldr	r3, [pc, #520]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b7e      	ldr	r3, [pc, #504]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d157      	bne.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e242      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x74>
 80046d2:	4b76      	ldr	r3, [pc, #472]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x98>
 80046ea:	4b70      	ldr	r3, [pc, #448]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6f      	ldr	r2, [pc, #444]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b6d      	ldr	r3, [pc, #436]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6c      	ldr	r2, [pc, #432]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 8004704:	4b69      	ldr	r3, [pc, #420]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a68      	ldr	r2, [pc, #416]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b66      	ldr	r3, [pc, #408]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a65      	ldr	r2, [pc, #404]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd ff7c 	bl	8002620 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd ff78 	bl	8002620 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e207      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b5b      	ldr	r3, [pc, #364]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xc0>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd ff68 	bl	8002620 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd ff64 	bl	8002620 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1f3      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	4b51      	ldr	r3, [pc, #324]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004782:	4b4a      	ldr	r3, [pc, #296]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b47      	ldr	r3, [pc, #284]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	2b08      	cmp	r3, #8
 8004798:	d11c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b44      	ldr	r3, [pc, #272]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1c7      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047be:	4b3b      	ldr	r3, [pc, #236]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4937      	ldr	r1, [pc, #220]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	e03a      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047dc:	4b34      	ldr	r3, [pc, #208]	@ (80048b0 <HAL_RCC_OscConfig+0x244>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd ff1d 	bl	8002620 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fd ff19 	bl	8002620 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1a8      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	4b2b      	ldr	r3, [pc, #172]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4925      	ldr	r1, [pc, #148]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	e015      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <HAL_RCC_OscConfig+0x244>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fd fefc 	bl	8002620 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482c:	f7fd fef8 	bl	8002620 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e187      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d036      	beq.n	80048c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485e:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <HAL_RCC_OscConfig+0x248>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd fedc 	bl	8002620 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fd fed8 	bl	8002620 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e167      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCC_OscConfig+0x240>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x200>
 800488a:	e01b      	b.n	80048c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_OscConfig+0x248>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fd fec5 	bl	8002620 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	e00e      	b.n	80048b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489a:	f7fd fec1 	bl	8002620 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d907      	bls.n	80048b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e150      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	42470000 	.word	0x42470000
 80048b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	4b88      	ldr	r3, [pc, #544]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ea      	bne.n	800489a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8097 	beq.w	8004a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d6:	4b81      	ldr	r3, [pc, #516]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	4b7d      	ldr	r3, [pc, #500]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	4a7c      	ldr	r2, [pc, #496]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048f2:	4b7a      	ldr	r3, [pc, #488]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b77      	ldr	r3, [pc, #476]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d118      	bne.n	8004940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	4b74      	ldr	r3, [pc, #464]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491a:	f7fd fe81 	bl	8002620 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fd fe7d 	bl	8002620 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e10c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x2ea>
 8004948:	4b64      	ldr	r3, [pc, #400]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494c:	4a63      	ldr	r2, [pc, #396]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6713      	str	r3, [r2, #112]	@ 0x70
 8004954:	e01c      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b05      	cmp	r3, #5
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x30c>
 800495e:	4b5f      	ldr	r3, [pc, #380]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004962:	4a5e      	ldr	r2, [pc, #376]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6713      	str	r3, [r2, #112]	@ 0x70
 800496a:	4b5c      	ldr	r3, [pc, #368]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	4a5b      	ldr	r2, [pc, #364]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6713      	str	r3, [r2, #112]	@ 0x70
 8004976:	e00b      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004978:	4b58      	ldr	r3, [pc, #352]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497c:	4a57      	ldr	r2, [pc, #348]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	@ 0x70
 8004984:	4b55      	ldr	r3, [pc, #340]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	4a54      	ldr	r2, [pc, #336]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fd fe42 	bl	8002620 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fd fe3e 	bl	8002620 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0cb      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	4b49      	ldr	r3, [pc, #292]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ee      	beq.n	80049a0 <HAL_RCC_OscConfig+0x334>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c4:	f7fd fe2c 	bl	8002620 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fd fe28 	bl	8002620 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e0b5      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e2:	4b3e      	ldr	r3, [pc, #248]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ee      	bne.n	80049cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b39      	ldr	r3, [pc, #228]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	4a38      	ldr	r2, [pc, #224]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a1 	beq.w	8004b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0a:	4b34      	ldr	r3, [pc, #208]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d05c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d141      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b31      	ldr	r3, [pc, #196]	@ (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fd fdfc 	bl	8002620 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fd fdf8 	bl	8002620 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e087      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	3b01      	subs	r3, #1
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	491b      	ldr	r1, [pc, #108]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fdd1 	bl	8002620 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fd fdcd 	bl	8002620 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e05c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x416>
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fdba 	bl	8002620 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd fdb6 	bl	8002620 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e045      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_OscConfig+0x470>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x444>
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e038      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d028      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d121      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11a      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cc      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b68      	ldr	r3, [pc, #416]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d90c      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b63      	ldr	r3, [pc, #396]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b8      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb0:	4b59      	ldr	r3, [pc, #356]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc8:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b50      	ldr	r3, [pc, #320]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	494d      	ldr	r1, [pc, #308]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d044      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e067      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b37      	ldr	r3, [pc, #220]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4934      	ldr	r1, [pc, #208]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fd fce8 	bl	8002620 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fd fce4 	bl	8002620 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b25      	ldr	r3, [pc, #148]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20c      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e032      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4916      	ldr	r1, [pc, #88]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cce:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	490e      	ldr	r1, [pc, #56]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce2:	f000 f821 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	490a      	ldr	r1, [pc, #40]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	5ccb      	ldrb	r3, [r1, r3]
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	@ (8004d20 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fd fa8c 	bl	8002220 <HAL_InitTick>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	08010c70 	.word	0x08010c70
 8004d20:	20000004 	.word	0x20000004
 8004d24:	20000008 	.word	0x20000008

08004d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b090      	sub	sp, #64	@ 0x40
 8004d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d34:	2300      	movs	r3, #0
 8004d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	4b59      	ldr	r3, [pc, #356]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x40>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	f200 80a1 	bhi.w	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x34>
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5a:	e09b      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b53      	ldr	r3, [pc, #332]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004d60:	e09b      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d62:	4b53      	ldr	r3, [pc, #332]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d66:	e098      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d68:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d70:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d72:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d028      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	2200      	movs	r2, #0
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d90:	2100      	movs	r1, #0
 8004d92:	4b47      	ldr	r3, [pc, #284]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d94:	fb03 f201 	mul.w	r2, r3, r1
 8004d98:	2300      	movs	r3, #0
 8004d9a:	fb00 f303 	mul.w	r3, r0, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	4a43      	ldr	r2, [pc, #268]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004da2:	fba0 1202 	umull	r1, r2, r0, r2
 8004da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da8:	460a      	mov	r2, r1
 8004daa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dae:	4413      	add	r3, r2
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db4:	2200      	movs	r2, #0
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004dc2:	f7fb fef9 	bl	8000bb8 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4613      	mov	r3, r2
 8004dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dce:	e053      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	617a      	str	r2, [r7, #20]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004de2:	f04f 0b00 	mov.w	fp, #0
 8004de6:	4652      	mov	r2, sl
 8004de8:	465b      	mov	r3, fp
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df8:	0150      	lsls	r0, r2, #5
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8004e02:	eb63 090b 	sbc.w	r9, r3, fp
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	00eb      	lsls	r3, r5, #3
 8004e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e30:	00e2      	lsls	r2, r4, #3
 8004e32:	4614      	mov	r4, r2
 8004e34:	461d      	mov	r5, r3
 8004e36:	eb14 030a 	adds.w	r3, r4, sl
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	eb45 030b 	adc.w	r3, r5, fp
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	028b      	lsls	r3, r1, #10
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e58:	4621      	mov	r1, r4
 8004e5a:	028a      	lsls	r2, r1, #10
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e62:	2200      	movs	r2, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6c:	f7fb fea4 	bl	8000bb8 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	3301      	adds	r3, #1
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3740      	adds	r7, #64	@ 0x40
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	017d7840 	.word	0x017d7840

08004eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	@ (8004ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000004 	.word	0x20000004

08004ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0b5b      	lsrs	r3, r3, #13
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	@ (8004ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	08010c80 	.word	0x08010c80

08004ef4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	220f      	movs	r2, #15
 8004f02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f04:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0203 	and.w	r2, r3, #3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f10:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f28:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <HAL_RCC_GetClockConfig+0x5c>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f36:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <HAL_RCC_GetClockConfig+0x60>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0207 	and.w	r2, r3, #7
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	601a      	str	r2, [r3, #0]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40023800 	.word	0x40023800
 8004f54:	40023c00 	.word	0x40023c00

08004f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e07b      	b.n	8005062 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d108      	bne.n	8004f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f7a:	d009      	beq.n	8004f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	61da      	str	r2, [r3, #28]
 8004f82:	e005      	b.n	8004f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fd f82e 	bl	800200c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	ea42 0103 	orr.w	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0104 	and.w	r1, r3, #4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	f003 0210 	and.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08c      	sub	sp, #48	@ 0x30
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005078:	2301      	movs	r3, #1
 800507a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x26>
 800508c:	2302      	movs	r3, #2
 800508e:	e198      	b.n	80053c2 <HAL_SPI_TransmitReceive+0x358>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005098:	f7fd fac2 	bl	8002620 <HAL_GetTick>
 800509c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d00f      	beq.n	80050da <HAL_SPI_TransmitReceive+0x70>
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c0:	d107      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x68>
 80050ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d003      	beq.n	80050da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
 80050d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80050d8:	e16d      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x82>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x82>
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d103      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80050f2:	e160      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d003      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2205      	movs	r2, #5
 8005104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	887a      	ldrh	r2, [r7, #2]
 800511e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	887a      	ldrh	r2, [r7, #2]
 800512a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d007      	beq.n	800515c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800515a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005164:	d17c      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x10a>
 800516e:	8b7b      	ldrh	r3, [r7, #26]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d16a      	bne.n	800524a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005178:	881a      	ldrh	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	1c9a      	adds	r2, r3, #2
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005198:	e057      	b.n	800524a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d11b      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x176>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <HAL_SPI_TransmitReceive+0x176>
 80051b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d113      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d119      	bne.n	8005222 <HAL_SPI_TransmitReceive+0x1b8>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d014      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005202:	b292      	uxth	r2, r2
 8005204:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800521e:	2301      	movs	r3, #1
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005222:	f7fd f9fd 	bl	8002620 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800522e:	429a      	cmp	r2, r3
 8005230:	d80b      	bhi.n	800524a <HAL_SPI_TransmitReceive+0x1e0>
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d007      	beq.n	800524a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005248:	e0b5      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1a2      	bne.n	800519a <HAL_SPI_TransmitReceive+0x130>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d19d      	bne.n	800519a <HAL_SPI_TransmitReceive+0x130>
 800525e:	e080      	b.n	8005362 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_SPI_TransmitReceive+0x204>
 8005268:	8b7b      	ldrh	r3, [r7, #26]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d16f      	bne.n	800534e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	330c      	adds	r3, #12
 8005278:	7812      	ldrb	r2, [r2, #0]
 800527a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005294:	e05b      	b.n	800534e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d11c      	bne.n	80052de <HAL_SPI_TransmitReceive+0x274>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d017      	beq.n	80052de <HAL_SPI_TransmitReceive+0x274>
 80052ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d114      	bne.n	80052de <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d119      	bne.n	8005320 <HAL_SPI_TransmitReceive+0x2b6>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d014      	beq.n	8005320 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800531c:	2301      	movs	r3, #1
 800531e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005320:	f7fd f97e 	bl	8002620 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800532c:	429a      	cmp	r2, r3
 800532e:	d803      	bhi.n	8005338 <HAL_SPI_TransmitReceive+0x2ce>
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d102      	bne.n	800533e <HAL_SPI_TransmitReceive+0x2d4>
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	2b00      	cmp	r3, #0
 800533c:	d107      	bne.n	800534e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800534c:	e033      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d19e      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x22c>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d199      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005364:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f8b8 	bl	80054dc <SPI_EndRxTxTransaction>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800537e:	e01a      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ac:	e003      	b.n	80053b6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80053be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3730      	adds	r7, #48	@ 0x30
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053dc:	f7fd f920 	bl	8002620 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	4413      	add	r3, r2
 80053ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053ec:	f7fd f918 	bl	8002620 <HAL_GetTick>
 80053f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053f2:	4b39      	ldr	r3, [pc, #228]	@ (80054d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	015b      	lsls	r3, r3, #5
 80053f8:	0d1b      	lsrs	r3, r3, #20
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005402:	e054      	b.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d050      	beq.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800540c:	f7fd f908 	bl	8002620 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	429a      	cmp	r2, r3
 800541a:	d902      	bls.n	8005422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d13d      	bne.n	800549e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800543a:	d111      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005444:	d004      	beq.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544e:	d107      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800545e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005468:	d10f      	bne.n	800548a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e017      	b.n	80054ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d19b      	bne.n	8005404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000004 	.word	0x20000004

080054dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2201      	movs	r2, #1
 80054f0:	2102      	movs	r1, #2
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff ff6a 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e032      	b.n	8005574 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800550e:	4b1b      	ldr	r3, [pc, #108]	@ (800557c <SPI_EndRxTxTransaction+0xa0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1b      	ldr	r2, [pc, #108]	@ (8005580 <SPI_EndRxTxTransaction+0xa4>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	0d5b      	lsrs	r3, r3, #21
 800551a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800552c:	d112      	bne.n	8005554 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	2180      	movs	r1, #128	@ 0x80
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff ff47 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d016      	beq.n	8005572 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	f043 0220 	orr.w	r2, r3, #32
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e00f      	b.n	8005574 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	3b01      	subs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d0f2      	beq.n	8005554 <SPI_EndRxTxTransaction+0x78>
 800556e:	e000      	b.n	8005572 <SPI_EndRxTxTransaction+0x96>
        break;
 8005570:	bf00      	nop
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20000004 	.word	0x20000004
 8005580:	165e9f81 	.word	0x165e9f81

08005584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e041      	b.n	800561a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f839 	bl	8005622 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 fbc2 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e044      	b.n	80056da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1e      	ldr	r2, [pc, #120]	@ (80056e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567a:	d013      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x6c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <HAL_TIM_Base_Start_IT+0xb4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a19      	ldr	r2, [pc, #100]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x6c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a16      	ldr	r2, [pc, #88]	@ (80056f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d111      	bne.n	80056c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	d010      	beq.n	80056d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c6:	e007      	b.n	80056d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40014000 	.word	0x40014000

080056fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e041      	b.n	8005792 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fd1e 	bl	8002164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 fb06 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <HAL_TIM_PWM_Start_IT+0x28>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	e022      	b.n	800580a <HAL_TIM_PWM_Start_IT+0x6e>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d109      	bne.n	80057de <HAL_TIM_PWM_Start_IT+0x42>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e015      	b.n	800580a <HAL_TIM_PWM_Start_IT+0x6e>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d109      	bne.n	80057f8 <HAL_TIM_PWM_Start_IT+0x5c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e008      	b.n	800580a <HAL_TIM_PWM_Start_IT+0x6e>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e0b3      	b.n	800597a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start_IT+0x86>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005820:	e013      	b.n	800584a <HAL_TIM_PWM_Start_IT+0xae>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start_IT+0x96>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005830:	e00b      	b.n	800584a <HAL_TIM_PWM_Start_IT+0xae>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start_IT+0xa6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005840:	e003      	b.n	800584a <HAL_TIM_PWM_Start_IT+0xae>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d841      	bhi.n	80058d4 <HAL_TIM_PWM_Start_IT+0x138>
 8005850:	a201      	add	r2, pc, #4	@ (adr r2, 8005858 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800588d 	.word	0x0800588d
 800585c:	080058d5 	.word	0x080058d5
 8005860:	080058d5 	.word	0x080058d5
 8005864:	080058d5 	.word	0x080058d5
 8005868:	0800589f 	.word	0x0800589f
 800586c:	080058d5 	.word	0x080058d5
 8005870:	080058d5 	.word	0x080058d5
 8005874:	080058d5 	.word	0x080058d5
 8005878:	080058b1 	.word	0x080058b1
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058d5 	.word	0x080058d5
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058c3 	.word	0x080058c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0202 	orr.w	r2, r2, #2
 800589a:	60da      	str	r2, [r3, #12]
      break;
 800589c:	e01d      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0204 	orr.w	r2, r2, #4
 80058ac:	60da      	str	r2, [r3, #12]
      break;
 80058ae:	e014      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	60da      	str	r2, [r3, #12]
      break;
 80058c0:	e00b      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0210 	orr.w	r2, r2, #16
 80058d0:	60da      	str	r2, [r3, #12]
      break;
 80058d2:	e002      	b.n	80058da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      break;
 80058d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d14b      	bne.n	8005978 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2201      	movs	r2, #1
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fc47 	bl	800617c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	@ (8005984 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d107      	bne.n	8005908 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1d      	ldr	r2, [pc, #116]	@ (8005984 <HAL_TIM_PWM_Start_IT+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591a:	d013      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a18      	ldr	r2, [pc, #96]	@ (800598c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIM_PWM_Start_IT+0x1a8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a15      	ldr	r2, [pc, #84]	@ (8005994 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d010      	beq.n	8005978 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e007      	b.n	8005978 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40014000 	.word	0x40014000

08005998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0202 	mvn.w	r2, #2
 80059cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f994 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f986 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f997 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d020      	beq.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0204 	mvn.w	r2, #4
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f96e 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f960 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f971 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d020      	beq.n	8005a94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01b      	beq.n	8005a94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0208 	mvn.w	r2, #8
 8005a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2204      	movs	r2, #4
 8005a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f948 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f93a 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f94b 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d020      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01b      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0210 	mvn.w	r2, #16
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f922 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f914 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f925 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00c      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0201 	mvn.w	r2, #1
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fc fa40 	bl	8001f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fbc8 	bl	80062b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f8f6 	bl	8005d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0220 	mvn.w	r2, #32
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb9a 	bl	80062a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e0ae      	b.n	8005cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b0c      	cmp	r3, #12
 8005ba2:	f200 809f 	bhi.w	8005ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005be1 	.word	0x08005be1
 8005bb0:	08005ce5 	.word	0x08005ce5
 8005bb4:	08005ce5 	.word	0x08005ce5
 8005bb8:	08005ce5 	.word	0x08005ce5
 8005bbc:	08005c21 	.word	0x08005c21
 8005bc0:	08005ce5 	.word	0x08005ce5
 8005bc4:	08005ce5 	.word	0x08005ce5
 8005bc8:	08005ce5 	.word	0x08005ce5
 8005bcc:	08005c63 	.word	0x08005c63
 8005bd0:	08005ce5 	.word	0x08005ce5
 8005bd4:	08005ce5 	.word	0x08005ce5
 8005bd8:	08005ce5 	.word	0x08005ce5
 8005bdc:	08005ca3 	.word	0x08005ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f93c 	bl	8005e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0204 	bic.w	r2, r2, #4
 8005c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6999      	ldr	r1, [r3, #24]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	619a      	str	r2, [r3, #24]
      break;
 8005c1e:	e064      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f982 	bl	8005f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6999      	ldr	r1, [r3, #24]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	619a      	str	r2, [r3, #24]
      break;
 8005c60:	e043      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f9cd 	bl	8006008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0208 	orr.w	r2, r2, #8
 8005c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0204 	bic.w	r2, r2, #4
 8005c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69d9      	ldr	r1, [r3, #28]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	61da      	str	r2, [r3, #28]
      break;
 8005ca0:	e023      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fa17 	bl	80060dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69d9      	ldr	r1, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	021a      	lsls	r2, r3, #8
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	61da      	str	r2, [r3, #28]
      break;
 8005ce2:	e002      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e48 <TIM_Base_SetConfig+0xfc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00f      	beq.n	8005d84 <TIM_Base_SetConfig+0x38>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6a:	d00b      	beq.n	8005d84 <TIM_Base_SetConfig+0x38>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a37      	ldr	r2, [pc, #220]	@ (8005e4c <TIM_Base_SetConfig+0x100>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d007      	beq.n	8005d84 <TIM_Base_SetConfig+0x38>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a36      	ldr	r2, [pc, #216]	@ (8005e50 <TIM_Base_SetConfig+0x104>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0x38>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a35      	ldr	r2, [pc, #212]	@ (8005e54 <TIM_Base_SetConfig+0x108>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d108      	bne.n	8005d96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2b      	ldr	r2, [pc, #172]	@ (8005e48 <TIM_Base_SetConfig+0xfc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01b      	beq.n	8005dd6 <TIM_Base_SetConfig+0x8a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da4:	d017      	beq.n	8005dd6 <TIM_Base_SetConfig+0x8a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a28      	ldr	r2, [pc, #160]	@ (8005e4c <TIM_Base_SetConfig+0x100>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <TIM_Base_SetConfig+0x8a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a27      	ldr	r2, [pc, #156]	@ (8005e50 <TIM_Base_SetConfig+0x104>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00f      	beq.n	8005dd6 <TIM_Base_SetConfig+0x8a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a26      	ldr	r2, [pc, #152]	@ (8005e54 <TIM_Base_SetConfig+0x108>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_Base_SetConfig+0x8a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a25      	ldr	r2, [pc, #148]	@ (8005e58 <TIM_Base_SetConfig+0x10c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a24      	ldr	r2, [pc, #144]	@ (8005e5c <TIM_Base_SetConfig+0x110>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_Base_SetConfig+0x8a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a23      	ldr	r2, [pc, #140]	@ (8005e60 <TIM_Base_SetConfig+0x114>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e48 <TIM_Base_SetConfig+0xfc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d103      	bne.n	8005e1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d105      	bne.n	8005e3a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]
  }
}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800

08005e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 0201 	bic.w	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f023 0302 	bic.w	r3, r3, #2
 8005eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a1c      	ldr	r2, [pc, #112]	@ (8005f2c <TIM_OC1_SetConfig+0xc8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10c      	bne.n	8005eda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0308 	bic.w	r3, r3, #8
 8005ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 0304 	bic.w	r3, r3, #4
 8005ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a13      	ldr	r2, [pc, #76]	@ (8005f2c <TIM_OC1_SetConfig+0xc8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d111      	bne.n	8005f06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	40010000 	.word	0x40010000

08005f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f023 0210 	bic.w	r2, r3, #16
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f023 0320 	bic.w	r3, r3, #32
 8005f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006004 <TIM_OC2_SetConfig+0xd4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10d      	bne.n	8005fac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <TIM_OC2_SetConfig+0xd4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d113      	bne.n	8005fdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000

08006008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1d      	ldr	r2, [pc, #116]	@ (80060d8 <TIM_OC3_SetConfig+0xd0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d10d      	bne.n	8006082 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800606c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a14      	ldr	r2, [pc, #80]	@ (80060d8 <TIM_OC3_SetConfig+0xd0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d113      	bne.n	80060b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	621a      	str	r2, [r3, #32]
}
 80060cc:	bf00      	nop
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40010000 	.word	0x40010000

080060dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a10      	ldr	r2, [pc, #64]	@ (8006178 <TIM_OC4_SetConfig+0x9c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d109      	bne.n	8006150 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	019b      	lsls	r3, r3, #6
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40010000 	.word	0x40010000

0800617c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2201      	movs	r2, #1
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	43db      	mvns	r3, r3
 800619e:	401a      	ands	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	431a      	orrs	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061dc:	2302      	movs	r3, #2
 80061de:	e050      	b.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1c      	ldr	r2, [pc, #112]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d018      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622c:	d013      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a16      	ldr	r2, [pc, #88]	@ (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d009      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a15      	ldr	r2, [pc, #84]	@ (800629c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a13      	ldr	r2, [pc, #76]	@ (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d10c      	bne.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800625c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4313      	orrs	r3, r2
 8006266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40010000 	.word	0x40010000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40014000 	.word	0x40014000

080062a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062cc:	b084      	sub	sp, #16
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	f107 001c 	add.w	r0, r7, #28
 80062da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d123      	bne.n	800632e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80062fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800630e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006312:	2b01      	cmp	r3, #1
 8006314:	d105      	bne.n	8006322 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fae2 	bl	80078ec <USB_CoreReset>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
 800632c:	e01b      	b.n	8006366 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fad6 	bl	80078ec <USB_CoreReset>
 8006340:	4603      	mov	r3, r0
 8006342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006344:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38
 8006358:	e005      	b.n	8006366 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006366:	7fbb      	ldrb	r3, [r7, #30]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d10b      	bne.n	8006384 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f043 0206 	orr.w	r2, r3, #6
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006390:	b004      	add	sp, #16
 8006392:	4770      	bx	lr

08006394 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d165      	bne.n	8006474 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a41      	ldr	r2, [pc, #260]	@ (80064b0 <USB_SetTurnaroundTime+0x11c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d906      	bls.n	80063be <USB_SetTurnaroundTime+0x2a>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a40      	ldr	r2, [pc, #256]	@ (80064b4 <USB_SetTurnaroundTime+0x120>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d202      	bcs.n	80063be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063b8:	230f      	movs	r3, #15
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e062      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4a3c      	ldr	r2, [pc, #240]	@ (80064b4 <USB_SetTurnaroundTime+0x120>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d306      	bcc.n	80063d4 <USB_SetTurnaroundTime+0x40>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4a3b      	ldr	r2, [pc, #236]	@ (80064b8 <USB_SetTurnaroundTime+0x124>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d202      	bcs.n	80063d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063ce:	230e      	movs	r3, #14
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	e057      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4a38      	ldr	r2, [pc, #224]	@ (80064b8 <USB_SetTurnaroundTime+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d306      	bcc.n	80063ea <USB_SetTurnaroundTime+0x56>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a37      	ldr	r2, [pc, #220]	@ (80064bc <USB_SetTurnaroundTime+0x128>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d202      	bcs.n	80063ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063e4:	230d      	movs	r3, #13
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e04c      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4a33      	ldr	r2, [pc, #204]	@ (80064bc <USB_SetTurnaroundTime+0x128>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d306      	bcc.n	8006400 <USB_SetTurnaroundTime+0x6c>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4a32      	ldr	r2, [pc, #200]	@ (80064c0 <USB_SetTurnaroundTime+0x12c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d802      	bhi.n	8006400 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80063fa:	230c      	movs	r3, #12
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e041      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4a2f      	ldr	r2, [pc, #188]	@ (80064c0 <USB_SetTurnaroundTime+0x12c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d906      	bls.n	8006416 <USB_SetTurnaroundTime+0x82>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <USB_SetTurnaroundTime+0x130>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d802      	bhi.n	8006416 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006410:	230b      	movs	r3, #11
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e036      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4a2a      	ldr	r2, [pc, #168]	@ (80064c4 <USB_SetTurnaroundTime+0x130>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d906      	bls.n	800642c <USB_SetTurnaroundTime+0x98>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4a29      	ldr	r2, [pc, #164]	@ (80064c8 <USB_SetTurnaroundTime+0x134>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d802      	bhi.n	800642c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006426:	230a      	movs	r3, #10
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	e02b      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4a26      	ldr	r2, [pc, #152]	@ (80064c8 <USB_SetTurnaroundTime+0x134>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d906      	bls.n	8006442 <USB_SetTurnaroundTime+0xae>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4a25      	ldr	r2, [pc, #148]	@ (80064cc <USB_SetTurnaroundTime+0x138>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d202      	bcs.n	8006442 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800643c:	2309      	movs	r3, #9
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e020      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4a21      	ldr	r2, [pc, #132]	@ (80064cc <USB_SetTurnaroundTime+0x138>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d306      	bcc.n	8006458 <USB_SetTurnaroundTime+0xc4>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4a20      	ldr	r2, [pc, #128]	@ (80064d0 <USB_SetTurnaroundTime+0x13c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d802      	bhi.n	8006458 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006452:	2308      	movs	r3, #8
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	e015      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4a1d      	ldr	r2, [pc, #116]	@ (80064d0 <USB_SetTurnaroundTime+0x13c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d906      	bls.n	800646e <USB_SetTurnaroundTime+0xda>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <USB_SetTurnaroundTime+0x140>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d202      	bcs.n	800646e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006468:	2307      	movs	r3, #7
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e00a      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800646e:	2306      	movs	r3, #6
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e007      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800647a:	2309      	movs	r3, #9
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e001      	b.n	8006484 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006480:	2309      	movs	r3, #9
 8006482:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800649c:	431a      	orrs	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	00d8acbf 	.word	0x00d8acbf
 80064b4:	00e4e1c0 	.word	0x00e4e1c0
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	01067380 	.word	0x01067380
 80064c0:	011a499f 	.word	0x011a499f
 80064c4:	01312cff 	.word	0x01312cff
 80064c8:	014ca43f 	.word	0x014ca43f
 80064cc:	016e3600 	.word	0x016e3600
 80064d0:	01a6ab1f 	.word	0x01a6ab1f
 80064d4:	01e84800 	.word	0x01e84800

080064d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f043 0201 	orr.w	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d115      	bne.n	800656a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800654a:	200a      	movs	r0, #10
 800654c:	f7fc f874 	bl	8002638 <HAL_Delay>
      ms += 10U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	330a      	adds	r3, #10
 8006554:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 f939 	bl	80077ce <USB_GetMode>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d01e      	beq.n	80065a0 <USB_SetCurrentMode+0x84>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2bc7      	cmp	r3, #199	@ 0xc7
 8006566:	d9f0      	bls.n	800654a <USB_SetCurrentMode+0x2e>
 8006568:	e01a      	b.n	80065a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800657c:	200a      	movs	r0, #10
 800657e:	f7fc f85b 	bl	8002638 <HAL_Delay>
      ms += 10U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	330a      	adds	r3, #10
 8006586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 f920 	bl	80077ce <USB_GetMode>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <USB_SetCurrentMode+0x84>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2bc7      	cmp	r3, #199	@ 0xc7
 8006598:	d9f0      	bls.n	800657c <USB_SetCurrentMode+0x60>
 800659a:	e001      	b.n	80065a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e005      	b.n	80065ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80065a4:	d101      	bne.n	80065aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b4:	b084      	sub	sp, #16
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	e009      	b.n	80065e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3340      	adds	r3, #64	@ 0x40
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3301      	adds	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b0e      	cmp	r3, #14
 80065ec:	d9f2      	bls.n	80065d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11c      	bne.n	8006630 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
 800662e:	e00b      	b.n	8006648 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800664e:	461a      	mov	r2, r3
 8006650:	2300      	movs	r3, #0
 8006652:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006654:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006658:	2b01      	cmp	r3, #1
 800665a:	d10d      	bne.n	8006678 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f968 	bl	800693c <USB_SetDevSpeed>
 800666c:	e008      	b.n	8006680 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800666e:	2101      	movs	r1, #1
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f963 	bl	800693c <USB_SetDevSpeed>
 8006676:	e003      	b.n	8006680 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006678:	2103      	movs	r1, #3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f95e 	bl	800693c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006680:	2110      	movs	r1, #16
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8fa 	bl	800687c <USB_FlushTxFifo>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f924 	bl	80068e0 <USB_FlushRxFifo>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a8:	461a      	mov	r2, r3
 80066aa:	2300      	movs	r3, #0
 80066ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b4:	461a      	mov	r2, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c0:	461a      	mov	r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	e043      	b.n	8006754 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e2:	d118      	bne.n	8006716 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f6:	461a      	mov	r2, r3
 80066f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e013      	b.n	8006728 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	461a      	mov	r2, r3
 800670e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	e008      	b.n	8006728 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006722:	461a      	mov	r2, r3
 8006724:	2300      	movs	r3, #0
 8006726:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006734:	461a      	mov	r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006746:	461a      	mov	r2, r3
 8006748:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800674c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3301      	adds	r3, #1
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006758:	461a      	mov	r2, r3
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4293      	cmp	r3, r2
 800675e:	d3b5      	bcc.n	80066cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	e043      	b.n	80067ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800677c:	d118      	bne.n	80067b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e013      	b.n	80067c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a6:	461a      	mov	r2, r3
 80067a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e008      	b.n	80067c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067bc:	461a      	mov	r2, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ce:	461a      	mov	r2, r3
 80067d0:	2300      	movs	r3, #0
 80067d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e0:	461a      	mov	r2, r3
 80067e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	3301      	adds	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067f2:	461a      	mov	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d3b5      	bcc.n	8006766 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800680c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800681a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800681c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f043 0210 	orr.w	r2, r3, #16
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	4b10      	ldr	r3, [pc, #64]	@ (8006878 <USB_DevInit+0x2c4>)
 8006836:	4313      	orrs	r3, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800683c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	f043 0208 	orr.w	r2, r3, #8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006850:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006854:	2b01      	cmp	r3, #1
 8006856:	d107      	bne.n	8006868 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006860:	f043 0304 	orr.w	r3, r3, #4
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006868:	7dfb      	ldrb	r3, [r7, #23]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006874:	b004      	add	sp, #16
 8006876:	4770      	bx	lr
 8006878:	803c3800 	.word	0x803c3800

0800687c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006896:	d901      	bls.n	800689c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e01b      	b.n	80068d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	daf2      	bge.n	800688a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	019b      	lsls	r3, r3, #6
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068c0:	d901      	bls.n	80068c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e006      	b.n	80068d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d0f0      	beq.n	80068b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068f8:	d901      	bls.n	80068fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e018      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	daf2      	bge.n	80068ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2210      	movs	r2, #16
 800690e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800691c:	d901      	bls.n	8006922 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e006      	b.n	8006930 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b10      	cmp	r3, #16
 800692c:	d0f0      	beq.n	8006910 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0306 	and.w	r3, r3, #6
 8006986:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
 8006992:	e00a      	b.n	80069aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d002      	beq.n	80069a0 <USB_GetDevSpeed+0x32>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b06      	cmp	r3, #6
 800699e:	d102      	bne.n	80069a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069a0:	2302      	movs	r3, #2
 80069a2:	75fb      	strb	r3, [r7, #23]
 80069a4:	e001      	b.n	80069aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069a6:	230f      	movs	r3, #15
 80069a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d13a      	bne.n	8006a4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	68f9      	ldr	r1, [r7, #12]
 80069ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d155      	bne.n	8006ab8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	791b      	ldrb	r3, [r3, #4]
 8006a26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	059b      	lsls	r3, r3, #22
 8006a2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a30:	4313      	orrs	r3, r2
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	e036      	b.n	8006ab8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d11a      	bne.n	8006ab8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	791b      	ldrb	r3, [r3, #4]
 8006a9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d161      	bne.n	8006ba8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006af6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006afa:	d11f      	bne.n	8006b3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	43db      	mvns	r3, r3
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b66:	69da      	ldr	r2, [r3, #28]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b80:	4013      	ands	r3, r2
 8006b82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	0159      	lsls	r1, r3, #5
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	440b      	add	r3, r1
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4b35      	ldr	r3, [pc, #212]	@ (8006c78 <USB_DeactivateEndpoint+0x1b0>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]
 8006ba6:	e060      	b.n	8006c6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bbe:	d11f      	bne.n	8006c00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	2101      	movs	r1, #1
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	041b      	lsls	r3, r3, #16
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c20:	4013      	ands	r3, r2
 8006c22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3a:	041b      	lsls	r3, r3, #16
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c44:	4013      	ands	r3, r2
 8006c46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	0159      	lsls	r1, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c62:	4619      	mov	r1, r3
 8006c64:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <USB_DeactivateEndpoint+0x1b4>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	ec337800 	.word	0xec337800
 8006c7c:	eff37800 	.word	0xeff37800

08006c80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	@ 0x28
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	f040 817a 	bne.w	8006f96 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d132      	bne.n	8006d10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cc8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	0151      	lsls	r1, r2, #5
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	440a      	add	r2, r1
 8006ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ce8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	0151      	lsls	r1, r2, #5
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	440a      	add	r2, r1
 8006d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d08:	0cdb      	lsrs	r3, r3, #19
 8006d0a:	04db      	lsls	r3, r3, #19
 8006d0c:	6113      	str	r3, [r2, #16]
 8006d0e:	e092      	b.n	8006e36 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d2a:	0cdb      	lsrs	r3, r3, #19
 8006d2c:	04db      	lsls	r3, r3, #19
 8006d2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d11a      	bne.n	8006d90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d903      	bls.n	8006d6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	689a      	ldr	r2, [r3, #8]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d8c:	6113      	str	r3, [r2, #16]
 8006d8e:	e01b      	b.n	8006dc8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6919      	ldr	r1, [r3, #16]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	440b      	add	r3, r1
 8006da8:	1e59      	subs	r1, r3, #1
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006db2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006db4:	4ba2      	ldr	r3, [pc, #648]	@ (8007040 <USB_EPStartXfer+0x3c0>)
 8006db6:	400b      	ands	r3, r1
 8006db8:	69b9      	ldr	r1, [r7, #24]
 8006dba:	0148      	lsls	r0, r1, #5
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	4401      	add	r1, r0
 8006dc0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dde:	69b9      	ldr	r1, [r7, #24]
 8006de0:	0148      	lsls	r0, r1, #5
 8006de2:	69f9      	ldr	r1, [r7, #28]
 8006de4:	4401      	add	r1, r0
 8006de6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006dea:	4313      	orrs	r3, r2
 8006dec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	791b      	ldrb	r3, [r3, #4]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d11f      	bne.n	8006e36 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e10:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006e14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d14b      	bne.n	8006ed4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e50:	461a      	mov	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	791b      	ldrb	r3, [r3, #4]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d128      	bne.n	8006eb2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d110      	bne.n	8006e92 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	e00f      	b.n	8006eb2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ecc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e165      	b.n	80071a0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ef2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	791b      	ldrb	r3, [r3, #4]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d015      	beq.n	8006f28 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 814d 	beq.w	80071a0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	2101      	movs	r1, #1
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f22:	4313      	orrs	r3, r2
 8006f24:	634b      	str	r3, [r1, #52]	@ 0x34
 8006f26:	e13b      	b.n	80071a0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d110      	bne.n	8006f5a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	e00f      	b.n	8006f7a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	68d9      	ldr	r1, [r3, #12]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	b298      	uxth	r0, r3
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 f9b8 	bl	8007304 <USB_WritePacket>
 8006f94:	e104      	b.n	80071a0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fb0:	0cdb      	lsrs	r3, r3, #19
 8006fb2:	04db      	lsls	r3, r3, #19
 8006fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fd4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fd8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d131      	bne.n	8007044 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800700e:	69b9      	ldr	r1, [r7, #24]
 8007010:	0148      	lsls	r0, r1, #5
 8007012:	69f9      	ldr	r1, [r7, #28]
 8007014:	4401      	add	r1, r0
 8007016:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800701a:	4313      	orrs	r3, r2
 800701c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007038:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800703c:	6113      	str	r3, [r2, #16]
 800703e:	e061      	b.n	8007104 <USB_EPStartXfer+0x484>
 8007040:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d123      	bne.n	8007094 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007062:	69b9      	ldr	r1, [r7, #24]
 8007064:	0148      	lsls	r0, r1, #5
 8007066:	69f9      	ldr	r1, [r7, #28]
 8007068:	4401      	add	r1, r0
 800706a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800706e:	4313      	orrs	r3, r2
 8007070:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800708c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007090:	6113      	str	r3, [r2, #16]
 8007092:	e037      	b.n	8007104 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4413      	add	r3, r2
 800709e:	1e5a      	subs	r2, r3, #1
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	8afa      	ldrh	r2, [r7, #22]
 80070b0:	fb03 f202 	mul.w	r2, r3, r2
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	8afb      	ldrh	r3, [r7, #22]
 80070c8:	04d9      	lsls	r1, r3, #19
 80070ca:	4b38      	ldr	r3, [pc, #224]	@ (80071ac <USB_EPStartXfer+0x52c>)
 80070cc:	400b      	ands	r3, r1
 80070ce:	69b9      	ldr	r1, [r7, #24]
 80070d0:	0148      	lsls	r0, r1, #5
 80070d2:	69f9      	ldr	r1, [r7, #28]
 80070d4:	4401      	add	r1, r0
 80070d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070da:	4313      	orrs	r3, r2
 80070dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f4:	69b9      	ldr	r1, [r7, #24]
 80070f6:	0148      	lsls	r0, r1, #5
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	4401      	add	r1, r0
 80070fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007100:	4313      	orrs	r3, r2
 8007102:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d10d      	bne.n	8007126 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	68d9      	ldr	r1, [r3, #12]
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007122:	460a      	mov	r2, r1
 8007124:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d128      	bne.n	8007180 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d110      	bne.n	8007160 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	440a      	add	r2, r1
 8007154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007158:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	e00f      	b.n	8007180 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	440a      	add	r2, r1
 8007176:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800717a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800717e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	440a      	add	r2, r1
 8007196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800719a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800719e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	1ff80000 	.word	0x1ff80000

080071b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d14a      	bne.n	8007264 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071e6:	f040 8086 	bne.w	80072f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007208:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800720c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	7812      	ldrb	r2, [r2, #0]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800722c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007230:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800723e:	4293      	cmp	r3, r2
 8007240:	d902      	bls.n	8007248 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
          break;
 8007246:	e056      	b.n	80072f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800725c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007260:	d0e7      	beq.n	8007232 <USB_EPStopXfer+0x82>
 8007262:	e048      	b.n	80072f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800727c:	d13b      	bne.n	80072f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800729c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d902      	bls.n	80072dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	75fb      	strb	r3, [r7, #23]
          break;
 80072da:	e00c      	b.n	80072f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072f4:	d0e7      	beq.n	80072c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007304:	b480      	push	{r7}
 8007306:	b089      	sub	sp, #36	@ 0x24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4611      	mov	r1, r2
 8007310:	461a      	mov	r2, r3
 8007312:	460b      	mov	r3, r1
 8007314:	71fb      	strb	r3, [r7, #7]
 8007316:	4613      	mov	r3, r2
 8007318:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007322:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d123      	bne.n	8007372 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800732a:	88bb      	ldrh	r3, [r7, #4]
 800732c:	3303      	adds	r3, #3
 800732e:	089b      	lsrs	r3, r3, #2
 8007330:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e018      	b.n	800736a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	031a      	lsls	r2, r3, #12
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	4413      	add	r3, r2
 8007340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007344:	461a      	mov	r2, r3
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	3301      	adds	r3, #1
 8007350:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	3301      	adds	r3, #1
 8007356:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	3301      	adds	r3, #1
 800735c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	3301      	adds	r3, #1
 8007362:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	3301      	adds	r3, #1
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	d3e2      	bcc.n	8007338 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3724      	adds	r7, #36	@ 0x24
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007380:	b480      	push	{r7}
 8007382:	b08b      	sub	sp, #44	@ 0x2c
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007396:	88fb      	ldrh	r3, [r7, #6]
 8007398:	089b      	lsrs	r3, r3, #2
 800739a:	b29b      	uxth	r3, r3
 800739c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073a6:	2300      	movs	r3, #0
 80073a8:	623b      	str	r3, [r7, #32]
 80073aa:	e014      	b.n	80073d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	3301      	adds	r3, #1
 80073bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	3301      	adds	r3, #1
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	3301      	adds	r3, #1
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	3301      	adds	r3, #1
 80073ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	3301      	adds	r3, #1
 80073d4:	623b      	str	r3, [r7, #32]
 80073d6:	6a3a      	ldr	r2, [r7, #32]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d3e6      	bcc.n	80073ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073de:	8bfb      	ldrh	r3, [r7, #30]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01e      	beq.n	8007422 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ee:	461a      	mov	r2, r3
 80073f0:	f107 0310 	add.w	r3, r7, #16
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
 8007404:	b2da      	uxtb	r2, r3
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	701a      	strb	r2, [r3, #0]
      i++;
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	3301      	adds	r3, #1
 800740e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	3301      	adds	r3, #1
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007416:	8bfb      	ldrh	r3, [r7, #30]
 8007418:	3b01      	subs	r3, #1
 800741a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800741c:	8bfb      	ldrh	r3, [r7, #30]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1ea      	bne.n	80073f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007424:	4618      	mov	r0, r3
 8007426:	372c      	adds	r7, #44	@ 0x2c
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d12c      	bne.n	80074a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	db12      	blt.n	8007484 <USB_EPSetStall+0x54>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00f      	beq.n	8007484 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800747e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007482:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	e02b      	b.n	80074fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	db12      	blt.n	80074de <USB_EPSetStall+0xae>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00f      	beq.n	80074de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d128      	bne.n	800757a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007542:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007546:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d003      	beq.n	8007558 <USB_EPClearStall+0x4c>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	791b      	ldrb	r3, [r3, #4]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d138      	bne.n	80075ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	0151      	lsls	r1, r2, #5
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	440a      	add	r2, r1
 800756e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	e027      	b.n	80075ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	0151      	lsls	r1, r2, #5
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	440a      	add	r2, r1
 8007590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007594:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007598:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	791b      	ldrb	r3, [r3, #4]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d003      	beq.n	80075aa <USB_EPClearStall+0x9e>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	791b      	ldrb	r3, [r3, #4]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d10f      	bne.n	80075ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80075fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800760c:	68f9      	ldr	r1, [r7, #12]
 800760e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007612:	4313      	orrs	r3, r2
 8007614:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007652:	f023 0302 	bic.w	r3, r3, #2
 8007656:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007694:	f043 0302 	orr.w	r3, r3, #2
 8007698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4013      	ands	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	4013      	ands	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	0c1b      	lsrs	r3, r3, #16
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	4013      	ands	r3, r2
 8007724:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	b29b      	uxth	r3, r3
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	4013      	ands	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007764:	68bb      	ldr	r3, [r7, #8]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007772:	b480      	push	{r7}
 8007774:	b087      	sub	sp, #28
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007794:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	fa22 f303 	lsr.w	r3, r2, r3
 80077a2:	01db      	lsls	r3, r3, #7
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4013      	ands	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077c0:	68bb      	ldr	r3, [r7, #8]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	f003 0301 	and.w	r3, r3, #1
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007804:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007808:	f023 0307 	bic.w	r3, r3, #7
 800780c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800781c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	460b      	mov	r3, r1
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	333c      	adds	r3, #60	@ 0x3c
 8007846:	3304      	adds	r3, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4a26      	ldr	r2, [pc, #152]	@ (80078e8 <USB_EP0_OutStart+0xb8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d90a      	bls.n	800786a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007864:	d101      	bne.n	800786a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e037      	b.n	80078da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007870:	461a      	mov	r2, r3
 8007872:	2300      	movs	r3, #0
 8007874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007884:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007898:	f043 0318 	orr.w	r3, r3, #24
 800789c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80078b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d10f      	bne.n	80078d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80078d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	4f54300a 	.word	0x4f54300a

080078ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3301      	adds	r3, #1
 80078fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007904:	d901      	bls.n	800790a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e01b      	b.n	8007942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	daf2      	bge.n	80078f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	f043 0201 	orr.w	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800792e:	d901      	bls.n	8007934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e006      	b.n	8007942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b01      	cmp	r3, #1
 800793e:	d0f0      	beq.n	8007922 <USB_CoreReset+0x36>

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800795c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007960:	f005 fb0e 	bl	800cf80 <USBD_static_malloc>
 8007964:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32b0      	adds	r2, #176	@ 0xb0
 8007976:	2100      	movs	r1, #0
 8007978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800797c:	2302      	movs	r3, #2
 800797e:	e0d4      	b.n	8007b2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007980:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007984:	2100      	movs	r1, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f006 f9c0 	bl	800dd0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	32b0      	adds	r2, #176	@ 0xb0
 8007996:	68f9      	ldr	r1, [r7, #12]
 8007998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	32b0      	adds	r2, #176	@ 0xb0
 80079a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7c1b      	ldrb	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d138      	bne.n	8007a2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079b8:	4b5e      	ldr	r3, [pc, #376]	@ (8007b34 <USBD_CDC_Init+0x1e4>)
 80079ba:	7819      	ldrb	r1, [r3, #0]
 80079bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079c0:	2202      	movs	r2, #2
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f005 f9b9 	bl	800cd3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079c8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b34 <USBD_CDC_Init+0x1e4>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	3324      	adds	r3, #36	@ 0x24
 80079de:	2201      	movs	r2, #1
 80079e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079e2:	4b55      	ldr	r3, [pc, #340]	@ (8007b38 <USBD_CDC_Init+0x1e8>)
 80079e4:	7819      	ldrb	r1, [r3, #0]
 80079e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079ea:	2202      	movs	r2, #2
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f005 f9a4 	bl	800cd3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079f2:	4b51      	ldr	r3, [pc, #324]	@ (8007b38 <USBD_CDC_Init+0x1e8>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	f003 020f 	and.w	r2, r3, #15
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	440b      	add	r3, r1
 8007a06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8007b3c <USBD_CDC_Init+0x1ec>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f003 020f 	and.w	r2, r3, #15
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	3326      	adds	r3, #38	@ 0x26
 8007a24:	2210      	movs	r2, #16
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	e035      	b.n	8007a96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a2a:	4b42      	ldr	r3, [pc, #264]	@ (8007b34 <USBD_CDC_Init+0x1e4>)
 8007a2c:	7819      	ldrb	r1, [r3, #0]
 8007a2e:	2340      	movs	r3, #64	@ 0x40
 8007a30:	2202      	movs	r2, #2
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f005 f981 	bl	800cd3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a38:	4b3e      	ldr	r3, [pc, #248]	@ (8007b34 <USBD_CDC_Init+0x1e4>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f003 020f 	and.w	r2, r3, #15
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	3324      	adds	r3, #36	@ 0x24
 8007a4e:	2201      	movs	r2, #1
 8007a50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a52:	4b39      	ldr	r3, [pc, #228]	@ (8007b38 <USBD_CDC_Init+0x1e8>)
 8007a54:	7819      	ldrb	r1, [r3, #0]
 8007a56:	2340      	movs	r3, #64	@ 0x40
 8007a58:	2202      	movs	r2, #2
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f005 f96d 	bl	800cd3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a60:	4b35      	ldr	r3, [pc, #212]	@ (8007b38 <USBD_CDC_Init+0x1e8>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 020f 	and.w	r2, r3, #15
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	440b      	add	r3, r1
 8007a74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a78:	2201      	movs	r2, #1
 8007a7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8007b3c <USBD_CDC_Init+0x1ec>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	3326      	adds	r3, #38	@ 0x26
 8007a92:	2210      	movs	r2, #16
 8007a94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a96:	4b29      	ldr	r3, [pc, #164]	@ (8007b3c <USBD_CDC_Init+0x1ec>)
 8007a98:	7819      	ldrb	r1, [r3, #0]
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f005 f94b 	bl	800cd3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007aa4:	4b25      	ldr	r3, [pc, #148]	@ (8007b3c <USBD_CDC_Init+0x1ec>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	f003 020f 	and.w	r2, r3, #15
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	3324      	adds	r3, #36	@ 0x24
 8007aba:	2201      	movs	r2, #1
 8007abc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	33b0      	adds	r3, #176	@ 0xb0
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007af4:	2302      	movs	r3, #2
 8007af6:	e018      	b.n	8007b2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7c1b      	ldrb	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b00:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <USBD_CDC_Init+0x1e8>)
 8007b02:	7819      	ldrb	r1, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f005 fa02 	bl	800cf18 <USBD_LL_PrepareReceive>
 8007b14:	e008      	b.n	8007b28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b16:	4b08      	ldr	r3, [pc, #32]	@ (8007b38 <USBD_CDC_Init+0x1e8>)
 8007b18:	7819      	ldrb	r1, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b20:	2340      	movs	r3, #64	@ 0x40
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f005 f9f8 	bl	800cf18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000097 	.word	0x20000097
 8007b38:	20000098 	.word	0x20000098
 8007b3c:	20000099 	.word	0x20000099

08007b40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c38 <USBD_CDC_DeInit+0xf8>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f005 f917 	bl	800cd86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b58:	4b37      	ldr	r3, [pc, #220]	@ (8007c38 <USBD_CDC_DeInit+0xf8>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	f003 020f 	and.w	r2, r3, #15
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	3324      	adds	r3, #36	@ 0x24
 8007b6e:	2200      	movs	r2, #0
 8007b70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b72:	4b32      	ldr	r3, [pc, #200]	@ (8007c3c <USBD_CDC_DeInit+0xfc>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f005 f904 	bl	800cd86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c3c <USBD_CDC_DeInit+0xfc>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b96:	2200      	movs	r2, #0
 8007b98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b9a:	4b29      	ldr	r3, [pc, #164]	@ (8007c40 <USBD_CDC_DeInit+0x100>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f005 f8f0 	bl	800cd86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ba6:	4b26      	ldr	r3, [pc, #152]	@ (8007c40 <USBD_CDC_DeInit+0x100>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	3324      	adds	r3, #36	@ 0x24
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8007c40 <USBD_CDC_DeInit+0x100>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3326      	adds	r3, #38	@ 0x26
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	32b0      	adds	r2, #176	@ 0xb0
 8007be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01f      	beq.n	8007c2c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	33b0      	adds	r3, #176	@ 0xb0
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	32b0      	adds	r2, #176	@ 0xb0
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f005 f9c4 	bl	800cf9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	32b0      	adds	r2, #176	@ 0xb0
 8007c1e:	2100      	movs	r1, #0
 8007c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20000097 	.word	0x20000097
 8007c3c:	20000098 	.word	0x20000098
 8007c40:	20000099 	.word	0x20000099

08007c44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	32b0      	adds	r2, #176	@ 0xb0
 8007c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e0bf      	b.n	8007df4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d050      	beq.n	8007d22 <USBD_CDC_Setup+0xde>
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	f040 80af 	bne.w	8007de4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	88db      	ldrh	r3, [r3, #6]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d03a      	beq.n	8007d04 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b25b      	sxtb	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da1b      	bge.n	8007cd0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	33b0      	adds	r3, #176	@ 0xb0
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007cae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	88d2      	ldrh	r2, [r2, #6]
 8007cb4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	88db      	ldrh	r3, [r3, #6]
 8007cba:	2b07      	cmp	r3, #7
 8007cbc:	bf28      	it	cs
 8007cbe:	2307      	movcs	r3, #7
 8007cc0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	89fa      	ldrh	r2, [r7, #14]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fd87 	bl	80097dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007cce:	e090      	b.n	8007df2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	785a      	ldrb	r2, [r3, #1]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	88db      	ldrh	r3, [r3, #6]
 8007cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ce0:	d803      	bhi.n	8007cea <USBD_CDC_Setup+0xa6>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	88db      	ldrh	r3, [r3, #6]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	e000      	b.n	8007cec <USBD_CDC_Setup+0xa8>
 8007cea:	2240      	movs	r2, #64	@ 0x40
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007cf2:	6939      	ldr	r1, [r7, #16]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 fd99 	bl	8009834 <USBD_CtlPrepareRx>
      break;
 8007d02:	e076      	b.n	8007df2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	33b0      	adds	r3, #176	@ 0xb0
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	7850      	ldrb	r0, [r2, #1]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	4798      	blx	r3
      break;
 8007d20:	e067      	b.n	8007df2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	2b0b      	cmp	r3, #11
 8007d28:	d851      	bhi.n	8007dce <USBD_CDC_Setup+0x18a>
 8007d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <USBD_CDC_Setup+0xec>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d61 	.word	0x08007d61
 8007d34:	08007ddd 	.word	0x08007ddd
 8007d38:	08007dcf 	.word	0x08007dcf
 8007d3c:	08007dcf 	.word	0x08007dcf
 8007d40:	08007dcf 	.word	0x08007dcf
 8007d44:	08007dcf 	.word	0x08007dcf
 8007d48:	08007dcf 	.word	0x08007dcf
 8007d4c:	08007dcf 	.word	0x08007dcf
 8007d50:	08007dcf 	.word	0x08007dcf
 8007d54:	08007dcf 	.word	0x08007dcf
 8007d58:	08007d8b 	.word	0x08007d8b
 8007d5c:	08007db5 	.word	0x08007db5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d107      	bne.n	8007d7c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d6c:	f107 030a 	add.w	r3, r7, #10
 8007d70:	2202      	movs	r2, #2
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 fd31 	bl	80097dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d7a:	e032      	b.n	8007de2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fcbb 	bl	80096fa <USBD_CtlError>
            ret = USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	75fb      	strb	r3, [r7, #23]
          break;
 8007d88:	e02b      	b.n	8007de2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d107      	bne.n	8007da6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d96:	f107 030d 	add.w	r3, r7, #13
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 fd1c 	bl	80097dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007da4:	e01d      	b.n	8007de2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 fca6 	bl	80096fa <USBD_CtlError>
            ret = USBD_FAIL;
 8007dae:	2303      	movs	r3, #3
 8007db0:	75fb      	strb	r3, [r7, #23]
          break;
 8007db2:	e016      	b.n	8007de2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d00f      	beq.n	8007de0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fc99 	bl	80096fa <USBD_CtlError>
            ret = USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007dcc:	e008      	b.n	8007de0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fc92 	bl	80096fa <USBD_CtlError>
          ret = USBD_FAIL;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	75fb      	strb	r3, [r7, #23]
          break;
 8007dda:	e002      	b.n	8007de2 <USBD_CDC_Setup+0x19e>
          break;
 8007ddc:	bf00      	nop
 8007dde:	e008      	b.n	8007df2 <USBD_CDC_Setup+0x1ae>
          break;
 8007de0:	bf00      	nop
      }
      break;
 8007de2:	e006      	b.n	8007df2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fc87 	bl	80096fa <USBD_CtlError>
      ret = USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	75fb      	strb	r3, [r7, #23]
      break;
 8007df0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	32b0      	adds	r2, #176	@ 0xb0
 8007e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e065      	b.n	8007ef2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	32b0      	adds	r2, #176	@ 0xb0
 8007e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	f003 020f 	and.w	r2, r3, #15
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	440b      	add	r3, r1
 8007e48:	3318      	adds	r3, #24
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d02f      	beq.n	8007eb0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	f003 020f 	and.w	r2, r3, #15
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	440b      	add	r3, r1
 8007e62:	3318      	adds	r3, #24
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	78fb      	ldrb	r3, [r7, #3]
 8007e68:	f003 010f 	and.w	r1, r3, #15
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	440b      	add	r3, r1
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4403      	add	r3, r0
 8007e78:	331c      	adds	r3, #28
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e80:	fb01 f303 	mul.w	r3, r1, r3
 8007e84:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d112      	bne.n	8007eb0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	f003 020f 	and.w	r2, r3, #15
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ea2:	78f9      	ldrb	r1, [r7, #3]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f005 f814 	bl	800ced6 <USBD_LL_Transmit>
 8007eae:	e01f      	b.n	8007ef0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	33b0      	adds	r3, #176	@ 0xb0
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d010      	beq.n	8007ef0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	33b0      	adds	r3, #176	@ 0xb0
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	32b0      	adds	r2, #176	@ 0xb0
 8007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32b0      	adds	r2, #176	@ 0xb0
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e01a      	b.n	8007f62 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f005 f812 	bl	800cf5a <USBD_LL_GetRxDataSize>
 8007f36:	4602      	mov	r2, r0
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	33b0      	adds	r3, #176	@ 0xb0
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	32b0      	adds	r2, #176	@ 0xb0
 8007f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e024      	b.n	8007fd6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	33b0      	adds	r3, #176	@ 0xb0
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d019      	beq.n	8007fd4 <USBD_CDC_EP0_RxReady+0x6a>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007fa6:	2bff      	cmp	r3, #255	@ 0xff
 8007fa8:	d014      	beq.n	8007fd4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	33b0      	adds	r3, #176	@ 0xb0
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007fc2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	22ff      	movs	r2, #255	@ 0xff
 8007fd0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fe8:	2182      	movs	r1, #130	@ 0x82
 8007fea:	4818      	ldr	r0, [pc, #96]	@ (800804c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007fec:	f000 fd4f 	bl	8008a8e <USBD_GetEpDesc>
 8007ff0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	4815      	ldr	r0, [pc, #84]	@ (800804c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ff6:	f000 fd4a 	bl	8008a8e <USBD_GetEpDesc>
 8007ffa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ffc:	2181      	movs	r1, #129	@ 0x81
 8007ffe:	4813      	ldr	r0, [pc, #76]	@ (800804c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008000:	f000 fd45 	bl	8008a8e <USBD_GetEpDesc>
 8008004:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2210      	movs	r2, #16
 8008010:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d006      	beq.n	8008026 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2200      	movs	r2, #0
 800801c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008020:	711a      	strb	r2, [r3, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008034:	711a      	strb	r2, [r3, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2243      	movs	r2, #67	@ 0x43
 800803e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008040:	4b02      	ldr	r3, [pc, #8]	@ (800804c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000054 	.word	0x20000054

08008050 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008058:	2182      	movs	r1, #130	@ 0x82
 800805a:	4818      	ldr	r0, [pc, #96]	@ (80080bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800805c:	f000 fd17 	bl	8008a8e <USBD_GetEpDesc>
 8008060:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008062:	2101      	movs	r1, #1
 8008064:	4815      	ldr	r0, [pc, #84]	@ (80080bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008066:	f000 fd12 	bl	8008a8e <USBD_GetEpDesc>
 800806a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800806c:	2181      	movs	r1, #129	@ 0x81
 800806e:	4813      	ldr	r0, [pc, #76]	@ (80080bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008070:	f000 fd0d 	bl	8008a8e <USBD_GetEpDesc>
 8008074:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2210      	movs	r2, #16
 8008080:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d006      	beq.n	8008096 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2200      	movs	r2, #0
 800808c:	711a      	strb	r2, [r3, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f042 0202 	orr.w	r2, r2, #2
 8008094:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d006      	beq.n	80080aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	711a      	strb	r2, [r3, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f042 0202 	orr.w	r2, r2, #2
 80080a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2243      	movs	r2, #67	@ 0x43
 80080ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080b0:	4b02      	ldr	r3, [pc, #8]	@ (80080bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000054 	.word	0x20000054

080080c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080c8:	2182      	movs	r1, #130	@ 0x82
 80080ca:	4818      	ldr	r0, [pc, #96]	@ (800812c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080cc:	f000 fcdf 	bl	8008a8e <USBD_GetEpDesc>
 80080d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080d2:	2101      	movs	r1, #1
 80080d4:	4815      	ldr	r0, [pc, #84]	@ (800812c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080d6:	f000 fcda 	bl	8008a8e <USBD_GetEpDesc>
 80080da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080dc:	2181      	movs	r1, #129	@ 0x81
 80080de:	4813      	ldr	r0, [pc, #76]	@ (800812c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080e0:	f000 fcd5 	bl	8008a8e <USBD_GetEpDesc>
 80080e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2210      	movs	r2, #16
 80080f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d006      	beq.n	8008106 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008100:	711a      	strb	r2, [r3, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d006      	beq.n	800811a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008114:	711a      	strb	r2, [r3, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2243      	movs	r2, #67	@ 0x43
 800811e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000054 	.word	0x20000054

08008130 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	220a      	movs	r2, #10
 800813c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800813e:	4b03      	ldr	r3, [pc, #12]	@ (800814c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20000010 	.word	0x20000010

08008150 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	e009      	b.n	8008178 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	33b0      	adds	r3, #176	@ 0xb0
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	32b0      	adds	r2, #176	@ 0xb0
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e008      	b.n	80081bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	32b0      	adds	r2, #176	@ 0xb0
 80081dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e004      	b.n	80081f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
	...

08008204 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32b0      	adds	r2, #176	@ 0xb0
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008226:	2303      	movs	r3, #3
 8008228:	e025      	b.n	8008276 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11f      	bne.n	8008274 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2201      	movs	r2, #1
 8008238:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800823c:	4b10      	ldr	r3, [pc, #64]	@ (8008280 <USBD_CDC_TransmitPacket+0x7c>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4403      	add	r3, r0
 8008256:	3318      	adds	r3, #24
 8008258:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800825a:	4b09      	ldr	r3, [pc, #36]	@ (8008280 <USBD_CDC_TransmitPacket+0x7c>)
 800825c:	7819      	ldrb	r1, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f004 fe33 	bl	800ced6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000097 	.word	0x20000097

08008284 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	32b0      	adds	r2, #176	@ 0xb0
 8008296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	32b0      	adds	r2, #176	@ 0xb0
 80082a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e018      	b.n	80082e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	7c1b      	ldrb	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10a      	bne.n	80082d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082ba:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <USBD_CDC_ReceivePacket+0x68>)
 80082bc:	7819      	ldrb	r1, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f004 fe25 	bl	800cf18 <USBD_LL_PrepareReceive>
 80082ce:	e008      	b.n	80082e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082d0:	4b06      	ldr	r3, [pc, #24]	@ (80082ec <USBD_CDC_ReceivePacket+0x68>)
 80082d2:	7819      	ldrb	r1, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082da:	2340      	movs	r3, #64	@ 0x40
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f004 fe1b 	bl	800cf18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000098 	.word	0x20000098

080082f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008304:	2303      	movs	r3, #3
 8008306:	e01f      	b.n	8008348 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	79fa      	ldrb	r2, [r7, #7]
 800833a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f004 fc95 	bl	800cc6c <USBD_LL_Init>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008364:	2303      	movs	r3, #3
 8008366:	e025      	b.n	80083b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32ae      	adds	r2, #174	@ 0xae
 800837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00f      	beq.n	80083a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32ae      	adds	r2, #174	@ 0xae
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	f107 020e 	add.w	r2, r7, #14
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	4602      	mov	r2, r0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f004 fc9d 	bl	800cd04 <USBD_LL_Start>
 80083ca:	4603      	mov	r3, r0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008400:	2b00      	cmp	r3, #0
 8008402:	d009      	beq.n	8008418 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	4611      	mov	r1, r2
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f001 f90c 	bl	8009686 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800847c:	461a      	mov	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800848a:	f003 031f 	and.w	r3, r3, #31
 800848e:	2b02      	cmp	r3, #2
 8008490:	d01a      	beq.n	80084c8 <USBD_LL_SetupStage+0x72>
 8008492:	2b02      	cmp	r3, #2
 8008494:	d822      	bhi.n	80084dc <USBD_LL_SetupStage+0x86>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <USBD_LL_SetupStage+0x4a>
 800849a:	2b01      	cmp	r3, #1
 800849c:	d00a      	beq.n	80084b4 <USBD_LL_SetupStage+0x5e>
 800849e:	e01d      	b.n	80084dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fb63 	bl	8008b74 <USBD_StdDevReq>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]
      break;
 80084b2:	e020      	b.n	80084f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fbcb 	bl	8008c58 <USBD_StdItfReq>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73fb      	strb	r3, [r7, #15]
      break;
 80084c6:	e016      	b.n	80084f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fc2d 	bl	8008d30 <USBD_StdEPReq>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]
      break;
 80084da:	e00c      	b.n	80084f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f004 fc6a 	bl	800cdc4 <USBD_LL_StallEP>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
      break;
 80084f4:	bf00      	nop
  }

  return ret;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	460b      	mov	r3, r1
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d16e      	bne.n	80085f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800851e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008526:	2b03      	cmp	r3, #3
 8008528:	f040 8098 	bne.w	800865c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	429a      	cmp	r2, r3
 8008536:	d913      	bls.n	8008560 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	1ad2      	subs	r2, r2, r3
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	4293      	cmp	r3, r2
 8008550:	bf28      	it	cs
 8008552:	4613      	movcs	r3, r2
 8008554:	461a      	mov	r2, r3
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f001 f988 	bl	800986e <USBD_CtlContinueRx>
 800855e:	e07d      	b.n	800865c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	2b02      	cmp	r3, #2
 800856c:	d014      	beq.n	8008598 <USBD_LL_DataOutStage+0x98>
 800856e:	2b02      	cmp	r3, #2
 8008570:	d81d      	bhi.n	80085ae <USBD_LL_DataOutStage+0xae>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <USBD_LL_DataOutStage+0x7c>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d003      	beq.n	8008582 <USBD_LL_DataOutStage+0x82>
 800857a:	e018      	b.n	80085ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	75bb      	strb	r3, [r7, #22]
            break;
 8008580:	e018      	b.n	80085b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008588:	b2db      	uxtb	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fa64 	bl	8008a5a <USBD_CoreFindIF>
 8008592:	4603      	mov	r3, r0
 8008594:	75bb      	strb	r3, [r7, #22]
            break;
 8008596:	e00d      	b.n	80085b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 fa66 	bl	8008a74 <USBD_CoreFindEP>
 80085a8:	4603      	mov	r3, r0
 80085aa:	75bb      	strb	r3, [r7, #22]
            break;
 80085ac:	e002      	b.n	80085b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75bb      	strb	r3, [r7, #22]
            break;
 80085b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085b4:	7dbb      	ldrb	r3, [r7, #22]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d119      	bne.n	80085ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d113      	bne.n	80085ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085c6:	7dba      	ldrb	r2, [r7, #22]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	32ae      	adds	r2, #174	@ 0xae
 80085cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80085d6:	7dba      	ldrb	r2, [r7, #22]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80085de:	7dba      	ldrb	r2, [r7, #22]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	32ae      	adds	r2, #174	@ 0xae
 80085e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f001 f94e 	bl	8009890 <USBD_CtlSendStatus>
 80085f4:	e032      	b.n	800865c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80085f6:	7afb      	ldrb	r3, [r7, #11]
 80085f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fa37 	bl	8008a74 <USBD_CoreFindEP>
 8008606:	4603      	mov	r3, r0
 8008608:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800860a:	7dbb      	ldrb	r3, [r7, #22]
 800860c:	2bff      	cmp	r3, #255	@ 0xff
 800860e:	d025      	beq.n	800865c <USBD_LL_DataOutStage+0x15c>
 8008610:	7dbb      	ldrb	r3, [r7, #22]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d122      	bne.n	800865c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b03      	cmp	r3, #3
 8008620:	d117      	bne.n	8008652 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008622:	7dba      	ldrb	r2, [r7, #22]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	32ae      	adds	r2, #174	@ 0xae
 8008628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00f      	beq.n	8008652 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008632:	7dba      	ldrb	r2, [r7, #22]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800863a:	7dba      	ldrb	r2, [r7, #22]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	32ae      	adds	r2, #174	@ 0xae
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	7afa      	ldrb	r2, [r7, #11]
 8008648:	4611      	mov	r1, r2
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	4798      	blx	r3
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	e000      	b.n	800865e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	460b      	mov	r3, r1
 8008670:	607a      	str	r2, [r7, #4]
 8008672:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d16f      	bne.n	800875a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3314      	adds	r3, #20
 800867e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008686:	2b02      	cmp	r3, #2
 8008688:	d15a      	bne.n	8008740 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	429a      	cmp	r2, r3
 8008694:	d914      	bls.n	80086c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	1ad2      	subs	r2, r2, r3
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	461a      	mov	r2, r3
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f001 f8b0 	bl	8009812 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b2:	2300      	movs	r3, #0
 80086b4:	2200      	movs	r2, #0
 80086b6:	2100      	movs	r1, #0
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f004 fc2d 	bl	800cf18 <USBD_LL_PrepareReceive>
 80086be:	e03f      	b.n	8008740 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d11c      	bne.n	8008706 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d316      	bcc.n	8008706 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d20f      	bcs.n	8008706 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f001 f891 	bl	8009812 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086f8:	2300      	movs	r3, #0
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f004 fc0a 	bl	800cf18 <USBD_LL_PrepareReceive>
 8008704:	e01c      	b.n	8008740 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b03      	cmp	r3, #3
 8008710:	d10f      	bne.n	8008732 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d009      	beq.n	8008732 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008732:	2180      	movs	r1, #128	@ 0x80
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f004 fb45 	bl	800cdc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f001 f8bb 	bl	80098b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d03a      	beq.n	80087c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff fe42 	bl	80083d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008758:	e032      	b.n	80087c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008760:	b2db      	uxtb	r3, r3
 8008762:	4619      	mov	r1, r3
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f985 	bl	8008a74 <USBD_CoreFindEP>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2bff      	cmp	r3, #255	@ 0xff
 8008772:	d025      	beq.n	80087c0 <USBD_LL_DataInStage+0x15a>
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d122      	bne.n	80087c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b03      	cmp	r3, #3
 8008784:	d11c      	bne.n	80087c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008786:	7dfa      	ldrb	r2, [r7, #23]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	32ae      	adds	r2, #174	@ 0xae
 800878c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d014      	beq.n	80087c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008796:	7dfa      	ldrb	r2, [r7, #23]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800879e:	7dfa      	ldrb	r2, [r7, #23]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	32ae      	adds	r2, #174	@ 0xae
 80087a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	7afa      	ldrb	r2, [r7, #11]
 80087ac:	4611      	mov	r1, r2
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	4798      	blx	r3
 80087b2:	4603      	mov	r3, r0
 80087b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087b6:	7dbb      	ldrb	r3, [r7, #22]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
 80087be:	e000      	b.n	80087c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008802:	2b00      	cmp	r3, #0
 8008804:	d014      	beq.n	8008830 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00e      	beq.n	8008830 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6852      	ldr	r2, [r2, #4]
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	4611      	mov	r1, r2
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	4798      	blx	r3
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008830:	2340      	movs	r3, #64	@ 0x40
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f004 fa7f 	bl	800cd3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2240      	movs	r2, #64	@ 0x40
 8008848:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800884c:	2340      	movs	r3, #64	@ 0x40
 800884e:	2200      	movs	r2, #0
 8008850:	2180      	movs	r1, #128	@ 0x80
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f004 fa71 	bl	800cd3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2240      	movs	r2, #64	@ 0x40
 8008862:	621a      	str	r2, [r3, #32]

  return ret;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d006      	beq.n	80088b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2204      	movs	r2, #4
 80088b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d106      	bne.n	80088e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b03      	cmp	r3, #3
 8008908:	d110      	bne.n	800892c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	32ae      	adds	r2, #174	@ 0xae
 800894c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e01c      	b.n	8008992 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b03      	cmp	r3, #3
 8008962:	d115      	bne.n	8008990 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	32ae      	adds	r2, #174	@ 0xae
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	32ae      	adds	r2, #174	@ 0xae
 8008982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	78fa      	ldrb	r2, [r7, #3]
 800898a:	4611      	mov	r1, r2
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	32ae      	adds	r2, #174	@ 0xae
 80089b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e01c      	b.n	80089f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d115      	bne.n	80089f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32ae      	adds	r2, #174	@ 0xae
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	32ae      	adds	r2, #174	@ 0xae
 80089e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	4611      	mov	r1, r2
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00e      	beq.n	8008a50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6852      	ldr	r2, [r2, #4]
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	4611      	mov	r1, r2
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b086      	sub	sp, #24
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d91f      	bls.n	8008af4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008aba:	e013      	b.n	8008ae4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008abc:	f107 030a 	add.w	r3, r7, #10
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6978      	ldr	r0, [r7, #20]
 8008ac4:	f000 f81b 	bl	8008afe <USBD_GetNextDesc>
 8008ac8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	2b05      	cmp	r3, #5
 8008ad0:	d108      	bne.n	8008ae4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	789b      	ldrb	r3, [r3, #2]
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d008      	beq.n	8008af2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	885b      	ldrh	r3, [r3, #2]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	897b      	ldrh	r3, [r7, #10]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d8e5      	bhi.n	8008abc <USBD_GetEpDesc+0x2e>
 8008af0:	e000      	b.n	8008af4 <USBD_GetEpDesc+0x66>
          break;
 8008af2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008af4:	693b      	ldr	r3, [r7, #16]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b085      	sub	sp, #20
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	7812      	ldrb	r2, [r2, #0]
 8008b14:	4413      	add	r3, r2
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4413      	add	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b28:	68fb      	ldr	r3, [r7, #12]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b087      	sub	sp, #28
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b54:	8a3b      	ldrh	r3, [r7, #16]
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	b21a      	sxth	r2, r3
 8008b5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b21b      	sxth	r3, r3
 8008b62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b64:	89fb      	ldrh	r3, [r7, #14]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b8a:	2b40      	cmp	r3, #64	@ 0x40
 8008b8c:	d005      	beq.n	8008b9a <USBD_StdDevReq+0x26>
 8008b8e:	2b40      	cmp	r3, #64	@ 0x40
 8008b90:	d857      	bhi.n	8008c42 <USBD_StdDevReq+0xce>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00f      	beq.n	8008bb6 <USBD_StdDevReq+0x42>
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d153      	bne.n	8008c42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	32ae      	adds	r2, #174	@ 0xae
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	4798      	blx	r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb4:	e04a      	b.n	8008c4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	785b      	ldrb	r3, [r3, #1]
 8008bba:	2b09      	cmp	r3, #9
 8008bbc:	d83b      	bhi.n	8008c36 <USBD_StdDevReq+0xc2>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <USBD_StdDevReq+0x50>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008c2d 	.word	0x08008c2d
 8008bcc:	08008c37 	.word	0x08008c37
 8008bd0:	08008c23 	.word	0x08008c23
 8008bd4:	08008c37 	.word	0x08008c37
 8008bd8:	08008bf7 	.word	0x08008bf7
 8008bdc:	08008bed 	.word	0x08008bed
 8008be0:	08008c37 	.word	0x08008c37
 8008be4:	08008c0f 	.word	0x08008c0f
 8008be8:	08008c01 	.word	0x08008c01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fa3c 	bl	800906c <USBD_GetDescriptor>
          break;
 8008bf4:	e024      	b.n	8008c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fba1 	bl	8009340 <USBD_SetAddress>
          break;
 8008bfe:	e01f      	b.n	8008c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fbe0 	bl	80093c8 <USBD_SetConfig>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]
          break;
 8008c0c:	e018      	b.n	8008c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fc83 	bl	800951c <USBD_GetConfig>
          break;
 8008c16:	e013      	b.n	8008c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fcb4 	bl	8009588 <USBD_GetStatus>
          break;
 8008c20:	e00e      	b.n	8008c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fce3 	bl	80095f0 <USBD_SetFeature>
          break;
 8008c2a:	e009      	b.n	8008c40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fd07 	bl	8009642 <USBD_ClrFeature>
          break;
 8008c34:	e004      	b.n	8008c40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fd5e 	bl	80096fa <USBD_CtlError>
          break;
 8008c3e:	bf00      	nop
      }
      break;
 8008c40:	e004      	b.n	8008c4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fd58 	bl	80096fa <USBD_CtlError>
      break;
 8008c4a:	bf00      	nop
  }

  return ret;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop

08008c58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c6e:	2b40      	cmp	r3, #64	@ 0x40
 8008c70:	d005      	beq.n	8008c7e <USBD_StdItfReq+0x26>
 8008c72:	2b40      	cmp	r3, #64	@ 0x40
 8008c74:	d852      	bhi.n	8008d1c <USBD_StdItfReq+0xc4>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <USBD_StdItfReq+0x26>
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d14e      	bne.n	8008d1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d840      	bhi.n	8008d0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	889b      	ldrh	r3, [r3, #4]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d836      	bhi.n	8008d04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	889b      	ldrh	r3, [r3, #4]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fedb 	bl	8008a5a <USBD_CoreFindIF>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2bff      	cmp	r3, #255	@ 0xff
 8008cac:	d01d      	beq.n	8008cea <USBD_StdItfReq+0x92>
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d11a      	bne.n	8008cea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008cb4:	7bba      	ldrb	r2, [r7, #14]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	32ae      	adds	r2, #174	@ 0xae
 8008cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00f      	beq.n	8008ce4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008cc4:	7bba      	ldrb	r2, [r7, #14]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ccc:	7bba      	ldrb	r2, [r7, #14]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	32ae      	adds	r2, #174	@ 0xae
 8008cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ce2:	e004      	b.n	8008cee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ce8:	e001      	b.n	8008cee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008cea:	2303      	movs	r3, #3
 8008cec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88db      	ldrh	r3, [r3, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d110      	bne.n	8008d18 <USBD_StdItfReq+0xc0>
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10d      	bne.n	8008d18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fdc7 	bl	8009890 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d02:	e009      	b.n	8008d18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fcf7 	bl	80096fa <USBD_CtlError>
          break;
 8008d0c:	e004      	b.n	8008d18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fcf2 	bl	80096fa <USBD_CtlError>
          break;
 8008d16:	e000      	b.n	8008d1a <USBD_StdItfReq+0xc2>
          break;
 8008d18:	bf00      	nop
      }
      break;
 8008d1a:	e004      	b.n	8008d26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fceb 	bl	80096fa <USBD_CtlError>
      break;
 8008d24:	bf00      	nop
  }

  return ret;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	889b      	ldrh	r3, [r3, #4]
 8008d42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d4c:	2b40      	cmp	r3, #64	@ 0x40
 8008d4e:	d007      	beq.n	8008d60 <USBD_StdEPReq+0x30>
 8008d50:	2b40      	cmp	r3, #64	@ 0x40
 8008d52:	f200 817f 	bhi.w	8009054 <USBD_StdEPReq+0x324>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d02a      	beq.n	8008db0 <USBD_StdEPReq+0x80>
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	f040 817a 	bne.w	8009054 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff fe85 	bl	8008a74 <USBD_CoreFindEP>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d6e:	7b7b      	ldrb	r3, [r7, #13]
 8008d70:	2bff      	cmp	r3, #255	@ 0xff
 8008d72:	f000 8174 	beq.w	800905e <USBD_StdEPReq+0x32e>
 8008d76:	7b7b      	ldrb	r3, [r7, #13]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f040 8170 	bne.w	800905e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d7e:	7b7a      	ldrb	r2, [r7, #13]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d86:	7b7a      	ldrb	r2, [r7, #13]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	32ae      	adds	r2, #174	@ 0xae
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8163 	beq.w	800905e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d98:	7b7a      	ldrb	r2, [r7, #13]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	32ae      	adds	r2, #174	@ 0xae
 8008d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008dae:	e156      	b.n	800905e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d008      	beq.n	8008dca <USBD_StdEPReq+0x9a>
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	f300 8145 	bgt.w	8009048 <USBD_StdEPReq+0x318>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 809b 	beq.w	8008efa <USBD_StdEPReq+0x1ca>
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d03c      	beq.n	8008e42 <USBD_StdEPReq+0x112>
 8008dc8:	e13e      	b.n	8009048 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d002      	beq.n	8008ddc <USBD_StdEPReq+0xac>
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d016      	beq.n	8008e08 <USBD_StdEPReq+0xd8>
 8008dda:	e02c      	b.n	8008e36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00d      	beq.n	8008dfe <USBD_StdEPReq+0xce>
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b80      	cmp	r3, #128	@ 0x80
 8008de6:	d00a      	beq.n	8008dfe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f003 ffe9 	bl	800cdc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008df2:	2180      	movs	r1, #128	@ 0x80
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f003 ffe5 	bl	800cdc4 <USBD_LL_StallEP>
 8008dfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dfc:	e020      	b.n	8008e40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fc7a 	bl	80096fa <USBD_CtlError>
              break;
 8008e06:	e01b      	b.n	8008e40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10e      	bne.n	8008e2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <USBD_StdEPReq+0xfe>
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b80      	cmp	r3, #128	@ 0x80
 8008e1a:	d008      	beq.n	8008e2e <USBD_StdEPReq+0xfe>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	88db      	ldrh	r3, [r3, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d104      	bne.n	8008e2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f003 ffcb 	bl	800cdc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fd2e 	bl	8009890 <USBD_CtlSendStatus>

              break;
 8008e34:	e004      	b.n	8008e40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fc5e 	bl	80096fa <USBD_CtlError>
              break;
 8008e3e:	bf00      	nop
          }
          break;
 8008e40:	e107      	b.n	8009052 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d002      	beq.n	8008e54 <USBD_StdEPReq+0x124>
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d016      	beq.n	8008e80 <USBD_StdEPReq+0x150>
 8008e52:	e04b      	b.n	8008eec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00d      	beq.n	8008e76 <USBD_StdEPReq+0x146>
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	2b80      	cmp	r3, #128	@ 0x80
 8008e5e:	d00a      	beq.n	8008e76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f003 ffad 	bl	800cdc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e6a:	2180      	movs	r1, #128	@ 0x80
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f003 ffa9 	bl	800cdc4 <USBD_LL_StallEP>
 8008e72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e74:	e040      	b.n	8008ef8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc3e 	bl	80096fa <USBD_CtlError>
              break;
 8008e7e:	e03b      	b.n	8008ef8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	885b      	ldrh	r3, [r3, #2]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d136      	bne.n	8008ef6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d004      	beq.n	8008e9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f003 ffb3 	bl	800ce02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fcf7 	bl	8009890 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff fde4 	bl	8008a74 <USBD_CoreFindEP>
 8008eac:	4603      	mov	r3, r0
 8008eae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb0:	7b7b      	ldrb	r3, [r7, #13]
 8008eb2:	2bff      	cmp	r3, #255	@ 0xff
 8008eb4:	d01f      	beq.n	8008ef6 <USBD_StdEPReq+0x1c6>
 8008eb6:	7b7b      	ldrb	r3, [r7, #13]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d11c      	bne.n	8008ef6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ebc:	7b7a      	ldrb	r2, [r7, #13]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ec4:	7b7a      	ldrb	r2, [r7, #13]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	32ae      	adds	r2, #174	@ 0xae
 8008eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d010      	beq.n	8008ef6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ed4:	7b7a      	ldrb	r2, [r7, #13]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	32ae      	adds	r2, #174	@ 0xae
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008eea:	e004      	b.n	8008ef6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fc03 	bl	80096fa <USBD_CtlError>
              break;
 8008ef4:	e000      	b.n	8008ef8 <USBD_StdEPReq+0x1c8>
              break;
 8008ef6:	bf00      	nop
          }
          break;
 8008ef8:	e0ab      	b.n	8009052 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d002      	beq.n	8008f0c <USBD_StdEPReq+0x1dc>
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d032      	beq.n	8008f70 <USBD_StdEPReq+0x240>
 8008f0a:	e097      	b.n	800903c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <USBD_StdEPReq+0x1f2>
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b80      	cmp	r3, #128	@ 0x80
 8008f16:	d004      	beq.n	8008f22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fbed 	bl	80096fa <USBD_CtlError>
                break;
 8008f20:	e091      	b.n	8009046 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da0b      	bge.n	8008f42 <USBD_StdEPReq+0x212>
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	3310      	adds	r3, #16
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3304      	adds	r3, #4
 8008f40:	e00b      	b.n	8008f5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	4413      	add	r3, r2
 8008f58:	3304      	adds	r3, #4
 8008f5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2202      	movs	r2, #2
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc37 	bl	80097dc <USBD_CtlSendData>
              break;
 8008f6e:	e06a      	b.n	8009046 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da11      	bge.n	8008f9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	f003 020f 	and.w	r2, r3, #15
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	4613      	mov	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	440b      	add	r3, r1
 8008f8a:	3324      	adds	r3, #36	@ 0x24
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d117      	bne.n	8008fc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fbb0 	bl	80096fa <USBD_CtlError>
                  break;
 8008f9a:	e054      	b.n	8009046 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	f003 020f 	and.w	r2, r3, #15
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fb9d 	bl	80096fa <USBD_CtlError>
                  break;
 8008fc0:	e041      	b.n	8009046 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	da0b      	bge.n	8008fe2 <USBD_StdEPReq+0x2b2>
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	3310      	adds	r3, #16
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	3304      	adds	r3, #4
 8008fe0:	e00b      	b.n	8008ffa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <USBD_StdEPReq+0x2d8>
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b80      	cmp	r3, #128	@ 0x80
 8009006:	d103      	bne.n	8009010 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e00e      	b.n	800902e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f003 ff13 	bl	800ce40 <USBD_LL_IsStallEP>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2201      	movs	r2, #1
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e002      	b.n	800902e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2202      	movs	r2, #2
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fbd1 	bl	80097dc <USBD_CtlSendData>
              break;
 800903a:	e004      	b.n	8009046 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fb5b 	bl	80096fa <USBD_CtlError>
              break;
 8009044:	bf00      	nop
          }
          break;
 8009046:	e004      	b.n	8009052 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fb55 	bl	80096fa <USBD_CtlError>
          break;
 8009050:	bf00      	nop
      }
      break;
 8009052:	e005      	b.n	8009060 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fb4f 	bl	80096fa <USBD_CtlError>
      break;
 800905c:	e000      	b.n	8009060 <USBD_StdEPReq+0x330>
      break;
 800905e:	bf00      	nop
  }

  return ret;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	885b      	ldrh	r3, [r3, #2]
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	b29b      	uxth	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	2b06      	cmp	r3, #6
 800908e:	f200 8128 	bhi.w	80092e2 <USBD_GetDescriptor+0x276>
 8009092:	a201      	add	r2, pc, #4	@ (adr r2, 8009098 <USBD_GetDescriptor+0x2c>)
 8009094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009098:	080090b5 	.word	0x080090b5
 800909c:	080090cd 	.word	0x080090cd
 80090a0:	0800910d 	.word	0x0800910d
 80090a4:	080092e3 	.word	0x080092e3
 80090a8:	080092e3 	.word	0x080092e3
 80090ac:	08009283 	.word	0x08009283
 80090b0:	080092af 	.word	0x080092af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
      break;
 80090ca:	e112      	b.n	80092f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	7c1b      	ldrb	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10d      	bne.n	80090f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090dc:	f107 0208 	add.w	r2, r7, #8
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
 80090e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3301      	adds	r3, #1
 80090ea:	2202      	movs	r2, #2
 80090ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090ee:	e100      	b.n	80092f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	f107 0208 	add.w	r2, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	2202      	movs	r2, #2
 8009108:	701a      	strb	r2, [r3, #0]
      break;
 800910a:	e0f2      	b.n	80092f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	885b      	ldrh	r3, [r3, #2]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b05      	cmp	r3, #5
 8009114:	f200 80ac 	bhi.w	8009270 <USBD_GetDescriptor+0x204>
 8009118:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <USBD_GetDescriptor+0xb4>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009139 	.word	0x08009139
 8009124:	0800916d 	.word	0x0800916d
 8009128:	080091a1 	.word	0x080091a1
 800912c:	080091d5 	.word	0x080091d5
 8009130:	08009209 	.word	0x08009209
 8009134:	0800923d 	.word	0x0800923d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00b      	beq.n	800915c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7c12      	ldrb	r2, [r2, #16]
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	4610      	mov	r0, r2
 8009156:	4798      	blx	r3
 8009158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915a:	e091      	b.n	8009280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 facb 	bl	80096fa <USBD_CtlError>
            err++;
 8009164:	7afb      	ldrb	r3, [r7, #11]
 8009166:	3301      	adds	r3, #1
 8009168:	72fb      	strb	r3, [r7, #11]
          break;
 800916a:	e089      	b.n	8009280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	7c12      	ldrb	r2, [r2, #16]
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
 800918c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800918e:	e077      	b.n	8009280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fab1 	bl	80096fa <USBD_CtlError>
            err++;
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	3301      	adds	r3, #1
 800919c:	72fb      	strb	r3, [r7, #11]
          break;
 800919e:	e06f      	b.n	8009280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	7c12      	ldrb	r2, [r2, #16]
 80091b8:	f107 0108 	add.w	r1, r7, #8
 80091bc:	4610      	mov	r0, r2
 80091be:	4798      	blx	r3
 80091c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c2:	e05d      	b.n	8009280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fa97 	bl	80096fa <USBD_CtlError>
            err++;
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	3301      	adds	r3, #1
 80091d0:	72fb      	strb	r3, [r7, #11]
          break;
 80091d2:	e055      	b.n	8009280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	7c12      	ldrb	r2, [r2, #16]
 80091ec:	f107 0108 	add.w	r1, r7, #8
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
 80091f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091f6:	e043      	b.n	8009280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa7d 	bl	80096fa <USBD_CtlError>
            err++;
 8009200:	7afb      	ldrb	r3, [r7, #11]
 8009202:	3301      	adds	r3, #1
 8009204:	72fb      	strb	r3, [r7, #11]
          break;
 8009206:	e03b      	b.n	8009280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	7c12      	ldrb	r2, [r2, #16]
 8009220:	f107 0108 	add.w	r1, r7, #8
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922a:	e029      	b.n	8009280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa63 	bl	80096fa <USBD_CtlError>
            err++;
 8009234:	7afb      	ldrb	r3, [r7, #11]
 8009236:	3301      	adds	r3, #1
 8009238:	72fb      	strb	r3, [r7, #11]
          break;
 800923a:	e021      	b.n	8009280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	7c12      	ldrb	r2, [r2, #16]
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800925e:	e00f      	b.n	8009280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fa49 	bl	80096fa <USBD_CtlError>
            err++;
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	3301      	adds	r3, #1
 800926c:	72fb      	strb	r3, [r7, #11]
          break;
 800926e:	e007      	b.n	8009280 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa41 	bl	80096fa <USBD_CtlError>
          err++;
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	3301      	adds	r3, #1
 800927c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800927e:	bf00      	nop
      }
      break;
 8009280:	e037      	b.n	80092f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7c1b      	ldrb	r3, [r3, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d109      	bne.n	800929e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009292:	f107 0208 	add.w	r2, r7, #8
 8009296:	4610      	mov	r0, r2
 8009298:	4798      	blx	r3
 800929a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800929c:	e029      	b.n	80092f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fa2a 	bl	80096fa <USBD_CtlError>
        err++;
 80092a6:	7afb      	ldrb	r3, [r7, #11]
 80092a8:	3301      	adds	r3, #1
 80092aa:	72fb      	strb	r3, [r7, #11]
      break;
 80092ac:	e021      	b.n	80092f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7c1b      	ldrb	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10d      	bne.n	80092d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092be:	f107 0208 	add.w	r2, r7, #8
 80092c2:	4610      	mov	r0, r2
 80092c4:	4798      	blx	r3
 80092c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3301      	adds	r3, #1
 80092cc:	2207      	movs	r2, #7
 80092ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092d0:	e00f      	b.n	80092f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fa10 	bl	80096fa <USBD_CtlError>
        err++;
 80092da:	7afb      	ldrb	r3, [r7, #11]
 80092dc:	3301      	adds	r3, #1
 80092de:	72fb      	strb	r3, [r7, #11]
      break;
 80092e0:	e007      	b.n	80092f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fa08 	bl	80096fa <USBD_CtlError>
      err++;
 80092ea:	7afb      	ldrb	r3, [r7, #11]
 80092ec:	3301      	adds	r3, #1
 80092ee:	72fb      	strb	r3, [r7, #11]
      break;
 80092f0:	bf00      	nop
  }

  if (err != 0U)
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d11e      	bne.n	8009336 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	88db      	ldrh	r3, [r3, #6]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d016      	beq.n	800932e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009300:	893b      	ldrh	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00e      	beq.n	8009324 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	88da      	ldrh	r2, [r3, #6]
 800930a:	893b      	ldrh	r3, [r7, #8]
 800930c:	4293      	cmp	r3, r2
 800930e:	bf28      	it	cs
 8009310:	4613      	movcs	r3, r2
 8009312:	b29b      	uxth	r3, r3
 8009314:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009316:	893b      	ldrh	r3, [r7, #8]
 8009318:	461a      	mov	r2, r3
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fa5d 	bl	80097dc <USBD_CtlSendData>
 8009322:	e009      	b.n	8009338 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9e7 	bl	80096fa <USBD_CtlError>
 800932c:	e004      	b.n	8009338 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 faae 	bl	8009890 <USBD_CtlSendStatus>
 8009334:	e000      	b.n	8009338 <USBD_GetDescriptor+0x2cc>
    return;
 8009336:	bf00      	nop
  }
}
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop

08009340 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	889b      	ldrh	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d131      	bne.n	80093b6 <USBD_SetAddress+0x76>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	88db      	ldrh	r3, [r3, #6]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d12d      	bne.n	80093b6 <USBD_SetAddress+0x76>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	885b      	ldrh	r3, [r3, #2]
 800935e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009360:	d829      	bhi.n	80093b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	885b      	ldrh	r3, [r3, #2]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800936c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b03      	cmp	r3, #3
 8009378:	d104      	bne.n	8009384 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f9bc 	bl	80096fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009382:	e01d      	b.n	80093c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	7bfa      	ldrb	r2, [r7, #15]
 8009388:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f003 fd81 	bl	800ce98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fa7a 	bl	8009890 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093aa:	e009      	b.n	80093c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b4:	e004      	b.n	80093c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f99e 	bl	80096fa <USBD_CtlError>
  }
}
 80093be:	bf00      	nop
 80093c0:	bf00      	nop
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	885b      	ldrh	r3, [r3, #2]
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	4b4e      	ldr	r3, [pc, #312]	@ (8009518 <USBD_SetConfig+0x150>)
 80093de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009518 <USBD_SetConfig+0x150>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d905      	bls.n	80093f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f985 	bl	80096fa <USBD_CtlError>
    return USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e08c      	b.n	800950e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d002      	beq.n	8009406 <USBD_SetConfig+0x3e>
 8009400:	2b03      	cmp	r3, #3
 8009402:	d029      	beq.n	8009458 <USBD_SetConfig+0x90>
 8009404:	e075      	b.n	80094f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009406:	4b44      	ldr	r3, [pc, #272]	@ (8009518 <USBD_SetConfig+0x150>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d020      	beq.n	8009450 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800940e:	4b42      	ldr	r3, [pc, #264]	@ (8009518 <USBD_SetConfig+0x150>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009418:	4b3f      	ldr	r3, [pc, #252]	@ (8009518 <USBD_SetConfig+0x150>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7fe ffe3 	bl	80083ea <USBD_SetClassConfig>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f962 	bl	80096fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2202      	movs	r2, #2
 800943a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800943e:	e065      	b.n	800950c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fa25 	bl	8009890 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2203      	movs	r2, #3
 800944a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800944e:	e05d      	b.n	800950c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fa1d 	bl	8009890 <USBD_CtlSendStatus>
      break;
 8009456:	e059      	b.n	800950c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009458:	4b2f      	ldr	r3, [pc, #188]	@ (8009518 <USBD_SetConfig+0x150>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d112      	bne.n	8009486 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009468:	4b2b      	ldr	r3, [pc, #172]	@ (8009518 <USBD_SetConfig+0x150>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	461a      	mov	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009472:	4b29      	ldr	r3, [pc, #164]	@ (8009518 <USBD_SetConfig+0x150>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	4619      	mov	r1, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7fe ffd2 	bl	8008422 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa06 	bl	8009890 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009484:	e042      	b.n	800950c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009486:	4b24      	ldr	r3, [pc, #144]	@ (8009518 <USBD_SetConfig+0x150>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	429a      	cmp	r2, r3
 8009492:	d02a      	beq.n	80094ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	b2db      	uxtb	r3, r3
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fe ffc0 	bl	8008422 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009518 <USBD_SetConfig+0x150>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009518 <USBD_SetConfig+0x150>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fe ff99 	bl	80083ea <USBD_SetClassConfig>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00f      	beq.n	80094e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f918 	bl	80096fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7fe ffa5 	bl	8008422 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094e0:	e014      	b.n	800950c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f9d4 	bl	8009890 <USBD_CtlSendStatus>
      break;
 80094e8:	e010      	b.n	800950c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f9d0 	bl	8009890 <USBD_CtlSendStatus>
      break;
 80094f0:	e00c      	b.n	800950c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f900 	bl	80096fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094fa:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <USBD_SetConfig+0x150>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fe ff8e 	bl	8008422 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009506:	2303      	movs	r3, #3
 8009508:	73fb      	strb	r3, [r7, #15]
      break;
 800950a:	bf00      	nop
  }

  return ret;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200005ec 	.word	0x200005ec

0800951c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	88db      	ldrh	r3, [r3, #6]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d004      	beq.n	8009538 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f8e2 	bl	80096fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009536:	e023      	b.n	8009580 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	dc02      	bgt.n	800954a <USBD_GetConfig+0x2e>
 8009544:	2b00      	cmp	r3, #0
 8009546:	dc03      	bgt.n	8009550 <USBD_GetConfig+0x34>
 8009548:	e015      	b.n	8009576 <USBD_GetConfig+0x5a>
 800954a:	2b03      	cmp	r3, #3
 800954c:	d00b      	beq.n	8009566 <USBD_GetConfig+0x4a>
 800954e:	e012      	b.n	8009576 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3308      	adds	r3, #8
 800955a:	2201      	movs	r2, #1
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f93c 	bl	80097dc <USBD_CtlSendData>
        break;
 8009564:	e00c      	b.n	8009580 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3304      	adds	r3, #4
 800956a:	2201      	movs	r2, #1
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f934 	bl	80097dc <USBD_CtlSendData>
        break;
 8009574:	e004      	b.n	8009580 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f8be 	bl	80096fa <USBD_CtlError>
        break;
 800957e:	bf00      	nop
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009598:	b2db      	uxtb	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	2b02      	cmp	r3, #2
 800959e:	d81e      	bhi.n	80095de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	88db      	ldrh	r3, [r3, #6]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d004      	beq.n	80095b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f8a5 	bl	80096fa <USBD_CtlError>
        break;
 80095b0:	e01a      	b.n	80095e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d005      	beq.n	80095ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f043 0202 	orr.w	r2, r3, #2
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	330c      	adds	r3, #12
 80095d2:	2202      	movs	r2, #2
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f900 	bl	80097dc <USBD_CtlSendData>
      break;
 80095dc:	e004      	b.n	80095e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f88a 	bl	80096fa <USBD_CtlError>
      break;
 80095e6:	bf00      	nop
  }
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d107      	bne.n	8009612 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f940 	bl	8009890 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009610:	e013      	b.n	800963a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d10b      	bne.n	8009632 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	889b      	ldrh	r3, [r3, #4]
 800961e:	0a1b      	lsrs	r3, r3, #8
 8009620:	b29b      	uxth	r3, r3
 8009622:	b2da      	uxtb	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f930 	bl	8009890 <USBD_CtlSendStatus>
}
 8009630:	e003      	b.n	800963a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f860 	bl	80096fa <USBD_CtlError>
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009652:	b2db      	uxtb	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	2b02      	cmp	r3, #2
 8009658:	d80b      	bhi.n	8009672 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	885b      	ldrh	r3, [r3, #2]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d10c      	bne.n	800967c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f910 	bl	8009890 <USBD_CtlSendStatus>
      }
      break;
 8009670:	e004      	b.n	800967c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f840 	bl	80096fa <USBD_CtlError>
      break;
 800967a:	e000      	b.n	800967e <USBD_ClrFeature+0x3c>
      break;
 800967c:	bf00      	nop
  }
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	781a      	ldrb	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3301      	adds	r3, #1
 80096a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3301      	adds	r3, #1
 80096ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff fa40 	bl	8008b36 <SWAPBYTE>
 80096b6:	4603      	mov	r3, r0
 80096b8:	461a      	mov	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3301      	adds	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff fa33 	bl	8008b36 <SWAPBYTE>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff fa26 	bl	8008b36 <SWAPBYTE>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	80da      	strh	r2, [r3, #6]
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009704:	2180      	movs	r1, #128	@ 0x80
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f003 fb5c 	bl	800cdc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800970c:	2100      	movs	r1, #0
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f003 fb58 	bl	800cdc4 <USBD_LL_StallEP>
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d036      	beq.n	80097a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009736:	6938      	ldr	r0, [r7, #16]
 8009738:	f000 f836 	bl	80097a8 <USBD_GetLen>
 800973c:	4603      	mov	r3, r0
 800973e:	3301      	adds	r3, #1
 8009740:	b29b      	uxth	r3, r3
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	4413      	add	r3, r2
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	7812      	ldrb	r2, [r2, #0]
 8009754:	701a      	strb	r2, [r3, #0]
  idx++;
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	3301      	adds	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	2203      	movs	r2, #3
 8009764:	701a      	strb	r2, [r3, #0]
  idx++;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	3301      	adds	r3, #1
 800976a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800976c:	e013      	b.n	8009796 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	4413      	add	r3, r2
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	7812      	ldrb	r2, [r2, #0]
 8009778:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3301      	adds	r3, #1
 800977e:	613b      	str	r3, [r7, #16]
    idx++;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	3301      	adds	r3, #1
 8009784:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	4413      	add	r3, r2
 800978c:	2200      	movs	r2, #0
 800978e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	3301      	adds	r3, #1
 8009794:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e7      	bne.n	800976e <USBD_GetString+0x52>
 800979e:	e000      	b.n	80097a2 <USBD_GetString+0x86>
    return;
 80097a0:	bf00      	nop
  }
}
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097b8:	e005      	b.n	80097c6 <USBD_GetLen+0x1e>
  {
    len++;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
 80097bc:	3301      	adds	r3, #1
 80097be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f5      	bne.n	80097ba <USBD_GetLen+0x12>
  }

  return len;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	2100      	movs	r1, #0
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f003 fb67 	bl	800ced6 <USBD_LL_Transmit>

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	2100      	movs	r1, #0
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f003 fb56 	bl	800ced6 <USBD_LL_Transmit>

  return USBD_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2203      	movs	r2, #3
 8009844:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	2100      	movs	r1, #0
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f003 fb5a 	bl	800cf18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	2100      	movs	r1, #0
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f003 fb49 	bl	800cf18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2204      	movs	r2, #4
 800989c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098a0:	2300      	movs	r3, #0
 80098a2:	2200      	movs	r2, #0
 80098a4:	2100      	movs	r1, #0
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f003 fb15 	bl	800ced6 <USBD_LL_Transmit>

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2205      	movs	r2, #5
 80098c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098c6:	2300      	movs	r3, #0
 80098c8:	2200      	movs	r2, #0
 80098ca:	2100      	movs	r1, #0
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f003 fb23 	bl	800cf18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <__NVIC_SetPriority>:
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	6039      	str	r1, [r7, #0]
 80098e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	db0a      	blt.n	8009906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	490c      	ldr	r1, [pc, #48]	@ (8009928 <__NVIC_SetPriority+0x4c>)
 80098f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098fa:	0112      	lsls	r2, r2, #4
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	440b      	add	r3, r1
 8009900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009904:	e00a      	b.n	800991c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	b2da      	uxtb	r2, r3
 800990a:	4908      	ldr	r1, [pc, #32]	@ (800992c <__NVIC_SetPriority+0x50>)
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	3b04      	subs	r3, #4
 8009914:	0112      	lsls	r2, r2, #4
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	440b      	add	r3, r1
 800991a:	761a      	strb	r2, [r3, #24]
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	e000e100 	.word	0xe000e100
 800992c:	e000ed00 	.word	0xe000ed00

08009930 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009934:	4b05      	ldr	r3, [pc, #20]	@ (800994c <SysTick_Handler+0x1c>)
 8009936:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009938:	f001 fd76 	bl	800b428 <xTaskGetSchedulerState>
 800993c:	4603      	mov	r3, r0
 800993e:	2b01      	cmp	r3, #1
 8009940:	d001      	beq.n	8009946 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009942:	f002 fbd1 	bl	800c0e8 <xPortSysTickHandler>
  }
}
 8009946:	bf00      	nop
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	e000e010 	.word	0xe000e010

08009950 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009954:	2100      	movs	r1, #0
 8009956:	f06f 0004 	mvn.w	r0, #4
 800995a:	f7ff ffbf 	bl	80098dc <__NVIC_SetPriority>
#endif
}
 800995e:	bf00      	nop
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800996a:	f3ef 8305 	mrs	r3, IPSR
 800996e:	603b      	str	r3, [r7, #0]
  return(result);
 8009970:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009976:	f06f 0305 	mvn.w	r3, #5
 800997a:	607b      	str	r3, [r7, #4]
 800997c:	e00c      	b.n	8009998 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800997e:	4b0a      	ldr	r3, [pc, #40]	@ (80099a8 <osKernelInitialize+0x44>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d105      	bne.n	8009992 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009986:	4b08      	ldr	r3, [pc, #32]	@ (80099a8 <osKernelInitialize+0x44>)
 8009988:	2201      	movs	r2, #1
 800998a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800998c:	2300      	movs	r3, #0
 800998e:	607b      	str	r3, [r7, #4]
 8009990:	e002      	b.n	8009998 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009992:	f04f 33ff 	mov.w	r3, #4294967295
 8009996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009998:	687b      	ldr	r3, [r7, #4]
}
 800999a:	4618      	mov	r0, r3
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	200005f0 	.word	0x200005f0

080099ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b2:	f3ef 8305 	mrs	r3, IPSR
 80099b6:	603b      	str	r3, [r7, #0]
  return(result);
 80099b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80099be:	f06f 0305 	mvn.w	r3, #5
 80099c2:	607b      	str	r3, [r7, #4]
 80099c4:	e010      	b.n	80099e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099c6:	4b0b      	ldr	r3, [pc, #44]	@ (80099f4 <osKernelStart+0x48>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d109      	bne.n	80099e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80099ce:	f7ff ffbf 	bl	8009950 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80099d2:	4b08      	ldr	r3, [pc, #32]	@ (80099f4 <osKernelStart+0x48>)
 80099d4:	2202      	movs	r2, #2
 80099d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099d8:	f001 f8c2 	bl	800ab60 <vTaskStartScheduler>
      stat = osOK;
 80099dc:	2300      	movs	r3, #0
 80099de:	607b      	str	r3, [r7, #4]
 80099e0:	e002      	b.n	80099e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099e2:	f04f 33ff 	mov.w	r3, #4294967295
 80099e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099e8:	687b      	ldr	r3, [r7, #4]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	200005f0 	.word	0x200005f0

080099f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08e      	sub	sp, #56	@ 0x38
 80099fc:	af04      	add	r7, sp, #16
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a08:	f3ef 8305 	mrs	r3, IPSR
 8009a0c:	617b      	str	r3, [r7, #20]
  return(result);
 8009a0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d17e      	bne.n	8009b12 <osThreadNew+0x11a>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d07b      	beq.n	8009b12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a1a:	2380      	movs	r3, #128	@ 0x80
 8009a1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a1e:	2318      	movs	r3, #24
 8009a20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009a26:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d045      	beq.n	8009abe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <osThreadNew+0x48>
        name = attr->name;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d008      	beq.n	8009a66 <osThreadNew+0x6e>
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	2b38      	cmp	r3, #56	@ 0x38
 8009a58:	d805      	bhi.n	8009a66 <osThreadNew+0x6e>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <osThreadNew+0x72>
        return (NULL);
 8009a66:	2300      	movs	r3, #0
 8009a68:	e054      	b.n	8009b14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	089b      	lsrs	r3, r3, #2
 8009a78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00e      	beq.n	8009aa0 <osThreadNew+0xa8>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	2ba7      	cmp	r3, #167	@ 0xa7
 8009a88:	d90a      	bls.n	8009aa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d006      	beq.n	8009aa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <osThreadNew+0xa8>
        mem = 1;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	61bb      	str	r3, [r7, #24]
 8009a9e:	e010      	b.n	8009ac2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10c      	bne.n	8009ac2 <osThreadNew+0xca>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d108      	bne.n	8009ac2 <osThreadNew+0xca>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d104      	bne.n	8009ac2 <osThreadNew+0xca>
          mem = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	61bb      	str	r3, [r7, #24]
 8009abc:	e001      	b.n	8009ac2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d110      	bne.n	8009aea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ad0:	9202      	str	r2, [sp, #8]
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	6a3a      	ldr	r2, [r7, #32]
 8009adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fe80 	bl	800a7e4 <xTaskCreateStatic>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	613b      	str	r3, [r7, #16]
 8009ae8:	e013      	b.n	8009b12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d110      	bne.n	8009b12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	f107 0310 	add.w	r3, r7, #16
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 fece 	bl	800a8a4 <xTaskCreate>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d001      	beq.n	8009b12 <osThreadNew+0x11a>
            hTask = NULL;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b12:	693b      	ldr	r3, [r7, #16]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3728      	adds	r7, #40	@ 0x28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08c      	sub	sp, #48	@ 0x30
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b28:	f3ef 8305 	mrs	r3, IPSR
 8009b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b2e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009b34:	f06f 0305 	mvn.w	r3, #5
 8009b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b3a:	e06b      	b.n	8009c14 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da03      	bge.n	8009b4a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009b42:	f06f 0303 	mvn.w	r3, #3
 8009b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b48:	e064      	b.n	8009c14 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b58:	e001      	b.n	8009b5e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8009b66:	f001 f917 	bl	800ad98 <xTaskGetTickCount>
 8009b6a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009b6c:	f107 0210 	add.w	r2, r7, #16
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b74:	2000      	movs	r0, #0
 8009b76:	f001 fce5 	bl	800b544 <xTaskNotifyWait>
 8009b7a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d137      	bne.n	8009bf2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4013      	ands	r3, r2
 8009b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00c      	beq.n	8009bb6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d032      	beq.n	8009c0e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10f      	bne.n	8009bce <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009bae:	f06f 0302 	mvn.w	r3, #2
 8009bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8009bb4:	e02e      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bba:	4013      	ands	r3, r2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d128      	bne.n	8009c12 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009bc6:	f06f 0302 	mvn.w	r3, #2
 8009bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8009bcc:	e022      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009bce:	f001 f8e3 	bl	800ad98 <xTaskGetTickCount>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d902      	bls.n	8009be8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009be6:	e00e      	b.n	8009c06 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bf0:	e009      	b.n	8009c06 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009bf8:	f06f 0302 	mvn.w	r3, #2
 8009bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bfe:	e002      	b.n	8009c06 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009c00:	f06f 0301 	mvn.w	r3, #1
 8009c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1af      	bne.n	8009b6c <osThreadFlagsWait+0x50>
 8009c0c:	e002      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            break;
 8009c0e:	bf00      	nop
 8009c10:	e000      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            break;
 8009c12:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3730      	adds	r7, #48	@ 0x30
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a07      	ldr	r2, [pc, #28]	@ (8009c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8009c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4a06      	ldr	r2, [pc, #24]	@ (8009c50 <vApplicationGetIdleTaskMemory+0x30>)
 8009c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2280      	movs	r2, #128	@ 0x80
 8009c3c:	601a      	str	r2, [r3, #0]
}
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	200005f4 	.word	0x200005f4
 8009c50:	2000069c 	.word	0x2000069c

08009c54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	4a07      	ldr	r2, [pc, #28]	@ (8009c80 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4a06      	ldr	r2, [pc, #24]	@ (8009c84 <vApplicationGetTimerTaskMemory+0x30>)
 8009c6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c72:	601a      	str	r2, [r3, #0]
}
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	2000089c 	.word	0x2000089c
 8009c84:	20000944 	.word	0x20000944

08009c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f103 0208 	add.w	r2, r3, #8
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f103 0208 	add.w	r2, r3, #8
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f103 0208 	add.w	r2, r3, #8
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	601a      	str	r2, [r3, #0]
}
 8009d1e:	bf00      	nop
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d40:	d103      	bne.n	8009d4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	e00c      	b.n	8009d64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	e002      	b.n	8009d58 <vListInsert+0x2e>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d2f6      	bcs.n	8009d52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	601a      	str	r2, [r3, #0]
}
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	6892      	ldr	r2, [r2, #8]
 8009db2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6852      	ldr	r2, [r2, #4]
 8009dbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d103      	bne.n	8009dd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	1e5a      	subs	r2, r3, #1
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10b      	bne.n	8009e1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	e7fd      	b.n	8009e18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e1c:	f002 f8d4 	bl	800bfc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e28:	68f9      	ldr	r1, [r7, #12]
 8009e2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e2c:	fb01 f303 	mul.w	r3, r1, r3
 8009e30:	441a      	add	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e52:	fb01 f303 	mul.w	r3, r1, r3
 8009e56:	441a      	add	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	22ff      	movs	r2, #255	@ 0xff
 8009e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	22ff      	movs	r2, #255	@ 0xff
 8009e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d114      	bne.n	8009e9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d01a      	beq.n	8009eb0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3310      	adds	r3, #16
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 f90c 	bl	800b09c <xTaskRemoveFromEventList>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d012      	beq.n	8009eb0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec0 <xQueueGenericReset+0xd0>)
 8009e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	e009      	b.n	8009eb0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3310      	adds	r3, #16
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff fef1 	bl	8009c88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3324      	adds	r3, #36	@ 0x24
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff feec 	bl	8009c88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009eb0:	f002 f8bc 	bl	800c02c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009eb4:	2301      	movs	r3, #1
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08e      	sub	sp, #56	@ 0x38
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10b      	bne.n	8009ef0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	e7fd      	b.n	8009eec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	e7fd      	b.n	8009f0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <xQueueGenericCreateStatic+0x56>
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <xQueueGenericCreateStatic+0x5a>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <xQueueGenericCreateStatic+0x5c>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10b      	bne.n	8009f3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	623b      	str	r3, [r7, #32]
}
 8009f36:	bf00      	nop
 8009f38:	bf00      	nop
 8009f3a:	e7fd      	b.n	8009f38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <xQueueGenericCreateStatic+0x84>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <xQueueGenericCreateStatic+0x88>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e000      	b.n	8009f4e <xQueueGenericCreateStatic+0x8a>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10b      	bne.n	8009f6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	61fb      	str	r3, [r7, #28]
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	e7fd      	b.n	8009f66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f6a:	2350      	movs	r3, #80	@ 0x50
 8009f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b50      	cmp	r3, #80	@ 0x50
 8009f72:	d00b      	beq.n	8009f8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	61bb      	str	r3, [r7, #24]
}
 8009f86:	bf00      	nop
 8009f88:	bf00      	nop
 8009f8a:	e7fd      	b.n	8009f88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00d      	beq.n	8009fb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 f805 	bl	8009fbe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3730      	adds	r7, #48	@ 0x30
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d103      	bne.n	8009fda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	69ba      	ldr	r2, [r7, #24]
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	e002      	b.n	8009fe0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009fec:	2101      	movs	r1, #1
 8009fee:	69b8      	ldr	r0, [r7, #24]
 8009ff0:	f7ff fefe 	bl	8009df0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08e      	sub	sp, #56	@ 0x38
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a012:	2300      	movs	r3, #0
 800a014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <xQueueGenericSend+0x34>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d103      	bne.n	800a046 <xQueueGenericSend+0x42>
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <xQueueGenericSend+0x46>
 800a046:	2301      	movs	r3, #1
 800a048:	e000      	b.n	800a04c <xQueueGenericSend+0x48>
 800a04a:	2300      	movs	r3, #0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10b      	bne.n	800a068 <xQueueGenericSend+0x64>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	e7fd      	b.n	800a064 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d103      	bne.n	800a076 <xQueueGenericSend+0x72>
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <xQueueGenericSend+0x76>
 800a076:	2301      	movs	r3, #1
 800a078:	e000      	b.n	800a07c <xQueueGenericSend+0x78>
 800a07a:	2300      	movs	r3, #0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10b      	bne.n	800a098 <xQueueGenericSend+0x94>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	623b      	str	r3, [r7, #32]
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	e7fd      	b.n	800a094 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a098:	f001 f9c6 	bl	800b428 <xTaskGetSchedulerState>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d102      	bne.n	800a0a8 <xQueueGenericSend+0xa4>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <xQueueGenericSend+0xa8>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e000      	b.n	800a0ae <xQueueGenericSend+0xaa>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <xQueueGenericSend+0xc6>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	61fb      	str	r3, [r7, #28]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0ca:	f001 ff7d 	bl	800bfc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d302      	bcc.n	800a0e0 <xQueueGenericSend+0xdc>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d129      	bne.n	800a134 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0e6:	f000 fa0f 	bl	800a508 <prvCopyDataToQueue>
 800a0ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d010      	beq.n	800a116 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f6:	3324      	adds	r3, #36	@ 0x24
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 ffcf 	bl	800b09c <xTaskRemoveFromEventList>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d013      	beq.n	800a12c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a104:	4b3f      	ldr	r3, [pc, #252]	@ (800a204 <xQueueGenericSend+0x200>)
 800a106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	e00a      	b.n	800a12c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d007      	beq.n	800a12c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a11c:	4b39      	ldr	r3, [pc, #228]	@ (800a204 <xQueueGenericSend+0x200>)
 800a11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a12c:	f001 ff7e 	bl	800c02c <vPortExitCritical>
				return pdPASS;
 800a130:	2301      	movs	r3, #1
 800a132:	e063      	b.n	800a1fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d103      	bne.n	800a142 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a13a:	f001 ff77 	bl	800c02c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	e05c      	b.n	800a1fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a144:	2b00      	cmp	r3, #0
 800a146:	d106      	bne.n	800a156 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a148:	f107 0314 	add.w	r3, r7, #20
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 f809 	bl	800b164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a152:	2301      	movs	r3, #1
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a156:	f001 ff69 	bl	800c02c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a15a:	f000 fd71 	bl	800ac40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a15e:	f001 ff33 	bl	800bfc8 <vPortEnterCritical>
 800a162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a168:	b25b      	sxtb	r3, r3
 800a16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16e:	d103      	bne.n	800a178 <xQueueGenericSend+0x174>
 800a170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a17e:	b25b      	sxtb	r3, r3
 800a180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a184:	d103      	bne.n	800a18e <xQueueGenericSend+0x18a>
 800a186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a18e:	f001 ff4d 	bl	800c02c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a192:	1d3a      	adds	r2, r7, #4
 800a194:	f107 0314 	add.w	r3, r7, #20
 800a198:	4611      	mov	r1, r2
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 fff8 	bl	800b190 <xTaskCheckForTimeOut>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d124      	bne.n	800a1f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a1a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1a8:	f000 faa6 	bl	800a6f8 <prvIsQueueFull>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d018      	beq.n	800a1e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	3310      	adds	r3, #16
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 ff1c 	bl	800aff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1c2:	f000 fa31 	bl	800a628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1c6:	f000 fd49 	bl	800ac5c <xTaskResumeAll>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f47f af7c 	bne.w	800a0ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a1d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <xQueueGenericSend+0x200>)
 800a1d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	e772      	b.n	800a0ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1e6:	f000 fa1f 	bl	800a628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ea:	f000 fd37 	bl	800ac5c <xTaskResumeAll>
 800a1ee:	e76c      	b.n	800a0ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1f2:	f000 fa19 	bl	800a628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1f6:	f000 fd31 	bl	800ac5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3738      	adds	r7, #56	@ 0x38
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	e000ed04 	.word	0xe000ed04

0800a208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b090      	sub	sp, #64	@ 0x40
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10b      	bne.n	800a238 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a232:	bf00      	nop
 800a234:	bf00      	nop
 800a236:	e7fd      	b.n	800a234 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d103      	bne.n	800a246 <xQueueGenericSendFromISR+0x3e>
 800a23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <xQueueGenericSendFromISR+0x42>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <xQueueGenericSendFromISR+0x44>
 800a24a:	2300      	movs	r3, #0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10b      	bne.n	800a268 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	e7fd      	b.n	800a264 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d103      	bne.n	800a276 <xQueueGenericSendFromISR+0x6e>
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a272:	2b01      	cmp	r3, #1
 800a274:	d101      	bne.n	800a27a <xQueueGenericSendFromISR+0x72>
 800a276:	2301      	movs	r3, #1
 800a278:	e000      	b.n	800a27c <xQueueGenericSendFromISR+0x74>
 800a27a:	2300      	movs	r3, #0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10b      	bne.n	800a298 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	623b      	str	r3, [r7, #32]
}
 800a292:	bf00      	nop
 800a294:	bf00      	nop
 800a296:	e7fd      	b.n	800a294 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a298:	f001 ff76 	bl	800c188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a29c:	f3ef 8211 	mrs	r2, BASEPRI
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	61fa      	str	r2, [r7, #28]
 800a2b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d302      	bcc.n	800a2ca <xQueueGenericSendFromISR+0xc2>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d12f      	bne.n	800a32a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a2e0:	f000 f912 	bl	800a508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ec:	d112      	bne.n	800a314 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d016      	beq.n	800a324 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f8:	3324      	adds	r3, #36	@ 0x24
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 fece 	bl	800b09c <xTaskRemoveFromEventList>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00e      	beq.n	800a324 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00b      	beq.n	800a324 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	e007      	b.n	800a324 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a318:	3301      	adds	r3, #1
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	b25a      	sxtb	r2, r3
 800a31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a324:	2301      	movs	r3, #1
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a328:	e001      	b.n	800a32e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a330:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a338:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3740      	adds	r7, #64	@ 0x40
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08c      	sub	sp, #48	@ 0x30
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a350:	2300      	movs	r3, #0
 800a352:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <xQueueReceive+0x32>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	623b      	str	r3, [r7, #32]
}
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	e7fd      	b.n	800a372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d103      	bne.n	800a384 <xQueueReceive+0x40>
 800a37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <xQueueReceive+0x44>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <xQueueReceive+0x46>
 800a388:	2300      	movs	r3, #0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d10b      	bne.n	800a3a6 <xQueueReceive+0x62>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	61fb      	str	r3, [r7, #28]
}
 800a3a0:	bf00      	nop
 800a3a2:	bf00      	nop
 800a3a4:	e7fd      	b.n	800a3a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3a6:	f001 f83f 	bl	800b428 <xTaskGetSchedulerState>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <xQueueReceive+0x72>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <xQueueReceive+0x76>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <xQueueReceive+0x78>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10b      	bne.n	800a3d8 <xQueueReceive+0x94>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	61bb      	str	r3, [r7, #24]
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	e7fd      	b.n	800a3d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3d8:	f001 fdf6 	bl	800bfc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01f      	beq.n	800a428 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ec:	f000 f8f6 	bl	800a5dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	1e5a      	subs	r2, r3, #1
 800a3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00f      	beq.n	800a420 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a402:	3310      	adds	r3, #16
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fe49 	bl	800b09c <xTaskRemoveFromEventList>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a410:	4b3c      	ldr	r3, [pc, #240]	@ (800a504 <xQueueReceive+0x1c0>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a420:	f001 fe04 	bl	800c02c <vPortExitCritical>
				return pdPASS;
 800a424:	2301      	movs	r3, #1
 800a426:	e069      	b.n	800a4fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a42e:	f001 fdfd 	bl	800c02c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a432:	2300      	movs	r3, #0
 800a434:	e062      	b.n	800a4fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d106      	bne.n	800a44a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a43c:	f107 0310 	add.w	r3, r7, #16
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fe8f 	bl	800b164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a446:	2301      	movs	r3, #1
 800a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a44a:	f001 fdef 	bl	800c02c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a44e:	f000 fbf7 	bl	800ac40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a452:	f001 fdb9 	bl	800bfc8 <vPortEnterCritical>
 800a456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a45c:	b25b      	sxtb	r3, r3
 800a45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a462:	d103      	bne.n	800a46c <xQueueReceive+0x128>
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a472:	b25b      	sxtb	r3, r3
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a478:	d103      	bne.n	800a482 <xQueueReceive+0x13e>
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a482:	f001 fdd3 	bl	800c02c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a486:	1d3a      	adds	r2, r7, #4
 800a488:	f107 0310 	add.w	r3, r7, #16
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fe7e 	bl	800b190 <xTaskCheckForTimeOut>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d123      	bne.n	800a4e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a49a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a49c:	f000 f916 	bl	800a6cc <prvIsQueueEmpty>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d017      	beq.n	800a4d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	3324      	adds	r3, #36	@ 0x24
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fda2 	bl	800aff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4b6:	f000 f8b7 	bl	800a628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4ba:	f000 fbcf 	bl	800ac5c <xTaskResumeAll>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d189      	bne.n	800a3d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a4c4:	4b0f      	ldr	r3, [pc, #60]	@ (800a504 <xQueueReceive+0x1c0>)
 800a4c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	e780      	b.n	800a3d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4d8:	f000 f8a6 	bl	800a628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4dc:	f000 fbbe 	bl	800ac5c <xTaskResumeAll>
 800a4e0:	e77a      	b.n	800a3d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4e4:	f000 f8a0 	bl	800a628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4e8:	f000 fbb8 	bl	800ac5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4ee:	f000 f8ed 	bl	800a6cc <prvIsQueueEmpty>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f43f af6f 	beq.w	800a3d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3730      	adds	r7, #48	@ 0x30
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10d      	bne.n	800a542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d14d      	bne.n	800a5ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	4618      	mov	r0, r3
 800a534:	f000 ff96 	bl	800b464 <xTaskPriorityDisinherit>
 800a538:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	609a      	str	r2, [r3, #8]
 800a540:	e043      	b.n	800a5ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d119      	bne.n	800a57c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6858      	ldr	r0, [r3, #4]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a550:	461a      	mov	r2, r3
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	f003 fcaf 	bl	800deb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a560:	441a      	add	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d32b      	bcc.n	800a5ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	605a      	str	r2, [r3, #4]
 800a57a:	e026      	b.n	800a5ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68d8      	ldr	r0, [r3, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a584:	461a      	mov	r2, r3
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	f003 fc95 	bl	800deb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a594:	425b      	negs	r3, r3
 800a596:	441a      	add	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d207      	bcs.n	800a5b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b0:	425b      	negs	r3, r3
 800a5b2:	441a      	add	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d105      	bne.n	800a5ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a5d2:	697b      	ldr	r3, [r7, #20]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d018      	beq.n	800a620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f6:	441a      	add	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	429a      	cmp	r2, r3
 800a606:	d303      	bcc.n	800a610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68d9      	ldr	r1, [r3, #12]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a618:	461a      	mov	r2, r3
 800a61a:	6838      	ldr	r0, [r7, #0]
 800a61c:	f003 fc4b 	bl	800deb6 <memcpy>
	}
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a630:	f001 fcca 	bl	800bfc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a63a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a63c:	e011      	b.n	800a662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a642:	2b00      	cmp	r3, #0
 800a644:	d012      	beq.n	800a66c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3324      	adds	r3, #36	@ 0x24
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fd26 	bl	800b09c <xTaskRemoveFromEventList>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a656:	f000 fdff 	bl	800b258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	dce9      	bgt.n	800a63e <prvUnlockQueue+0x16>
 800a66a:	e000      	b.n	800a66e <prvUnlockQueue+0x46>
					break;
 800a66c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	22ff      	movs	r2, #255	@ 0xff
 800a672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a676:	f001 fcd9 	bl	800c02c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a67a:	f001 fca5 	bl	800bfc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a686:	e011      	b.n	800a6ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d012      	beq.n	800a6b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3310      	adds	r3, #16
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fd01 	bl	800b09c <xTaskRemoveFromEventList>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6a0:	f000 fdda 	bl	800b258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dce9      	bgt.n	800a688 <prvUnlockQueue+0x60>
 800a6b4:	e000      	b.n	800a6b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	22ff      	movs	r2, #255	@ 0xff
 800a6bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a6c0:	f001 fcb4 	bl	800c02c <vPortExitCritical>
}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6d4:	f001 fc78 	bl	800bfc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	e001      	b.n	800a6ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6ea:	f001 fc9f 	bl	800c02c <vPortExitCritical>

	return xReturn;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a700:	f001 fc62 	bl	800bfc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d102      	bne.n	800a716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a710:	2301      	movs	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e001      	b.n	800a71a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a71a:	f001 fc87 	bl	800c02c <vPortExitCritical>

	return xReturn;
 800a71e:	68fb      	ldr	r3, [r7, #12]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a732:	2300      	movs	r3, #0
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e014      	b.n	800a762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a738:	4a0f      	ldr	r2, [pc, #60]	@ (800a778 <vQueueAddToRegistry+0x50>)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a744:	490c      	ldr	r1, [pc, #48]	@ (800a778 <vQueueAddToRegistry+0x50>)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a74e:	4a0a      	ldr	r2, [pc, #40]	@ (800a778 <vQueueAddToRegistry+0x50>)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	4413      	add	r3, r2
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a75a:	e006      	b.n	800a76a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3301      	adds	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b07      	cmp	r3, #7
 800a766:	d9e7      	bls.n	800a738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000d44 	.word	0x20000d44

0800a77c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a78c:	f001 fc1c 	bl	800bfc8 <vPortEnterCritical>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a796:	b25b      	sxtb	r3, r3
 800a798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79c:	d103      	bne.n	800a7a6 <vQueueWaitForMessageRestricted+0x2a>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7ac:	b25b      	sxtb	r3, r3
 800a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b2:	d103      	bne.n	800a7bc <vQueueWaitForMessageRestricted+0x40>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7bc:	f001 fc36 	bl	800c02c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	3324      	adds	r3, #36	@ 0x24
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fc37 	bl	800b044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a7d6:	6978      	ldr	r0, [r7, #20]
 800a7d8:	f7ff ff26 	bl	800a628 <prvUnlockQueue>
	}
 800a7dc:	bf00      	nop
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b08e      	sub	sp, #56	@ 0x38
 800a7e8:	af04      	add	r7, sp, #16
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	623b      	str	r3, [r7, #32]
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	61fb      	str	r3, [r7, #28]
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	e7fd      	b.n	800a82a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a82e:	23a8      	movs	r3, #168	@ 0xa8
 800a830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2ba8      	cmp	r3, #168	@ 0xa8
 800a836:	d00b      	beq.n	800a850 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	61bb      	str	r3, [r7, #24]
}
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
 800a84e:	e7fd      	b.n	800a84c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01e      	beq.n	800a896 <xTaskCreateStatic+0xb2>
 800a858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01b      	beq.n	800a896 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a866:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86a:	2202      	movs	r2, #2
 800a86c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a870:	2300      	movs	r3, #0
 800a872:	9303      	str	r3, [sp, #12]
 800a874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	f107 0314 	add.w	r3, r7, #20
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 f851 	bl	800a930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a88e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a890:	f000 f8f6 	bl	800aa80 <prvAddNewTaskToReadyList>
 800a894:	e001      	b.n	800a89a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a89a:	697b      	ldr	r3, [r7, #20]
	}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3728      	adds	r7, #40	@ 0x28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08c      	sub	sp, #48	@ 0x30
 800a8a8:	af04      	add	r7, sp, #16
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 fca7 	bl	800c20c <pvPortMalloc>
 800a8be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00e      	beq.n	800a8e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a8c6:	20a8      	movs	r0, #168	@ 0xa8
 800a8c8:	f001 fca0 	bl	800c20c <pvPortMalloc>
 800a8cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a8da:	e005      	b.n	800a8e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a8dc:	6978      	ldr	r0, [r7, #20]
 800a8de:	f001 fd63 	bl	800c3a8 <vPortFree>
 800a8e2:	e001      	b.n	800a8e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d017      	beq.n	800a91e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8f6:	88fa      	ldrh	r2, [r7, #6]
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	9303      	str	r3, [sp, #12]
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	9302      	str	r3, [sp, #8]
 800a900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a902:	9301      	str	r3, [sp, #4]
 800a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f80f 	bl	800a930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a912:	69f8      	ldr	r0, [r7, #28]
 800a914:	f000 f8b4 	bl	800aa80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a918:	2301      	movs	r3, #1
 800a91a:	61bb      	str	r3, [r7, #24]
 800a91c:	e002      	b.n	800a924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a91e:	f04f 33ff 	mov.w	r3, #4294967295
 800a922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a924:	69bb      	ldr	r3, [r7, #24]
	}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a940:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	461a      	mov	r2, r3
 800a948:	21a5      	movs	r1, #165	@ 0xa5
 800a94a:	f003 f9df 	bl	800dd0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a958:	3b01      	subs	r3, #1
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	f023 0307 	bic.w	r3, r3, #7
 800a966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	617b      	str	r3, [r7, #20]
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	e7fd      	b.n	800a986 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d01f      	beq.n	800a9d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a990:	2300      	movs	r3, #0
 800a992:	61fb      	str	r3, [r7, #28]
 800a994:	e012      	b.n	800a9bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	4413      	add	r3, r2
 800a99c:	7819      	ldrb	r1, [r3, #0]
 800a99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3334      	adds	r3, #52	@ 0x34
 800a9a6:	460a      	mov	r2, r1
 800a9a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d006      	beq.n	800a9c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	61fb      	str	r3, [r7, #28]
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	2b0f      	cmp	r3, #15
 800a9c0:	d9e9      	bls.n	800a996 <prvInitialiseNewTask+0x66>
 800a9c2:	e000      	b.n	800a9c6 <prvInitialiseNewTask+0x96>
			{
				break;
 800a9c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9ce:	e003      	b.n	800a9d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	2b37      	cmp	r3, #55	@ 0x37
 800a9dc:	d901      	bls.n	800a9e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9de:	2337      	movs	r3, #55	@ 0x37
 800a9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff f965 	bl	8009cc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	3318      	adds	r3, #24
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff f960 	bl	8009cc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	3354      	adds	r3, #84	@ 0x54
 800aa32:	224c      	movs	r2, #76	@ 0x4c
 800aa34:	2100      	movs	r1, #0
 800aa36:	4618      	mov	r0, r3
 800aa38:	f003 f968 	bl	800dd0c <memset>
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	4a0d      	ldr	r2, [pc, #52]	@ (800aa74 <prvInitialiseNewTask+0x144>)
 800aa40:	659a      	str	r2, [r3, #88]	@ 0x58
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	4a0c      	ldr	r2, [pc, #48]	@ (800aa78 <prvInitialiseNewTask+0x148>)
 800aa46:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa7c <prvInitialiseNewTask+0x14c>)
 800aa4c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	68f9      	ldr	r1, [r7, #12]
 800aa52:	69b8      	ldr	r0, [r7, #24]
 800aa54:	f001 f984 	bl	800bd60 <pxPortInitialiseStack>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa6a:	bf00      	nop
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	200063b8 	.word	0x200063b8
 800aa78:	20006420 	.word	0x20006420
 800aa7c:	20006488 	.word	0x20006488

0800aa80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa88:	f001 fa9e 	bl	800bfc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa8c:	4b2d      	ldr	r3, [pc, #180]	@ (800ab44 <prvAddNewTaskToReadyList+0xc4>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	4a2c      	ldr	r2, [pc, #176]	@ (800ab44 <prvAddNewTaskToReadyList+0xc4>)
 800aa94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa96:	4b2c      	ldr	r3, [pc, #176]	@ (800ab48 <prvAddNewTaskToReadyList+0xc8>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d109      	bne.n	800aab2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa9e:	4a2a      	ldr	r2, [pc, #168]	@ (800ab48 <prvAddNewTaskToReadyList+0xc8>)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aaa4:	4b27      	ldr	r3, [pc, #156]	@ (800ab44 <prvAddNewTaskToReadyList+0xc4>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d110      	bne.n	800aace <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aaac:	f000 fbf8 	bl	800b2a0 <prvInitialiseTaskLists>
 800aab0:	e00d      	b.n	800aace <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aab2:	4b26      	ldr	r3, [pc, #152]	@ (800ab4c <prvAddNewTaskToReadyList+0xcc>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d109      	bne.n	800aace <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aaba:	4b23      	ldr	r3, [pc, #140]	@ (800ab48 <prvAddNewTaskToReadyList+0xc8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d802      	bhi.n	800aace <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aac8:	4a1f      	ldr	r2, [pc, #124]	@ (800ab48 <prvAddNewTaskToReadyList+0xc8>)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aace:	4b20      	ldr	r3, [pc, #128]	@ (800ab50 <prvAddNewTaskToReadyList+0xd0>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	4a1e      	ldr	r2, [pc, #120]	@ (800ab50 <prvAddNewTaskToReadyList+0xd0>)
 800aad6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aad8:	4b1d      	ldr	r3, [pc, #116]	@ (800ab50 <prvAddNewTaskToReadyList+0xd0>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae4:	4b1b      	ldr	r3, [pc, #108]	@ (800ab54 <prvAddNewTaskToReadyList+0xd4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d903      	bls.n	800aaf4 <prvAddNewTaskToReadyList+0x74>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf0:	4a18      	ldr	r2, [pc, #96]	@ (800ab54 <prvAddNewTaskToReadyList+0xd4>)
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4a15      	ldr	r2, [pc, #84]	@ (800ab58 <prvAddNewTaskToReadyList+0xd8>)
 800ab02:	441a      	add	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	f7ff f8e9 	bl	8009ce2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab10:	f001 fa8c 	bl	800c02c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab14:	4b0d      	ldr	r3, [pc, #52]	@ (800ab4c <prvAddNewTaskToReadyList+0xcc>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00e      	beq.n	800ab3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab48 <prvAddNewTaskToReadyList+0xc8>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d207      	bcs.n	800ab3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab5c <prvAddNewTaskToReadyList+0xdc>)
 800ab2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab3a:	bf00      	nop
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20001258 	.word	0x20001258
 800ab48:	20000d84 	.word	0x20000d84
 800ab4c:	20001264 	.word	0x20001264
 800ab50:	20001274 	.word	0x20001274
 800ab54:	20001260 	.word	0x20001260
 800ab58:	20000d88 	.word	0x20000d88
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08a      	sub	sp, #40	@ 0x28
 800ab64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab6e:	463a      	mov	r2, r7
 800ab70:	1d39      	adds	r1, r7, #4
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff f852 	bl	8009c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	9202      	str	r2, [sp, #8]
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	2300      	movs	r3, #0
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	460a      	mov	r2, r1
 800ab8e:	4924      	ldr	r1, [pc, #144]	@ (800ac20 <vTaskStartScheduler+0xc0>)
 800ab90:	4824      	ldr	r0, [pc, #144]	@ (800ac24 <vTaskStartScheduler+0xc4>)
 800ab92:	f7ff fe27 	bl	800a7e4 <xTaskCreateStatic>
 800ab96:	4603      	mov	r3, r0
 800ab98:	4a23      	ldr	r2, [pc, #140]	@ (800ac28 <vTaskStartScheduler+0xc8>)
 800ab9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab9c:	4b22      	ldr	r3, [pc, #136]	@ (800ac28 <vTaskStartScheduler+0xc8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aba4:	2301      	movs	r3, #1
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	e001      	b.n	800abae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abaa:	2300      	movs	r3, #0
 800abac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d102      	bne.n	800abba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800abb4:	f000 fd7a 	bl	800b6ac <xTimerCreateTimerTask>
 800abb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d11b      	bne.n	800abf8 <vTaskStartScheduler+0x98>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	613b      	str	r3, [r7, #16]
}
 800abd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800abd4:	4b15      	ldr	r3, [pc, #84]	@ (800ac2c <vTaskStartScheduler+0xcc>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3354      	adds	r3, #84	@ 0x54
 800abda:	4a15      	ldr	r2, [pc, #84]	@ (800ac30 <vTaskStartScheduler+0xd0>)
 800abdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800abde:	4b15      	ldr	r3, [pc, #84]	@ (800ac34 <vTaskStartScheduler+0xd4>)
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295
 800abe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800abe6:	4b14      	ldr	r3, [pc, #80]	@ (800ac38 <vTaskStartScheduler+0xd8>)
 800abe8:	2201      	movs	r2, #1
 800abea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800abec:	4b13      	ldr	r3, [pc, #76]	@ (800ac3c <vTaskStartScheduler+0xdc>)
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800abf2:	f001 f945 	bl	800be80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800abf6:	e00f      	b.n	800ac18 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfe:	d10b      	bne.n	800ac18 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	60fb      	str	r3, [r7, #12]
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <vTaskStartScheduler+0xb4>
}
 800ac18:	bf00      	nop
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	08010bc8 	.word	0x08010bc8
 800ac24:	0800b271 	.word	0x0800b271
 800ac28:	2000127c 	.word	0x2000127c
 800ac2c:	20000d84 	.word	0x20000d84
 800ac30:	20000110 	.word	0x20000110
 800ac34:	20001278 	.word	0x20001278
 800ac38:	20001264 	.word	0x20001264
 800ac3c:	2000125c 	.word	0x2000125c

0800ac40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac40:	b480      	push	{r7}
 800ac42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ac44:	4b04      	ldr	r3, [pc, #16]	@ (800ac58 <vTaskSuspendAll+0x18>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	4a03      	ldr	r2, [pc, #12]	@ (800ac58 <vTaskSuspendAll+0x18>)
 800ac4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ac4e:	bf00      	nop
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr
 800ac58:	20001280 	.word	0x20001280

0800ac5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac6a:	4b42      	ldr	r3, [pc, #264]	@ (800ad74 <xTaskResumeAll+0x118>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10b      	bne.n	800ac8a <xTaskResumeAll+0x2e>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	603b      	str	r3, [r7, #0]
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	e7fd      	b.n	800ac86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac8a:	f001 f99d 	bl	800bfc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac8e:	4b39      	ldr	r3, [pc, #228]	@ (800ad74 <xTaskResumeAll+0x118>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	4a37      	ldr	r2, [pc, #220]	@ (800ad74 <xTaskResumeAll+0x118>)
 800ac96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac98:	4b36      	ldr	r3, [pc, #216]	@ (800ad74 <xTaskResumeAll+0x118>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d162      	bne.n	800ad66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aca0:	4b35      	ldr	r3, [pc, #212]	@ (800ad78 <xTaskResumeAll+0x11c>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d05e      	beq.n	800ad66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aca8:	e02f      	b.n	800ad0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acaa:	4b34      	ldr	r3, [pc, #208]	@ (800ad7c <xTaskResumeAll+0x120>)
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3318      	adds	r3, #24
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff f870 	bl	8009d9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	3304      	adds	r3, #4
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff f86b 	bl	8009d9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acca:	4b2d      	ldr	r3, [pc, #180]	@ (800ad80 <xTaskResumeAll+0x124>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d903      	bls.n	800acda <xTaskResumeAll+0x7e>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ad80 <xTaskResumeAll+0x124>)
 800acd8:	6013      	str	r3, [r2, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4a27      	ldr	r2, [pc, #156]	@ (800ad84 <xTaskResumeAll+0x128>)
 800ace8:	441a      	add	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3304      	adds	r3, #4
 800acee:	4619      	mov	r1, r3
 800acf0:	4610      	mov	r0, r2
 800acf2:	f7fe fff6 	bl	8009ce2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acfa:	4b23      	ldr	r3, [pc, #140]	@ (800ad88 <xTaskResumeAll+0x12c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d302      	bcc.n	800ad0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ad04:	4b21      	ldr	r3, [pc, #132]	@ (800ad8c <xTaskResumeAll+0x130>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ad7c <xTaskResumeAll+0x120>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1cb      	bne.n	800acaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad18:	f000 fb66 	bl	800b3e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ad90 <xTaskResumeAll+0x134>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad28:	f000 f846 	bl	800adb8 <xTaskIncrementTick>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ad32:	4b16      	ldr	r3, [pc, #88]	@ (800ad8c <xTaskResumeAll+0x130>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f1      	bne.n	800ad28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ad44:	4b12      	ldr	r3, [pc, #72]	@ (800ad90 <xTaskResumeAll+0x134>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad4a:	4b10      	ldr	r3, [pc, #64]	@ (800ad8c <xTaskResumeAll+0x130>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d009      	beq.n	800ad66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad52:	2301      	movs	r3, #1
 800ad54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad56:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <xTaskResumeAll+0x138>)
 800ad58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad66:	f001 f961 	bl	800c02c <vPortExitCritical>

	return xAlreadyYielded;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20001280 	.word	0x20001280
 800ad78:	20001258 	.word	0x20001258
 800ad7c:	20001218 	.word	0x20001218
 800ad80:	20001260 	.word	0x20001260
 800ad84:	20000d88 	.word	0x20000d88
 800ad88:	20000d84 	.word	0x20000d84
 800ad8c:	2000126c 	.word	0x2000126c
 800ad90:	20001268 	.word	0x20001268
 800ad94:	e000ed04 	.word	0xe000ed04

0800ad98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad9e:	4b05      	ldr	r3, [pc, #20]	@ (800adb4 <xTaskGetTickCount+0x1c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ada4:	687b      	ldr	r3, [r7, #4]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	2000125c 	.word	0x2000125c

0800adb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc2:	4b4f      	ldr	r3, [pc, #316]	@ (800af00 <xTaskIncrementTick+0x148>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f040 8090 	bne.w	800aeec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800adcc:	4b4d      	ldr	r3, [pc, #308]	@ (800af04 <xTaskIncrementTick+0x14c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3301      	adds	r3, #1
 800add2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800add4:	4a4b      	ldr	r2, [pc, #300]	@ (800af04 <xTaskIncrementTick+0x14c>)
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d121      	bne.n	800ae24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ade0:	4b49      	ldr	r3, [pc, #292]	@ (800af08 <xTaskIncrementTick+0x150>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00b      	beq.n	800ae02 <xTaskIncrementTick+0x4a>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	603b      	str	r3, [r7, #0]
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	e7fd      	b.n	800adfe <xTaskIncrementTick+0x46>
 800ae02:	4b41      	ldr	r3, [pc, #260]	@ (800af08 <xTaskIncrementTick+0x150>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	4b40      	ldr	r3, [pc, #256]	@ (800af0c <xTaskIncrementTick+0x154>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a3e      	ldr	r2, [pc, #248]	@ (800af08 <xTaskIncrementTick+0x150>)
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	4a3e      	ldr	r2, [pc, #248]	@ (800af0c <xTaskIncrementTick+0x154>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	4b3e      	ldr	r3, [pc, #248]	@ (800af10 <xTaskIncrementTick+0x158>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	4a3c      	ldr	r2, [pc, #240]	@ (800af10 <xTaskIncrementTick+0x158>)
 800ae1e:	6013      	str	r3, [r2, #0]
 800ae20:	f000 fae2 	bl	800b3e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae24:	4b3b      	ldr	r3, [pc, #236]	@ (800af14 <xTaskIncrementTick+0x15c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d349      	bcc.n	800aec2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae2e:	4b36      	ldr	r3, [pc, #216]	@ (800af08 <xTaskIncrementTick+0x150>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d104      	bne.n	800ae42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae38:	4b36      	ldr	r3, [pc, #216]	@ (800af14 <xTaskIncrementTick+0x15c>)
 800ae3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3e:	601a      	str	r2, [r3, #0]
					break;
 800ae40:	e03f      	b.n	800aec2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae42:	4b31      	ldr	r3, [pc, #196]	@ (800af08 <xTaskIncrementTick+0x150>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d203      	bcs.n	800ae62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae5a:	4a2e      	ldr	r2, [pc, #184]	@ (800af14 <xTaskIncrementTick+0x15c>)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae60:	e02f      	b.n	800aec2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe ff98 	bl	8009d9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	3318      	adds	r3, #24
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe ff8f 	bl	8009d9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae82:	4b25      	ldr	r3, [pc, #148]	@ (800af18 <xTaskIncrementTick+0x160>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d903      	bls.n	800ae92 <xTaskIncrementTick+0xda>
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8e:	4a22      	ldr	r2, [pc, #136]	@ (800af18 <xTaskIncrementTick+0x160>)
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae96:	4613      	mov	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4a1f      	ldr	r2, [pc, #124]	@ (800af1c <xTaskIncrementTick+0x164>)
 800aea0:	441a      	add	r2, r3
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4619      	mov	r1, r3
 800aea8:	4610      	mov	r0, r2
 800aeaa:	f7fe ff1a 	bl	8009ce2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb2:	4b1b      	ldr	r3, [pc, #108]	@ (800af20 <xTaskIncrementTick+0x168>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d3b8      	bcc.n	800ae2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aebc:	2301      	movs	r3, #1
 800aebe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aec0:	e7b5      	b.n	800ae2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aec2:	4b17      	ldr	r3, [pc, #92]	@ (800af20 <xTaskIncrementTick+0x168>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec8:	4914      	ldr	r1, [pc, #80]	@ (800af1c <xTaskIncrementTick+0x164>)
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	440b      	add	r3, r1
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d901      	bls.n	800aede <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800aeda:	2301      	movs	r3, #1
 800aedc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aede:	4b11      	ldr	r3, [pc, #68]	@ (800af24 <xTaskIncrementTick+0x16c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800aee6:	2301      	movs	r3, #1
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	e004      	b.n	800aef6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aeec:	4b0e      	ldr	r3, [pc, #56]	@ (800af28 <xTaskIncrementTick+0x170>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3301      	adds	r3, #1
 800aef2:	4a0d      	ldr	r2, [pc, #52]	@ (800af28 <xTaskIncrementTick+0x170>)
 800aef4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aef6:	697b      	ldr	r3, [r7, #20]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20001280 	.word	0x20001280
 800af04:	2000125c 	.word	0x2000125c
 800af08:	20001210 	.word	0x20001210
 800af0c:	20001214 	.word	0x20001214
 800af10:	20001270 	.word	0x20001270
 800af14:	20001278 	.word	0x20001278
 800af18:	20001260 	.word	0x20001260
 800af1c:	20000d88 	.word	0x20000d88
 800af20:	20000d84 	.word	0x20000d84
 800af24:	2000126c 	.word	0x2000126c
 800af28:	20001268 	.word	0x20001268

0800af2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af32:	4b2b      	ldr	r3, [pc, #172]	@ (800afe0 <vTaskSwitchContext+0xb4>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af3a:	4b2a      	ldr	r3, [pc, #168]	@ (800afe4 <vTaskSwitchContext+0xb8>)
 800af3c:	2201      	movs	r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af40:	e047      	b.n	800afd2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800af42:	4b28      	ldr	r3, [pc, #160]	@ (800afe4 <vTaskSwitchContext+0xb8>)
 800af44:	2200      	movs	r2, #0
 800af46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af48:	4b27      	ldr	r3, [pc, #156]	@ (800afe8 <vTaskSwitchContext+0xbc>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	e011      	b.n	800af74 <vTaskSwitchContext+0x48>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10b      	bne.n	800af6e <vTaskSwitchContext+0x42>
	__asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	607b      	str	r3, [r7, #4]
}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	e7fd      	b.n	800af6a <vTaskSwitchContext+0x3e>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3b01      	subs	r3, #1
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	491d      	ldr	r1, [pc, #116]	@ (800afec <vTaskSwitchContext+0xc0>)
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0e3      	beq.n	800af50 <vTaskSwitchContext+0x24>
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4a16      	ldr	r2, [pc, #88]	@ (800afec <vTaskSwitchContext+0xc0>)
 800af94:	4413      	add	r3, r2
 800af96:	60bb      	str	r3, [r7, #8]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	605a      	str	r2, [r3, #4]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	3308      	adds	r3, #8
 800afaa:	429a      	cmp	r2, r3
 800afac:	d104      	bne.n	800afb8 <vTaskSwitchContext+0x8c>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	605a      	str	r2, [r3, #4]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	4a0c      	ldr	r2, [pc, #48]	@ (800aff0 <vTaskSwitchContext+0xc4>)
 800afc0:	6013      	str	r3, [r2, #0]
 800afc2:	4a09      	ldr	r2, [pc, #36]	@ (800afe8 <vTaskSwitchContext+0xbc>)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afc8:	4b09      	ldr	r3, [pc, #36]	@ (800aff0 <vTaskSwitchContext+0xc4>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3354      	adds	r3, #84	@ 0x54
 800afce:	4a09      	ldr	r2, [pc, #36]	@ (800aff4 <vTaskSwitchContext+0xc8>)
 800afd0:	6013      	str	r3, [r2, #0]
}
 800afd2:	bf00      	nop
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	20001280 	.word	0x20001280
 800afe4:	2000126c 	.word	0x2000126c
 800afe8:	20001260 	.word	0x20001260
 800afec:	20000d88 	.word	0x20000d88
 800aff0:	20000d84 	.word	0x20000d84
 800aff4:	20000110 	.word	0x20000110

0800aff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10b      	bne.n	800b020 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	60fb      	str	r3, [r7, #12]
}
 800b01a:	bf00      	nop
 800b01c:	bf00      	nop
 800b01e:	e7fd      	b.n	800b01c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b020:	4b07      	ldr	r3, [pc, #28]	@ (800b040 <vTaskPlaceOnEventList+0x48>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3318      	adds	r3, #24
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7fe fe7e 	bl	8009d2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b02e:	2101      	movs	r1, #1
 800b030:	6838      	ldr	r0, [r7, #0]
 800b032:	f000 fae7 	bl	800b604 <prvAddCurrentTaskToDelayedList>
}
 800b036:	bf00      	nop
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20000d84 	.word	0x20000d84

0800b044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10b      	bne.n	800b06e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	617b      	str	r3, [r7, #20]
}
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
 800b06c:	e7fd      	b.n	800b06a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b06e:	4b0a      	ldr	r3, [pc, #40]	@ (800b098 <vTaskPlaceOnEventListRestricted+0x54>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3318      	adds	r3, #24
 800b074:	4619      	mov	r1, r3
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7fe fe33 	bl	8009ce2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b082:	f04f 33ff 	mov.w	r3, #4294967295
 800b086:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	68b8      	ldr	r0, [r7, #8]
 800b08c:	f000 faba 	bl	800b604 <prvAddCurrentTaskToDelayedList>
	}
 800b090:	bf00      	nop
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	20000d84 	.word	0x20000d84

0800b09c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10b      	bne.n	800b0ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	60fb      	str	r3, [r7, #12]
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop
 800b0c8:	e7fd      	b.n	800b0c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	3318      	adds	r3, #24
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fe fe64 	bl	8009d9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800b14c <xTaskRemoveFromEventList+0xb0>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d11d      	bne.n	800b118 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	3304      	adds	r3, #4
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe fe5b 	bl	8009d9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ea:	4b19      	ldr	r3, [pc, #100]	@ (800b150 <xTaskRemoveFromEventList+0xb4>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d903      	bls.n	800b0fa <xTaskRemoveFromEventList+0x5e>
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f6:	4a16      	ldr	r2, [pc, #88]	@ (800b150 <xTaskRemoveFromEventList+0xb4>)
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4a13      	ldr	r2, [pc, #76]	@ (800b154 <xTaskRemoveFromEventList+0xb8>)
 800b108:	441a      	add	r2, r3
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	3304      	adds	r3, #4
 800b10e:	4619      	mov	r1, r3
 800b110:	4610      	mov	r0, r2
 800b112:	f7fe fde6 	bl	8009ce2 <vListInsertEnd>
 800b116:	e005      	b.n	800b124 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	3318      	adds	r3, #24
 800b11c:	4619      	mov	r1, r3
 800b11e:	480e      	ldr	r0, [pc, #56]	@ (800b158 <xTaskRemoveFromEventList+0xbc>)
 800b120:	f7fe fddf 	bl	8009ce2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b128:	4b0c      	ldr	r3, [pc, #48]	@ (800b15c <xTaskRemoveFromEventList+0xc0>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12e:	429a      	cmp	r2, r3
 800b130:	d905      	bls.n	800b13e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b132:	2301      	movs	r3, #1
 800b134:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b136:	4b0a      	ldr	r3, [pc, #40]	@ (800b160 <xTaskRemoveFromEventList+0xc4>)
 800b138:	2201      	movs	r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	e001      	b.n	800b142 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b142:	697b      	ldr	r3, [r7, #20]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	20001280 	.word	0x20001280
 800b150:	20001260 	.word	0x20001260
 800b154:	20000d88 	.word	0x20000d88
 800b158:	20001218 	.word	0x20001218
 800b15c:	20000d84 	.word	0x20000d84
 800b160:	2000126c 	.word	0x2000126c

0800b164 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b16c:	4b06      	ldr	r3, [pc, #24]	@ (800b188 <vTaskInternalSetTimeOutState+0x24>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b174:	4b05      	ldr	r3, [pc, #20]	@ (800b18c <vTaskInternalSetTimeOutState+0x28>)
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	605a      	str	r2, [r3, #4]
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	20001270 	.word	0x20001270
 800b18c:	2000125c 	.word	0x2000125c

0800b190 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10b      	bne.n	800b1b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	613b      	str	r3, [r7, #16]
}
 800b1b2:	bf00      	nop
 800b1b4:	bf00      	nop
 800b1b6:	e7fd      	b.n	800b1b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10b      	bne.n	800b1d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	60fb      	str	r3, [r7, #12]
}
 800b1d0:	bf00      	nop
 800b1d2:	bf00      	nop
 800b1d4:	e7fd      	b.n	800b1d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b1d6:	f000 fef7 	bl	800bfc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1da:	4b1d      	ldr	r3, [pc, #116]	@ (800b250 <xTaskCheckForTimeOut+0xc0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f2:	d102      	bne.n	800b1fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	61fb      	str	r3, [r7, #28]
 800b1f8:	e023      	b.n	800b242 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	4b15      	ldr	r3, [pc, #84]	@ (800b254 <xTaskCheckForTimeOut+0xc4>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	d007      	beq.n	800b216 <xTaskCheckForTimeOut+0x86>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d302      	bcc.n	800b216 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b210:	2301      	movs	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
 800b214:	e015      	b.n	800b242 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d20b      	bcs.n	800b238 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	1ad2      	subs	r2, r2, r3
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff ff99 	bl	800b164 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b232:	2300      	movs	r3, #0
 800b234:	61fb      	str	r3, [r7, #28]
 800b236:	e004      	b.n	800b242 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b23e:	2301      	movs	r3, #1
 800b240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b242:	f000 fef3 	bl	800c02c <vPortExitCritical>

	return xReturn;
 800b246:	69fb      	ldr	r3, [r7, #28]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	2000125c 	.word	0x2000125c
 800b254:	20001270 	.word	0x20001270

0800b258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b25c:	4b03      	ldr	r3, [pc, #12]	@ (800b26c <vTaskMissedYield+0x14>)
 800b25e:	2201      	movs	r2, #1
 800b260:	601a      	str	r2, [r3, #0]
}
 800b262:	bf00      	nop
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	2000126c 	.word	0x2000126c

0800b270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b278:	f000 f852 	bl	800b320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b27c:	4b06      	ldr	r3, [pc, #24]	@ (800b298 <prvIdleTask+0x28>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d9f9      	bls.n	800b278 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b284:	4b05      	ldr	r3, [pc, #20]	@ (800b29c <prvIdleTask+0x2c>)
 800b286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b294:	e7f0      	b.n	800b278 <prvIdleTask+0x8>
 800b296:	bf00      	nop
 800b298:	20000d88 	.word	0x20000d88
 800b29c:	e000ed04 	.word	0xe000ed04

0800b2a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	607b      	str	r3, [r7, #4]
 800b2aa:	e00c      	b.n	800b2c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4a12      	ldr	r2, [pc, #72]	@ (800b300 <prvInitialiseTaskLists+0x60>)
 800b2b8:	4413      	add	r3, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe fce4 	bl	8009c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	607b      	str	r3, [r7, #4]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b37      	cmp	r3, #55	@ 0x37
 800b2ca:	d9ef      	bls.n	800b2ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2cc:	480d      	ldr	r0, [pc, #52]	@ (800b304 <prvInitialiseTaskLists+0x64>)
 800b2ce:	f7fe fcdb 	bl	8009c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2d2:	480d      	ldr	r0, [pc, #52]	@ (800b308 <prvInitialiseTaskLists+0x68>)
 800b2d4:	f7fe fcd8 	bl	8009c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2d8:	480c      	ldr	r0, [pc, #48]	@ (800b30c <prvInitialiseTaskLists+0x6c>)
 800b2da:	f7fe fcd5 	bl	8009c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2de:	480c      	ldr	r0, [pc, #48]	@ (800b310 <prvInitialiseTaskLists+0x70>)
 800b2e0:	f7fe fcd2 	bl	8009c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2e4:	480b      	ldr	r0, [pc, #44]	@ (800b314 <prvInitialiseTaskLists+0x74>)
 800b2e6:	f7fe fccf 	bl	8009c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b318 <prvInitialiseTaskLists+0x78>)
 800b2ec:	4a05      	ldr	r2, [pc, #20]	@ (800b304 <prvInitialiseTaskLists+0x64>)
 800b2ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b31c <prvInitialiseTaskLists+0x7c>)
 800b2f2:	4a05      	ldr	r2, [pc, #20]	@ (800b308 <prvInitialiseTaskLists+0x68>)
 800b2f4:	601a      	str	r2, [r3, #0]
}
 800b2f6:	bf00      	nop
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20000d88 	.word	0x20000d88
 800b304:	200011e8 	.word	0x200011e8
 800b308:	200011fc 	.word	0x200011fc
 800b30c:	20001218 	.word	0x20001218
 800b310:	2000122c 	.word	0x2000122c
 800b314:	20001244 	.word	0x20001244
 800b318:	20001210 	.word	0x20001210
 800b31c:	20001214 	.word	0x20001214

0800b320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b326:	e019      	b.n	800b35c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b328:	f000 fe4e 	bl	800bfc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b32c:	4b10      	ldr	r3, [pc, #64]	@ (800b370 <prvCheckTasksWaitingTermination+0x50>)
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3304      	adds	r3, #4
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fd2f 	bl	8009d9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b33e:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <prvCheckTasksWaitingTermination+0x54>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3b01      	subs	r3, #1
 800b344:	4a0b      	ldr	r2, [pc, #44]	@ (800b374 <prvCheckTasksWaitingTermination+0x54>)
 800b346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b348:	4b0b      	ldr	r3, [pc, #44]	@ (800b378 <prvCheckTasksWaitingTermination+0x58>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	4a0a      	ldr	r2, [pc, #40]	@ (800b378 <prvCheckTasksWaitingTermination+0x58>)
 800b350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b352:	f000 fe6b 	bl	800c02c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f810 	bl	800b37c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b35c:	4b06      	ldr	r3, [pc, #24]	@ (800b378 <prvCheckTasksWaitingTermination+0x58>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e1      	bne.n	800b328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b364:	bf00      	nop
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	2000122c 	.word	0x2000122c
 800b374:	20001258 	.word	0x20001258
 800b378:	20001240 	.word	0x20001240

0800b37c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3354      	adds	r3, #84	@ 0x54
 800b388:	4618      	mov	r0, r3
 800b38a:	f002 fcdb 	bl	800dd44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b394:	2b00      	cmp	r3, #0
 800b396:	d108      	bne.n	800b3aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b39c:	4618      	mov	r0, r3
 800b39e:	f001 f803 	bl	800c3a8 <vPortFree>
				vPortFree( pxTCB );
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 f800 	bl	800c3a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b3a8:	e019      	b.n	800b3de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d103      	bne.n	800b3bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 fff7 	bl	800c3a8 <vPortFree>
	}
 800b3ba:	e010      	b.n	800b3de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d00b      	beq.n	800b3de <prvDeleteTCB+0x62>
	__asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	60fb      	str	r3, [r7, #12]
}
 800b3d8:	bf00      	nop
 800b3da:	bf00      	nop
 800b3dc:	e7fd      	b.n	800b3da <prvDeleteTCB+0x5e>
	}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b420 <prvResetNextTaskUnblockTime+0x38>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d104      	bne.n	800b402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b424 <prvResetNextTaskUnblockTime+0x3c>)
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b400:	e008      	b.n	800b414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b402:	4b07      	ldr	r3, [pc, #28]	@ (800b420 <prvResetNextTaskUnblockTime+0x38>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4a04      	ldr	r2, [pc, #16]	@ (800b424 <prvResetNextTaskUnblockTime+0x3c>)
 800b412:	6013      	str	r3, [r2, #0]
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	20001210 	.word	0x20001210
 800b424:	20001278 	.word	0x20001278

0800b428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b42e:	4b0b      	ldr	r3, [pc, #44]	@ (800b45c <xTaskGetSchedulerState+0x34>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d102      	bne.n	800b43c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b436:	2301      	movs	r3, #1
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	e008      	b.n	800b44e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b43c:	4b08      	ldr	r3, [pc, #32]	@ (800b460 <xTaskGetSchedulerState+0x38>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b444:	2302      	movs	r3, #2
 800b446:	607b      	str	r3, [r7, #4]
 800b448:	e001      	b.n	800b44e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b44a:	2300      	movs	r3, #0
 800b44c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b44e:	687b      	ldr	r3, [r7, #4]
	}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	20001264 	.word	0x20001264
 800b460:	20001280 	.word	0x20001280

0800b464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d058      	beq.n	800b52c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b47a:	4b2f      	ldr	r3, [pc, #188]	@ (800b538 <xTaskPriorityDisinherit+0xd4>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	429a      	cmp	r2, r3
 800b482:	d00b      	beq.n	800b49c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	60fb      	str	r3, [r7, #12]
}
 800b496:	bf00      	nop
 800b498:	bf00      	nop
 800b49a:	e7fd      	b.n	800b498 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	60bb      	str	r3, [r7, #8]
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	e7fd      	b.n	800b4b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c0:	1e5a      	subs	r2, r3, #1
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d02c      	beq.n	800b52c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d128      	bne.n	800b52c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	3304      	adds	r3, #4
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fe fc5c 	bl	8009d9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b53c <xTaskPriorityDisinherit+0xd8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d903      	bls.n	800b50c <xTaskPriorityDisinherit+0xa8>
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	4a0c      	ldr	r2, [pc, #48]	@ (800b53c <xTaskPriorityDisinherit+0xd8>)
 800b50a:	6013      	str	r3, [r2, #0]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b510:	4613      	mov	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4a09      	ldr	r2, [pc, #36]	@ (800b540 <xTaskPriorityDisinherit+0xdc>)
 800b51a:	441a      	add	r2, r3
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	3304      	adds	r3, #4
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f7fe fbdd 	bl	8009ce2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b52c:	697b      	ldr	r3, [r7, #20]
	}
 800b52e:	4618      	mov	r0, r3
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20000d84 	.word	0x20000d84
 800b53c:	20001260 	.word	0x20001260
 800b540:	20000d88 	.word	0x20000d88

0800b544 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b552:	f000 fd39 	bl	800bfc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b556:	4b29      	ldr	r3, [pc, #164]	@ (800b5fc <xTaskNotifyWait+0xb8>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d01c      	beq.n	800b59e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b564:	4b25      	ldr	r3, [pc, #148]	@ (800b5fc <xTaskNotifyWait+0xb8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	43d2      	mvns	r2, r2
 800b570:	400a      	ands	r2, r1
 800b572:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b576:	4b21      	ldr	r3, [pc, #132]	@ (800b5fc <xTaskNotifyWait+0xb8>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00b      	beq.n	800b59e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b586:	2101      	movs	r1, #1
 800b588:	6838      	ldr	r0, [r7, #0]
 800b58a:	f000 f83b 	bl	800b604 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b58e:	4b1c      	ldr	r3, [pc, #112]	@ (800b600 <xTaskNotifyWait+0xbc>)
 800b590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b594:	601a      	str	r2, [r3, #0]
 800b596:	f3bf 8f4f 	dsb	sy
 800b59a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b59e:	f000 fd45 	bl	800c02c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b5a2:	f000 fd11 	bl	800bfc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b5ac:	4b13      	ldr	r3, [pc, #76]	@ (800b5fc <xTaskNotifyWait+0xb8>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b5b8:	4b10      	ldr	r3, [pc, #64]	@ (800b5fc <xTaskNotifyWait+0xb8>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d002      	beq.n	800b5cc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
 800b5ca:	e00a      	b.n	800b5e2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b5cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b5fc <xTaskNotifyWait+0xb8>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	43d2      	mvns	r2, r2
 800b5d8:	400a      	ands	r2, r1
 800b5da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5e2:	4b06      	ldr	r3, [pc, #24]	@ (800b5fc <xTaskNotifyWait+0xb8>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800b5ec:	f000 fd1e 	bl	800c02c <vPortExitCritical>

		return xReturn;
 800b5f0:	697b      	ldr	r3, [r7, #20]
	}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20000d84 	.word	0x20000d84
 800b600:	e000ed04 	.word	0xe000ed04

0800b604 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b60e:	4b21      	ldr	r3, [pc, #132]	@ (800b694 <prvAddCurrentTaskToDelayedList+0x90>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b614:	4b20      	ldr	r3, [pc, #128]	@ (800b698 <prvAddCurrentTaskToDelayedList+0x94>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	3304      	adds	r3, #4
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fbbe 	bl	8009d9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b626:	d10a      	bne.n	800b63e <prvAddCurrentTaskToDelayedList+0x3a>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d007      	beq.n	800b63e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b62e:	4b1a      	ldr	r3, [pc, #104]	@ (800b698 <prvAddCurrentTaskToDelayedList+0x94>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3304      	adds	r3, #4
 800b634:	4619      	mov	r1, r3
 800b636:	4819      	ldr	r0, [pc, #100]	@ (800b69c <prvAddCurrentTaskToDelayedList+0x98>)
 800b638:	f7fe fb53 	bl	8009ce2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b63c:	e026      	b.n	800b68c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4413      	add	r3, r2
 800b644:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b646:	4b14      	ldr	r3, [pc, #80]	@ (800b698 <prvAddCurrentTaskToDelayedList+0x94>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	429a      	cmp	r2, r3
 800b654:	d209      	bcs.n	800b66a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b656:	4b12      	ldr	r3, [pc, #72]	@ (800b6a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	4b0f      	ldr	r3, [pc, #60]	@ (800b698 <prvAddCurrentTaskToDelayedList+0x94>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3304      	adds	r3, #4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7fe fb61 	bl	8009d2a <vListInsert>
}
 800b668:	e010      	b.n	800b68c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b66a:	4b0e      	ldr	r3, [pc, #56]	@ (800b6a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	4b0a      	ldr	r3, [pc, #40]	@ (800b698 <prvAddCurrentTaskToDelayedList+0x94>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3304      	adds	r3, #4
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f7fe fb57 	bl	8009d2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b67c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	429a      	cmp	r2, r3
 800b684:	d202      	bcs.n	800b68c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b686:	4a08      	ldr	r2, [pc, #32]	@ (800b6a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	6013      	str	r3, [r2, #0]
}
 800b68c:	bf00      	nop
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	2000125c 	.word	0x2000125c
 800b698:	20000d84 	.word	0x20000d84
 800b69c:	20001244 	.word	0x20001244
 800b6a0:	20001214 	.word	0x20001214
 800b6a4:	20001210 	.word	0x20001210
 800b6a8:	20001278 	.word	0x20001278

0800b6ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b08a      	sub	sp, #40	@ 0x28
 800b6b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6b6:	f000 fb13 	bl	800bce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b730 <xTimerCreateTimerTask+0x84>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d021      	beq.n	800b706 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6ca:	1d3a      	adds	r2, r7, #4
 800b6cc:	f107 0108 	add.w	r1, r7, #8
 800b6d0:	f107 030c 	add.w	r3, r7, #12
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe fabd 	bl	8009c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	9202      	str	r2, [sp, #8]
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	460a      	mov	r2, r1
 800b6ec:	4911      	ldr	r1, [pc, #68]	@ (800b734 <xTimerCreateTimerTask+0x88>)
 800b6ee:	4812      	ldr	r0, [pc, #72]	@ (800b738 <xTimerCreateTimerTask+0x8c>)
 800b6f0:	f7ff f878 	bl	800a7e4 <xTaskCreateStatic>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	4a11      	ldr	r2, [pc, #68]	@ (800b73c <xTimerCreateTimerTask+0x90>)
 800b6f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b6fa:	4b10      	ldr	r3, [pc, #64]	@ (800b73c <xTimerCreateTimerTask+0x90>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b702:	2301      	movs	r3, #1
 800b704:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10b      	bne.n	800b724 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	613b      	str	r3, [r7, #16]
}
 800b71e:	bf00      	nop
 800b720:	bf00      	nop
 800b722:	e7fd      	b.n	800b720 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b724:	697b      	ldr	r3, [r7, #20]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	200012b4 	.word	0x200012b4
 800b734:	08010bd0 	.word	0x08010bd0
 800b738:	0800b879 	.word	0x0800b879
 800b73c:	200012b8 	.word	0x200012b8

0800b740 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	@ 0x28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b74e:	2300      	movs	r3, #0
 800b750:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10b      	bne.n	800b770 <xTimerGenericCommand+0x30>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	623b      	str	r3, [r7, #32]
}
 800b76a:	bf00      	nop
 800b76c:	bf00      	nop
 800b76e:	e7fd      	b.n	800b76c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b770:	4b19      	ldr	r3, [pc, #100]	@ (800b7d8 <xTimerGenericCommand+0x98>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d02a      	beq.n	800b7ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b05      	cmp	r3, #5
 800b788:	dc18      	bgt.n	800b7bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b78a:	f7ff fe4d 	bl	800b428 <xTaskGetSchedulerState>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b02      	cmp	r3, #2
 800b792:	d109      	bne.n	800b7a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b794:	4b10      	ldr	r3, [pc, #64]	@ (800b7d8 <xTimerGenericCommand+0x98>)
 800b796:	6818      	ldr	r0, [r3, #0]
 800b798:	f107 0110 	add.w	r1, r7, #16
 800b79c:	2300      	movs	r3, #0
 800b79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7a0:	f7fe fc30 	bl	800a004 <xQueueGenericSend>
 800b7a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7a6:	e012      	b.n	800b7ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d8 <xTimerGenericCommand+0x98>)
 800b7aa:	6818      	ldr	r0, [r3, #0]
 800b7ac:	f107 0110 	add.w	r1, r7, #16
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f7fe fc26 	bl	800a004 <xQueueGenericSend>
 800b7b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7ba:	e008      	b.n	800b7ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7bc:	4b06      	ldr	r3, [pc, #24]	@ (800b7d8 <xTimerGenericCommand+0x98>)
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	f107 0110 	add.w	r1, r7, #16
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	f7fe fd1e 	bl	800a208 <xQueueGenericSendFromISR>
 800b7cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3728      	adds	r7, #40	@ 0x28
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	200012b4 	.word	0x200012b4

0800b7dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	af02      	add	r7, sp, #8
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e6:	4b23      	ldr	r3, [pc, #140]	@ (800b874 <prvProcessExpiredTimer+0x98>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe fad1 	bl	8009d9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d023      	beq.n	800b850 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	699a      	ldr	r2, [r3, #24]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	18d1      	adds	r1, r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	6978      	ldr	r0, [r7, #20]
 800b816:	f000 f8d5 	bl	800b9c4 <prvInsertTimerInActiveList>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d020      	beq.n	800b862 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b820:	2300      	movs	r3, #0
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	2300      	movs	r3, #0
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	2100      	movs	r1, #0
 800b82a:	6978      	ldr	r0, [r7, #20]
 800b82c:	f7ff ff88 	bl	800b740 <xTimerGenericCommand>
 800b830:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d114      	bne.n	800b862 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	60fb      	str	r3, [r7, #12]
}
 800b84a:	bf00      	nop
 800b84c:	bf00      	nop
 800b84e:	e7fd      	b.n	800b84c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b856:	f023 0301 	bic.w	r3, r3, #1
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	6978      	ldr	r0, [r7, #20]
 800b868:	4798      	blx	r3
}
 800b86a:	bf00      	nop
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	200012ac 	.word	0x200012ac

0800b878 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b880:	f107 0308 	add.w	r3, r7, #8
 800b884:	4618      	mov	r0, r3
 800b886:	f000 f859 	bl	800b93c <prvGetNextExpireTime>
 800b88a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	4619      	mov	r1, r3
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f000 f805 	bl	800b8a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b896:	f000 f8d7 	bl	800ba48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b89a:	bf00      	nop
 800b89c:	e7f0      	b.n	800b880 <prvTimerTask+0x8>
	...

0800b8a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8aa:	f7ff f9c9 	bl	800ac40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8ae:	f107 0308 	add.w	r3, r7, #8
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 f866 	bl	800b984 <prvSampleTimeNow>
 800b8b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d130      	bne.n	800b922 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <prvProcessTimerOrBlockTask+0x3c>
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d806      	bhi.n	800b8dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8ce:	f7ff f9c5 	bl	800ac5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8d2:	68f9      	ldr	r1, [r7, #12]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7ff ff81 	bl	800b7dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8da:	e024      	b.n	800b926 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d008      	beq.n	800b8f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8e2:	4b13      	ldr	r3, [pc, #76]	@ (800b930 <prvProcessTimerOrBlockTask+0x90>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d101      	bne.n	800b8f0 <prvProcessTimerOrBlockTask+0x50>
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e000      	b.n	800b8f2 <prvProcessTimerOrBlockTask+0x52>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800b934 <prvProcessTimerOrBlockTask+0x94>)
 800b8f6:	6818      	ldr	r0, [r3, #0]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	4619      	mov	r1, r3
 800b902:	f7fe ff3b 	bl	800a77c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b906:	f7ff f9a9 	bl	800ac5c <xTaskResumeAll>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b910:	4b09      	ldr	r3, [pc, #36]	@ (800b938 <prvProcessTimerOrBlockTask+0x98>)
 800b912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	f3bf 8f6f 	isb	sy
}
 800b920:	e001      	b.n	800b926 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b922:	f7ff f99b 	bl	800ac5c <xTaskResumeAll>
}
 800b926:	bf00      	nop
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	200012b0 	.word	0x200012b0
 800b934:	200012b4 	.word	0x200012b4
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b944:	4b0e      	ldr	r3, [pc, #56]	@ (800b980 <prvGetNextExpireTime+0x44>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <prvGetNextExpireTime+0x16>
 800b94e:	2201      	movs	r2, #1
 800b950:	e000      	b.n	800b954 <prvGetNextExpireTime+0x18>
 800b952:	2200      	movs	r2, #0
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d105      	bne.n	800b96c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b960:	4b07      	ldr	r3, [pc, #28]	@ (800b980 <prvGetNextExpireTime+0x44>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60fb      	str	r3, [r7, #12]
 800b96a:	e001      	b.n	800b970 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b970:	68fb      	ldr	r3, [r7, #12]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	200012ac 	.word	0x200012ac

0800b984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b98c:	f7ff fa04 	bl	800ad98 <xTaskGetTickCount>
 800b990:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b992:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c0 <prvSampleTimeNow+0x3c>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d205      	bcs.n	800b9a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b99c:	f000 f93a 	bl	800bc14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	e002      	b.n	800b9ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9ae:	4a04      	ldr	r2, [pc, #16]	@ (800b9c0 <prvSampleTimeNow+0x3c>)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	200012bc 	.word	0x200012bc

0800b9c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d812      	bhi.n	800ba10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d302      	bcc.n	800b9fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	617b      	str	r3, [r7, #20]
 800b9fc:	e01b      	b.n	800ba36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9fe:	4b10      	ldr	r3, [pc, #64]	@ (800ba40 <prvInsertTimerInActiveList+0x7c>)
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f7fe f98e 	bl	8009d2a <vListInsert>
 800ba0e:	e012      	b.n	800ba36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d206      	bcs.n	800ba26 <prvInsertTimerInActiveList+0x62>
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d302      	bcc.n	800ba26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba20:	2301      	movs	r3, #1
 800ba22:	617b      	str	r3, [r7, #20]
 800ba24:	e007      	b.n	800ba36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba26:	4b07      	ldr	r3, [pc, #28]	@ (800ba44 <prvInsertTimerInActiveList+0x80>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7fe f97a 	bl	8009d2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba36:	697b      	ldr	r3, [r7, #20]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	200012b0 	.word	0x200012b0
 800ba44:	200012ac 	.word	0x200012ac

0800ba48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08e      	sub	sp, #56	@ 0x38
 800ba4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba4e:	e0ce      	b.n	800bbee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	da19      	bge.n	800ba8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba56:	1d3b      	adds	r3, r7, #4
 800ba58:	3304      	adds	r3, #4
 800ba5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10b      	bne.n	800ba7a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ba62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	61fb      	str	r3, [r7, #28]
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop
 800ba78:	e7fd      	b.n	800ba76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba80:	6850      	ldr	r0, [r2, #4]
 800ba82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba84:	6892      	ldr	r2, [r2, #8]
 800ba86:	4611      	mov	r1, r2
 800ba88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f2c0 80ae 	blt.w	800bbee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	3304      	adds	r3, #4
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe f97a 	bl	8009d9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baa8:	463b      	mov	r3, r7
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff ff6a 	bl	800b984 <prvSampleTimeNow>
 800bab0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b09      	cmp	r3, #9
 800bab6:	f200 8097 	bhi.w	800bbe8 <prvProcessReceivedCommands+0x1a0>
 800baba:	a201      	add	r2, pc, #4	@ (adr r2, 800bac0 <prvProcessReceivedCommands+0x78>)
 800babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac0:	0800bae9 	.word	0x0800bae9
 800bac4:	0800bae9 	.word	0x0800bae9
 800bac8:	0800bae9 	.word	0x0800bae9
 800bacc:	0800bb5f 	.word	0x0800bb5f
 800bad0:	0800bb73 	.word	0x0800bb73
 800bad4:	0800bbbf 	.word	0x0800bbbf
 800bad8:	0800bae9 	.word	0x0800bae9
 800badc:	0800bae9 	.word	0x0800bae9
 800bae0:	0800bb5f 	.word	0x0800bb5f
 800bae4:	0800bb73 	.word	0x0800bb73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baee:	f043 0301 	orr.w	r3, r3, #1
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	18d1      	adds	r1, r2, r3
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb08:	f7ff ff5c 	bl	800b9c4 <prvInsertTimerInActiveList>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d06c      	beq.n	800bbec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb20:	f003 0304 	and.w	r3, r3, #4
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d061      	beq.n	800bbec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	441a      	add	r2, r3
 800bb30:	2300      	movs	r3, #0
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	2300      	movs	r3, #0
 800bb36:	2100      	movs	r1, #0
 800bb38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb3a:	f7ff fe01 	bl	800b740 <xTimerGenericCommand>
 800bb3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d152      	bne.n	800bbec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	61bb      	str	r3, [r7, #24]
}
 800bb58:	bf00      	nop
 800bb5a:	bf00      	nop
 800bb5c:	e7fd      	b.n	800bb5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb64:	f023 0301 	bic.w	r3, r3, #1
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bb70:	e03d      	b.n	800bbee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb78:	f043 0301 	orr.w	r3, r3, #1
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10b      	bne.n	800bbaa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	617b      	str	r3, [r7, #20]
}
 800bba4:	bf00      	nop
 800bba6:	bf00      	nop
 800bba8:	e7fd      	b.n	800bba6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbac:	699a      	ldr	r2, [r3, #24]
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	18d1      	adds	r1, r2, r3
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbb8:	f7ff ff04 	bl	800b9c4 <prvInsertTimerInActiveList>
					break;
 800bbbc:	e017      	b.n	800bbee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbc4:	f003 0302 	and.w	r3, r3, #2
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bbcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbce:	f000 fbeb 	bl	800c3a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bbd2:	e00c      	b.n	800bbee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbda:	f023 0301 	bic.w	r3, r3, #1
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bbe6:	e002      	b.n	800bbee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bbe8:	bf00      	nop
 800bbea:	e000      	b.n	800bbee <prvProcessReceivedCommands+0x1a6>
					break;
 800bbec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbee:	4b08      	ldr	r3, [pc, #32]	@ (800bc10 <prvProcessReceivedCommands+0x1c8>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	1d39      	adds	r1, r7, #4
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fe fba4 	bl	800a344 <xQueueReceive>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f47f af26 	bne.w	800ba50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop
 800bc08:	3730      	adds	r7, #48	@ 0x30
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	200012b4 	.word	0x200012b4

0800bc14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc1a:	e049      	b.n	800bcb0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc1c:	4b2e      	ldr	r3, [pc, #184]	@ (800bcd8 <prvSwitchTimerLists+0xc4>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc26:	4b2c      	ldr	r3, [pc, #176]	@ (800bcd8 <prvSwitchTimerLists+0xc4>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe f8b1 	bl	8009d9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d02f      	beq.n	800bcb0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4413      	add	r3, r2
 800bc58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d90e      	bls.n	800bc80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcd8 <prvSwitchTimerLists+0xc4>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3304      	adds	r3, #4
 800bc76:	4619      	mov	r1, r3
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f7fe f856 	bl	8009d2a <vListInsert>
 800bc7e:	e017      	b.n	800bcb0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc80:	2300      	movs	r3, #0
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	2300      	movs	r3, #0
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	2100      	movs	r1, #0
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f7ff fd58 	bl	800b740 <xTimerGenericCommand>
 800bc90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10b      	bne.n	800bcb0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	603b      	str	r3, [r7, #0]
}
 800bcaa:	bf00      	nop
 800bcac:	bf00      	nop
 800bcae:	e7fd      	b.n	800bcac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcb0:	4b09      	ldr	r3, [pc, #36]	@ (800bcd8 <prvSwitchTimerLists+0xc4>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1b0      	bne.n	800bc1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcba:	4b07      	ldr	r3, [pc, #28]	@ (800bcd8 <prvSwitchTimerLists+0xc4>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <prvSwitchTimerLists+0xc8>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a04      	ldr	r2, [pc, #16]	@ (800bcd8 <prvSwitchTimerLists+0xc4>)
 800bcc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bcc8:	4a04      	ldr	r2, [pc, #16]	@ (800bcdc <prvSwitchTimerLists+0xc8>)
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	6013      	str	r3, [r2, #0]
}
 800bcce:	bf00      	nop
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	200012ac 	.word	0x200012ac
 800bcdc:	200012b0 	.word	0x200012b0

0800bce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bce6:	f000 f96f 	bl	800bfc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bcea:	4b15      	ldr	r3, [pc, #84]	@ (800bd40 <prvCheckForValidListAndQueue+0x60>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d120      	bne.n	800bd34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bcf2:	4814      	ldr	r0, [pc, #80]	@ (800bd44 <prvCheckForValidListAndQueue+0x64>)
 800bcf4:	f7fd ffc8 	bl	8009c88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bcf8:	4813      	ldr	r0, [pc, #76]	@ (800bd48 <prvCheckForValidListAndQueue+0x68>)
 800bcfa:	f7fd ffc5 	bl	8009c88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bcfe:	4b13      	ldr	r3, [pc, #76]	@ (800bd4c <prvCheckForValidListAndQueue+0x6c>)
 800bd00:	4a10      	ldr	r2, [pc, #64]	@ (800bd44 <prvCheckForValidListAndQueue+0x64>)
 800bd02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd04:	4b12      	ldr	r3, [pc, #72]	@ (800bd50 <prvCheckForValidListAndQueue+0x70>)
 800bd06:	4a10      	ldr	r2, [pc, #64]	@ (800bd48 <prvCheckForValidListAndQueue+0x68>)
 800bd08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	4b11      	ldr	r3, [pc, #68]	@ (800bd54 <prvCheckForValidListAndQueue+0x74>)
 800bd10:	4a11      	ldr	r2, [pc, #68]	@ (800bd58 <prvCheckForValidListAndQueue+0x78>)
 800bd12:	2110      	movs	r1, #16
 800bd14:	200a      	movs	r0, #10
 800bd16:	f7fe f8d5 	bl	8009ec4 <xQueueGenericCreateStatic>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	4a08      	ldr	r2, [pc, #32]	@ (800bd40 <prvCheckForValidListAndQueue+0x60>)
 800bd1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd20:	4b07      	ldr	r3, [pc, #28]	@ (800bd40 <prvCheckForValidListAndQueue+0x60>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d005      	beq.n	800bd34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd28:	4b05      	ldr	r3, [pc, #20]	@ (800bd40 <prvCheckForValidListAndQueue+0x60>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	490b      	ldr	r1, [pc, #44]	@ (800bd5c <prvCheckForValidListAndQueue+0x7c>)
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fcfa 	bl	800a728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd34:	f000 f97a 	bl	800c02c <vPortExitCritical>
}
 800bd38:	bf00      	nop
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	200012b4 	.word	0x200012b4
 800bd44:	20001284 	.word	0x20001284
 800bd48:	20001298 	.word	0x20001298
 800bd4c:	200012ac 	.word	0x200012ac
 800bd50:	200012b0 	.word	0x200012b0
 800bd54:	20001360 	.word	0x20001360
 800bd58:	200012c0 	.word	0x200012c0
 800bd5c:	08010bd8 	.word	0x08010bd8

0800bd60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	3b04      	subs	r3, #4
 800bd70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bd78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3b04      	subs	r3, #4
 800bd7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f023 0201 	bic.w	r2, r3, #1
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3b04      	subs	r3, #4
 800bd8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd90:	4a0c      	ldr	r2, [pc, #48]	@ (800bdc4 <pxPortInitialiseStack+0x64>)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	3b14      	subs	r3, #20
 800bd9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3b04      	subs	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f06f 0202 	mvn.w	r2, #2
 800bdae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3b20      	subs	r3, #32
 800bdb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	0800bdc9 	.word	0x0800bdc9

0800bdc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdd2:	4b13      	ldr	r3, [pc, #76]	@ (800be20 <prvTaskExitError+0x58>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdda:	d00b      	beq.n	800bdf4 <prvTaskExitError+0x2c>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60fb      	str	r3, [r7, #12]
}
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	e7fd      	b.n	800bdf0 <prvTaskExitError+0x28>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60bb      	str	r3, [r7, #8]
}
 800be06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be08:	bf00      	nop
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d0fc      	beq.n	800be0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be10:	bf00      	nop
 800be12:	bf00      	nop
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	2000009c 	.word	0x2000009c
	...

0800be30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be30:	4b07      	ldr	r3, [pc, #28]	@ (800be50 <pxCurrentTCBConst2>)
 800be32:	6819      	ldr	r1, [r3, #0]
 800be34:	6808      	ldr	r0, [r1, #0]
 800be36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3a:	f380 8809 	msr	PSP, r0
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f04f 0000 	mov.w	r0, #0
 800be46:	f380 8811 	msr	BASEPRI, r0
 800be4a:	4770      	bx	lr
 800be4c:	f3af 8000 	nop.w

0800be50 <pxCurrentTCBConst2>:
 800be50:	20000d84 	.word	0x20000d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop

0800be58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be58:	4808      	ldr	r0, [pc, #32]	@ (800be7c <prvPortStartFirstTask+0x24>)
 800be5a:	6800      	ldr	r0, [r0, #0]
 800be5c:	6800      	ldr	r0, [r0, #0]
 800be5e:	f380 8808 	msr	MSP, r0
 800be62:	f04f 0000 	mov.w	r0, #0
 800be66:	f380 8814 	msr	CONTROL, r0
 800be6a:	b662      	cpsie	i
 800be6c:	b661      	cpsie	f
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	df00      	svc	0
 800be78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be7a:	bf00      	nop
 800be7c:	e000ed08 	.word	0xe000ed08

0800be80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be86:	4b47      	ldr	r3, [pc, #284]	@ (800bfa4 <xPortStartScheduler+0x124>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a47      	ldr	r2, [pc, #284]	@ (800bfa8 <xPortStartScheduler+0x128>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d10b      	bne.n	800bea8 <xPortStartScheduler+0x28>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	613b      	str	r3, [r7, #16]
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	e7fd      	b.n	800bea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bea8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfa4 <xPortStartScheduler+0x124>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a3f      	ldr	r2, [pc, #252]	@ (800bfac <xPortStartScheduler+0x12c>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d10b      	bne.n	800beca <xPortStartScheduler+0x4a>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	60fb      	str	r3, [r7, #12]
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop
 800bec8:	e7fd      	b.n	800bec6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beca:	4b39      	ldr	r3, [pc, #228]	@ (800bfb0 <xPortStartScheduler+0x130>)
 800becc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	22ff      	movs	r2, #255	@ 0xff
 800beda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800beec:	b2da      	uxtb	r2, r3
 800beee:	4b31      	ldr	r3, [pc, #196]	@ (800bfb4 <xPortStartScheduler+0x134>)
 800bef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bef2:	4b31      	ldr	r3, [pc, #196]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800bef4:	2207      	movs	r2, #7
 800bef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bef8:	e009      	b.n	800bf0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800befa:	4b2f      	ldr	r3, [pc, #188]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3b01      	subs	r3, #1
 800bf00:	4a2d      	ldr	r2, [pc, #180]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800bf02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf0e:	78fb      	ldrb	r3, [r7, #3]
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf16:	2b80      	cmp	r3, #128	@ 0x80
 800bf18:	d0ef      	beq.n	800befa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf1a:	4b27      	ldr	r3, [pc, #156]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f1c3 0307 	rsb	r3, r3, #7
 800bf22:	2b04      	cmp	r3, #4
 800bf24:	d00b      	beq.n	800bf3e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	60bb      	str	r3, [r7, #8]
}
 800bf38:	bf00      	nop
 800bf3a:	bf00      	nop
 800bf3c:	e7fd      	b.n	800bf3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf3e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	021b      	lsls	r3, r3, #8
 800bf44:	4a1c      	ldr	r2, [pc, #112]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800bf46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf48:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf50:	4a19      	ldr	r2, [pc, #100]	@ (800bfb8 <xPortStartScheduler+0x138>)
 800bf52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf5c:	4b17      	ldr	r3, [pc, #92]	@ (800bfbc <xPortStartScheduler+0x13c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a16      	ldr	r2, [pc, #88]	@ (800bfbc <xPortStartScheduler+0x13c>)
 800bf62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf68:	4b14      	ldr	r3, [pc, #80]	@ (800bfbc <xPortStartScheduler+0x13c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a13      	ldr	r2, [pc, #76]	@ (800bfbc <xPortStartScheduler+0x13c>)
 800bf6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bf72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf74:	f000 f8da 	bl	800c12c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf78:	4b11      	ldr	r3, [pc, #68]	@ (800bfc0 <xPortStartScheduler+0x140>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf7e:	f000 f8f9 	bl	800c174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf82:	4b10      	ldr	r3, [pc, #64]	@ (800bfc4 <xPortStartScheduler+0x144>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a0f      	ldr	r2, [pc, #60]	@ (800bfc4 <xPortStartScheduler+0x144>)
 800bf88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bf8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf8e:	f7ff ff63 	bl	800be58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf92:	f7fe ffcb 	bl	800af2c <vTaskSwitchContext>
	prvTaskExitError();
 800bf96:	f7ff ff17 	bl	800bdc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	e000ed00 	.word	0xe000ed00
 800bfa8:	410fc271 	.word	0x410fc271
 800bfac:	410fc270 	.word	0x410fc270
 800bfb0:	e000e400 	.word	0xe000e400
 800bfb4:	200013b0 	.word	0x200013b0
 800bfb8:	200013b4 	.word	0x200013b4
 800bfbc:	e000ed20 	.word	0xe000ed20
 800bfc0:	2000009c 	.word	0x2000009c
 800bfc4:	e000ef34 	.word	0xe000ef34

0800bfc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	607b      	str	r3, [r7, #4]
}
 800bfe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bfe2:	4b10      	ldr	r3, [pc, #64]	@ (800c024 <vPortEnterCritical+0x5c>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	4a0e      	ldr	r2, [pc, #56]	@ (800c024 <vPortEnterCritical+0x5c>)
 800bfea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bfec:	4b0d      	ldr	r3, [pc, #52]	@ (800c024 <vPortEnterCritical+0x5c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d110      	bne.n	800c016 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bff4:	4b0c      	ldr	r3, [pc, #48]	@ (800c028 <vPortEnterCritical+0x60>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <vPortEnterCritical+0x4e>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	603b      	str	r3, [r7, #0]
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	e7fd      	b.n	800c012 <vPortEnterCritical+0x4a>
	}
}
 800c016:	bf00      	nop
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	2000009c 	.word	0x2000009c
 800c028:	e000ed04 	.word	0xe000ed04

0800c02c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c032:	4b12      	ldr	r3, [pc, #72]	@ (800c07c <vPortExitCritical+0x50>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10b      	bne.n	800c052 <vPortExitCritical+0x26>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	607b      	str	r3, [r7, #4]
}
 800c04c:	bf00      	nop
 800c04e:	bf00      	nop
 800c050:	e7fd      	b.n	800c04e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c052:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <vPortExitCritical+0x50>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3b01      	subs	r3, #1
 800c058:	4a08      	ldr	r2, [pc, #32]	@ (800c07c <vPortExitCritical+0x50>)
 800c05a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c05c:	4b07      	ldr	r3, [pc, #28]	@ (800c07c <vPortExitCritical+0x50>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d105      	bne.n	800c070 <vPortExitCritical+0x44>
 800c064:	2300      	movs	r3, #0
 800c066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	f383 8811 	msr	BASEPRI, r3
}
 800c06e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	2000009c 	.word	0x2000009c

0800c080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c080:	f3ef 8009 	mrs	r0, PSP
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	4b15      	ldr	r3, [pc, #84]	@ (800c0e0 <pxCurrentTCBConst>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	f01e 0f10 	tst.w	lr, #16
 800c090:	bf08      	it	eq
 800c092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09a:	6010      	str	r0, [r2, #0]
 800c09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0a4:	f380 8811 	msr	BASEPRI, r0
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f7fe ff3c 	bl	800af2c <vTaskSwitchContext>
 800c0b4:	f04f 0000 	mov.w	r0, #0
 800c0b8:	f380 8811 	msr	BASEPRI, r0
 800c0bc:	bc09      	pop	{r0, r3}
 800c0be:	6819      	ldr	r1, [r3, #0]
 800c0c0:	6808      	ldr	r0, [r1, #0]
 800c0c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c6:	f01e 0f10 	tst.w	lr, #16
 800c0ca:	bf08      	it	eq
 800c0cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0d0:	f380 8809 	msr	PSP, r0
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	f3af 8000 	nop.w

0800c0e0 <pxCurrentTCBConst>:
 800c0e0:	20000d84 	.word	0x20000d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop

0800c0e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	607b      	str	r3, [r7, #4]
}
 800c100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c102:	f7fe fe59 	bl	800adb8 <xTaskIncrementTick>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d003      	beq.n	800c114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c10c:	4b06      	ldr	r3, [pc, #24]	@ (800c128 <xPortSysTickHandler+0x40>)
 800c10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	2300      	movs	r3, #0
 800c116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f383 8811 	msr	BASEPRI, r3
}
 800c11e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c120:	bf00      	nop
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	e000ed04 	.word	0xe000ed04

0800c12c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c12c:	b480      	push	{r7}
 800c12e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c130:	4b0b      	ldr	r3, [pc, #44]	@ (800c160 <vPortSetupTimerInterrupt+0x34>)
 800c132:	2200      	movs	r2, #0
 800c134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c136:	4b0b      	ldr	r3, [pc, #44]	@ (800c164 <vPortSetupTimerInterrupt+0x38>)
 800c138:	2200      	movs	r2, #0
 800c13a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c13c:	4b0a      	ldr	r3, [pc, #40]	@ (800c168 <vPortSetupTimerInterrupt+0x3c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a0a      	ldr	r2, [pc, #40]	@ (800c16c <vPortSetupTimerInterrupt+0x40>)
 800c142:	fba2 2303 	umull	r2, r3, r2, r3
 800c146:	099b      	lsrs	r3, r3, #6
 800c148:	4a09      	ldr	r2, [pc, #36]	@ (800c170 <vPortSetupTimerInterrupt+0x44>)
 800c14a:	3b01      	subs	r3, #1
 800c14c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c14e:	4b04      	ldr	r3, [pc, #16]	@ (800c160 <vPortSetupTimerInterrupt+0x34>)
 800c150:	2207      	movs	r2, #7
 800c152:	601a      	str	r2, [r3, #0]
}
 800c154:	bf00      	nop
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	e000e010 	.word	0xe000e010
 800c164:	e000e018 	.word	0xe000e018
 800c168:	20000004 	.word	0x20000004
 800c16c:	10624dd3 	.word	0x10624dd3
 800c170:	e000e014 	.word	0xe000e014

0800c174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c174:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c184 <vPortEnableVFP+0x10>
 800c178:	6801      	ldr	r1, [r0, #0]
 800c17a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c17e:	6001      	str	r1, [r0, #0]
 800c180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c182:	bf00      	nop
 800c184:	e000ed88 	.word	0xe000ed88

0800c188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c18e:	f3ef 8305 	mrs	r3, IPSR
 800c192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b0f      	cmp	r3, #15
 800c198:	d915      	bls.n	800c1c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c19a:	4a18      	ldr	r2, [pc, #96]	@ (800c1fc <vPortValidateInterruptPriority+0x74>)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1a4:	4b16      	ldr	r3, [pc, #88]	@ (800c200 <vPortValidateInterruptPriority+0x78>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	7afa      	ldrb	r2, [r7, #11]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d20b      	bcs.n	800c1c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b2:	f383 8811 	msr	BASEPRI, r3
 800c1b6:	f3bf 8f6f 	isb	sy
 800c1ba:	f3bf 8f4f 	dsb	sy
 800c1be:	607b      	str	r3, [r7, #4]
}
 800c1c0:	bf00      	nop
 800c1c2:	bf00      	nop
 800c1c4:	e7fd      	b.n	800c1c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c204 <vPortValidateInterruptPriority+0x7c>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c208 <vPortValidateInterruptPriority+0x80>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d90b      	bls.n	800c1ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	603b      	str	r3, [r7, #0]
}
 800c1e8:	bf00      	nop
 800c1ea:	bf00      	nop
 800c1ec:	e7fd      	b.n	800c1ea <vPortValidateInterruptPriority+0x62>
	}
 800c1ee:	bf00      	nop
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	e000e3f0 	.word	0xe000e3f0
 800c200:	200013b0 	.word	0x200013b0
 800c204:	e000ed0c 	.word	0xe000ed0c
 800c208:	200013b4 	.word	0x200013b4

0800c20c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08a      	sub	sp, #40	@ 0x28
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c214:	2300      	movs	r3, #0
 800c216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c218:	f7fe fd12 	bl	800ac40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c21c:	4b5c      	ldr	r3, [pc, #368]	@ (800c390 <pvPortMalloc+0x184>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c224:	f000 f924 	bl	800c470 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c228:	4b5a      	ldr	r3, [pc, #360]	@ (800c394 <pvPortMalloc+0x188>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4013      	ands	r3, r2
 800c230:	2b00      	cmp	r3, #0
 800c232:	f040 8095 	bne.w	800c360 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d01e      	beq.n	800c27a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c23c:	2208      	movs	r2, #8
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4413      	add	r3, r2
 800c242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f003 0307 	and.w	r3, r3, #7
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d015      	beq.n	800c27a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f023 0307 	bic.w	r3, r3, #7
 800c254:	3308      	adds	r3, #8
 800c256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f003 0307 	and.w	r3, r3, #7
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00b      	beq.n	800c27a <pvPortMalloc+0x6e>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	617b      	str	r3, [r7, #20]
}
 800c274:	bf00      	nop
 800c276:	bf00      	nop
 800c278:	e7fd      	b.n	800c276 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d06f      	beq.n	800c360 <pvPortMalloc+0x154>
 800c280:	4b45      	ldr	r3, [pc, #276]	@ (800c398 <pvPortMalloc+0x18c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	429a      	cmp	r2, r3
 800c288:	d86a      	bhi.n	800c360 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c28a:	4b44      	ldr	r3, [pc, #272]	@ (800c39c <pvPortMalloc+0x190>)
 800c28c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c28e:	4b43      	ldr	r3, [pc, #268]	@ (800c39c <pvPortMalloc+0x190>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c294:	e004      	b.n	800c2a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d903      	bls.n	800c2b2 <pvPortMalloc+0xa6>
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f1      	bne.n	800c296 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2b2:	4b37      	ldr	r3, [pc, #220]	@ (800c390 <pvPortMalloc+0x184>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d051      	beq.n	800c360 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	4413      	add	r3, r2
 800c2c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	1ad2      	subs	r2, r2, r3
 800c2d6:	2308      	movs	r3, #8
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d920      	bls.n	800c320 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	f003 0307 	and.w	r3, r3, #7
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <pvPortMalloc+0xfc>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	613b      	str	r3, [r7, #16]
}
 800c302:	bf00      	nop
 800c304:	bf00      	nop
 800c306:	e7fd      	b.n	800c304 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1ad2      	subs	r2, r2, r3
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c31a:	69b8      	ldr	r0, [r7, #24]
 800c31c:	f000 f90a 	bl	800c534 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c320:	4b1d      	ldr	r3, [pc, #116]	@ (800c398 <pvPortMalloc+0x18c>)
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	4a1b      	ldr	r2, [pc, #108]	@ (800c398 <pvPortMalloc+0x18c>)
 800c32c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c32e:	4b1a      	ldr	r3, [pc, #104]	@ (800c398 <pvPortMalloc+0x18c>)
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a0 <pvPortMalloc+0x194>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	429a      	cmp	r2, r3
 800c338:	d203      	bcs.n	800c342 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c33a:	4b17      	ldr	r3, [pc, #92]	@ (800c398 <pvPortMalloc+0x18c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a18      	ldr	r2, [pc, #96]	@ (800c3a0 <pvPortMalloc+0x194>)
 800c340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	4b13      	ldr	r3, [pc, #76]	@ (800c394 <pvPortMalloc+0x188>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	431a      	orrs	r2, r3
 800c34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c352:	2200      	movs	r2, #0
 800c354:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c356:	4b13      	ldr	r3, [pc, #76]	@ (800c3a4 <pvPortMalloc+0x198>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3301      	adds	r3, #1
 800c35c:	4a11      	ldr	r2, [pc, #68]	@ (800c3a4 <pvPortMalloc+0x198>)
 800c35e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c360:	f7fe fc7c 	bl	800ac5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00b      	beq.n	800c386 <pvPortMalloc+0x17a>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60fb      	str	r3, [r7, #12]
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	e7fd      	b.n	800c382 <pvPortMalloc+0x176>
	return pvReturn;
 800c386:	69fb      	ldr	r3, [r7, #28]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3728      	adds	r7, #40	@ 0x28
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20004fc0 	.word	0x20004fc0
 800c394:	20004fd4 	.word	0x20004fd4
 800c398:	20004fc4 	.word	0x20004fc4
 800c39c:	20004fb8 	.word	0x20004fb8
 800c3a0:	20004fc8 	.word	0x20004fc8
 800c3a4:	20004fcc 	.word	0x20004fcc

0800c3a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d04f      	beq.n	800c45a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3ba:	2308      	movs	r3, #8
 800c3bc:	425b      	negs	r3, r3
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	4b25      	ldr	r3, [pc, #148]	@ (800c464 <vPortFree+0xbc>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10b      	bne.n	800c3ee <vPortFree+0x46>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	60fb      	str	r3, [r7, #12]
}
 800c3e8:	bf00      	nop
 800c3ea:	bf00      	nop
 800c3ec:	e7fd      	b.n	800c3ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00b      	beq.n	800c40e <vPortFree+0x66>
	__asm volatile
 800c3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	60bb      	str	r3, [r7, #8]
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	e7fd      	b.n	800c40a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	685a      	ldr	r2, [r3, #4]
 800c412:	4b14      	ldr	r3, [pc, #80]	@ (800c464 <vPortFree+0xbc>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4013      	ands	r3, r2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d01e      	beq.n	800c45a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d11a      	bne.n	800c45a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	4b0e      	ldr	r3, [pc, #56]	@ (800c464 <vPortFree+0xbc>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	43db      	mvns	r3, r3
 800c42e:	401a      	ands	r2, r3
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c434:	f7fe fc04 	bl	800ac40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	4b0a      	ldr	r3, [pc, #40]	@ (800c468 <vPortFree+0xc0>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4413      	add	r3, r2
 800c442:	4a09      	ldr	r2, [pc, #36]	@ (800c468 <vPortFree+0xc0>)
 800c444:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c446:	6938      	ldr	r0, [r7, #16]
 800c448:	f000 f874 	bl	800c534 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c44c:	4b07      	ldr	r3, [pc, #28]	@ (800c46c <vPortFree+0xc4>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3301      	adds	r3, #1
 800c452:	4a06      	ldr	r2, [pc, #24]	@ (800c46c <vPortFree+0xc4>)
 800c454:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c456:	f7fe fc01 	bl	800ac5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c45a:	bf00      	nop
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20004fd4 	.word	0x20004fd4
 800c468:	20004fc4 	.word	0x20004fc4
 800c46c:	20004fd0 	.word	0x20004fd0

0800c470 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c476:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c47a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c47c:	4b27      	ldr	r3, [pc, #156]	@ (800c51c <prvHeapInit+0xac>)
 800c47e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00c      	beq.n	800c4a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3307      	adds	r3, #7
 800c48e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	4a1f      	ldr	r2, [pc, #124]	@ (800c51c <prvHeapInit+0xac>)
 800c4a0:	4413      	add	r3, r2
 800c4a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800c520 <prvHeapInit+0xb0>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4ae:	4b1c      	ldr	r3, [pc, #112]	@ (800c520 <prvHeapInit+0xb0>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4bc:	2208      	movs	r2, #8
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	1a9b      	subs	r3, r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f023 0307 	bic.w	r3, r3, #7
 800c4ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4a15      	ldr	r2, [pc, #84]	@ (800c524 <prvHeapInit+0xb4>)
 800c4d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4d2:	4b14      	ldr	r3, [pc, #80]	@ (800c524 <prvHeapInit+0xb4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4da:	4b12      	ldr	r3, [pc, #72]	@ (800c524 <prvHeapInit+0xb4>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	1ad2      	subs	r2, r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c524 <prvHeapInit+0xb4>)
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c528 <prvHeapInit+0xb8>)
 800c4fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	4a09      	ldr	r2, [pc, #36]	@ (800c52c <prvHeapInit+0xbc>)
 800c506:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c508:	4b09      	ldr	r3, [pc, #36]	@ (800c530 <prvHeapInit+0xc0>)
 800c50a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c50e:	601a      	str	r2, [r3, #0]
}
 800c510:	bf00      	nop
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	200013b8 	.word	0x200013b8
 800c520:	20004fb8 	.word	0x20004fb8
 800c524:	20004fc0 	.word	0x20004fc0
 800c528:	20004fc8 	.word	0x20004fc8
 800c52c:	20004fc4 	.word	0x20004fc4
 800c530:	20004fd4 	.word	0x20004fd4

0800c534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c53c:	4b28      	ldr	r3, [pc, #160]	@ (800c5e0 <prvInsertBlockIntoFreeList+0xac>)
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	e002      	b.n	800c548 <prvInsertBlockIntoFreeList+0x14>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d8f7      	bhi.n	800c542 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	4413      	add	r3, r2
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d108      	bne.n	800c576 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	441a      	add	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	441a      	add	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	429a      	cmp	r2, r3
 800c588:	d118      	bne.n	800c5bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	4b15      	ldr	r3, [pc, #84]	@ (800c5e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d00d      	beq.n	800c5b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	441a      	add	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	e008      	b.n	800c5c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	e003      	b.n	800c5c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d002      	beq.n	800c5d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5d2:	bf00      	nop
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	20004fb8 	.word	0x20004fb8
 800c5e4:	20004fc0 	.word	0x20004fc0

0800c5e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4912      	ldr	r1, [pc, #72]	@ (800c638 <MX_USB_DEVICE_Init+0x50>)
 800c5f0:	4812      	ldr	r0, [pc, #72]	@ (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c5f2:	f7fb fe7d 	bl	80082f0 <USBD_Init>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c5fc:	f7f5 fcd4 	bl	8001fa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c600:	490f      	ldr	r1, [pc, #60]	@ (800c640 <MX_USB_DEVICE_Init+0x58>)
 800c602:	480e      	ldr	r0, [pc, #56]	@ (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c604:	f7fb fea4 	bl	8008350 <USBD_RegisterClass>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c60e:	f7f5 fccb 	bl	8001fa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c612:	490c      	ldr	r1, [pc, #48]	@ (800c644 <MX_USB_DEVICE_Init+0x5c>)
 800c614:	4809      	ldr	r0, [pc, #36]	@ (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c616:	f7fb fd9b 	bl	8008150 <USBD_CDC_RegisterInterface>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c620:	f7f5 fcc2 	bl	8001fa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c624:	4805      	ldr	r0, [pc, #20]	@ (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c626:	f7fb fec9 	bl	80083bc <USBD_Start>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c630:	f7f5 fcba 	bl	8001fa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c634:	bf00      	nop
 800c636:	bd80      	pop	{r7, pc}
 800c638:	200000b4 	.word	0x200000b4
 800c63c:	20004fd8 	.word	0x20004fd8
 800c640:	2000001c 	.word	0x2000001c
 800c644:	200000a0 	.word	0x200000a0

0800c648 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c64c:	2200      	movs	r2, #0
 800c64e:	4905      	ldr	r1, [pc, #20]	@ (800c664 <CDC_Init_FS+0x1c>)
 800c650:	4805      	ldr	r0, [pc, #20]	@ (800c668 <CDC_Init_FS+0x20>)
 800c652:	f7fb fd97 	bl	8008184 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c656:	4905      	ldr	r1, [pc, #20]	@ (800c66c <CDC_Init_FS+0x24>)
 800c658:	4803      	ldr	r0, [pc, #12]	@ (800c668 <CDC_Init_FS+0x20>)
 800c65a:	f7fb fdb5 	bl	80081c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c65e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c660:	4618      	mov	r0, r3
 800c662:	bd80      	pop	{r7, pc}
 800c664:	200056b4 	.word	0x200056b4
 800c668:	20004fd8 	.word	0x20004fd8
 800c66c:	200052b4 	.word	0x200052b4

0800c670 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c670:	b480      	push	{r7}
 800c672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c674:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c676:	4618      	mov	r0, r3
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	6039      	str	r1, [r7, #0]
 800c68a:	71fb      	strb	r3, [r7, #7]
 800c68c:	4613      	mov	r3, r2
 800c68e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c690:	79fb      	ldrb	r3, [r7, #7]
 800c692:	2b23      	cmp	r3, #35	@ 0x23
 800c694:	d84a      	bhi.n	800c72c <CDC_Control_FS+0xac>
 800c696:	a201      	add	r2, pc, #4	@ (adr r2, 800c69c <CDC_Control_FS+0x1c>)
 800c698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69c:	0800c72d 	.word	0x0800c72d
 800c6a0:	0800c72d 	.word	0x0800c72d
 800c6a4:	0800c72d 	.word	0x0800c72d
 800c6a8:	0800c72d 	.word	0x0800c72d
 800c6ac:	0800c72d 	.word	0x0800c72d
 800c6b0:	0800c72d 	.word	0x0800c72d
 800c6b4:	0800c72d 	.word	0x0800c72d
 800c6b8:	0800c72d 	.word	0x0800c72d
 800c6bc:	0800c72d 	.word	0x0800c72d
 800c6c0:	0800c72d 	.word	0x0800c72d
 800c6c4:	0800c72d 	.word	0x0800c72d
 800c6c8:	0800c72d 	.word	0x0800c72d
 800c6cc:	0800c72d 	.word	0x0800c72d
 800c6d0:	0800c72d 	.word	0x0800c72d
 800c6d4:	0800c72d 	.word	0x0800c72d
 800c6d8:	0800c72d 	.word	0x0800c72d
 800c6dc:	0800c72d 	.word	0x0800c72d
 800c6e0:	0800c72d 	.word	0x0800c72d
 800c6e4:	0800c72d 	.word	0x0800c72d
 800c6e8:	0800c72d 	.word	0x0800c72d
 800c6ec:	0800c72d 	.word	0x0800c72d
 800c6f0:	0800c72d 	.word	0x0800c72d
 800c6f4:	0800c72d 	.word	0x0800c72d
 800c6f8:	0800c72d 	.word	0x0800c72d
 800c6fc:	0800c72d 	.word	0x0800c72d
 800c700:	0800c72d 	.word	0x0800c72d
 800c704:	0800c72d 	.word	0x0800c72d
 800c708:	0800c72d 	.word	0x0800c72d
 800c70c:	0800c72d 	.word	0x0800c72d
 800c710:	0800c72d 	.word	0x0800c72d
 800c714:	0800c72d 	.word	0x0800c72d
 800c718:	0800c72d 	.word	0x0800c72d
 800c71c:	0800c72d 	.word	0x0800c72d
 800c720:	0800c72d 	.word	0x0800c72d
 800c724:	0800c72d 	.word	0x0800c72d
 800c728:	0800c72d 	.word	0x0800c72d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c72c:	bf00      	nop
  }

  return (USBD_OK);
 800c72e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	4805      	ldr	r0, [pc, #20]	@ (800c760 <CDC_Receive_FS+0x24>)
 800c74a:	f7fb fd3d 	bl	80081c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c74e:	4804      	ldr	r0, [pc, #16]	@ (800c760 <CDC_Receive_FS+0x24>)
 800c750:	f7fb fd98 	bl	8008284 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c754:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c756:	4618      	mov	r0, r3
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20004fd8 	.word	0x20004fd8

0800c764 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c774:	4b0d      	ldr	r3, [pc, #52]	@ (800c7ac <CDC_Transmit_FS+0x48>)
 800c776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c77a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c786:	2301      	movs	r3, #1
 800c788:	e00b      	b.n	800c7a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c78a:	887b      	ldrh	r3, [r7, #2]
 800c78c:	461a      	mov	r2, r3
 800c78e:	6879      	ldr	r1, [r7, #4]
 800c790:	4806      	ldr	r0, [pc, #24]	@ (800c7ac <CDC_Transmit_FS+0x48>)
 800c792:	f7fb fcf7 	bl	8008184 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c796:	4805      	ldr	r0, [pc, #20]	@ (800c7ac <CDC_Transmit_FS+0x48>)
 800c798:	f7fb fd34 	bl	8008204 <USBD_CDC_TransmitPacket>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20004fd8 	.word	0x20004fd8

0800c7b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c7c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	371c      	adds	r7, #28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	4603      	mov	r3, r0
 800c7dc:	6039      	str	r1, [r7, #0]
 800c7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2212      	movs	r2, #18
 800c7e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c7e6:	4b03      	ldr	r3, [pc, #12]	@ (800c7f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr
 800c7f4:	200000d0 	.word	0x200000d0

0800c7f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	6039      	str	r1, [r7, #0]
 800c802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	2204      	movs	r2, #4
 800c808:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c80a:	4b03      	ldr	r3, [pc, #12]	@ (800c818 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	200000e4 	.word	0x200000e4

0800c81c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	6039      	str	r1, [r7, #0]
 800c826:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d105      	bne.n	800c83a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	4907      	ldr	r1, [pc, #28]	@ (800c850 <USBD_FS_ProductStrDescriptor+0x34>)
 800c832:	4808      	ldr	r0, [pc, #32]	@ (800c854 <USBD_FS_ProductStrDescriptor+0x38>)
 800c834:	f7fc ff72 	bl	800971c <USBD_GetString>
 800c838:	e004      	b.n	800c844 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	4904      	ldr	r1, [pc, #16]	@ (800c850 <USBD_FS_ProductStrDescriptor+0x34>)
 800c83e:	4805      	ldr	r0, [pc, #20]	@ (800c854 <USBD_FS_ProductStrDescriptor+0x38>)
 800c840:	f7fc ff6c 	bl	800971c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c844:	4b02      	ldr	r3, [pc, #8]	@ (800c850 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c846:	4618      	mov	r0, r3
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	20005ab4 	.word	0x20005ab4
 800c854:	08010be0 	.word	0x08010be0

0800c858 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	6039      	str	r1, [r7, #0]
 800c862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	4904      	ldr	r1, [pc, #16]	@ (800c878 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c868:	4804      	ldr	r0, [pc, #16]	@ (800c87c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c86a:	f7fc ff57 	bl	800971c <USBD_GetString>
  return USBD_StrDesc;
 800c86e:	4b02      	ldr	r3, [pc, #8]	@ (800c878 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c870:	4618      	mov	r0, r3
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20005ab4 	.word	0x20005ab4
 800c87c:	08010bf8 	.word	0x08010bf8

0800c880 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	6039      	str	r1, [r7, #0]
 800c88a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	221a      	movs	r2, #26
 800c890:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c892:	f000 f843 	bl	800c91c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c896:	4b02      	ldr	r3, [pc, #8]	@ (800c8a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	200000e8 	.word	0x200000e8

0800c8a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	6039      	str	r1, [r7, #0]
 800c8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d105      	bne.n	800c8c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	4907      	ldr	r1, [pc, #28]	@ (800c8d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8ba:	4808      	ldr	r0, [pc, #32]	@ (800c8dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8bc:	f7fc ff2e 	bl	800971c <USBD_GetString>
 800c8c0:	e004      	b.n	800c8cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	4904      	ldr	r1, [pc, #16]	@ (800c8d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8c6:	4805      	ldr	r0, [pc, #20]	@ (800c8dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8c8:	f7fc ff28 	bl	800971c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8cc:	4b02      	ldr	r3, [pc, #8]	@ (800c8d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20005ab4 	.word	0x20005ab4
 800c8dc:	08010c0c 	.word	0x08010c0c

0800c8e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	6039      	str	r1, [r7, #0]
 800c8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8ec:	79fb      	ldrb	r3, [r7, #7]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d105      	bne.n	800c8fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	4907      	ldr	r1, [pc, #28]	@ (800c914 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8f6:	4808      	ldr	r0, [pc, #32]	@ (800c918 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8f8:	f7fc ff10 	bl	800971c <USBD_GetString>
 800c8fc:	e004      	b.n	800c908 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	4904      	ldr	r1, [pc, #16]	@ (800c914 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c902:	4805      	ldr	r0, [pc, #20]	@ (800c918 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c904:	f7fc ff0a 	bl	800971c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c908:	4b02      	ldr	r3, [pc, #8]	@ (800c914 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	20005ab4 	.word	0x20005ab4
 800c918:	08010c18 	.word	0x08010c18

0800c91c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c922:	4b0f      	ldr	r3, [pc, #60]	@ (800c960 <Get_SerialNum+0x44>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c928:	4b0e      	ldr	r3, [pc, #56]	@ (800c964 <Get_SerialNum+0x48>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c92e:	4b0e      	ldr	r3, [pc, #56]	@ (800c968 <Get_SerialNum+0x4c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4413      	add	r3, r2
 800c93a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d009      	beq.n	800c956 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c942:	2208      	movs	r2, #8
 800c944:	4909      	ldr	r1, [pc, #36]	@ (800c96c <Get_SerialNum+0x50>)
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f000 f814 	bl	800c974 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c94c:	2204      	movs	r2, #4
 800c94e:	4908      	ldr	r1, [pc, #32]	@ (800c970 <Get_SerialNum+0x54>)
 800c950:	68b8      	ldr	r0, [r7, #8]
 800c952:	f000 f80f 	bl	800c974 <IntToUnicode>
  }
}
 800c956:	bf00      	nop
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	1fff7a10 	.word	0x1fff7a10
 800c964:	1fff7a14 	.word	0x1fff7a14
 800c968:	1fff7a18 	.word	0x1fff7a18
 800c96c:	200000ea 	.word	0x200000ea
 800c970:	200000fa 	.word	0x200000fa

0800c974 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c974:	b480      	push	{r7}
 800c976:	b087      	sub	sp, #28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	4613      	mov	r3, r2
 800c980:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c986:	2300      	movs	r3, #0
 800c988:	75fb      	strb	r3, [r7, #23]
 800c98a:	e027      	b.n	800c9dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	0f1b      	lsrs	r3, r3, #28
 800c990:	2b09      	cmp	r3, #9
 800c992:	d80b      	bhi.n	800c9ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	0f1b      	lsrs	r3, r3, #28
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	7dfb      	ldrb	r3, [r7, #23]
 800c99c:	005b      	lsls	r3, r3, #1
 800c99e:	4619      	mov	r1, r3
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	440b      	add	r3, r1
 800c9a4:	3230      	adds	r2, #48	@ 0x30
 800c9a6:	b2d2      	uxtb	r2, r2
 800c9a8:	701a      	strb	r2, [r3, #0]
 800c9aa:	e00a      	b.n	800c9c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	0f1b      	lsrs	r3, r3, #28
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	440b      	add	r3, r1
 800c9bc:	3237      	adds	r2, #55	@ 0x37
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	011b      	lsls	r3, r3, #4
 800c9c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	75fb      	strb	r3, [r7, #23]
 800c9dc:	7dfa      	ldrb	r2, [r7, #23]
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d3d3      	bcc.n	800c98c <IntToUnicode+0x18>
  }
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
	...

0800c9f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08a      	sub	sp, #40	@ 0x28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9fc:	f107 0314 	add.w	r3, r7, #20
 800ca00:	2200      	movs	r2, #0
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	605a      	str	r2, [r3, #4]
 800ca06:	609a      	str	r2, [r3, #8]
 800ca08:	60da      	str	r2, [r3, #12]
 800ca0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca14:	d13a      	bne.n	800ca8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca16:	2300      	movs	r3, #0
 800ca18:	613b      	str	r3, [r7, #16]
 800ca1a:	4b1e      	ldr	r3, [pc, #120]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca1e:	4a1d      	ldr	r2, [pc, #116]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca20:	f043 0301 	orr.w	r3, r3, #1
 800ca24:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca26:	4b1b      	ldr	r3, [pc, #108]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	613b      	str	r3, [r7, #16]
 800ca30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ca32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ca36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca38:	2302      	movs	r3, #2
 800ca3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca40:	2303      	movs	r3, #3
 800ca42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ca44:	230a      	movs	r3, #10
 800ca46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca48:	f107 0314 	add.w	r3, r7, #20
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	4812      	ldr	r0, [pc, #72]	@ (800ca98 <HAL_PCD_MspInit+0xa4>)
 800ca50:	f7f6 f9e2 	bl	8002e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ca54:	4b0f      	ldr	r3, [pc, #60]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca58:	4a0e      	ldr	r2, [pc, #56]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca5e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ca60:	2300      	movs	r3, #0
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	4b0b      	ldr	r3, [pc, #44]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca68:	4a0a      	ldr	r2, [pc, #40]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ca6e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ca70:	4b08      	ldr	r3, [pc, #32]	@ (800ca94 <HAL_PCD_MspInit+0xa0>)
 800ca72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca78:	60fb      	str	r3, [r7, #12]
 800ca7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2105      	movs	r1, #5
 800ca80:	2043      	movs	r0, #67	@ 0x43
 800ca82:	f7f5 feb5 	bl	80027f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca86:	2043      	movs	r0, #67	@ 0x43
 800ca88:	f7f5 fece 	bl	8002828 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca8c:	bf00      	nop
 800ca8e:	3728      	adds	r7, #40	@ 0x28
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	40023800 	.word	0x40023800
 800ca98:	40020000 	.word	0x40020000

0800ca9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cab0:	4619      	mov	r1, r3
 800cab2:	4610      	mov	r0, r2
 800cab4:	f7fb fccf 	bl	8008456 <USBD_LL_SetupStage>
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cad2:	78fa      	ldrb	r2, [r7, #3]
 800cad4:	6879      	ldr	r1, [r7, #4]
 800cad6:	4613      	mov	r3, r2
 800cad8:	00db      	lsls	r3, r3, #3
 800cada:	4413      	add	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	440b      	add	r3, r1
 800cae0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	78fb      	ldrb	r3, [r7, #3]
 800cae8:	4619      	mov	r1, r3
 800caea:	f7fb fd09 	bl	8008500 <USBD_LL_DataOutStage>
}
 800caee:	bf00      	nop
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	460b      	mov	r3, r1
 800cb00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cb08:	78fa      	ldrb	r2, [r7, #3]
 800cb0a:	6879      	ldr	r1, [r7, #4]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	4413      	add	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	440b      	add	r3, r1
 800cb16:	3320      	adds	r3, #32
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	78fb      	ldrb	r3, [r7, #3]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	f7fb fda2 	bl	8008666 <USBD_LL_DataInStage>
}
 800cb22:	bf00      	nop
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fb fedc 	bl	80088f6 <USBD_LL_SOF>
}
 800cb3e:	bf00      	nop
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b084      	sub	sp, #16
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	79db      	ldrb	r3, [r3, #7]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d001      	beq.n	800cb5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb5a:	f7f5 fa25 	bl	8001fa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb64:	7bfa      	ldrb	r2, [r7, #15]
 800cb66:	4611      	mov	r1, r2
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fb fe80 	bl	800886e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fb fe28 	bl	80087ca <USBD_LL_Reset>
}
 800cb7a:	bf00      	nop
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
	...

0800cb84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fb fe7b 	bl	800888e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	6812      	ldr	r2, [r2, #0]
 800cba6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cbaa:	f043 0301 	orr.w	r3, r3, #1
 800cbae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	7adb      	ldrb	r3, [r3, #11]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d005      	beq.n	800cbc4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbb8:	4b04      	ldr	r3, [pc, #16]	@ (800cbcc <HAL_PCD_SuspendCallback+0x48>)
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	4a03      	ldr	r2, [pc, #12]	@ (800cbcc <HAL_PCD_SuspendCallback+0x48>)
 800cbbe:	f043 0306 	orr.w	r3, r3, #6
 800cbc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cbc4:	bf00      	nop
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	e000ed00 	.word	0xe000ed00

0800cbd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fb fe71 	bl	80088c6 <USBD_LL_Resume>
}
 800cbe4:	bf00      	nop
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cbfe:	78fa      	ldrb	r2, [r7, #3]
 800cc00:	4611      	mov	r1, r2
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fb fec9 	bl	800899a <USBD_LL_IsoOUTIncomplete>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc22:	78fa      	ldrb	r2, [r7, #3]
 800cc24:	4611      	mov	r1, r2
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fb fe85 	bl	8008936 <USBD_LL_IsoINIncomplete>
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fb fedb 	bl	80089fe <USBD_LL_DevConnected>
}
 800cc48:	bf00      	nop
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fb fed8 	bl	8008a14 <USBD_LL_DevDisconnected>
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d13c      	bne.n	800ccf6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cc7c:	4a20      	ldr	r2, [pc, #128]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a1e      	ldr	r2, [pc, #120]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cc88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cc8c:	4b1c      	ldr	r3, [pc, #112]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cc8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cc92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cc94:	4b1a      	ldr	r3, [pc, #104]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cc96:	2204      	movs	r2, #4
 800cc98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cc9a:	4b19      	ldr	r3, [pc, #100]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cca0:	4b17      	ldr	r3, [pc, #92]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cca6:	4b16      	ldr	r3, [pc, #88]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cca8:	2202      	movs	r2, #2
 800ccaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ccac:	4b14      	ldr	r3, [pc, #80]	@ (800cd00 <USBD_LL_Init+0x94>)
 800ccae:	2200      	movs	r2, #0
 800ccb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ccb2:	4b13      	ldr	r3, [pc, #76]	@ (800cd00 <USBD_LL_Init+0x94>)
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ccb8:	4b11      	ldr	r3, [pc, #68]	@ (800cd00 <USBD_LL_Init+0x94>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ccbe:	4b10      	ldr	r3, [pc, #64]	@ (800cd00 <USBD_LL_Init+0x94>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ccc4:	4b0e      	ldr	r3, [pc, #56]	@ (800cd00 <USBD_LL_Init+0x94>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ccca:	480d      	ldr	r0, [pc, #52]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cccc:	f7f6 fa7d 	bl	80031ca <HAL_PCD_Init>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ccd6:	f7f5 f967 	bl	8001fa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ccda:	2180      	movs	r1, #128	@ 0x80
 800ccdc:	4808      	ldr	r0, [pc, #32]	@ (800cd00 <USBD_LL_Init+0x94>)
 800ccde:	f7f7 fca8 	bl	8004632 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cce2:	2240      	movs	r2, #64	@ 0x40
 800cce4:	2100      	movs	r1, #0
 800cce6:	4806      	ldr	r0, [pc, #24]	@ (800cd00 <USBD_LL_Init+0x94>)
 800cce8:	f7f7 fc5c 	bl	80045a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ccec:	2280      	movs	r2, #128	@ 0x80
 800ccee:	2101      	movs	r1, #1
 800ccf0:	4803      	ldr	r0, [pc, #12]	@ (800cd00 <USBD_LL_Init+0x94>)
 800ccf2:	f7f7 fc57 	bl	80045a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	20005cb4 	.word	0x20005cb4

0800cd04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f6 fb64 	bl	80033e8 <HAL_PCD_Start>
 800cd20:	4603      	mov	r3, r0
 800cd22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 f942 	bl	800cfb0 <USBD_Get_USB_Status>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd30:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	4608      	mov	r0, r1
 800cd44:	4611      	mov	r1, r2
 800cd46:	461a      	mov	r2, r3
 800cd48:	4603      	mov	r3, r0
 800cd4a:	70fb      	strb	r3, [r7, #3]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70bb      	strb	r3, [r7, #2]
 800cd50:	4613      	mov	r3, r2
 800cd52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd62:	78bb      	ldrb	r3, [r7, #2]
 800cd64:	883a      	ldrh	r2, [r7, #0]
 800cd66:	78f9      	ldrb	r1, [r7, #3]
 800cd68:	f7f7 f838 	bl	8003ddc <HAL_PCD_EP_Open>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 f91c 	bl	800cfb0 <USBD_Get_USB_Status>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cda0:	78fa      	ldrb	r2, [r7, #3]
 800cda2:	4611      	mov	r1, r2
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7f7 f881 	bl	8003eac <HAL_PCD_EP_Close>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 f8fd 	bl	800cfb0 <USBD_Get_USB_Status>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdba:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdde:	78fa      	ldrb	r2, [r7, #3]
 800cde0:	4611      	mov	r1, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f7 f939 	bl	800405a <HAL_PCD_EP_SetStall>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f8de 	bl	800cfb0 <USBD_Get_USB_Status>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce1c:	78fa      	ldrb	r2, [r7, #3]
 800ce1e:	4611      	mov	r1, r2
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7f7 f97d 	bl	8004120 <HAL_PCD_EP_ClrStall>
 800ce26:	4603      	mov	r3, r0
 800ce28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 f8bf 	bl	800cfb0 <USBD_Get_USB_Status>
 800ce32:	4603      	mov	r3, r0
 800ce34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	da0b      	bge.n	800ce74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce5c:	78fb      	ldrb	r3, [r7, #3]
 800ce5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	4613      	mov	r3, r2
 800ce66:	00db      	lsls	r3, r3, #3
 800ce68:	4413      	add	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	440b      	add	r3, r1
 800ce6e:	3316      	adds	r3, #22
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	e00b      	b.n	800ce8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce74:	78fb      	ldrb	r3, [r7, #3]
 800ce76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce7a:	68f9      	ldr	r1, [r7, #12]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	4413      	add	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	440b      	add	r3, r1
 800ce86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ce8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ceb2:	78fa      	ldrb	r2, [r7, #3]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7f6 ff6c 	bl	8003d94 <HAL_PCD_SetAddress>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 f874 	bl	800cfb0 <USBD_Get_USB_Status>
 800cec8:	4603      	mov	r3, r0
 800ceca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b086      	sub	sp, #24
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	60f8      	str	r0, [r7, #12]
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	603b      	str	r3, [r7, #0]
 800cee2:	460b      	mov	r3, r1
 800cee4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cef4:	7af9      	ldrb	r1, [r7, #11]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	f7f7 f874 	bl	8003fe6 <HAL_PCD_EP_Transmit>
 800cefe:	4603      	mov	r3, r0
 800cf00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f000 f853 	bl	800cfb0 <USBD_Get_USB_Status>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	607a      	str	r2, [r7, #4]
 800cf22:	603b      	str	r3, [r7, #0]
 800cf24:	460b      	mov	r3, r1
 800cf26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cf36:	7af9      	ldrb	r1, [r7, #11]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	f7f7 f800 	bl	8003f40 <HAL_PCD_EP_Receive>
 800cf40:	4603      	mov	r3, r0
 800cf42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 f832 	bl	800cfb0 <USBD_Get_USB_Status>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf50:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf6c:	78fa      	ldrb	r2, [r7, #3]
 800cf6e:	4611      	mov	r1, r2
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7f7 f820 	bl	8003fb6 <HAL_PCD_EP_GetRxCount>
 800cf76:	4603      	mov	r3, r0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cf88:	4b03      	ldr	r3, [pc, #12]	@ (800cf98 <USBD_static_malloc+0x18>)
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	370c      	adds	r7, #12
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	20006198 	.word	0x20006198

0800cf9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]

}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cfbe:	79fb      	ldrb	r3, [r7, #7]
 800cfc0:	2b03      	cmp	r3, #3
 800cfc2:	d817      	bhi.n	800cff4 <USBD_Get_USB_Status+0x44>
 800cfc4:	a201      	add	r2, pc, #4	@ (adr r2, 800cfcc <USBD_Get_USB_Status+0x1c>)
 800cfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfca:	bf00      	nop
 800cfcc:	0800cfdd 	.word	0x0800cfdd
 800cfd0:	0800cfe3 	.word	0x0800cfe3
 800cfd4:	0800cfe9 	.word	0x0800cfe9
 800cfd8:	0800cfef 	.word	0x0800cfef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	73fb      	strb	r3, [r7, #15]
    break;
 800cfe0:	e00b      	b.n	800cffa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	73fb      	strb	r3, [r7, #15]
    break;
 800cfe6:	e008      	b.n	800cffa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	73fb      	strb	r3, [r7, #15]
    break;
 800cfec:	e005      	b.n	800cffa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfee:	2303      	movs	r3, #3
 800cff0:	73fb      	strb	r3, [r7, #15]
    break;
 800cff2:	e002      	b.n	800cffa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cff4:	2303      	movs	r3, #3
 800cff6:	73fb      	strb	r3, [r7, #15]
    break;
 800cff8:	bf00      	nop
  }
  return usb_status;
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <__cvt>:
 800d008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d00c:	ec57 6b10 	vmov	r6, r7, d0
 800d010:	2f00      	cmp	r7, #0
 800d012:	460c      	mov	r4, r1
 800d014:	4619      	mov	r1, r3
 800d016:	463b      	mov	r3, r7
 800d018:	bfbb      	ittet	lt
 800d01a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d01e:	461f      	movlt	r7, r3
 800d020:	2300      	movge	r3, #0
 800d022:	232d      	movlt	r3, #45	@ 0x2d
 800d024:	700b      	strb	r3, [r1, #0]
 800d026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d028:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d02c:	4691      	mov	r9, r2
 800d02e:	f023 0820 	bic.w	r8, r3, #32
 800d032:	bfbc      	itt	lt
 800d034:	4632      	movlt	r2, r6
 800d036:	4616      	movlt	r6, r2
 800d038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d03c:	d005      	beq.n	800d04a <__cvt+0x42>
 800d03e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d042:	d100      	bne.n	800d046 <__cvt+0x3e>
 800d044:	3401      	adds	r4, #1
 800d046:	2102      	movs	r1, #2
 800d048:	e000      	b.n	800d04c <__cvt+0x44>
 800d04a:	2103      	movs	r1, #3
 800d04c:	ab03      	add	r3, sp, #12
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	ab02      	add	r3, sp, #8
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	ec47 6b10 	vmov	d0, r6, r7
 800d058:	4653      	mov	r3, sl
 800d05a:	4622      	mov	r2, r4
 800d05c:	f000 ffc4 	bl	800dfe8 <_dtoa_r>
 800d060:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d064:	4605      	mov	r5, r0
 800d066:	d119      	bne.n	800d09c <__cvt+0x94>
 800d068:	f019 0f01 	tst.w	r9, #1
 800d06c:	d00e      	beq.n	800d08c <__cvt+0x84>
 800d06e:	eb00 0904 	add.w	r9, r0, r4
 800d072:	2200      	movs	r2, #0
 800d074:	2300      	movs	r3, #0
 800d076:	4630      	mov	r0, r6
 800d078:	4639      	mov	r1, r7
 800d07a:	f7f3 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d07e:	b108      	cbz	r0, 800d084 <__cvt+0x7c>
 800d080:	f8cd 900c 	str.w	r9, [sp, #12]
 800d084:	2230      	movs	r2, #48	@ 0x30
 800d086:	9b03      	ldr	r3, [sp, #12]
 800d088:	454b      	cmp	r3, r9
 800d08a:	d31e      	bcc.n	800d0ca <__cvt+0xc2>
 800d08c:	9b03      	ldr	r3, [sp, #12]
 800d08e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d090:	1b5b      	subs	r3, r3, r5
 800d092:	4628      	mov	r0, r5
 800d094:	6013      	str	r3, [r2, #0]
 800d096:	b004      	add	sp, #16
 800d098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d0a0:	eb00 0904 	add.w	r9, r0, r4
 800d0a4:	d1e5      	bne.n	800d072 <__cvt+0x6a>
 800d0a6:	7803      	ldrb	r3, [r0, #0]
 800d0a8:	2b30      	cmp	r3, #48	@ 0x30
 800d0aa:	d10a      	bne.n	800d0c2 <__cvt+0xba>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	4639      	mov	r1, r7
 800d0b4:	f7f3 fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0b8:	b918      	cbnz	r0, 800d0c2 <__cvt+0xba>
 800d0ba:	f1c4 0401 	rsb	r4, r4, #1
 800d0be:	f8ca 4000 	str.w	r4, [sl]
 800d0c2:	f8da 3000 	ldr.w	r3, [sl]
 800d0c6:	4499      	add	r9, r3
 800d0c8:	e7d3      	b.n	800d072 <__cvt+0x6a>
 800d0ca:	1c59      	adds	r1, r3, #1
 800d0cc:	9103      	str	r1, [sp, #12]
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	e7d9      	b.n	800d086 <__cvt+0x7e>

0800d0d2 <__exponent>:
 800d0d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0d4:	2900      	cmp	r1, #0
 800d0d6:	bfba      	itte	lt
 800d0d8:	4249      	neglt	r1, r1
 800d0da:	232d      	movlt	r3, #45	@ 0x2d
 800d0dc:	232b      	movge	r3, #43	@ 0x2b
 800d0de:	2909      	cmp	r1, #9
 800d0e0:	7002      	strb	r2, [r0, #0]
 800d0e2:	7043      	strb	r3, [r0, #1]
 800d0e4:	dd29      	ble.n	800d13a <__exponent+0x68>
 800d0e6:	f10d 0307 	add.w	r3, sp, #7
 800d0ea:	461d      	mov	r5, r3
 800d0ec:	270a      	movs	r7, #10
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d0f4:	fb07 1416 	mls	r4, r7, r6, r1
 800d0f8:	3430      	adds	r4, #48	@ 0x30
 800d0fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d0fe:	460c      	mov	r4, r1
 800d100:	2c63      	cmp	r4, #99	@ 0x63
 800d102:	f103 33ff 	add.w	r3, r3, #4294967295
 800d106:	4631      	mov	r1, r6
 800d108:	dcf1      	bgt.n	800d0ee <__exponent+0x1c>
 800d10a:	3130      	adds	r1, #48	@ 0x30
 800d10c:	1e94      	subs	r4, r2, #2
 800d10e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d112:	1c41      	adds	r1, r0, #1
 800d114:	4623      	mov	r3, r4
 800d116:	42ab      	cmp	r3, r5
 800d118:	d30a      	bcc.n	800d130 <__exponent+0x5e>
 800d11a:	f10d 0309 	add.w	r3, sp, #9
 800d11e:	1a9b      	subs	r3, r3, r2
 800d120:	42ac      	cmp	r4, r5
 800d122:	bf88      	it	hi
 800d124:	2300      	movhi	r3, #0
 800d126:	3302      	adds	r3, #2
 800d128:	4403      	add	r3, r0
 800d12a:	1a18      	subs	r0, r3, r0
 800d12c:	b003      	add	sp, #12
 800d12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d130:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d134:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d138:	e7ed      	b.n	800d116 <__exponent+0x44>
 800d13a:	2330      	movs	r3, #48	@ 0x30
 800d13c:	3130      	adds	r1, #48	@ 0x30
 800d13e:	7083      	strb	r3, [r0, #2]
 800d140:	70c1      	strb	r1, [r0, #3]
 800d142:	1d03      	adds	r3, r0, #4
 800d144:	e7f1      	b.n	800d12a <__exponent+0x58>
	...

0800d148 <_printf_float>:
 800d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	b08d      	sub	sp, #52	@ 0x34
 800d14e:	460c      	mov	r4, r1
 800d150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d154:	4616      	mov	r6, r2
 800d156:	461f      	mov	r7, r3
 800d158:	4605      	mov	r5, r0
 800d15a:	f000 fddf 	bl	800dd1c <_localeconv_r>
 800d15e:	6803      	ldr	r3, [r0, #0]
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	4618      	mov	r0, r3
 800d164:	f7f3 f88c 	bl	8000280 <strlen>
 800d168:	2300      	movs	r3, #0
 800d16a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d16c:	f8d8 3000 	ldr.w	r3, [r8]
 800d170:	9005      	str	r0, [sp, #20]
 800d172:	3307      	adds	r3, #7
 800d174:	f023 0307 	bic.w	r3, r3, #7
 800d178:	f103 0208 	add.w	r2, r3, #8
 800d17c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d180:	f8d4 b000 	ldr.w	fp, [r4]
 800d184:	f8c8 2000 	str.w	r2, [r8]
 800d188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d18c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d190:	9307      	str	r3, [sp, #28]
 800d192:	f8cd 8018 	str.w	r8, [sp, #24]
 800d196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d19a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d19e:	4b9c      	ldr	r3, [pc, #624]	@ (800d410 <_printf_float+0x2c8>)
 800d1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a4:	f7f3 fcca 	bl	8000b3c <__aeabi_dcmpun>
 800d1a8:	bb70      	cbnz	r0, 800d208 <_printf_float+0xc0>
 800d1aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1ae:	4b98      	ldr	r3, [pc, #608]	@ (800d410 <_printf_float+0x2c8>)
 800d1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b4:	f7f3 fca4 	bl	8000b00 <__aeabi_dcmple>
 800d1b8:	bb30      	cbnz	r0, 800d208 <_printf_float+0xc0>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	f7f3 fc93 	bl	8000aec <__aeabi_dcmplt>
 800d1c6:	b110      	cbz	r0, 800d1ce <_printf_float+0x86>
 800d1c8:	232d      	movs	r3, #45	@ 0x2d
 800d1ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1ce:	4a91      	ldr	r2, [pc, #580]	@ (800d414 <_printf_float+0x2cc>)
 800d1d0:	4b91      	ldr	r3, [pc, #580]	@ (800d418 <_printf_float+0x2d0>)
 800d1d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d1d6:	bf94      	ite	ls
 800d1d8:	4690      	movls	r8, r2
 800d1da:	4698      	movhi	r8, r3
 800d1dc:	2303      	movs	r3, #3
 800d1de:	6123      	str	r3, [r4, #16]
 800d1e0:	f02b 0304 	bic.w	r3, fp, #4
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	f04f 0900 	mov.w	r9, #0
 800d1ea:	9700      	str	r7, [sp, #0]
 800d1ec:	4633      	mov	r3, r6
 800d1ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f000 f9d2 	bl	800d59c <_printf_common>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	f040 808d 	bne.w	800d318 <_printf_float+0x1d0>
 800d1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d202:	b00d      	add	sp, #52	@ 0x34
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	4642      	mov	r2, r8
 800d20a:	464b      	mov	r3, r9
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 fc94 	bl	8000b3c <__aeabi_dcmpun>
 800d214:	b140      	cbz	r0, 800d228 <_printf_float+0xe0>
 800d216:	464b      	mov	r3, r9
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bfbc      	itt	lt
 800d21c:	232d      	movlt	r3, #45	@ 0x2d
 800d21e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d222:	4a7e      	ldr	r2, [pc, #504]	@ (800d41c <_printf_float+0x2d4>)
 800d224:	4b7e      	ldr	r3, [pc, #504]	@ (800d420 <_printf_float+0x2d8>)
 800d226:	e7d4      	b.n	800d1d2 <_printf_float+0x8a>
 800d228:	6863      	ldr	r3, [r4, #4]
 800d22a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d22e:	9206      	str	r2, [sp, #24]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	d13b      	bne.n	800d2ac <_printf_float+0x164>
 800d234:	2306      	movs	r3, #6
 800d236:	6063      	str	r3, [r4, #4]
 800d238:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d23c:	2300      	movs	r3, #0
 800d23e:	6022      	str	r2, [r4, #0]
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	ab0a      	add	r3, sp, #40	@ 0x28
 800d244:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d248:	ab09      	add	r3, sp, #36	@ 0x24
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	6861      	ldr	r1, [r4, #4]
 800d24e:	ec49 8b10 	vmov	d0, r8, r9
 800d252:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d256:	4628      	mov	r0, r5
 800d258:	f7ff fed6 	bl	800d008 <__cvt>
 800d25c:	9b06      	ldr	r3, [sp, #24]
 800d25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d260:	2b47      	cmp	r3, #71	@ 0x47
 800d262:	4680      	mov	r8, r0
 800d264:	d129      	bne.n	800d2ba <_printf_float+0x172>
 800d266:	1cc8      	adds	r0, r1, #3
 800d268:	db02      	blt.n	800d270 <_printf_float+0x128>
 800d26a:	6863      	ldr	r3, [r4, #4]
 800d26c:	4299      	cmp	r1, r3
 800d26e:	dd41      	ble.n	800d2f4 <_printf_float+0x1ac>
 800d270:	f1aa 0a02 	sub.w	sl, sl, #2
 800d274:	fa5f fa8a 	uxtb.w	sl, sl
 800d278:	3901      	subs	r1, #1
 800d27a:	4652      	mov	r2, sl
 800d27c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d280:	9109      	str	r1, [sp, #36]	@ 0x24
 800d282:	f7ff ff26 	bl	800d0d2 <__exponent>
 800d286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d288:	1813      	adds	r3, r2, r0
 800d28a:	2a01      	cmp	r2, #1
 800d28c:	4681      	mov	r9, r0
 800d28e:	6123      	str	r3, [r4, #16]
 800d290:	dc02      	bgt.n	800d298 <_printf_float+0x150>
 800d292:	6822      	ldr	r2, [r4, #0]
 800d294:	07d2      	lsls	r2, r2, #31
 800d296:	d501      	bpl.n	800d29c <_printf_float+0x154>
 800d298:	3301      	adds	r3, #1
 800d29a:	6123      	str	r3, [r4, #16]
 800d29c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d0a2      	beq.n	800d1ea <_printf_float+0xa2>
 800d2a4:	232d      	movs	r3, #45	@ 0x2d
 800d2a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2aa:	e79e      	b.n	800d1ea <_printf_float+0xa2>
 800d2ac:	9a06      	ldr	r2, [sp, #24]
 800d2ae:	2a47      	cmp	r2, #71	@ 0x47
 800d2b0:	d1c2      	bne.n	800d238 <_printf_float+0xf0>
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1c0      	bne.n	800d238 <_printf_float+0xf0>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e7bd      	b.n	800d236 <_printf_float+0xee>
 800d2ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d2be:	d9db      	bls.n	800d278 <_printf_float+0x130>
 800d2c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d2c4:	d118      	bne.n	800d2f8 <_printf_float+0x1b0>
 800d2c6:	2900      	cmp	r1, #0
 800d2c8:	6863      	ldr	r3, [r4, #4]
 800d2ca:	dd0b      	ble.n	800d2e4 <_printf_float+0x19c>
 800d2cc:	6121      	str	r1, [r4, #16]
 800d2ce:	b913      	cbnz	r3, 800d2d6 <_printf_float+0x18e>
 800d2d0:	6822      	ldr	r2, [r4, #0]
 800d2d2:	07d0      	lsls	r0, r2, #31
 800d2d4:	d502      	bpl.n	800d2dc <_printf_float+0x194>
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	440b      	add	r3, r1
 800d2da:	6123      	str	r3, [r4, #16]
 800d2dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d2de:	f04f 0900 	mov.w	r9, #0
 800d2e2:	e7db      	b.n	800d29c <_printf_float+0x154>
 800d2e4:	b913      	cbnz	r3, 800d2ec <_printf_float+0x1a4>
 800d2e6:	6822      	ldr	r2, [r4, #0]
 800d2e8:	07d2      	lsls	r2, r2, #31
 800d2ea:	d501      	bpl.n	800d2f0 <_printf_float+0x1a8>
 800d2ec:	3302      	adds	r3, #2
 800d2ee:	e7f4      	b.n	800d2da <_printf_float+0x192>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e7f2      	b.n	800d2da <_printf_float+0x192>
 800d2f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2fa:	4299      	cmp	r1, r3
 800d2fc:	db05      	blt.n	800d30a <_printf_float+0x1c2>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	6121      	str	r1, [r4, #16]
 800d302:	07d8      	lsls	r0, r3, #31
 800d304:	d5ea      	bpl.n	800d2dc <_printf_float+0x194>
 800d306:	1c4b      	adds	r3, r1, #1
 800d308:	e7e7      	b.n	800d2da <_printf_float+0x192>
 800d30a:	2900      	cmp	r1, #0
 800d30c:	bfd4      	ite	le
 800d30e:	f1c1 0202 	rsble	r2, r1, #2
 800d312:	2201      	movgt	r2, #1
 800d314:	4413      	add	r3, r2
 800d316:	e7e0      	b.n	800d2da <_printf_float+0x192>
 800d318:	6823      	ldr	r3, [r4, #0]
 800d31a:	055a      	lsls	r2, r3, #21
 800d31c:	d407      	bmi.n	800d32e <_printf_float+0x1e6>
 800d31e:	6923      	ldr	r3, [r4, #16]
 800d320:	4642      	mov	r2, r8
 800d322:	4631      	mov	r1, r6
 800d324:	4628      	mov	r0, r5
 800d326:	47b8      	blx	r7
 800d328:	3001      	adds	r0, #1
 800d32a:	d12b      	bne.n	800d384 <_printf_float+0x23c>
 800d32c:	e767      	b.n	800d1fe <_printf_float+0xb6>
 800d32e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d332:	f240 80dd 	bls.w	800d4f0 <_printf_float+0x3a8>
 800d336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d33a:	2200      	movs	r2, #0
 800d33c:	2300      	movs	r3, #0
 800d33e:	f7f3 fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 800d342:	2800      	cmp	r0, #0
 800d344:	d033      	beq.n	800d3ae <_printf_float+0x266>
 800d346:	4a37      	ldr	r2, [pc, #220]	@ (800d424 <_printf_float+0x2dc>)
 800d348:	2301      	movs	r3, #1
 800d34a:	4631      	mov	r1, r6
 800d34c:	4628      	mov	r0, r5
 800d34e:	47b8      	blx	r7
 800d350:	3001      	adds	r0, #1
 800d352:	f43f af54 	beq.w	800d1fe <_printf_float+0xb6>
 800d356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d35a:	4543      	cmp	r3, r8
 800d35c:	db02      	blt.n	800d364 <_printf_float+0x21c>
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	07d8      	lsls	r0, r3, #31
 800d362:	d50f      	bpl.n	800d384 <_printf_float+0x23c>
 800d364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d368:	4631      	mov	r1, r6
 800d36a:	4628      	mov	r0, r5
 800d36c:	47b8      	blx	r7
 800d36e:	3001      	adds	r0, #1
 800d370:	f43f af45 	beq.w	800d1fe <_printf_float+0xb6>
 800d374:	f04f 0900 	mov.w	r9, #0
 800d378:	f108 38ff 	add.w	r8, r8, #4294967295
 800d37c:	f104 0a1a 	add.w	sl, r4, #26
 800d380:	45c8      	cmp	r8, r9
 800d382:	dc09      	bgt.n	800d398 <_printf_float+0x250>
 800d384:	6823      	ldr	r3, [r4, #0]
 800d386:	079b      	lsls	r3, r3, #30
 800d388:	f100 8103 	bmi.w	800d592 <_printf_float+0x44a>
 800d38c:	68e0      	ldr	r0, [r4, #12]
 800d38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d390:	4298      	cmp	r0, r3
 800d392:	bfb8      	it	lt
 800d394:	4618      	movlt	r0, r3
 800d396:	e734      	b.n	800d202 <_printf_float+0xba>
 800d398:	2301      	movs	r3, #1
 800d39a:	4652      	mov	r2, sl
 800d39c:	4631      	mov	r1, r6
 800d39e:	4628      	mov	r0, r5
 800d3a0:	47b8      	blx	r7
 800d3a2:	3001      	adds	r0, #1
 800d3a4:	f43f af2b 	beq.w	800d1fe <_printf_float+0xb6>
 800d3a8:	f109 0901 	add.w	r9, r9, #1
 800d3ac:	e7e8      	b.n	800d380 <_printf_float+0x238>
 800d3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	dc39      	bgt.n	800d428 <_printf_float+0x2e0>
 800d3b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d424 <_printf_float+0x2dc>)
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	47b8      	blx	r7
 800d3be:	3001      	adds	r0, #1
 800d3c0:	f43f af1d 	beq.w	800d1fe <_printf_float+0xb6>
 800d3c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d3c8:	ea59 0303 	orrs.w	r3, r9, r3
 800d3cc:	d102      	bne.n	800d3d4 <_printf_float+0x28c>
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	07d9      	lsls	r1, r3, #31
 800d3d2:	d5d7      	bpl.n	800d384 <_printf_float+0x23c>
 800d3d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3d8:	4631      	mov	r1, r6
 800d3da:	4628      	mov	r0, r5
 800d3dc:	47b8      	blx	r7
 800d3de:	3001      	adds	r0, #1
 800d3e0:	f43f af0d 	beq.w	800d1fe <_printf_float+0xb6>
 800d3e4:	f04f 0a00 	mov.w	sl, #0
 800d3e8:	f104 0b1a 	add.w	fp, r4, #26
 800d3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ee:	425b      	negs	r3, r3
 800d3f0:	4553      	cmp	r3, sl
 800d3f2:	dc01      	bgt.n	800d3f8 <_printf_float+0x2b0>
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	e793      	b.n	800d320 <_printf_float+0x1d8>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	465a      	mov	r2, fp
 800d3fc:	4631      	mov	r1, r6
 800d3fe:	4628      	mov	r0, r5
 800d400:	47b8      	blx	r7
 800d402:	3001      	adds	r0, #1
 800d404:	f43f aefb 	beq.w	800d1fe <_printf_float+0xb6>
 800d408:	f10a 0a01 	add.w	sl, sl, #1
 800d40c:	e7ee      	b.n	800d3ec <_printf_float+0x2a4>
 800d40e:	bf00      	nop
 800d410:	7fefffff 	.word	0x7fefffff
 800d414:	08010c90 	.word	0x08010c90
 800d418:	08010c94 	.word	0x08010c94
 800d41c:	08010c98 	.word	0x08010c98
 800d420:	08010c9c 	.word	0x08010c9c
 800d424:	08010ca0 	.word	0x08010ca0
 800d428:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d42a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d42e:	4553      	cmp	r3, sl
 800d430:	bfa8      	it	ge
 800d432:	4653      	movge	r3, sl
 800d434:	2b00      	cmp	r3, #0
 800d436:	4699      	mov	r9, r3
 800d438:	dc36      	bgt.n	800d4a8 <_printf_float+0x360>
 800d43a:	f04f 0b00 	mov.w	fp, #0
 800d43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d442:	f104 021a 	add.w	r2, r4, #26
 800d446:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d448:	9306      	str	r3, [sp, #24]
 800d44a:	eba3 0309 	sub.w	r3, r3, r9
 800d44e:	455b      	cmp	r3, fp
 800d450:	dc31      	bgt.n	800d4b6 <_printf_float+0x36e>
 800d452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d454:	459a      	cmp	sl, r3
 800d456:	dc3a      	bgt.n	800d4ce <_printf_float+0x386>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	07da      	lsls	r2, r3, #31
 800d45c:	d437      	bmi.n	800d4ce <_printf_float+0x386>
 800d45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d460:	ebaa 0903 	sub.w	r9, sl, r3
 800d464:	9b06      	ldr	r3, [sp, #24]
 800d466:	ebaa 0303 	sub.w	r3, sl, r3
 800d46a:	4599      	cmp	r9, r3
 800d46c:	bfa8      	it	ge
 800d46e:	4699      	movge	r9, r3
 800d470:	f1b9 0f00 	cmp.w	r9, #0
 800d474:	dc33      	bgt.n	800d4de <_printf_float+0x396>
 800d476:	f04f 0800 	mov.w	r8, #0
 800d47a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d47e:	f104 0b1a 	add.w	fp, r4, #26
 800d482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d484:	ebaa 0303 	sub.w	r3, sl, r3
 800d488:	eba3 0309 	sub.w	r3, r3, r9
 800d48c:	4543      	cmp	r3, r8
 800d48e:	f77f af79 	ble.w	800d384 <_printf_float+0x23c>
 800d492:	2301      	movs	r3, #1
 800d494:	465a      	mov	r2, fp
 800d496:	4631      	mov	r1, r6
 800d498:	4628      	mov	r0, r5
 800d49a:	47b8      	blx	r7
 800d49c:	3001      	adds	r0, #1
 800d49e:	f43f aeae 	beq.w	800d1fe <_printf_float+0xb6>
 800d4a2:	f108 0801 	add.w	r8, r8, #1
 800d4a6:	e7ec      	b.n	800d482 <_printf_float+0x33a>
 800d4a8:	4642      	mov	r2, r8
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	47b8      	blx	r7
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d1c2      	bne.n	800d43a <_printf_float+0x2f2>
 800d4b4:	e6a3      	b.n	800d1fe <_printf_float+0xb6>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	9206      	str	r2, [sp, #24]
 800d4be:	47b8      	blx	r7
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	f43f ae9c 	beq.w	800d1fe <_printf_float+0xb6>
 800d4c6:	9a06      	ldr	r2, [sp, #24]
 800d4c8:	f10b 0b01 	add.w	fp, fp, #1
 800d4cc:	e7bb      	b.n	800d446 <_printf_float+0x2fe>
 800d4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	47b8      	blx	r7
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d1c0      	bne.n	800d45e <_printf_float+0x316>
 800d4dc:	e68f      	b.n	800d1fe <_printf_float+0xb6>
 800d4de:	9a06      	ldr	r2, [sp, #24]
 800d4e0:	464b      	mov	r3, r9
 800d4e2:	4442      	add	r2, r8
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	47b8      	blx	r7
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	d1c3      	bne.n	800d476 <_printf_float+0x32e>
 800d4ee:	e686      	b.n	800d1fe <_printf_float+0xb6>
 800d4f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d4f4:	f1ba 0f01 	cmp.w	sl, #1
 800d4f8:	dc01      	bgt.n	800d4fe <_printf_float+0x3b6>
 800d4fa:	07db      	lsls	r3, r3, #31
 800d4fc:	d536      	bpl.n	800d56c <_printf_float+0x424>
 800d4fe:	2301      	movs	r3, #1
 800d500:	4642      	mov	r2, r8
 800d502:	4631      	mov	r1, r6
 800d504:	4628      	mov	r0, r5
 800d506:	47b8      	blx	r7
 800d508:	3001      	adds	r0, #1
 800d50a:	f43f ae78 	beq.w	800d1fe <_printf_float+0xb6>
 800d50e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d512:	4631      	mov	r1, r6
 800d514:	4628      	mov	r0, r5
 800d516:	47b8      	blx	r7
 800d518:	3001      	adds	r0, #1
 800d51a:	f43f ae70 	beq.w	800d1fe <_printf_float+0xb6>
 800d51e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d522:	2200      	movs	r2, #0
 800d524:	2300      	movs	r3, #0
 800d526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d52a:	f7f3 fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800d52e:	b9c0      	cbnz	r0, 800d562 <_printf_float+0x41a>
 800d530:	4653      	mov	r3, sl
 800d532:	f108 0201 	add.w	r2, r8, #1
 800d536:	4631      	mov	r1, r6
 800d538:	4628      	mov	r0, r5
 800d53a:	47b8      	blx	r7
 800d53c:	3001      	adds	r0, #1
 800d53e:	d10c      	bne.n	800d55a <_printf_float+0x412>
 800d540:	e65d      	b.n	800d1fe <_printf_float+0xb6>
 800d542:	2301      	movs	r3, #1
 800d544:	465a      	mov	r2, fp
 800d546:	4631      	mov	r1, r6
 800d548:	4628      	mov	r0, r5
 800d54a:	47b8      	blx	r7
 800d54c:	3001      	adds	r0, #1
 800d54e:	f43f ae56 	beq.w	800d1fe <_printf_float+0xb6>
 800d552:	f108 0801 	add.w	r8, r8, #1
 800d556:	45d0      	cmp	r8, sl
 800d558:	dbf3      	blt.n	800d542 <_printf_float+0x3fa>
 800d55a:	464b      	mov	r3, r9
 800d55c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d560:	e6df      	b.n	800d322 <_printf_float+0x1da>
 800d562:	f04f 0800 	mov.w	r8, #0
 800d566:	f104 0b1a 	add.w	fp, r4, #26
 800d56a:	e7f4      	b.n	800d556 <_printf_float+0x40e>
 800d56c:	2301      	movs	r3, #1
 800d56e:	4642      	mov	r2, r8
 800d570:	e7e1      	b.n	800d536 <_printf_float+0x3ee>
 800d572:	2301      	movs	r3, #1
 800d574:	464a      	mov	r2, r9
 800d576:	4631      	mov	r1, r6
 800d578:	4628      	mov	r0, r5
 800d57a:	47b8      	blx	r7
 800d57c:	3001      	adds	r0, #1
 800d57e:	f43f ae3e 	beq.w	800d1fe <_printf_float+0xb6>
 800d582:	f108 0801 	add.w	r8, r8, #1
 800d586:	68e3      	ldr	r3, [r4, #12]
 800d588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d58a:	1a5b      	subs	r3, r3, r1
 800d58c:	4543      	cmp	r3, r8
 800d58e:	dcf0      	bgt.n	800d572 <_printf_float+0x42a>
 800d590:	e6fc      	b.n	800d38c <_printf_float+0x244>
 800d592:	f04f 0800 	mov.w	r8, #0
 800d596:	f104 0919 	add.w	r9, r4, #25
 800d59a:	e7f4      	b.n	800d586 <_printf_float+0x43e>

0800d59c <_printf_common>:
 800d59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	4698      	mov	r8, r3
 800d5a4:	688a      	ldr	r2, [r1, #8]
 800d5a6:	690b      	ldr	r3, [r1, #16]
 800d5a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	bfb8      	it	lt
 800d5b0:	4613      	movlt	r3, r2
 800d5b2:	6033      	str	r3, [r6, #0]
 800d5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	b10a      	cbz	r2, 800d5c2 <_printf_common+0x26>
 800d5be:	3301      	adds	r3, #1
 800d5c0:	6033      	str	r3, [r6, #0]
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	0699      	lsls	r1, r3, #26
 800d5c6:	bf42      	ittt	mi
 800d5c8:	6833      	ldrmi	r3, [r6, #0]
 800d5ca:	3302      	addmi	r3, #2
 800d5cc:	6033      	strmi	r3, [r6, #0]
 800d5ce:	6825      	ldr	r5, [r4, #0]
 800d5d0:	f015 0506 	ands.w	r5, r5, #6
 800d5d4:	d106      	bne.n	800d5e4 <_printf_common+0x48>
 800d5d6:	f104 0a19 	add.w	sl, r4, #25
 800d5da:	68e3      	ldr	r3, [r4, #12]
 800d5dc:	6832      	ldr	r2, [r6, #0]
 800d5de:	1a9b      	subs	r3, r3, r2
 800d5e0:	42ab      	cmp	r3, r5
 800d5e2:	dc26      	bgt.n	800d632 <_printf_common+0x96>
 800d5e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5e8:	6822      	ldr	r2, [r4, #0]
 800d5ea:	3b00      	subs	r3, #0
 800d5ec:	bf18      	it	ne
 800d5ee:	2301      	movne	r3, #1
 800d5f0:	0692      	lsls	r2, r2, #26
 800d5f2:	d42b      	bmi.n	800d64c <_printf_common+0xb0>
 800d5f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5f8:	4641      	mov	r1, r8
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	47c8      	blx	r9
 800d5fe:	3001      	adds	r0, #1
 800d600:	d01e      	beq.n	800d640 <_printf_common+0xa4>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	6922      	ldr	r2, [r4, #16]
 800d606:	f003 0306 	and.w	r3, r3, #6
 800d60a:	2b04      	cmp	r3, #4
 800d60c:	bf02      	ittt	eq
 800d60e:	68e5      	ldreq	r5, [r4, #12]
 800d610:	6833      	ldreq	r3, [r6, #0]
 800d612:	1aed      	subeq	r5, r5, r3
 800d614:	68a3      	ldr	r3, [r4, #8]
 800d616:	bf0c      	ite	eq
 800d618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d61c:	2500      	movne	r5, #0
 800d61e:	4293      	cmp	r3, r2
 800d620:	bfc4      	itt	gt
 800d622:	1a9b      	subgt	r3, r3, r2
 800d624:	18ed      	addgt	r5, r5, r3
 800d626:	2600      	movs	r6, #0
 800d628:	341a      	adds	r4, #26
 800d62a:	42b5      	cmp	r5, r6
 800d62c:	d11a      	bne.n	800d664 <_printf_common+0xc8>
 800d62e:	2000      	movs	r0, #0
 800d630:	e008      	b.n	800d644 <_printf_common+0xa8>
 800d632:	2301      	movs	r3, #1
 800d634:	4652      	mov	r2, sl
 800d636:	4641      	mov	r1, r8
 800d638:	4638      	mov	r0, r7
 800d63a:	47c8      	blx	r9
 800d63c:	3001      	adds	r0, #1
 800d63e:	d103      	bne.n	800d648 <_printf_common+0xac>
 800d640:	f04f 30ff 	mov.w	r0, #4294967295
 800d644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d648:	3501      	adds	r5, #1
 800d64a:	e7c6      	b.n	800d5da <_printf_common+0x3e>
 800d64c:	18e1      	adds	r1, r4, r3
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	2030      	movs	r0, #48	@ 0x30
 800d652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d656:	4422      	add	r2, r4
 800d658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d65c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d660:	3302      	adds	r3, #2
 800d662:	e7c7      	b.n	800d5f4 <_printf_common+0x58>
 800d664:	2301      	movs	r3, #1
 800d666:	4622      	mov	r2, r4
 800d668:	4641      	mov	r1, r8
 800d66a:	4638      	mov	r0, r7
 800d66c:	47c8      	blx	r9
 800d66e:	3001      	adds	r0, #1
 800d670:	d0e6      	beq.n	800d640 <_printf_common+0xa4>
 800d672:	3601      	adds	r6, #1
 800d674:	e7d9      	b.n	800d62a <_printf_common+0x8e>
	...

0800d678 <_printf_i>:
 800d678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d67c:	7e0f      	ldrb	r7, [r1, #24]
 800d67e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d680:	2f78      	cmp	r7, #120	@ 0x78
 800d682:	4691      	mov	r9, r2
 800d684:	4680      	mov	r8, r0
 800d686:	460c      	mov	r4, r1
 800d688:	469a      	mov	sl, r3
 800d68a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d68e:	d807      	bhi.n	800d6a0 <_printf_i+0x28>
 800d690:	2f62      	cmp	r7, #98	@ 0x62
 800d692:	d80a      	bhi.n	800d6aa <_printf_i+0x32>
 800d694:	2f00      	cmp	r7, #0
 800d696:	f000 80d2 	beq.w	800d83e <_printf_i+0x1c6>
 800d69a:	2f58      	cmp	r7, #88	@ 0x58
 800d69c:	f000 80b9 	beq.w	800d812 <_printf_i+0x19a>
 800d6a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6a8:	e03a      	b.n	800d720 <_printf_i+0xa8>
 800d6aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6ae:	2b15      	cmp	r3, #21
 800d6b0:	d8f6      	bhi.n	800d6a0 <_printf_i+0x28>
 800d6b2:	a101      	add	r1, pc, #4	@ (adr r1, 800d6b8 <_printf_i+0x40>)
 800d6b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6b8:	0800d711 	.word	0x0800d711
 800d6bc:	0800d725 	.word	0x0800d725
 800d6c0:	0800d6a1 	.word	0x0800d6a1
 800d6c4:	0800d6a1 	.word	0x0800d6a1
 800d6c8:	0800d6a1 	.word	0x0800d6a1
 800d6cc:	0800d6a1 	.word	0x0800d6a1
 800d6d0:	0800d725 	.word	0x0800d725
 800d6d4:	0800d6a1 	.word	0x0800d6a1
 800d6d8:	0800d6a1 	.word	0x0800d6a1
 800d6dc:	0800d6a1 	.word	0x0800d6a1
 800d6e0:	0800d6a1 	.word	0x0800d6a1
 800d6e4:	0800d825 	.word	0x0800d825
 800d6e8:	0800d74f 	.word	0x0800d74f
 800d6ec:	0800d7df 	.word	0x0800d7df
 800d6f0:	0800d6a1 	.word	0x0800d6a1
 800d6f4:	0800d6a1 	.word	0x0800d6a1
 800d6f8:	0800d847 	.word	0x0800d847
 800d6fc:	0800d6a1 	.word	0x0800d6a1
 800d700:	0800d74f 	.word	0x0800d74f
 800d704:	0800d6a1 	.word	0x0800d6a1
 800d708:	0800d6a1 	.word	0x0800d6a1
 800d70c:	0800d7e7 	.word	0x0800d7e7
 800d710:	6833      	ldr	r3, [r6, #0]
 800d712:	1d1a      	adds	r2, r3, #4
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	6032      	str	r2, [r6, #0]
 800d718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d71c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d720:	2301      	movs	r3, #1
 800d722:	e09d      	b.n	800d860 <_printf_i+0x1e8>
 800d724:	6833      	ldr	r3, [r6, #0]
 800d726:	6820      	ldr	r0, [r4, #0]
 800d728:	1d19      	adds	r1, r3, #4
 800d72a:	6031      	str	r1, [r6, #0]
 800d72c:	0606      	lsls	r6, r0, #24
 800d72e:	d501      	bpl.n	800d734 <_printf_i+0xbc>
 800d730:	681d      	ldr	r5, [r3, #0]
 800d732:	e003      	b.n	800d73c <_printf_i+0xc4>
 800d734:	0645      	lsls	r5, r0, #25
 800d736:	d5fb      	bpl.n	800d730 <_printf_i+0xb8>
 800d738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d73c:	2d00      	cmp	r5, #0
 800d73e:	da03      	bge.n	800d748 <_printf_i+0xd0>
 800d740:	232d      	movs	r3, #45	@ 0x2d
 800d742:	426d      	negs	r5, r5
 800d744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d748:	4859      	ldr	r0, [pc, #356]	@ (800d8b0 <_printf_i+0x238>)
 800d74a:	230a      	movs	r3, #10
 800d74c:	e011      	b.n	800d772 <_printf_i+0xfa>
 800d74e:	6821      	ldr	r1, [r4, #0]
 800d750:	6833      	ldr	r3, [r6, #0]
 800d752:	0608      	lsls	r0, r1, #24
 800d754:	f853 5b04 	ldr.w	r5, [r3], #4
 800d758:	d402      	bmi.n	800d760 <_printf_i+0xe8>
 800d75a:	0649      	lsls	r1, r1, #25
 800d75c:	bf48      	it	mi
 800d75e:	b2ad      	uxthmi	r5, r5
 800d760:	2f6f      	cmp	r7, #111	@ 0x6f
 800d762:	4853      	ldr	r0, [pc, #332]	@ (800d8b0 <_printf_i+0x238>)
 800d764:	6033      	str	r3, [r6, #0]
 800d766:	bf14      	ite	ne
 800d768:	230a      	movne	r3, #10
 800d76a:	2308      	moveq	r3, #8
 800d76c:	2100      	movs	r1, #0
 800d76e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d772:	6866      	ldr	r6, [r4, #4]
 800d774:	60a6      	str	r6, [r4, #8]
 800d776:	2e00      	cmp	r6, #0
 800d778:	bfa2      	ittt	ge
 800d77a:	6821      	ldrge	r1, [r4, #0]
 800d77c:	f021 0104 	bicge.w	r1, r1, #4
 800d780:	6021      	strge	r1, [r4, #0]
 800d782:	b90d      	cbnz	r5, 800d788 <_printf_i+0x110>
 800d784:	2e00      	cmp	r6, #0
 800d786:	d04b      	beq.n	800d820 <_printf_i+0x1a8>
 800d788:	4616      	mov	r6, r2
 800d78a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d78e:	fb03 5711 	mls	r7, r3, r1, r5
 800d792:	5dc7      	ldrb	r7, [r0, r7]
 800d794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d798:	462f      	mov	r7, r5
 800d79a:	42bb      	cmp	r3, r7
 800d79c:	460d      	mov	r5, r1
 800d79e:	d9f4      	bls.n	800d78a <_printf_i+0x112>
 800d7a0:	2b08      	cmp	r3, #8
 800d7a2:	d10b      	bne.n	800d7bc <_printf_i+0x144>
 800d7a4:	6823      	ldr	r3, [r4, #0]
 800d7a6:	07df      	lsls	r7, r3, #31
 800d7a8:	d508      	bpl.n	800d7bc <_printf_i+0x144>
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	6861      	ldr	r1, [r4, #4]
 800d7ae:	4299      	cmp	r1, r3
 800d7b0:	bfde      	ittt	le
 800d7b2:	2330      	movle	r3, #48	@ 0x30
 800d7b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7bc:	1b92      	subs	r2, r2, r6
 800d7be:	6122      	str	r2, [r4, #16]
 800d7c0:	f8cd a000 	str.w	sl, [sp]
 800d7c4:	464b      	mov	r3, r9
 800d7c6:	aa03      	add	r2, sp, #12
 800d7c8:	4621      	mov	r1, r4
 800d7ca:	4640      	mov	r0, r8
 800d7cc:	f7ff fee6 	bl	800d59c <_printf_common>
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d14a      	bne.n	800d86a <_printf_i+0x1f2>
 800d7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d8:	b004      	add	sp, #16
 800d7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	f043 0320 	orr.w	r3, r3, #32
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	4833      	ldr	r0, [pc, #204]	@ (800d8b4 <_printf_i+0x23c>)
 800d7e8:	2778      	movs	r7, #120	@ 0x78
 800d7ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	6831      	ldr	r1, [r6, #0]
 800d7f2:	061f      	lsls	r7, r3, #24
 800d7f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7f8:	d402      	bmi.n	800d800 <_printf_i+0x188>
 800d7fa:	065f      	lsls	r7, r3, #25
 800d7fc:	bf48      	it	mi
 800d7fe:	b2ad      	uxthmi	r5, r5
 800d800:	6031      	str	r1, [r6, #0]
 800d802:	07d9      	lsls	r1, r3, #31
 800d804:	bf44      	itt	mi
 800d806:	f043 0320 	orrmi.w	r3, r3, #32
 800d80a:	6023      	strmi	r3, [r4, #0]
 800d80c:	b11d      	cbz	r5, 800d816 <_printf_i+0x19e>
 800d80e:	2310      	movs	r3, #16
 800d810:	e7ac      	b.n	800d76c <_printf_i+0xf4>
 800d812:	4827      	ldr	r0, [pc, #156]	@ (800d8b0 <_printf_i+0x238>)
 800d814:	e7e9      	b.n	800d7ea <_printf_i+0x172>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	f023 0320 	bic.w	r3, r3, #32
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	e7f6      	b.n	800d80e <_printf_i+0x196>
 800d820:	4616      	mov	r6, r2
 800d822:	e7bd      	b.n	800d7a0 <_printf_i+0x128>
 800d824:	6833      	ldr	r3, [r6, #0]
 800d826:	6825      	ldr	r5, [r4, #0]
 800d828:	6961      	ldr	r1, [r4, #20]
 800d82a:	1d18      	adds	r0, r3, #4
 800d82c:	6030      	str	r0, [r6, #0]
 800d82e:	062e      	lsls	r6, r5, #24
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	d501      	bpl.n	800d838 <_printf_i+0x1c0>
 800d834:	6019      	str	r1, [r3, #0]
 800d836:	e002      	b.n	800d83e <_printf_i+0x1c6>
 800d838:	0668      	lsls	r0, r5, #25
 800d83a:	d5fb      	bpl.n	800d834 <_printf_i+0x1bc>
 800d83c:	8019      	strh	r1, [r3, #0]
 800d83e:	2300      	movs	r3, #0
 800d840:	6123      	str	r3, [r4, #16]
 800d842:	4616      	mov	r6, r2
 800d844:	e7bc      	b.n	800d7c0 <_printf_i+0x148>
 800d846:	6833      	ldr	r3, [r6, #0]
 800d848:	1d1a      	adds	r2, r3, #4
 800d84a:	6032      	str	r2, [r6, #0]
 800d84c:	681e      	ldr	r6, [r3, #0]
 800d84e:	6862      	ldr	r2, [r4, #4]
 800d850:	2100      	movs	r1, #0
 800d852:	4630      	mov	r0, r6
 800d854:	f7f2 fcc4 	bl	80001e0 <memchr>
 800d858:	b108      	cbz	r0, 800d85e <_printf_i+0x1e6>
 800d85a:	1b80      	subs	r0, r0, r6
 800d85c:	6060      	str	r0, [r4, #4]
 800d85e:	6863      	ldr	r3, [r4, #4]
 800d860:	6123      	str	r3, [r4, #16]
 800d862:	2300      	movs	r3, #0
 800d864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d868:	e7aa      	b.n	800d7c0 <_printf_i+0x148>
 800d86a:	6923      	ldr	r3, [r4, #16]
 800d86c:	4632      	mov	r2, r6
 800d86e:	4649      	mov	r1, r9
 800d870:	4640      	mov	r0, r8
 800d872:	47d0      	blx	sl
 800d874:	3001      	adds	r0, #1
 800d876:	d0ad      	beq.n	800d7d4 <_printf_i+0x15c>
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	079b      	lsls	r3, r3, #30
 800d87c:	d413      	bmi.n	800d8a6 <_printf_i+0x22e>
 800d87e:	68e0      	ldr	r0, [r4, #12]
 800d880:	9b03      	ldr	r3, [sp, #12]
 800d882:	4298      	cmp	r0, r3
 800d884:	bfb8      	it	lt
 800d886:	4618      	movlt	r0, r3
 800d888:	e7a6      	b.n	800d7d8 <_printf_i+0x160>
 800d88a:	2301      	movs	r3, #1
 800d88c:	4632      	mov	r2, r6
 800d88e:	4649      	mov	r1, r9
 800d890:	4640      	mov	r0, r8
 800d892:	47d0      	blx	sl
 800d894:	3001      	adds	r0, #1
 800d896:	d09d      	beq.n	800d7d4 <_printf_i+0x15c>
 800d898:	3501      	adds	r5, #1
 800d89a:	68e3      	ldr	r3, [r4, #12]
 800d89c:	9903      	ldr	r1, [sp, #12]
 800d89e:	1a5b      	subs	r3, r3, r1
 800d8a0:	42ab      	cmp	r3, r5
 800d8a2:	dcf2      	bgt.n	800d88a <_printf_i+0x212>
 800d8a4:	e7eb      	b.n	800d87e <_printf_i+0x206>
 800d8a6:	2500      	movs	r5, #0
 800d8a8:	f104 0619 	add.w	r6, r4, #25
 800d8ac:	e7f5      	b.n	800d89a <_printf_i+0x222>
 800d8ae:	bf00      	nop
 800d8b0:	08010ca2 	.word	0x08010ca2
 800d8b4:	08010cb3 	.word	0x08010cb3

0800d8b8 <std>:
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	b510      	push	{r4, lr}
 800d8bc:	4604      	mov	r4, r0
 800d8be:	e9c0 3300 	strd	r3, r3, [r0]
 800d8c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8c6:	6083      	str	r3, [r0, #8]
 800d8c8:	8181      	strh	r1, [r0, #12]
 800d8ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8cc:	81c2      	strh	r2, [r0, #14]
 800d8ce:	6183      	str	r3, [r0, #24]
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	2208      	movs	r2, #8
 800d8d4:	305c      	adds	r0, #92	@ 0x5c
 800d8d6:	f000 fa19 	bl	800dd0c <memset>
 800d8da:	4b0d      	ldr	r3, [pc, #52]	@ (800d910 <std+0x58>)
 800d8dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d8de:	4b0d      	ldr	r3, [pc, #52]	@ (800d914 <std+0x5c>)
 800d8e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d918 <std+0x60>)
 800d8e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d91c <std+0x64>)
 800d8e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d920 <std+0x68>)
 800d8ec:	6224      	str	r4, [r4, #32]
 800d8ee:	429c      	cmp	r4, r3
 800d8f0:	d006      	beq.n	800d900 <std+0x48>
 800d8f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d8f6:	4294      	cmp	r4, r2
 800d8f8:	d002      	beq.n	800d900 <std+0x48>
 800d8fa:	33d0      	adds	r3, #208	@ 0xd0
 800d8fc:	429c      	cmp	r4, r3
 800d8fe:	d105      	bne.n	800d90c <std+0x54>
 800d900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d908:	f000 bad2 	b.w	800deb0 <__retarget_lock_init_recursive>
 800d90c:	bd10      	pop	{r4, pc}
 800d90e:	bf00      	nop
 800d910:	0800db5d 	.word	0x0800db5d
 800d914:	0800db7f 	.word	0x0800db7f
 800d918:	0800dbb7 	.word	0x0800dbb7
 800d91c:	0800dbdb 	.word	0x0800dbdb
 800d920:	200063b8 	.word	0x200063b8

0800d924 <stdio_exit_handler>:
 800d924:	4a02      	ldr	r2, [pc, #8]	@ (800d930 <stdio_exit_handler+0xc>)
 800d926:	4903      	ldr	r1, [pc, #12]	@ (800d934 <stdio_exit_handler+0x10>)
 800d928:	4803      	ldr	r0, [pc, #12]	@ (800d938 <stdio_exit_handler+0x14>)
 800d92a:	f000 b869 	b.w	800da00 <_fwalk_sglue>
 800d92e:	bf00      	nop
 800d930:	20000104 	.word	0x20000104
 800d934:	0800fab1 	.word	0x0800fab1
 800d938:	20000114 	.word	0x20000114

0800d93c <cleanup_stdio>:
 800d93c:	6841      	ldr	r1, [r0, #4]
 800d93e:	4b0c      	ldr	r3, [pc, #48]	@ (800d970 <cleanup_stdio+0x34>)
 800d940:	4299      	cmp	r1, r3
 800d942:	b510      	push	{r4, lr}
 800d944:	4604      	mov	r4, r0
 800d946:	d001      	beq.n	800d94c <cleanup_stdio+0x10>
 800d948:	f002 f8b2 	bl	800fab0 <_fflush_r>
 800d94c:	68a1      	ldr	r1, [r4, #8]
 800d94e:	4b09      	ldr	r3, [pc, #36]	@ (800d974 <cleanup_stdio+0x38>)
 800d950:	4299      	cmp	r1, r3
 800d952:	d002      	beq.n	800d95a <cleanup_stdio+0x1e>
 800d954:	4620      	mov	r0, r4
 800d956:	f002 f8ab 	bl	800fab0 <_fflush_r>
 800d95a:	68e1      	ldr	r1, [r4, #12]
 800d95c:	4b06      	ldr	r3, [pc, #24]	@ (800d978 <cleanup_stdio+0x3c>)
 800d95e:	4299      	cmp	r1, r3
 800d960:	d004      	beq.n	800d96c <cleanup_stdio+0x30>
 800d962:	4620      	mov	r0, r4
 800d964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d968:	f002 b8a2 	b.w	800fab0 <_fflush_r>
 800d96c:	bd10      	pop	{r4, pc}
 800d96e:	bf00      	nop
 800d970:	200063b8 	.word	0x200063b8
 800d974:	20006420 	.word	0x20006420
 800d978:	20006488 	.word	0x20006488

0800d97c <global_stdio_init.part.0>:
 800d97c:	b510      	push	{r4, lr}
 800d97e:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ac <global_stdio_init.part.0+0x30>)
 800d980:	4c0b      	ldr	r4, [pc, #44]	@ (800d9b0 <global_stdio_init.part.0+0x34>)
 800d982:	4a0c      	ldr	r2, [pc, #48]	@ (800d9b4 <global_stdio_init.part.0+0x38>)
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	4620      	mov	r0, r4
 800d988:	2200      	movs	r2, #0
 800d98a:	2104      	movs	r1, #4
 800d98c:	f7ff ff94 	bl	800d8b8 <std>
 800d990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d994:	2201      	movs	r2, #1
 800d996:	2109      	movs	r1, #9
 800d998:	f7ff ff8e 	bl	800d8b8 <std>
 800d99c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9a6:	2112      	movs	r1, #18
 800d9a8:	f7ff bf86 	b.w	800d8b8 <std>
 800d9ac:	200064f0 	.word	0x200064f0
 800d9b0:	200063b8 	.word	0x200063b8
 800d9b4:	0800d925 	.word	0x0800d925

0800d9b8 <__sfp_lock_acquire>:
 800d9b8:	4801      	ldr	r0, [pc, #4]	@ (800d9c0 <__sfp_lock_acquire+0x8>)
 800d9ba:	f000 ba7a 	b.w	800deb2 <__retarget_lock_acquire_recursive>
 800d9be:	bf00      	nop
 800d9c0:	200064f9 	.word	0x200064f9

0800d9c4 <__sfp_lock_release>:
 800d9c4:	4801      	ldr	r0, [pc, #4]	@ (800d9cc <__sfp_lock_release+0x8>)
 800d9c6:	f000 ba75 	b.w	800deb4 <__retarget_lock_release_recursive>
 800d9ca:	bf00      	nop
 800d9cc:	200064f9 	.word	0x200064f9

0800d9d0 <__sinit>:
 800d9d0:	b510      	push	{r4, lr}
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	f7ff fff0 	bl	800d9b8 <__sfp_lock_acquire>
 800d9d8:	6a23      	ldr	r3, [r4, #32]
 800d9da:	b11b      	cbz	r3, 800d9e4 <__sinit+0x14>
 800d9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9e0:	f7ff bff0 	b.w	800d9c4 <__sfp_lock_release>
 800d9e4:	4b04      	ldr	r3, [pc, #16]	@ (800d9f8 <__sinit+0x28>)
 800d9e6:	6223      	str	r3, [r4, #32]
 800d9e8:	4b04      	ldr	r3, [pc, #16]	@ (800d9fc <__sinit+0x2c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1f5      	bne.n	800d9dc <__sinit+0xc>
 800d9f0:	f7ff ffc4 	bl	800d97c <global_stdio_init.part.0>
 800d9f4:	e7f2      	b.n	800d9dc <__sinit+0xc>
 800d9f6:	bf00      	nop
 800d9f8:	0800d93d 	.word	0x0800d93d
 800d9fc:	200064f0 	.word	0x200064f0

0800da00 <_fwalk_sglue>:
 800da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da04:	4607      	mov	r7, r0
 800da06:	4688      	mov	r8, r1
 800da08:	4614      	mov	r4, r2
 800da0a:	2600      	movs	r6, #0
 800da0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da10:	f1b9 0901 	subs.w	r9, r9, #1
 800da14:	d505      	bpl.n	800da22 <_fwalk_sglue+0x22>
 800da16:	6824      	ldr	r4, [r4, #0]
 800da18:	2c00      	cmp	r4, #0
 800da1a:	d1f7      	bne.n	800da0c <_fwalk_sglue+0xc>
 800da1c:	4630      	mov	r0, r6
 800da1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da22:	89ab      	ldrh	r3, [r5, #12]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d907      	bls.n	800da38 <_fwalk_sglue+0x38>
 800da28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da2c:	3301      	adds	r3, #1
 800da2e:	d003      	beq.n	800da38 <_fwalk_sglue+0x38>
 800da30:	4629      	mov	r1, r5
 800da32:	4638      	mov	r0, r7
 800da34:	47c0      	blx	r8
 800da36:	4306      	orrs	r6, r0
 800da38:	3568      	adds	r5, #104	@ 0x68
 800da3a:	e7e9      	b.n	800da10 <_fwalk_sglue+0x10>

0800da3c <iprintf>:
 800da3c:	b40f      	push	{r0, r1, r2, r3}
 800da3e:	b507      	push	{r0, r1, r2, lr}
 800da40:	4906      	ldr	r1, [pc, #24]	@ (800da5c <iprintf+0x20>)
 800da42:	ab04      	add	r3, sp, #16
 800da44:	6808      	ldr	r0, [r1, #0]
 800da46:	f853 2b04 	ldr.w	r2, [r3], #4
 800da4a:	6881      	ldr	r1, [r0, #8]
 800da4c:	9301      	str	r3, [sp, #4]
 800da4e:	f001 fe93 	bl	800f778 <_vfiprintf_r>
 800da52:	b003      	add	sp, #12
 800da54:	f85d eb04 	ldr.w	lr, [sp], #4
 800da58:	b004      	add	sp, #16
 800da5a:	4770      	bx	lr
 800da5c:	20000110 	.word	0x20000110

0800da60 <_puts_r>:
 800da60:	6a03      	ldr	r3, [r0, #32]
 800da62:	b570      	push	{r4, r5, r6, lr}
 800da64:	6884      	ldr	r4, [r0, #8]
 800da66:	4605      	mov	r5, r0
 800da68:	460e      	mov	r6, r1
 800da6a:	b90b      	cbnz	r3, 800da70 <_puts_r+0x10>
 800da6c:	f7ff ffb0 	bl	800d9d0 <__sinit>
 800da70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da72:	07db      	lsls	r3, r3, #31
 800da74:	d405      	bmi.n	800da82 <_puts_r+0x22>
 800da76:	89a3      	ldrh	r3, [r4, #12]
 800da78:	0598      	lsls	r0, r3, #22
 800da7a:	d402      	bmi.n	800da82 <_puts_r+0x22>
 800da7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da7e:	f000 fa18 	bl	800deb2 <__retarget_lock_acquire_recursive>
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	0719      	lsls	r1, r3, #28
 800da86:	d502      	bpl.n	800da8e <_puts_r+0x2e>
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d135      	bne.n	800dafa <_puts_r+0x9a>
 800da8e:	4621      	mov	r1, r4
 800da90:	4628      	mov	r0, r5
 800da92:	f000 f8e5 	bl	800dc60 <__swsetup_r>
 800da96:	b380      	cbz	r0, 800dafa <_puts_r+0x9a>
 800da98:	f04f 35ff 	mov.w	r5, #4294967295
 800da9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da9e:	07da      	lsls	r2, r3, #31
 800daa0:	d405      	bmi.n	800daae <_puts_r+0x4e>
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	059b      	lsls	r3, r3, #22
 800daa6:	d402      	bmi.n	800daae <_puts_r+0x4e>
 800daa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daaa:	f000 fa03 	bl	800deb4 <__retarget_lock_release_recursive>
 800daae:	4628      	mov	r0, r5
 800dab0:	bd70      	pop	{r4, r5, r6, pc}
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	da04      	bge.n	800dac0 <_puts_r+0x60>
 800dab6:	69a2      	ldr	r2, [r4, #24]
 800dab8:	429a      	cmp	r2, r3
 800daba:	dc17      	bgt.n	800daec <_puts_r+0x8c>
 800dabc:	290a      	cmp	r1, #10
 800dabe:	d015      	beq.n	800daec <_puts_r+0x8c>
 800dac0:	6823      	ldr	r3, [r4, #0]
 800dac2:	1c5a      	adds	r2, r3, #1
 800dac4:	6022      	str	r2, [r4, #0]
 800dac6:	7019      	strb	r1, [r3, #0]
 800dac8:	68a3      	ldr	r3, [r4, #8]
 800daca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dace:	3b01      	subs	r3, #1
 800dad0:	60a3      	str	r3, [r4, #8]
 800dad2:	2900      	cmp	r1, #0
 800dad4:	d1ed      	bne.n	800dab2 <_puts_r+0x52>
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	da11      	bge.n	800dafe <_puts_r+0x9e>
 800dada:	4622      	mov	r2, r4
 800dadc:	210a      	movs	r1, #10
 800dade:	4628      	mov	r0, r5
 800dae0:	f000 f87f 	bl	800dbe2 <__swbuf_r>
 800dae4:	3001      	adds	r0, #1
 800dae6:	d0d7      	beq.n	800da98 <_puts_r+0x38>
 800dae8:	250a      	movs	r5, #10
 800daea:	e7d7      	b.n	800da9c <_puts_r+0x3c>
 800daec:	4622      	mov	r2, r4
 800daee:	4628      	mov	r0, r5
 800daf0:	f000 f877 	bl	800dbe2 <__swbuf_r>
 800daf4:	3001      	adds	r0, #1
 800daf6:	d1e7      	bne.n	800dac8 <_puts_r+0x68>
 800daf8:	e7ce      	b.n	800da98 <_puts_r+0x38>
 800dafa:	3e01      	subs	r6, #1
 800dafc:	e7e4      	b.n	800dac8 <_puts_r+0x68>
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	1c5a      	adds	r2, r3, #1
 800db02:	6022      	str	r2, [r4, #0]
 800db04:	220a      	movs	r2, #10
 800db06:	701a      	strb	r2, [r3, #0]
 800db08:	e7ee      	b.n	800dae8 <_puts_r+0x88>
	...

0800db0c <puts>:
 800db0c:	4b02      	ldr	r3, [pc, #8]	@ (800db18 <puts+0xc>)
 800db0e:	4601      	mov	r1, r0
 800db10:	6818      	ldr	r0, [r3, #0]
 800db12:	f7ff bfa5 	b.w	800da60 <_puts_r>
 800db16:	bf00      	nop
 800db18:	20000110 	.word	0x20000110

0800db1c <siprintf>:
 800db1c:	b40e      	push	{r1, r2, r3}
 800db1e:	b500      	push	{lr}
 800db20:	b09c      	sub	sp, #112	@ 0x70
 800db22:	ab1d      	add	r3, sp, #116	@ 0x74
 800db24:	9002      	str	r0, [sp, #8]
 800db26:	9006      	str	r0, [sp, #24]
 800db28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db2c:	4809      	ldr	r0, [pc, #36]	@ (800db54 <siprintf+0x38>)
 800db2e:	9107      	str	r1, [sp, #28]
 800db30:	9104      	str	r1, [sp, #16]
 800db32:	4909      	ldr	r1, [pc, #36]	@ (800db58 <siprintf+0x3c>)
 800db34:	f853 2b04 	ldr.w	r2, [r3], #4
 800db38:	9105      	str	r1, [sp, #20]
 800db3a:	6800      	ldr	r0, [r0, #0]
 800db3c:	9301      	str	r3, [sp, #4]
 800db3e:	a902      	add	r1, sp, #8
 800db40:	f001 fcf4 	bl	800f52c <_svfiprintf_r>
 800db44:	9b02      	ldr	r3, [sp, #8]
 800db46:	2200      	movs	r2, #0
 800db48:	701a      	strb	r2, [r3, #0]
 800db4a:	b01c      	add	sp, #112	@ 0x70
 800db4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db50:	b003      	add	sp, #12
 800db52:	4770      	bx	lr
 800db54:	20000110 	.word	0x20000110
 800db58:	ffff0208 	.word	0xffff0208

0800db5c <__sread>:
 800db5c:	b510      	push	{r4, lr}
 800db5e:	460c      	mov	r4, r1
 800db60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db64:	f000 f956 	bl	800de14 <_read_r>
 800db68:	2800      	cmp	r0, #0
 800db6a:	bfab      	itete	ge
 800db6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db6e:	89a3      	ldrhlt	r3, [r4, #12]
 800db70:	181b      	addge	r3, r3, r0
 800db72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db76:	bfac      	ite	ge
 800db78:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db7a:	81a3      	strhlt	r3, [r4, #12]
 800db7c:	bd10      	pop	{r4, pc}

0800db7e <__swrite>:
 800db7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db82:	461f      	mov	r7, r3
 800db84:	898b      	ldrh	r3, [r1, #12]
 800db86:	05db      	lsls	r3, r3, #23
 800db88:	4605      	mov	r5, r0
 800db8a:	460c      	mov	r4, r1
 800db8c:	4616      	mov	r6, r2
 800db8e:	d505      	bpl.n	800db9c <__swrite+0x1e>
 800db90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db94:	2302      	movs	r3, #2
 800db96:	2200      	movs	r2, #0
 800db98:	f000 f92a 	bl	800ddf0 <_lseek_r>
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dba6:	81a3      	strh	r3, [r4, #12]
 800dba8:	4632      	mov	r2, r6
 800dbaa:	463b      	mov	r3, r7
 800dbac:	4628      	mov	r0, r5
 800dbae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb2:	f000 b941 	b.w	800de38 <_write_r>

0800dbb6 <__sseek>:
 800dbb6:	b510      	push	{r4, lr}
 800dbb8:	460c      	mov	r4, r1
 800dbba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbbe:	f000 f917 	bl	800ddf0 <_lseek_r>
 800dbc2:	1c43      	adds	r3, r0, #1
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	bf15      	itete	ne
 800dbc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbd2:	81a3      	strheq	r3, [r4, #12]
 800dbd4:	bf18      	it	ne
 800dbd6:	81a3      	strhne	r3, [r4, #12]
 800dbd8:	bd10      	pop	{r4, pc}

0800dbda <__sclose>:
 800dbda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbde:	f000 b8a1 	b.w	800dd24 <_close_r>

0800dbe2 <__swbuf_r>:
 800dbe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe4:	460e      	mov	r6, r1
 800dbe6:	4614      	mov	r4, r2
 800dbe8:	4605      	mov	r5, r0
 800dbea:	b118      	cbz	r0, 800dbf4 <__swbuf_r+0x12>
 800dbec:	6a03      	ldr	r3, [r0, #32]
 800dbee:	b90b      	cbnz	r3, 800dbf4 <__swbuf_r+0x12>
 800dbf0:	f7ff feee 	bl	800d9d0 <__sinit>
 800dbf4:	69a3      	ldr	r3, [r4, #24]
 800dbf6:	60a3      	str	r3, [r4, #8]
 800dbf8:	89a3      	ldrh	r3, [r4, #12]
 800dbfa:	071a      	lsls	r2, r3, #28
 800dbfc:	d501      	bpl.n	800dc02 <__swbuf_r+0x20>
 800dbfe:	6923      	ldr	r3, [r4, #16]
 800dc00:	b943      	cbnz	r3, 800dc14 <__swbuf_r+0x32>
 800dc02:	4621      	mov	r1, r4
 800dc04:	4628      	mov	r0, r5
 800dc06:	f000 f82b 	bl	800dc60 <__swsetup_r>
 800dc0a:	b118      	cbz	r0, 800dc14 <__swbuf_r+0x32>
 800dc0c:	f04f 37ff 	mov.w	r7, #4294967295
 800dc10:	4638      	mov	r0, r7
 800dc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc14:	6823      	ldr	r3, [r4, #0]
 800dc16:	6922      	ldr	r2, [r4, #16]
 800dc18:	1a98      	subs	r0, r3, r2
 800dc1a:	6963      	ldr	r3, [r4, #20]
 800dc1c:	b2f6      	uxtb	r6, r6
 800dc1e:	4283      	cmp	r3, r0
 800dc20:	4637      	mov	r7, r6
 800dc22:	dc05      	bgt.n	800dc30 <__swbuf_r+0x4e>
 800dc24:	4621      	mov	r1, r4
 800dc26:	4628      	mov	r0, r5
 800dc28:	f001 ff42 	bl	800fab0 <_fflush_r>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d1ed      	bne.n	800dc0c <__swbuf_r+0x2a>
 800dc30:	68a3      	ldr	r3, [r4, #8]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	60a3      	str	r3, [r4, #8]
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	1c5a      	adds	r2, r3, #1
 800dc3a:	6022      	str	r2, [r4, #0]
 800dc3c:	701e      	strb	r6, [r3, #0]
 800dc3e:	6962      	ldr	r2, [r4, #20]
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d004      	beq.n	800dc50 <__swbuf_r+0x6e>
 800dc46:	89a3      	ldrh	r3, [r4, #12]
 800dc48:	07db      	lsls	r3, r3, #31
 800dc4a:	d5e1      	bpl.n	800dc10 <__swbuf_r+0x2e>
 800dc4c:	2e0a      	cmp	r6, #10
 800dc4e:	d1df      	bne.n	800dc10 <__swbuf_r+0x2e>
 800dc50:	4621      	mov	r1, r4
 800dc52:	4628      	mov	r0, r5
 800dc54:	f001 ff2c 	bl	800fab0 <_fflush_r>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d0d9      	beq.n	800dc10 <__swbuf_r+0x2e>
 800dc5c:	e7d6      	b.n	800dc0c <__swbuf_r+0x2a>
	...

0800dc60 <__swsetup_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4b29      	ldr	r3, [pc, #164]	@ (800dd08 <__swsetup_r+0xa8>)
 800dc64:	4605      	mov	r5, r0
 800dc66:	6818      	ldr	r0, [r3, #0]
 800dc68:	460c      	mov	r4, r1
 800dc6a:	b118      	cbz	r0, 800dc74 <__swsetup_r+0x14>
 800dc6c:	6a03      	ldr	r3, [r0, #32]
 800dc6e:	b90b      	cbnz	r3, 800dc74 <__swsetup_r+0x14>
 800dc70:	f7ff feae 	bl	800d9d0 <__sinit>
 800dc74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc78:	0719      	lsls	r1, r3, #28
 800dc7a:	d422      	bmi.n	800dcc2 <__swsetup_r+0x62>
 800dc7c:	06da      	lsls	r2, r3, #27
 800dc7e:	d407      	bmi.n	800dc90 <__swsetup_r+0x30>
 800dc80:	2209      	movs	r2, #9
 800dc82:	602a      	str	r2, [r5, #0]
 800dc84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc88:	81a3      	strh	r3, [r4, #12]
 800dc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8e:	e033      	b.n	800dcf8 <__swsetup_r+0x98>
 800dc90:	0758      	lsls	r0, r3, #29
 800dc92:	d512      	bpl.n	800dcba <__swsetup_r+0x5a>
 800dc94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc96:	b141      	cbz	r1, 800dcaa <__swsetup_r+0x4a>
 800dc98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc9c:	4299      	cmp	r1, r3
 800dc9e:	d002      	beq.n	800dca6 <__swsetup_r+0x46>
 800dca0:	4628      	mov	r0, r5
 800dca2:	f000 ff65 	bl	800eb70 <_free_r>
 800dca6:	2300      	movs	r3, #0
 800dca8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dcb0:	81a3      	strh	r3, [r4, #12]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	6063      	str	r3, [r4, #4]
 800dcb6:	6923      	ldr	r3, [r4, #16]
 800dcb8:	6023      	str	r3, [r4, #0]
 800dcba:	89a3      	ldrh	r3, [r4, #12]
 800dcbc:	f043 0308 	orr.w	r3, r3, #8
 800dcc0:	81a3      	strh	r3, [r4, #12]
 800dcc2:	6923      	ldr	r3, [r4, #16]
 800dcc4:	b94b      	cbnz	r3, 800dcda <__swsetup_r+0x7a>
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcd0:	d003      	beq.n	800dcda <__swsetup_r+0x7a>
 800dcd2:	4621      	mov	r1, r4
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f001 ff39 	bl	800fb4c <__smakebuf_r>
 800dcda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcde:	f013 0201 	ands.w	r2, r3, #1
 800dce2:	d00a      	beq.n	800dcfa <__swsetup_r+0x9a>
 800dce4:	2200      	movs	r2, #0
 800dce6:	60a2      	str	r2, [r4, #8]
 800dce8:	6962      	ldr	r2, [r4, #20]
 800dcea:	4252      	negs	r2, r2
 800dcec:	61a2      	str	r2, [r4, #24]
 800dcee:	6922      	ldr	r2, [r4, #16]
 800dcf0:	b942      	cbnz	r2, 800dd04 <__swsetup_r+0xa4>
 800dcf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dcf6:	d1c5      	bne.n	800dc84 <__swsetup_r+0x24>
 800dcf8:	bd38      	pop	{r3, r4, r5, pc}
 800dcfa:	0799      	lsls	r1, r3, #30
 800dcfc:	bf58      	it	pl
 800dcfe:	6962      	ldrpl	r2, [r4, #20]
 800dd00:	60a2      	str	r2, [r4, #8]
 800dd02:	e7f4      	b.n	800dcee <__swsetup_r+0x8e>
 800dd04:	2000      	movs	r0, #0
 800dd06:	e7f7      	b.n	800dcf8 <__swsetup_r+0x98>
 800dd08:	20000110 	.word	0x20000110

0800dd0c <memset>:
 800dd0c:	4402      	add	r2, r0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d100      	bne.n	800dd16 <memset+0xa>
 800dd14:	4770      	bx	lr
 800dd16:	f803 1b01 	strb.w	r1, [r3], #1
 800dd1a:	e7f9      	b.n	800dd10 <memset+0x4>

0800dd1c <_localeconv_r>:
 800dd1c:	4800      	ldr	r0, [pc, #0]	@ (800dd20 <_localeconv_r+0x4>)
 800dd1e:	4770      	bx	lr
 800dd20:	20000250 	.word	0x20000250

0800dd24 <_close_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d06      	ldr	r5, [pc, #24]	@ (800dd40 <_close_r+0x1c>)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	602b      	str	r3, [r5, #0]
 800dd30:	f7f4 fb9a 	bl	8002468 <_close>
 800dd34:	1c43      	adds	r3, r0, #1
 800dd36:	d102      	bne.n	800dd3e <_close_r+0x1a>
 800dd38:	682b      	ldr	r3, [r5, #0]
 800dd3a:	b103      	cbz	r3, 800dd3e <_close_r+0x1a>
 800dd3c:	6023      	str	r3, [r4, #0]
 800dd3e:	bd38      	pop	{r3, r4, r5, pc}
 800dd40:	200064f4 	.word	0x200064f4

0800dd44 <_reclaim_reent>:
 800dd44:	4b29      	ldr	r3, [pc, #164]	@ (800ddec <_reclaim_reent+0xa8>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4283      	cmp	r3, r0
 800dd4a:	b570      	push	{r4, r5, r6, lr}
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	d04b      	beq.n	800dde8 <_reclaim_reent+0xa4>
 800dd50:	69c3      	ldr	r3, [r0, #28]
 800dd52:	b1ab      	cbz	r3, 800dd80 <_reclaim_reent+0x3c>
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	b16b      	cbz	r3, 800dd74 <_reclaim_reent+0x30>
 800dd58:	2500      	movs	r5, #0
 800dd5a:	69e3      	ldr	r3, [r4, #28]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	5959      	ldr	r1, [r3, r5]
 800dd60:	2900      	cmp	r1, #0
 800dd62:	d13b      	bne.n	800dddc <_reclaim_reent+0x98>
 800dd64:	3504      	adds	r5, #4
 800dd66:	2d80      	cmp	r5, #128	@ 0x80
 800dd68:	d1f7      	bne.n	800dd5a <_reclaim_reent+0x16>
 800dd6a:	69e3      	ldr	r3, [r4, #28]
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	68d9      	ldr	r1, [r3, #12]
 800dd70:	f000 fefe 	bl	800eb70 <_free_r>
 800dd74:	69e3      	ldr	r3, [r4, #28]
 800dd76:	6819      	ldr	r1, [r3, #0]
 800dd78:	b111      	cbz	r1, 800dd80 <_reclaim_reent+0x3c>
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 fef8 	bl	800eb70 <_free_r>
 800dd80:	6961      	ldr	r1, [r4, #20]
 800dd82:	b111      	cbz	r1, 800dd8a <_reclaim_reent+0x46>
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 fef3 	bl	800eb70 <_free_r>
 800dd8a:	69e1      	ldr	r1, [r4, #28]
 800dd8c:	b111      	cbz	r1, 800dd94 <_reclaim_reent+0x50>
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f000 feee 	bl	800eb70 <_free_r>
 800dd94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd96:	b111      	cbz	r1, 800dd9e <_reclaim_reent+0x5a>
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f000 fee9 	bl	800eb70 <_free_r>
 800dd9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dda0:	b111      	cbz	r1, 800dda8 <_reclaim_reent+0x64>
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 fee4 	bl	800eb70 <_free_r>
 800dda8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ddaa:	b111      	cbz	r1, 800ddb2 <_reclaim_reent+0x6e>
 800ddac:	4620      	mov	r0, r4
 800ddae:	f000 fedf 	bl	800eb70 <_free_r>
 800ddb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ddb4:	b111      	cbz	r1, 800ddbc <_reclaim_reent+0x78>
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 feda 	bl	800eb70 <_free_r>
 800ddbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ddbe:	b111      	cbz	r1, 800ddc6 <_reclaim_reent+0x82>
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f000 fed5 	bl	800eb70 <_free_r>
 800ddc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ddc8:	b111      	cbz	r1, 800ddd0 <_reclaim_reent+0x8c>
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 fed0 	bl	800eb70 <_free_r>
 800ddd0:	6a23      	ldr	r3, [r4, #32]
 800ddd2:	b14b      	cbz	r3, 800dde8 <_reclaim_reent+0xa4>
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddda:	4718      	bx	r3
 800dddc:	680e      	ldr	r6, [r1, #0]
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 fec6 	bl	800eb70 <_free_r>
 800dde4:	4631      	mov	r1, r6
 800dde6:	e7bb      	b.n	800dd60 <_reclaim_reent+0x1c>
 800dde8:	bd70      	pop	{r4, r5, r6, pc}
 800ddea:	bf00      	nop
 800ddec:	20000110 	.word	0x20000110

0800ddf0 <_lseek_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_lseek_r+0x20>)
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	4608      	mov	r0, r1
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	602a      	str	r2, [r5, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	f7f4 fb59 	bl	80024b6 <_lseek>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_lseek_r+0x1e>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_lseek_r+0x1e>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	200064f4 	.word	0x200064f4

0800de14 <_read_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d07      	ldr	r5, [pc, #28]	@ (800de34 <_read_r+0x20>)
 800de18:	4604      	mov	r4, r0
 800de1a:	4608      	mov	r0, r1
 800de1c:	4611      	mov	r1, r2
 800de1e:	2200      	movs	r2, #0
 800de20:	602a      	str	r2, [r5, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	f7f4 fae7 	bl	80023f6 <_read>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_read_r+0x1e>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_read_r+0x1e>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	200064f4 	.word	0x200064f4

0800de38 <_write_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	4d07      	ldr	r5, [pc, #28]	@ (800de58 <_write_r+0x20>)
 800de3c:	4604      	mov	r4, r0
 800de3e:	4608      	mov	r0, r1
 800de40:	4611      	mov	r1, r2
 800de42:	2200      	movs	r2, #0
 800de44:	602a      	str	r2, [r5, #0]
 800de46:	461a      	mov	r2, r3
 800de48:	f7f4 faf2 	bl	8002430 <_write>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d102      	bne.n	800de56 <_write_r+0x1e>
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	b103      	cbz	r3, 800de56 <_write_r+0x1e>
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	bd38      	pop	{r3, r4, r5, pc}
 800de58:	200064f4 	.word	0x200064f4

0800de5c <__errno>:
 800de5c:	4b01      	ldr	r3, [pc, #4]	@ (800de64 <__errno+0x8>)
 800de5e:	6818      	ldr	r0, [r3, #0]
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	20000110 	.word	0x20000110

0800de68 <__libc_init_array>:
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	4d0d      	ldr	r5, [pc, #52]	@ (800dea0 <__libc_init_array+0x38>)
 800de6c:	4c0d      	ldr	r4, [pc, #52]	@ (800dea4 <__libc_init_array+0x3c>)
 800de6e:	1b64      	subs	r4, r4, r5
 800de70:	10a4      	asrs	r4, r4, #2
 800de72:	2600      	movs	r6, #0
 800de74:	42a6      	cmp	r6, r4
 800de76:	d109      	bne.n	800de8c <__libc_init_array+0x24>
 800de78:	4d0b      	ldr	r5, [pc, #44]	@ (800dea8 <__libc_init_array+0x40>)
 800de7a:	4c0c      	ldr	r4, [pc, #48]	@ (800deac <__libc_init_array+0x44>)
 800de7c:	f002 fe2a 	bl	8010ad4 <_init>
 800de80:	1b64      	subs	r4, r4, r5
 800de82:	10a4      	asrs	r4, r4, #2
 800de84:	2600      	movs	r6, #0
 800de86:	42a6      	cmp	r6, r4
 800de88:	d105      	bne.n	800de96 <__libc_init_array+0x2e>
 800de8a:	bd70      	pop	{r4, r5, r6, pc}
 800de8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de90:	4798      	blx	r3
 800de92:	3601      	adds	r6, #1
 800de94:	e7ee      	b.n	800de74 <__libc_init_array+0xc>
 800de96:	f855 3b04 	ldr.w	r3, [r5], #4
 800de9a:	4798      	blx	r3
 800de9c:	3601      	adds	r6, #1
 800de9e:	e7f2      	b.n	800de86 <__libc_init_array+0x1e>
 800dea0:	08011058 	.word	0x08011058
 800dea4:	08011058 	.word	0x08011058
 800dea8:	08011058 	.word	0x08011058
 800deac:	0801105c 	.word	0x0801105c

0800deb0 <__retarget_lock_init_recursive>:
 800deb0:	4770      	bx	lr

0800deb2 <__retarget_lock_acquire_recursive>:
 800deb2:	4770      	bx	lr

0800deb4 <__retarget_lock_release_recursive>:
 800deb4:	4770      	bx	lr

0800deb6 <memcpy>:
 800deb6:	440a      	add	r2, r1
 800deb8:	4291      	cmp	r1, r2
 800deba:	f100 33ff 	add.w	r3, r0, #4294967295
 800debe:	d100      	bne.n	800dec2 <memcpy+0xc>
 800dec0:	4770      	bx	lr
 800dec2:	b510      	push	{r4, lr}
 800dec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800decc:	4291      	cmp	r1, r2
 800dece:	d1f9      	bne.n	800dec4 <memcpy+0xe>
 800ded0:	bd10      	pop	{r4, pc}

0800ded2 <quorem>:
 800ded2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded6:	6903      	ldr	r3, [r0, #16]
 800ded8:	690c      	ldr	r4, [r1, #16]
 800deda:	42a3      	cmp	r3, r4
 800dedc:	4607      	mov	r7, r0
 800dede:	db7e      	blt.n	800dfde <quorem+0x10c>
 800dee0:	3c01      	subs	r4, #1
 800dee2:	f101 0814 	add.w	r8, r1, #20
 800dee6:	00a3      	lsls	r3, r4, #2
 800dee8:	f100 0514 	add.w	r5, r0, #20
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800def2:	9301      	str	r3, [sp, #4]
 800def4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800def8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800defc:	3301      	adds	r3, #1
 800defe:	429a      	cmp	r2, r3
 800df00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df04:	fbb2 f6f3 	udiv	r6, r2, r3
 800df08:	d32e      	bcc.n	800df68 <quorem+0x96>
 800df0a:	f04f 0a00 	mov.w	sl, #0
 800df0e:	46c4      	mov	ip, r8
 800df10:	46ae      	mov	lr, r5
 800df12:	46d3      	mov	fp, sl
 800df14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df18:	b298      	uxth	r0, r3
 800df1a:	fb06 a000 	mla	r0, r6, r0, sl
 800df1e:	0c02      	lsrs	r2, r0, #16
 800df20:	0c1b      	lsrs	r3, r3, #16
 800df22:	fb06 2303 	mla	r3, r6, r3, r2
 800df26:	f8de 2000 	ldr.w	r2, [lr]
 800df2a:	b280      	uxth	r0, r0
 800df2c:	b292      	uxth	r2, r2
 800df2e:	1a12      	subs	r2, r2, r0
 800df30:	445a      	add	r2, fp
 800df32:	f8de 0000 	ldr.w	r0, [lr]
 800df36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df44:	b292      	uxth	r2, r2
 800df46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df4a:	45e1      	cmp	r9, ip
 800df4c:	f84e 2b04 	str.w	r2, [lr], #4
 800df50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df54:	d2de      	bcs.n	800df14 <quorem+0x42>
 800df56:	9b00      	ldr	r3, [sp, #0]
 800df58:	58eb      	ldr	r3, [r5, r3]
 800df5a:	b92b      	cbnz	r3, 800df68 <quorem+0x96>
 800df5c:	9b01      	ldr	r3, [sp, #4]
 800df5e:	3b04      	subs	r3, #4
 800df60:	429d      	cmp	r5, r3
 800df62:	461a      	mov	r2, r3
 800df64:	d32f      	bcc.n	800dfc6 <quorem+0xf4>
 800df66:	613c      	str	r4, [r7, #16]
 800df68:	4638      	mov	r0, r7
 800df6a:	f001 f97b 	bl	800f264 <__mcmp>
 800df6e:	2800      	cmp	r0, #0
 800df70:	db25      	blt.n	800dfbe <quorem+0xec>
 800df72:	4629      	mov	r1, r5
 800df74:	2000      	movs	r0, #0
 800df76:	f858 2b04 	ldr.w	r2, [r8], #4
 800df7a:	f8d1 c000 	ldr.w	ip, [r1]
 800df7e:	fa1f fe82 	uxth.w	lr, r2
 800df82:	fa1f f38c 	uxth.w	r3, ip
 800df86:	eba3 030e 	sub.w	r3, r3, lr
 800df8a:	4403      	add	r3, r0
 800df8c:	0c12      	lsrs	r2, r2, #16
 800df8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df96:	b29b      	uxth	r3, r3
 800df98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df9c:	45c1      	cmp	r9, r8
 800df9e:	f841 3b04 	str.w	r3, [r1], #4
 800dfa2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dfa6:	d2e6      	bcs.n	800df76 <quorem+0xa4>
 800dfa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfb0:	b922      	cbnz	r2, 800dfbc <quorem+0xea>
 800dfb2:	3b04      	subs	r3, #4
 800dfb4:	429d      	cmp	r5, r3
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	d30b      	bcc.n	800dfd2 <quorem+0x100>
 800dfba:	613c      	str	r4, [r7, #16]
 800dfbc:	3601      	adds	r6, #1
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	b003      	add	sp, #12
 800dfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc6:	6812      	ldr	r2, [r2, #0]
 800dfc8:	3b04      	subs	r3, #4
 800dfca:	2a00      	cmp	r2, #0
 800dfcc:	d1cb      	bne.n	800df66 <quorem+0x94>
 800dfce:	3c01      	subs	r4, #1
 800dfd0:	e7c6      	b.n	800df60 <quorem+0x8e>
 800dfd2:	6812      	ldr	r2, [r2, #0]
 800dfd4:	3b04      	subs	r3, #4
 800dfd6:	2a00      	cmp	r2, #0
 800dfd8:	d1ef      	bne.n	800dfba <quorem+0xe8>
 800dfda:	3c01      	subs	r4, #1
 800dfdc:	e7ea      	b.n	800dfb4 <quorem+0xe2>
 800dfde:	2000      	movs	r0, #0
 800dfe0:	e7ee      	b.n	800dfc0 <quorem+0xee>
 800dfe2:	0000      	movs	r0, r0
 800dfe4:	0000      	movs	r0, r0
	...

0800dfe8 <_dtoa_r>:
 800dfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	69c7      	ldr	r7, [r0, #28]
 800dfee:	b099      	sub	sp, #100	@ 0x64
 800dff0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dff4:	ec55 4b10 	vmov	r4, r5, d0
 800dff8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dffa:	9109      	str	r1, [sp, #36]	@ 0x24
 800dffc:	4683      	mov	fp, r0
 800dffe:	920e      	str	r2, [sp, #56]	@ 0x38
 800e000:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e002:	b97f      	cbnz	r7, 800e024 <_dtoa_r+0x3c>
 800e004:	2010      	movs	r0, #16
 800e006:	f000 fdfd 	bl	800ec04 <malloc>
 800e00a:	4602      	mov	r2, r0
 800e00c:	f8cb 001c 	str.w	r0, [fp, #28]
 800e010:	b920      	cbnz	r0, 800e01c <_dtoa_r+0x34>
 800e012:	4ba7      	ldr	r3, [pc, #668]	@ (800e2b0 <_dtoa_r+0x2c8>)
 800e014:	21ef      	movs	r1, #239	@ 0xef
 800e016:	48a7      	ldr	r0, [pc, #668]	@ (800e2b4 <_dtoa_r+0x2cc>)
 800e018:	f001 fe20 	bl	800fc5c <__assert_func>
 800e01c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e020:	6007      	str	r7, [r0, #0]
 800e022:	60c7      	str	r7, [r0, #12]
 800e024:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e028:	6819      	ldr	r1, [r3, #0]
 800e02a:	b159      	cbz	r1, 800e044 <_dtoa_r+0x5c>
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	604a      	str	r2, [r1, #4]
 800e030:	2301      	movs	r3, #1
 800e032:	4093      	lsls	r3, r2
 800e034:	608b      	str	r3, [r1, #8]
 800e036:	4658      	mov	r0, fp
 800e038:	f000 feda 	bl	800edf0 <_Bfree>
 800e03c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e040:	2200      	movs	r2, #0
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	1e2b      	subs	r3, r5, #0
 800e046:	bfb9      	ittee	lt
 800e048:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e04c:	9303      	strlt	r3, [sp, #12]
 800e04e:	2300      	movge	r3, #0
 800e050:	6033      	strge	r3, [r6, #0]
 800e052:	9f03      	ldr	r7, [sp, #12]
 800e054:	4b98      	ldr	r3, [pc, #608]	@ (800e2b8 <_dtoa_r+0x2d0>)
 800e056:	bfbc      	itt	lt
 800e058:	2201      	movlt	r2, #1
 800e05a:	6032      	strlt	r2, [r6, #0]
 800e05c:	43bb      	bics	r3, r7
 800e05e:	d112      	bne.n	800e086 <_dtoa_r+0x9e>
 800e060:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e062:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e06c:	4323      	orrs	r3, r4
 800e06e:	f000 854d 	beq.w	800eb0c <_dtoa_r+0xb24>
 800e072:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e074:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e2cc <_dtoa_r+0x2e4>
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 854f 	beq.w	800eb1c <_dtoa_r+0xb34>
 800e07e:	f10a 0303 	add.w	r3, sl, #3
 800e082:	f000 bd49 	b.w	800eb18 <_dtoa_r+0xb30>
 800e086:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e08a:	2200      	movs	r2, #0
 800e08c:	ec51 0b17 	vmov	r0, r1, d7
 800e090:	2300      	movs	r3, #0
 800e092:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e096:	f7f2 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e09a:	4680      	mov	r8, r0
 800e09c:	b158      	cbz	r0, 800e0b6 <_dtoa_r+0xce>
 800e09e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e0a6:	b113      	cbz	r3, 800e0ae <_dtoa_r+0xc6>
 800e0a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e0aa:	4b84      	ldr	r3, [pc, #528]	@ (800e2bc <_dtoa_r+0x2d4>)
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e2d0 <_dtoa_r+0x2e8>
 800e0b2:	f000 bd33 	b.w	800eb1c <_dtoa_r+0xb34>
 800e0b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e0ba:	aa16      	add	r2, sp, #88	@ 0x58
 800e0bc:	a917      	add	r1, sp, #92	@ 0x5c
 800e0be:	4658      	mov	r0, fp
 800e0c0:	f001 f980 	bl	800f3c4 <__d2b>
 800e0c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e0c8:	4681      	mov	r9, r0
 800e0ca:	2e00      	cmp	r6, #0
 800e0cc:	d077      	beq.n	800e1be <_dtoa_r+0x1d6>
 800e0ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e0d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	4b74      	ldr	r3, [pc, #464]	@ (800e2c0 <_dtoa_r+0x2d8>)
 800e0ee:	f7f2 f8d3 	bl	8000298 <__aeabi_dsub>
 800e0f2:	a369      	add	r3, pc, #420	@ (adr r3, 800e298 <_dtoa_r+0x2b0>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	f7f2 fa86 	bl	8000608 <__aeabi_dmul>
 800e0fc:	a368      	add	r3, pc, #416	@ (adr r3, 800e2a0 <_dtoa_r+0x2b8>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f7f2 f8cb 	bl	800029c <__adddf3>
 800e106:	4604      	mov	r4, r0
 800e108:	4630      	mov	r0, r6
 800e10a:	460d      	mov	r5, r1
 800e10c:	f7f2 fa12 	bl	8000534 <__aeabi_i2d>
 800e110:	a365      	add	r3, pc, #404	@ (adr r3, 800e2a8 <_dtoa_r+0x2c0>)
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	f7f2 fa77 	bl	8000608 <__aeabi_dmul>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4620      	mov	r0, r4
 800e120:	4629      	mov	r1, r5
 800e122:	f7f2 f8bb 	bl	800029c <__adddf3>
 800e126:	4604      	mov	r4, r0
 800e128:	460d      	mov	r5, r1
 800e12a:	f7f2 fd1d 	bl	8000b68 <__aeabi_d2iz>
 800e12e:	2200      	movs	r2, #0
 800e130:	4607      	mov	r7, r0
 800e132:	2300      	movs	r3, #0
 800e134:	4620      	mov	r0, r4
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 fcd8 	bl	8000aec <__aeabi_dcmplt>
 800e13c:	b140      	cbz	r0, 800e150 <_dtoa_r+0x168>
 800e13e:	4638      	mov	r0, r7
 800e140:	f7f2 f9f8 	bl	8000534 <__aeabi_i2d>
 800e144:	4622      	mov	r2, r4
 800e146:	462b      	mov	r3, r5
 800e148:	f7f2 fcc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e14c:	b900      	cbnz	r0, 800e150 <_dtoa_r+0x168>
 800e14e:	3f01      	subs	r7, #1
 800e150:	2f16      	cmp	r7, #22
 800e152:	d851      	bhi.n	800e1f8 <_dtoa_r+0x210>
 800e154:	4b5b      	ldr	r3, [pc, #364]	@ (800e2c4 <_dtoa_r+0x2dc>)
 800e156:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e162:	f7f2 fcc3 	bl	8000aec <__aeabi_dcmplt>
 800e166:	2800      	cmp	r0, #0
 800e168:	d048      	beq.n	800e1fc <_dtoa_r+0x214>
 800e16a:	3f01      	subs	r7, #1
 800e16c:	2300      	movs	r3, #0
 800e16e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e170:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e172:	1b9b      	subs	r3, r3, r6
 800e174:	1e5a      	subs	r2, r3, #1
 800e176:	bf44      	itt	mi
 800e178:	f1c3 0801 	rsbmi	r8, r3, #1
 800e17c:	2300      	movmi	r3, #0
 800e17e:	9208      	str	r2, [sp, #32]
 800e180:	bf54      	ite	pl
 800e182:	f04f 0800 	movpl.w	r8, #0
 800e186:	9308      	strmi	r3, [sp, #32]
 800e188:	2f00      	cmp	r7, #0
 800e18a:	db39      	blt.n	800e200 <_dtoa_r+0x218>
 800e18c:	9b08      	ldr	r3, [sp, #32]
 800e18e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e190:	443b      	add	r3, r7
 800e192:	9308      	str	r3, [sp, #32]
 800e194:	2300      	movs	r3, #0
 800e196:	930a      	str	r3, [sp, #40]	@ 0x28
 800e198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e19a:	2b09      	cmp	r3, #9
 800e19c:	d864      	bhi.n	800e268 <_dtoa_r+0x280>
 800e19e:	2b05      	cmp	r3, #5
 800e1a0:	bfc4      	itt	gt
 800e1a2:	3b04      	subgt	r3, #4
 800e1a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a8:	f1a3 0302 	sub.w	r3, r3, #2
 800e1ac:	bfcc      	ite	gt
 800e1ae:	2400      	movgt	r4, #0
 800e1b0:	2401      	movle	r4, #1
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d863      	bhi.n	800e27e <_dtoa_r+0x296>
 800e1b6:	e8df f003 	tbb	[pc, r3]
 800e1ba:	372a      	.short	0x372a
 800e1bc:	5535      	.short	0x5535
 800e1be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e1c2:	441e      	add	r6, r3
 800e1c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e1c8:	2b20      	cmp	r3, #32
 800e1ca:	bfc1      	itttt	gt
 800e1cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e1d0:	409f      	lslgt	r7, r3
 800e1d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1da:	bfd6      	itet	le
 800e1dc:	f1c3 0320 	rsble	r3, r3, #32
 800e1e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1e4:	fa04 f003 	lslle.w	r0, r4, r3
 800e1e8:	f7f2 f994 	bl	8000514 <__aeabi_ui2d>
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1f2:	3e01      	subs	r6, #1
 800e1f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e1f6:	e777      	b.n	800e0e8 <_dtoa_r+0x100>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e7b8      	b.n	800e16e <_dtoa_r+0x186>
 800e1fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e1fe:	e7b7      	b.n	800e170 <_dtoa_r+0x188>
 800e200:	427b      	negs	r3, r7
 800e202:	930a      	str	r3, [sp, #40]	@ 0x28
 800e204:	2300      	movs	r3, #0
 800e206:	eba8 0807 	sub.w	r8, r8, r7
 800e20a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e20c:	e7c4      	b.n	800e198 <_dtoa_r+0x1b0>
 800e20e:	2300      	movs	r3, #0
 800e210:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e214:	2b00      	cmp	r3, #0
 800e216:	dc35      	bgt.n	800e284 <_dtoa_r+0x29c>
 800e218:	2301      	movs	r3, #1
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	9307      	str	r3, [sp, #28]
 800e21e:	461a      	mov	r2, r3
 800e220:	920e      	str	r2, [sp, #56]	@ 0x38
 800e222:	e00b      	b.n	800e23c <_dtoa_r+0x254>
 800e224:	2301      	movs	r3, #1
 800e226:	e7f3      	b.n	800e210 <_dtoa_r+0x228>
 800e228:	2300      	movs	r3, #0
 800e22a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e22c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e22e:	18fb      	adds	r3, r7, r3
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	2b01      	cmp	r3, #1
 800e236:	9307      	str	r3, [sp, #28]
 800e238:	bfb8      	it	lt
 800e23a:	2301      	movlt	r3, #1
 800e23c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e240:	2100      	movs	r1, #0
 800e242:	2204      	movs	r2, #4
 800e244:	f102 0514 	add.w	r5, r2, #20
 800e248:	429d      	cmp	r5, r3
 800e24a:	d91f      	bls.n	800e28c <_dtoa_r+0x2a4>
 800e24c:	6041      	str	r1, [r0, #4]
 800e24e:	4658      	mov	r0, fp
 800e250:	f000 fd8e 	bl	800ed70 <_Balloc>
 800e254:	4682      	mov	sl, r0
 800e256:	2800      	cmp	r0, #0
 800e258:	d13c      	bne.n	800e2d4 <_dtoa_r+0x2ec>
 800e25a:	4b1b      	ldr	r3, [pc, #108]	@ (800e2c8 <_dtoa_r+0x2e0>)
 800e25c:	4602      	mov	r2, r0
 800e25e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e262:	e6d8      	b.n	800e016 <_dtoa_r+0x2e>
 800e264:	2301      	movs	r3, #1
 800e266:	e7e0      	b.n	800e22a <_dtoa_r+0x242>
 800e268:	2401      	movs	r4, #1
 800e26a:	2300      	movs	r3, #0
 800e26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e26e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e270:	f04f 33ff 	mov.w	r3, #4294967295
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	9307      	str	r3, [sp, #28]
 800e278:	2200      	movs	r2, #0
 800e27a:	2312      	movs	r3, #18
 800e27c:	e7d0      	b.n	800e220 <_dtoa_r+0x238>
 800e27e:	2301      	movs	r3, #1
 800e280:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e282:	e7f5      	b.n	800e270 <_dtoa_r+0x288>
 800e284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	9307      	str	r3, [sp, #28]
 800e28a:	e7d7      	b.n	800e23c <_dtoa_r+0x254>
 800e28c:	3101      	adds	r1, #1
 800e28e:	0052      	lsls	r2, r2, #1
 800e290:	e7d8      	b.n	800e244 <_dtoa_r+0x25c>
 800e292:	bf00      	nop
 800e294:	f3af 8000 	nop.w
 800e298:	636f4361 	.word	0x636f4361
 800e29c:	3fd287a7 	.word	0x3fd287a7
 800e2a0:	8b60c8b3 	.word	0x8b60c8b3
 800e2a4:	3fc68a28 	.word	0x3fc68a28
 800e2a8:	509f79fb 	.word	0x509f79fb
 800e2ac:	3fd34413 	.word	0x3fd34413
 800e2b0:	08010cd1 	.word	0x08010cd1
 800e2b4:	08010ce8 	.word	0x08010ce8
 800e2b8:	7ff00000 	.word	0x7ff00000
 800e2bc:	08010ca1 	.word	0x08010ca1
 800e2c0:	3ff80000 	.word	0x3ff80000
 800e2c4:	08010de0 	.word	0x08010de0
 800e2c8:	08010d40 	.word	0x08010d40
 800e2cc:	08010ccd 	.word	0x08010ccd
 800e2d0:	08010ca0 	.word	0x08010ca0
 800e2d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2d8:	6018      	str	r0, [r3, #0]
 800e2da:	9b07      	ldr	r3, [sp, #28]
 800e2dc:	2b0e      	cmp	r3, #14
 800e2de:	f200 80a4 	bhi.w	800e42a <_dtoa_r+0x442>
 800e2e2:	2c00      	cmp	r4, #0
 800e2e4:	f000 80a1 	beq.w	800e42a <_dtoa_r+0x442>
 800e2e8:	2f00      	cmp	r7, #0
 800e2ea:	dd33      	ble.n	800e354 <_dtoa_r+0x36c>
 800e2ec:	4bad      	ldr	r3, [pc, #692]	@ (800e5a4 <_dtoa_r+0x5bc>)
 800e2ee:	f007 020f 	and.w	r2, r7, #15
 800e2f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2f6:	ed93 7b00 	vldr	d7, [r3]
 800e2fa:	05f8      	lsls	r0, r7, #23
 800e2fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e300:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e304:	d516      	bpl.n	800e334 <_dtoa_r+0x34c>
 800e306:	4ba8      	ldr	r3, [pc, #672]	@ (800e5a8 <_dtoa_r+0x5c0>)
 800e308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e30c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e310:	f7f2 faa4 	bl	800085c <__aeabi_ddiv>
 800e314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e318:	f004 040f 	and.w	r4, r4, #15
 800e31c:	2603      	movs	r6, #3
 800e31e:	4da2      	ldr	r5, [pc, #648]	@ (800e5a8 <_dtoa_r+0x5c0>)
 800e320:	b954      	cbnz	r4, 800e338 <_dtoa_r+0x350>
 800e322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e32a:	f7f2 fa97 	bl	800085c <__aeabi_ddiv>
 800e32e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e332:	e028      	b.n	800e386 <_dtoa_r+0x39e>
 800e334:	2602      	movs	r6, #2
 800e336:	e7f2      	b.n	800e31e <_dtoa_r+0x336>
 800e338:	07e1      	lsls	r1, r4, #31
 800e33a:	d508      	bpl.n	800e34e <_dtoa_r+0x366>
 800e33c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e340:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e344:	f7f2 f960 	bl	8000608 <__aeabi_dmul>
 800e348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e34c:	3601      	adds	r6, #1
 800e34e:	1064      	asrs	r4, r4, #1
 800e350:	3508      	adds	r5, #8
 800e352:	e7e5      	b.n	800e320 <_dtoa_r+0x338>
 800e354:	f000 80d2 	beq.w	800e4fc <_dtoa_r+0x514>
 800e358:	427c      	negs	r4, r7
 800e35a:	4b92      	ldr	r3, [pc, #584]	@ (800e5a4 <_dtoa_r+0x5bc>)
 800e35c:	4d92      	ldr	r5, [pc, #584]	@ (800e5a8 <_dtoa_r+0x5c0>)
 800e35e:	f004 020f 	and.w	r2, r4, #15
 800e362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e36e:	f7f2 f94b 	bl	8000608 <__aeabi_dmul>
 800e372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e376:	1124      	asrs	r4, r4, #4
 800e378:	2300      	movs	r3, #0
 800e37a:	2602      	movs	r6, #2
 800e37c:	2c00      	cmp	r4, #0
 800e37e:	f040 80b2 	bne.w	800e4e6 <_dtoa_r+0x4fe>
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1d3      	bne.n	800e32e <_dtoa_r+0x346>
 800e386:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e388:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f000 80b7 	beq.w	800e500 <_dtoa_r+0x518>
 800e392:	4b86      	ldr	r3, [pc, #536]	@ (800e5ac <_dtoa_r+0x5c4>)
 800e394:	2200      	movs	r2, #0
 800e396:	4620      	mov	r0, r4
 800e398:	4629      	mov	r1, r5
 800e39a:	f7f2 fba7 	bl	8000aec <__aeabi_dcmplt>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	f000 80ae 	beq.w	800e500 <_dtoa_r+0x518>
 800e3a4:	9b07      	ldr	r3, [sp, #28]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f000 80aa 	beq.w	800e500 <_dtoa_r+0x518>
 800e3ac:	9b00      	ldr	r3, [sp, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	dd37      	ble.n	800e422 <_dtoa_r+0x43a>
 800e3b2:	1e7b      	subs	r3, r7, #1
 800e3b4:	9304      	str	r3, [sp, #16]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	4b7d      	ldr	r3, [pc, #500]	@ (800e5b0 <_dtoa_r+0x5c8>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	4629      	mov	r1, r5
 800e3be:	f7f2 f923 	bl	8000608 <__aeabi_dmul>
 800e3c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3c6:	9c00      	ldr	r4, [sp, #0]
 800e3c8:	3601      	adds	r6, #1
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f7f2 f8b2 	bl	8000534 <__aeabi_i2d>
 800e3d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3d4:	f7f2 f918 	bl	8000608 <__aeabi_dmul>
 800e3d8:	4b76      	ldr	r3, [pc, #472]	@ (800e5b4 <_dtoa_r+0x5cc>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f7f1 ff5e 	bl	800029c <__adddf3>
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3e6:	2c00      	cmp	r4, #0
 800e3e8:	f040 808d 	bne.w	800e506 <_dtoa_r+0x51e>
 800e3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f0:	4b71      	ldr	r3, [pc, #452]	@ (800e5b8 <_dtoa_r+0x5d0>)
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f7f1 ff50 	bl	8000298 <__aeabi_dsub>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e400:	462a      	mov	r2, r5
 800e402:	4633      	mov	r3, r6
 800e404:	f7f2 fb90 	bl	8000b28 <__aeabi_dcmpgt>
 800e408:	2800      	cmp	r0, #0
 800e40a:	f040 828b 	bne.w	800e924 <_dtoa_r+0x93c>
 800e40e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e412:	462a      	mov	r2, r5
 800e414:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e418:	f7f2 fb68 	bl	8000aec <__aeabi_dcmplt>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	f040 8128 	bne.w	800e672 <_dtoa_r+0x68a>
 800e422:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e426:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e42a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f2c0 815a 	blt.w	800e6e6 <_dtoa_r+0x6fe>
 800e432:	2f0e      	cmp	r7, #14
 800e434:	f300 8157 	bgt.w	800e6e6 <_dtoa_r+0x6fe>
 800e438:	4b5a      	ldr	r3, [pc, #360]	@ (800e5a4 <_dtoa_r+0x5bc>)
 800e43a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e43e:	ed93 7b00 	vldr	d7, [r3]
 800e442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e444:	2b00      	cmp	r3, #0
 800e446:	ed8d 7b00 	vstr	d7, [sp]
 800e44a:	da03      	bge.n	800e454 <_dtoa_r+0x46c>
 800e44c:	9b07      	ldr	r3, [sp, #28]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f340 8101 	ble.w	800e656 <_dtoa_r+0x66e>
 800e454:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e458:	4656      	mov	r6, sl
 800e45a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e45e:	4620      	mov	r0, r4
 800e460:	4629      	mov	r1, r5
 800e462:	f7f2 f9fb 	bl	800085c <__aeabi_ddiv>
 800e466:	f7f2 fb7f 	bl	8000b68 <__aeabi_d2iz>
 800e46a:	4680      	mov	r8, r0
 800e46c:	f7f2 f862 	bl	8000534 <__aeabi_i2d>
 800e470:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e474:	f7f2 f8c8 	bl	8000608 <__aeabi_dmul>
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4620      	mov	r0, r4
 800e47e:	4629      	mov	r1, r5
 800e480:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e484:	f7f1 ff08 	bl	8000298 <__aeabi_dsub>
 800e488:	f806 4b01 	strb.w	r4, [r6], #1
 800e48c:	9d07      	ldr	r5, [sp, #28]
 800e48e:	eba6 040a 	sub.w	r4, r6, sl
 800e492:	42a5      	cmp	r5, r4
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	f040 8117 	bne.w	800e6ca <_dtoa_r+0x6e2>
 800e49c:	f7f1 fefe 	bl	800029c <__adddf3>
 800e4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	460d      	mov	r5, r1
 800e4a8:	f7f2 fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	f040 80f9 	bne.w	800e6a4 <_dtoa_r+0x6bc>
 800e4b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	f7f2 fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e4be:	b118      	cbz	r0, 800e4c8 <_dtoa_r+0x4e0>
 800e4c0:	f018 0f01 	tst.w	r8, #1
 800e4c4:	f040 80ee 	bne.w	800e6a4 <_dtoa_r+0x6bc>
 800e4c8:	4649      	mov	r1, r9
 800e4ca:	4658      	mov	r0, fp
 800e4cc:	f000 fc90 	bl	800edf0 <_Bfree>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	7033      	strb	r3, [r6, #0]
 800e4d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e4d6:	3701      	adds	r7, #1
 800e4d8:	601f      	str	r7, [r3, #0]
 800e4da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f000 831d 	beq.w	800eb1c <_dtoa_r+0xb34>
 800e4e2:	601e      	str	r6, [r3, #0]
 800e4e4:	e31a      	b.n	800eb1c <_dtoa_r+0xb34>
 800e4e6:	07e2      	lsls	r2, r4, #31
 800e4e8:	d505      	bpl.n	800e4f6 <_dtoa_r+0x50e>
 800e4ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4ee:	f7f2 f88b 	bl	8000608 <__aeabi_dmul>
 800e4f2:	3601      	adds	r6, #1
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	1064      	asrs	r4, r4, #1
 800e4f8:	3508      	adds	r5, #8
 800e4fa:	e73f      	b.n	800e37c <_dtoa_r+0x394>
 800e4fc:	2602      	movs	r6, #2
 800e4fe:	e742      	b.n	800e386 <_dtoa_r+0x39e>
 800e500:	9c07      	ldr	r4, [sp, #28]
 800e502:	9704      	str	r7, [sp, #16]
 800e504:	e761      	b.n	800e3ca <_dtoa_r+0x3e2>
 800e506:	4b27      	ldr	r3, [pc, #156]	@ (800e5a4 <_dtoa_r+0x5bc>)
 800e508:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e50a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e50e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e512:	4454      	add	r4, sl
 800e514:	2900      	cmp	r1, #0
 800e516:	d053      	beq.n	800e5c0 <_dtoa_r+0x5d8>
 800e518:	4928      	ldr	r1, [pc, #160]	@ (800e5bc <_dtoa_r+0x5d4>)
 800e51a:	2000      	movs	r0, #0
 800e51c:	f7f2 f99e 	bl	800085c <__aeabi_ddiv>
 800e520:	4633      	mov	r3, r6
 800e522:	462a      	mov	r2, r5
 800e524:	f7f1 feb8 	bl	8000298 <__aeabi_dsub>
 800e528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e52c:	4656      	mov	r6, sl
 800e52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e532:	f7f2 fb19 	bl	8000b68 <__aeabi_d2iz>
 800e536:	4605      	mov	r5, r0
 800e538:	f7f1 fffc 	bl	8000534 <__aeabi_i2d>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e544:	f7f1 fea8 	bl	8000298 <__aeabi_dsub>
 800e548:	3530      	adds	r5, #48	@ 0x30
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e552:	f806 5b01 	strb.w	r5, [r6], #1
 800e556:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e55a:	f7f2 fac7 	bl	8000aec <__aeabi_dcmplt>
 800e55e:	2800      	cmp	r0, #0
 800e560:	d171      	bne.n	800e646 <_dtoa_r+0x65e>
 800e562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e566:	4911      	ldr	r1, [pc, #68]	@ (800e5ac <_dtoa_r+0x5c4>)
 800e568:	2000      	movs	r0, #0
 800e56a:	f7f1 fe95 	bl	8000298 <__aeabi_dsub>
 800e56e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e572:	f7f2 fabb 	bl	8000aec <__aeabi_dcmplt>
 800e576:	2800      	cmp	r0, #0
 800e578:	f040 8095 	bne.w	800e6a6 <_dtoa_r+0x6be>
 800e57c:	42a6      	cmp	r6, r4
 800e57e:	f43f af50 	beq.w	800e422 <_dtoa_r+0x43a>
 800e582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e586:	4b0a      	ldr	r3, [pc, #40]	@ (800e5b0 <_dtoa_r+0x5c8>)
 800e588:	2200      	movs	r2, #0
 800e58a:	f7f2 f83d 	bl	8000608 <__aeabi_dmul>
 800e58e:	4b08      	ldr	r3, [pc, #32]	@ (800e5b0 <_dtoa_r+0x5c8>)
 800e590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e594:	2200      	movs	r2, #0
 800e596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e59a:	f7f2 f835 	bl	8000608 <__aeabi_dmul>
 800e59e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5a2:	e7c4      	b.n	800e52e <_dtoa_r+0x546>
 800e5a4:	08010de0 	.word	0x08010de0
 800e5a8:	08010db8 	.word	0x08010db8
 800e5ac:	3ff00000 	.word	0x3ff00000
 800e5b0:	40240000 	.word	0x40240000
 800e5b4:	401c0000 	.word	0x401c0000
 800e5b8:	40140000 	.word	0x40140000
 800e5bc:	3fe00000 	.word	0x3fe00000
 800e5c0:	4631      	mov	r1, r6
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	f7f2 f820 	bl	8000608 <__aeabi_dmul>
 800e5c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e5cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800e5ce:	4656      	mov	r6, sl
 800e5d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5d4:	f7f2 fac8 	bl	8000b68 <__aeabi_d2iz>
 800e5d8:	4605      	mov	r5, r0
 800e5da:	f7f1 ffab 	bl	8000534 <__aeabi_i2d>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5e6:	f7f1 fe57 	bl	8000298 <__aeabi_dsub>
 800e5ea:	3530      	adds	r5, #48	@ 0x30
 800e5ec:	f806 5b01 	strb.w	r5, [r6], #1
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	42a6      	cmp	r6, r4
 800e5f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5fa:	f04f 0200 	mov.w	r2, #0
 800e5fe:	d124      	bne.n	800e64a <_dtoa_r+0x662>
 800e600:	4bac      	ldr	r3, [pc, #688]	@ (800e8b4 <_dtoa_r+0x8cc>)
 800e602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e606:	f7f1 fe49 	bl	800029c <__adddf3>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e612:	f7f2 fa89 	bl	8000b28 <__aeabi_dcmpgt>
 800e616:	2800      	cmp	r0, #0
 800e618:	d145      	bne.n	800e6a6 <_dtoa_r+0x6be>
 800e61a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e61e:	49a5      	ldr	r1, [pc, #660]	@ (800e8b4 <_dtoa_r+0x8cc>)
 800e620:	2000      	movs	r0, #0
 800e622:	f7f1 fe39 	bl	8000298 <__aeabi_dsub>
 800e626:	4602      	mov	r2, r0
 800e628:	460b      	mov	r3, r1
 800e62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e62e:	f7f2 fa5d 	bl	8000aec <__aeabi_dcmplt>
 800e632:	2800      	cmp	r0, #0
 800e634:	f43f aef5 	beq.w	800e422 <_dtoa_r+0x43a>
 800e638:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e63a:	1e73      	subs	r3, r6, #1
 800e63c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e63e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e642:	2b30      	cmp	r3, #48	@ 0x30
 800e644:	d0f8      	beq.n	800e638 <_dtoa_r+0x650>
 800e646:	9f04      	ldr	r7, [sp, #16]
 800e648:	e73e      	b.n	800e4c8 <_dtoa_r+0x4e0>
 800e64a:	4b9b      	ldr	r3, [pc, #620]	@ (800e8b8 <_dtoa_r+0x8d0>)
 800e64c:	f7f1 ffdc 	bl	8000608 <__aeabi_dmul>
 800e650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e654:	e7bc      	b.n	800e5d0 <_dtoa_r+0x5e8>
 800e656:	d10c      	bne.n	800e672 <_dtoa_r+0x68a>
 800e658:	4b98      	ldr	r3, [pc, #608]	@ (800e8bc <_dtoa_r+0x8d4>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e660:	f7f1 ffd2 	bl	8000608 <__aeabi_dmul>
 800e664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e668:	f7f2 fa54 	bl	8000b14 <__aeabi_dcmpge>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	f000 8157 	beq.w	800e920 <_dtoa_r+0x938>
 800e672:	2400      	movs	r4, #0
 800e674:	4625      	mov	r5, r4
 800e676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e678:	43db      	mvns	r3, r3
 800e67a:	9304      	str	r3, [sp, #16]
 800e67c:	4656      	mov	r6, sl
 800e67e:	2700      	movs	r7, #0
 800e680:	4621      	mov	r1, r4
 800e682:	4658      	mov	r0, fp
 800e684:	f000 fbb4 	bl	800edf0 <_Bfree>
 800e688:	2d00      	cmp	r5, #0
 800e68a:	d0dc      	beq.n	800e646 <_dtoa_r+0x65e>
 800e68c:	b12f      	cbz	r7, 800e69a <_dtoa_r+0x6b2>
 800e68e:	42af      	cmp	r7, r5
 800e690:	d003      	beq.n	800e69a <_dtoa_r+0x6b2>
 800e692:	4639      	mov	r1, r7
 800e694:	4658      	mov	r0, fp
 800e696:	f000 fbab 	bl	800edf0 <_Bfree>
 800e69a:	4629      	mov	r1, r5
 800e69c:	4658      	mov	r0, fp
 800e69e:	f000 fba7 	bl	800edf0 <_Bfree>
 800e6a2:	e7d0      	b.n	800e646 <_dtoa_r+0x65e>
 800e6a4:	9704      	str	r7, [sp, #16]
 800e6a6:	4633      	mov	r3, r6
 800e6a8:	461e      	mov	r6, r3
 800e6aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6ae:	2a39      	cmp	r2, #57	@ 0x39
 800e6b0:	d107      	bne.n	800e6c2 <_dtoa_r+0x6da>
 800e6b2:	459a      	cmp	sl, r3
 800e6b4:	d1f8      	bne.n	800e6a8 <_dtoa_r+0x6c0>
 800e6b6:	9a04      	ldr	r2, [sp, #16]
 800e6b8:	3201      	adds	r2, #1
 800e6ba:	9204      	str	r2, [sp, #16]
 800e6bc:	2230      	movs	r2, #48	@ 0x30
 800e6be:	f88a 2000 	strb.w	r2, [sl]
 800e6c2:	781a      	ldrb	r2, [r3, #0]
 800e6c4:	3201      	adds	r2, #1
 800e6c6:	701a      	strb	r2, [r3, #0]
 800e6c8:	e7bd      	b.n	800e646 <_dtoa_r+0x65e>
 800e6ca:	4b7b      	ldr	r3, [pc, #492]	@ (800e8b8 <_dtoa_r+0x8d0>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	f7f1 ff9b 	bl	8000608 <__aeabi_dmul>
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	460d      	mov	r5, r1
 800e6da:	f7f2 f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f43f aebb 	beq.w	800e45a <_dtoa_r+0x472>
 800e6e4:	e6f0      	b.n	800e4c8 <_dtoa_r+0x4e0>
 800e6e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e6e8:	2a00      	cmp	r2, #0
 800e6ea:	f000 80db 	beq.w	800e8a4 <_dtoa_r+0x8bc>
 800e6ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6f0:	2a01      	cmp	r2, #1
 800e6f2:	f300 80bf 	bgt.w	800e874 <_dtoa_r+0x88c>
 800e6f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e6f8:	2a00      	cmp	r2, #0
 800e6fa:	f000 80b7 	beq.w	800e86c <_dtoa_r+0x884>
 800e6fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e702:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e704:	4646      	mov	r6, r8
 800e706:	9a08      	ldr	r2, [sp, #32]
 800e708:	2101      	movs	r1, #1
 800e70a:	441a      	add	r2, r3
 800e70c:	4658      	mov	r0, fp
 800e70e:	4498      	add	r8, r3
 800e710:	9208      	str	r2, [sp, #32]
 800e712:	f000 fc21 	bl	800ef58 <__i2b>
 800e716:	4605      	mov	r5, r0
 800e718:	b15e      	cbz	r6, 800e732 <_dtoa_r+0x74a>
 800e71a:	9b08      	ldr	r3, [sp, #32]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	dd08      	ble.n	800e732 <_dtoa_r+0x74a>
 800e720:	42b3      	cmp	r3, r6
 800e722:	9a08      	ldr	r2, [sp, #32]
 800e724:	bfa8      	it	ge
 800e726:	4633      	movge	r3, r6
 800e728:	eba8 0803 	sub.w	r8, r8, r3
 800e72c:	1af6      	subs	r6, r6, r3
 800e72e:	1ad3      	subs	r3, r2, r3
 800e730:	9308      	str	r3, [sp, #32]
 800e732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e734:	b1f3      	cbz	r3, 800e774 <_dtoa_r+0x78c>
 800e736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 80b7 	beq.w	800e8ac <_dtoa_r+0x8c4>
 800e73e:	b18c      	cbz	r4, 800e764 <_dtoa_r+0x77c>
 800e740:	4629      	mov	r1, r5
 800e742:	4622      	mov	r2, r4
 800e744:	4658      	mov	r0, fp
 800e746:	f000 fcc7 	bl	800f0d8 <__pow5mult>
 800e74a:	464a      	mov	r2, r9
 800e74c:	4601      	mov	r1, r0
 800e74e:	4605      	mov	r5, r0
 800e750:	4658      	mov	r0, fp
 800e752:	f000 fc17 	bl	800ef84 <__multiply>
 800e756:	4649      	mov	r1, r9
 800e758:	9004      	str	r0, [sp, #16]
 800e75a:	4658      	mov	r0, fp
 800e75c:	f000 fb48 	bl	800edf0 <_Bfree>
 800e760:	9b04      	ldr	r3, [sp, #16]
 800e762:	4699      	mov	r9, r3
 800e764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e766:	1b1a      	subs	r2, r3, r4
 800e768:	d004      	beq.n	800e774 <_dtoa_r+0x78c>
 800e76a:	4649      	mov	r1, r9
 800e76c:	4658      	mov	r0, fp
 800e76e:	f000 fcb3 	bl	800f0d8 <__pow5mult>
 800e772:	4681      	mov	r9, r0
 800e774:	2101      	movs	r1, #1
 800e776:	4658      	mov	r0, fp
 800e778:	f000 fbee 	bl	800ef58 <__i2b>
 800e77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e77e:	4604      	mov	r4, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 81cf 	beq.w	800eb24 <_dtoa_r+0xb3c>
 800e786:	461a      	mov	r2, r3
 800e788:	4601      	mov	r1, r0
 800e78a:	4658      	mov	r0, fp
 800e78c:	f000 fca4 	bl	800f0d8 <__pow5mult>
 800e790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e792:	2b01      	cmp	r3, #1
 800e794:	4604      	mov	r4, r0
 800e796:	f300 8095 	bgt.w	800e8c4 <_dtoa_r+0x8dc>
 800e79a:	9b02      	ldr	r3, [sp, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f040 8087 	bne.w	800e8b0 <_dtoa_r+0x8c8>
 800e7a2:	9b03      	ldr	r3, [sp, #12]
 800e7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f040 8089 	bne.w	800e8c0 <_dtoa_r+0x8d8>
 800e7ae:	9b03      	ldr	r3, [sp, #12]
 800e7b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7b4:	0d1b      	lsrs	r3, r3, #20
 800e7b6:	051b      	lsls	r3, r3, #20
 800e7b8:	b12b      	cbz	r3, 800e7c6 <_dtoa_r+0x7de>
 800e7ba:	9b08      	ldr	r3, [sp, #32]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	9308      	str	r3, [sp, #32]
 800e7c0:	f108 0801 	add.w	r8, r8, #1
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f000 81b0 	beq.w	800eb30 <_dtoa_r+0xb48>
 800e7d0:	6923      	ldr	r3, [r4, #16]
 800e7d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7d6:	6918      	ldr	r0, [r3, #16]
 800e7d8:	f000 fb72 	bl	800eec0 <__hi0bits>
 800e7dc:	f1c0 0020 	rsb	r0, r0, #32
 800e7e0:	9b08      	ldr	r3, [sp, #32]
 800e7e2:	4418      	add	r0, r3
 800e7e4:	f010 001f 	ands.w	r0, r0, #31
 800e7e8:	d077      	beq.n	800e8da <_dtoa_r+0x8f2>
 800e7ea:	f1c0 0320 	rsb	r3, r0, #32
 800e7ee:	2b04      	cmp	r3, #4
 800e7f0:	dd6b      	ble.n	800e8ca <_dtoa_r+0x8e2>
 800e7f2:	9b08      	ldr	r3, [sp, #32]
 800e7f4:	f1c0 001c 	rsb	r0, r0, #28
 800e7f8:	4403      	add	r3, r0
 800e7fa:	4480      	add	r8, r0
 800e7fc:	4406      	add	r6, r0
 800e7fe:	9308      	str	r3, [sp, #32]
 800e800:	f1b8 0f00 	cmp.w	r8, #0
 800e804:	dd05      	ble.n	800e812 <_dtoa_r+0x82a>
 800e806:	4649      	mov	r1, r9
 800e808:	4642      	mov	r2, r8
 800e80a:	4658      	mov	r0, fp
 800e80c:	f000 fcbe 	bl	800f18c <__lshift>
 800e810:	4681      	mov	r9, r0
 800e812:	9b08      	ldr	r3, [sp, #32]
 800e814:	2b00      	cmp	r3, #0
 800e816:	dd05      	ble.n	800e824 <_dtoa_r+0x83c>
 800e818:	4621      	mov	r1, r4
 800e81a:	461a      	mov	r2, r3
 800e81c:	4658      	mov	r0, fp
 800e81e:	f000 fcb5 	bl	800f18c <__lshift>
 800e822:	4604      	mov	r4, r0
 800e824:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e826:	2b00      	cmp	r3, #0
 800e828:	d059      	beq.n	800e8de <_dtoa_r+0x8f6>
 800e82a:	4621      	mov	r1, r4
 800e82c:	4648      	mov	r0, r9
 800e82e:	f000 fd19 	bl	800f264 <__mcmp>
 800e832:	2800      	cmp	r0, #0
 800e834:	da53      	bge.n	800e8de <_dtoa_r+0x8f6>
 800e836:	1e7b      	subs	r3, r7, #1
 800e838:	9304      	str	r3, [sp, #16]
 800e83a:	4649      	mov	r1, r9
 800e83c:	2300      	movs	r3, #0
 800e83e:	220a      	movs	r2, #10
 800e840:	4658      	mov	r0, fp
 800e842:	f000 faf7 	bl	800ee34 <__multadd>
 800e846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e848:	4681      	mov	r9, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 8172 	beq.w	800eb34 <_dtoa_r+0xb4c>
 800e850:	2300      	movs	r3, #0
 800e852:	4629      	mov	r1, r5
 800e854:	220a      	movs	r2, #10
 800e856:	4658      	mov	r0, fp
 800e858:	f000 faec 	bl	800ee34 <__multadd>
 800e85c:	9b00      	ldr	r3, [sp, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	4605      	mov	r5, r0
 800e862:	dc67      	bgt.n	800e934 <_dtoa_r+0x94c>
 800e864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e866:	2b02      	cmp	r3, #2
 800e868:	dc41      	bgt.n	800e8ee <_dtoa_r+0x906>
 800e86a:	e063      	b.n	800e934 <_dtoa_r+0x94c>
 800e86c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e86e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e872:	e746      	b.n	800e702 <_dtoa_r+0x71a>
 800e874:	9b07      	ldr	r3, [sp, #28]
 800e876:	1e5c      	subs	r4, r3, #1
 800e878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e87a:	42a3      	cmp	r3, r4
 800e87c:	bfbf      	itttt	lt
 800e87e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e880:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e882:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e884:	1ae3      	sublt	r3, r4, r3
 800e886:	bfb4      	ite	lt
 800e888:	18d2      	addlt	r2, r2, r3
 800e88a:	1b1c      	subge	r4, r3, r4
 800e88c:	9b07      	ldr	r3, [sp, #28]
 800e88e:	bfbc      	itt	lt
 800e890:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e892:	2400      	movlt	r4, #0
 800e894:	2b00      	cmp	r3, #0
 800e896:	bfb5      	itete	lt
 800e898:	eba8 0603 	sublt.w	r6, r8, r3
 800e89c:	9b07      	ldrge	r3, [sp, #28]
 800e89e:	2300      	movlt	r3, #0
 800e8a0:	4646      	movge	r6, r8
 800e8a2:	e730      	b.n	800e706 <_dtoa_r+0x71e>
 800e8a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e8a8:	4646      	mov	r6, r8
 800e8aa:	e735      	b.n	800e718 <_dtoa_r+0x730>
 800e8ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8ae:	e75c      	b.n	800e76a <_dtoa_r+0x782>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	e788      	b.n	800e7c6 <_dtoa_r+0x7de>
 800e8b4:	3fe00000 	.word	0x3fe00000
 800e8b8:	40240000 	.word	0x40240000
 800e8bc:	40140000 	.word	0x40140000
 800e8c0:	9b02      	ldr	r3, [sp, #8]
 800e8c2:	e780      	b.n	800e7c6 <_dtoa_r+0x7de>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8c8:	e782      	b.n	800e7d0 <_dtoa_r+0x7e8>
 800e8ca:	d099      	beq.n	800e800 <_dtoa_r+0x818>
 800e8cc:	9a08      	ldr	r2, [sp, #32]
 800e8ce:	331c      	adds	r3, #28
 800e8d0:	441a      	add	r2, r3
 800e8d2:	4498      	add	r8, r3
 800e8d4:	441e      	add	r6, r3
 800e8d6:	9208      	str	r2, [sp, #32]
 800e8d8:	e792      	b.n	800e800 <_dtoa_r+0x818>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	e7f6      	b.n	800e8cc <_dtoa_r+0x8e4>
 800e8de:	9b07      	ldr	r3, [sp, #28]
 800e8e0:	9704      	str	r7, [sp, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	dc20      	bgt.n	800e928 <_dtoa_r+0x940>
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	dd1e      	ble.n	800e92c <_dtoa_r+0x944>
 800e8ee:	9b00      	ldr	r3, [sp, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f47f aec0 	bne.w	800e676 <_dtoa_r+0x68e>
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	2205      	movs	r2, #5
 800e8fa:	4658      	mov	r0, fp
 800e8fc:	f000 fa9a 	bl	800ee34 <__multadd>
 800e900:	4601      	mov	r1, r0
 800e902:	4604      	mov	r4, r0
 800e904:	4648      	mov	r0, r9
 800e906:	f000 fcad 	bl	800f264 <__mcmp>
 800e90a:	2800      	cmp	r0, #0
 800e90c:	f77f aeb3 	ble.w	800e676 <_dtoa_r+0x68e>
 800e910:	4656      	mov	r6, sl
 800e912:	2331      	movs	r3, #49	@ 0x31
 800e914:	f806 3b01 	strb.w	r3, [r6], #1
 800e918:	9b04      	ldr	r3, [sp, #16]
 800e91a:	3301      	adds	r3, #1
 800e91c:	9304      	str	r3, [sp, #16]
 800e91e:	e6ae      	b.n	800e67e <_dtoa_r+0x696>
 800e920:	9c07      	ldr	r4, [sp, #28]
 800e922:	9704      	str	r7, [sp, #16]
 800e924:	4625      	mov	r5, r4
 800e926:	e7f3      	b.n	800e910 <_dtoa_r+0x928>
 800e928:	9b07      	ldr	r3, [sp, #28]
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f000 8104 	beq.w	800eb3c <_dtoa_r+0xb54>
 800e934:	2e00      	cmp	r6, #0
 800e936:	dd05      	ble.n	800e944 <_dtoa_r+0x95c>
 800e938:	4629      	mov	r1, r5
 800e93a:	4632      	mov	r2, r6
 800e93c:	4658      	mov	r0, fp
 800e93e:	f000 fc25 	bl	800f18c <__lshift>
 800e942:	4605      	mov	r5, r0
 800e944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e946:	2b00      	cmp	r3, #0
 800e948:	d05a      	beq.n	800ea00 <_dtoa_r+0xa18>
 800e94a:	6869      	ldr	r1, [r5, #4]
 800e94c:	4658      	mov	r0, fp
 800e94e:	f000 fa0f 	bl	800ed70 <_Balloc>
 800e952:	4606      	mov	r6, r0
 800e954:	b928      	cbnz	r0, 800e962 <_dtoa_r+0x97a>
 800e956:	4b84      	ldr	r3, [pc, #528]	@ (800eb68 <_dtoa_r+0xb80>)
 800e958:	4602      	mov	r2, r0
 800e95a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e95e:	f7ff bb5a 	b.w	800e016 <_dtoa_r+0x2e>
 800e962:	692a      	ldr	r2, [r5, #16]
 800e964:	3202      	adds	r2, #2
 800e966:	0092      	lsls	r2, r2, #2
 800e968:	f105 010c 	add.w	r1, r5, #12
 800e96c:	300c      	adds	r0, #12
 800e96e:	f7ff faa2 	bl	800deb6 <memcpy>
 800e972:	2201      	movs	r2, #1
 800e974:	4631      	mov	r1, r6
 800e976:	4658      	mov	r0, fp
 800e978:	f000 fc08 	bl	800f18c <__lshift>
 800e97c:	f10a 0301 	add.w	r3, sl, #1
 800e980:	9307      	str	r3, [sp, #28]
 800e982:	9b00      	ldr	r3, [sp, #0]
 800e984:	4453      	add	r3, sl
 800e986:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e988:	9b02      	ldr	r3, [sp, #8]
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	462f      	mov	r7, r5
 800e990:	930a      	str	r3, [sp, #40]	@ 0x28
 800e992:	4605      	mov	r5, r0
 800e994:	9b07      	ldr	r3, [sp, #28]
 800e996:	4621      	mov	r1, r4
 800e998:	3b01      	subs	r3, #1
 800e99a:	4648      	mov	r0, r9
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	f7ff fa98 	bl	800ded2 <quorem>
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	9002      	str	r0, [sp, #8]
 800e9a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e9aa:	4648      	mov	r0, r9
 800e9ac:	f000 fc5a 	bl	800f264 <__mcmp>
 800e9b0:	462a      	mov	r2, r5
 800e9b2:	9008      	str	r0, [sp, #32]
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	4658      	mov	r0, fp
 800e9b8:	f000 fc70 	bl	800f29c <__mdiff>
 800e9bc:	68c2      	ldr	r2, [r0, #12]
 800e9be:	4606      	mov	r6, r0
 800e9c0:	bb02      	cbnz	r2, 800ea04 <_dtoa_r+0xa1c>
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	4648      	mov	r0, r9
 800e9c6:	f000 fc4d 	bl	800f264 <__mcmp>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4658      	mov	r0, fp
 800e9d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e9d2:	f000 fa0d 	bl	800edf0 <_Bfree>
 800e9d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9da:	9e07      	ldr	r6, [sp, #28]
 800e9dc:	ea43 0102 	orr.w	r1, r3, r2
 800e9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9e2:	4319      	orrs	r1, r3
 800e9e4:	d110      	bne.n	800ea08 <_dtoa_r+0xa20>
 800e9e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9ea:	d029      	beq.n	800ea40 <_dtoa_r+0xa58>
 800e9ec:	9b08      	ldr	r3, [sp, #32]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	dd02      	ble.n	800e9f8 <_dtoa_r+0xa10>
 800e9f2:	9b02      	ldr	r3, [sp, #8]
 800e9f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e9f8:	9b00      	ldr	r3, [sp, #0]
 800e9fa:	f883 8000 	strb.w	r8, [r3]
 800e9fe:	e63f      	b.n	800e680 <_dtoa_r+0x698>
 800ea00:	4628      	mov	r0, r5
 800ea02:	e7bb      	b.n	800e97c <_dtoa_r+0x994>
 800ea04:	2201      	movs	r2, #1
 800ea06:	e7e1      	b.n	800e9cc <_dtoa_r+0x9e4>
 800ea08:	9b08      	ldr	r3, [sp, #32]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	db04      	blt.n	800ea18 <_dtoa_r+0xa30>
 800ea0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea10:	430b      	orrs	r3, r1
 800ea12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ea14:	430b      	orrs	r3, r1
 800ea16:	d120      	bne.n	800ea5a <_dtoa_r+0xa72>
 800ea18:	2a00      	cmp	r2, #0
 800ea1a:	dded      	ble.n	800e9f8 <_dtoa_r+0xa10>
 800ea1c:	4649      	mov	r1, r9
 800ea1e:	2201      	movs	r2, #1
 800ea20:	4658      	mov	r0, fp
 800ea22:	f000 fbb3 	bl	800f18c <__lshift>
 800ea26:	4621      	mov	r1, r4
 800ea28:	4681      	mov	r9, r0
 800ea2a:	f000 fc1b 	bl	800f264 <__mcmp>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	dc03      	bgt.n	800ea3a <_dtoa_r+0xa52>
 800ea32:	d1e1      	bne.n	800e9f8 <_dtoa_r+0xa10>
 800ea34:	f018 0f01 	tst.w	r8, #1
 800ea38:	d0de      	beq.n	800e9f8 <_dtoa_r+0xa10>
 800ea3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea3e:	d1d8      	bne.n	800e9f2 <_dtoa_r+0xa0a>
 800ea40:	9a00      	ldr	r2, [sp, #0]
 800ea42:	2339      	movs	r3, #57	@ 0x39
 800ea44:	7013      	strb	r3, [r2, #0]
 800ea46:	4633      	mov	r3, r6
 800ea48:	461e      	mov	r6, r3
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea50:	2a39      	cmp	r2, #57	@ 0x39
 800ea52:	d052      	beq.n	800eafa <_dtoa_r+0xb12>
 800ea54:	3201      	adds	r2, #1
 800ea56:	701a      	strb	r2, [r3, #0]
 800ea58:	e612      	b.n	800e680 <_dtoa_r+0x698>
 800ea5a:	2a00      	cmp	r2, #0
 800ea5c:	dd07      	ble.n	800ea6e <_dtoa_r+0xa86>
 800ea5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea62:	d0ed      	beq.n	800ea40 <_dtoa_r+0xa58>
 800ea64:	9a00      	ldr	r2, [sp, #0]
 800ea66:	f108 0301 	add.w	r3, r8, #1
 800ea6a:	7013      	strb	r3, [r2, #0]
 800ea6c:	e608      	b.n	800e680 <_dtoa_r+0x698>
 800ea6e:	9b07      	ldr	r3, [sp, #28]
 800ea70:	9a07      	ldr	r2, [sp, #28]
 800ea72:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ea76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d028      	beq.n	800eace <_dtoa_r+0xae6>
 800ea7c:	4649      	mov	r1, r9
 800ea7e:	2300      	movs	r3, #0
 800ea80:	220a      	movs	r2, #10
 800ea82:	4658      	mov	r0, fp
 800ea84:	f000 f9d6 	bl	800ee34 <__multadd>
 800ea88:	42af      	cmp	r7, r5
 800ea8a:	4681      	mov	r9, r0
 800ea8c:	f04f 0300 	mov.w	r3, #0
 800ea90:	f04f 020a 	mov.w	r2, #10
 800ea94:	4639      	mov	r1, r7
 800ea96:	4658      	mov	r0, fp
 800ea98:	d107      	bne.n	800eaaa <_dtoa_r+0xac2>
 800ea9a:	f000 f9cb 	bl	800ee34 <__multadd>
 800ea9e:	4607      	mov	r7, r0
 800eaa0:	4605      	mov	r5, r0
 800eaa2:	9b07      	ldr	r3, [sp, #28]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	9307      	str	r3, [sp, #28]
 800eaa8:	e774      	b.n	800e994 <_dtoa_r+0x9ac>
 800eaaa:	f000 f9c3 	bl	800ee34 <__multadd>
 800eaae:	4629      	mov	r1, r5
 800eab0:	4607      	mov	r7, r0
 800eab2:	2300      	movs	r3, #0
 800eab4:	220a      	movs	r2, #10
 800eab6:	4658      	mov	r0, fp
 800eab8:	f000 f9bc 	bl	800ee34 <__multadd>
 800eabc:	4605      	mov	r5, r0
 800eabe:	e7f0      	b.n	800eaa2 <_dtoa_r+0xaba>
 800eac0:	9b00      	ldr	r3, [sp, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	bfcc      	ite	gt
 800eac6:	461e      	movgt	r6, r3
 800eac8:	2601      	movle	r6, #1
 800eaca:	4456      	add	r6, sl
 800eacc:	2700      	movs	r7, #0
 800eace:	4649      	mov	r1, r9
 800ead0:	2201      	movs	r2, #1
 800ead2:	4658      	mov	r0, fp
 800ead4:	f000 fb5a 	bl	800f18c <__lshift>
 800ead8:	4621      	mov	r1, r4
 800eada:	4681      	mov	r9, r0
 800eadc:	f000 fbc2 	bl	800f264 <__mcmp>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	dcb0      	bgt.n	800ea46 <_dtoa_r+0xa5e>
 800eae4:	d102      	bne.n	800eaec <_dtoa_r+0xb04>
 800eae6:	f018 0f01 	tst.w	r8, #1
 800eaea:	d1ac      	bne.n	800ea46 <_dtoa_r+0xa5e>
 800eaec:	4633      	mov	r3, r6
 800eaee:	461e      	mov	r6, r3
 800eaf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eaf4:	2a30      	cmp	r2, #48	@ 0x30
 800eaf6:	d0fa      	beq.n	800eaee <_dtoa_r+0xb06>
 800eaf8:	e5c2      	b.n	800e680 <_dtoa_r+0x698>
 800eafa:	459a      	cmp	sl, r3
 800eafc:	d1a4      	bne.n	800ea48 <_dtoa_r+0xa60>
 800eafe:	9b04      	ldr	r3, [sp, #16]
 800eb00:	3301      	adds	r3, #1
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	2331      	movs	r3, #49	@ 0x31
 800eb06:	f88a 3000 	strb.w	r3, [sl]
 800eb0a:	e5b9      	b.n	800e680 <_dtoa_r+0x698>
 800eb0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eb6c <_dtoa_r+0xb84>
 800eb12:	b11b      	cbz	r3, 800eb1c <_dtoa_r+0xb34>
 800eb14:	f10a 0308 	add.w	r3, sl, #8
 800eb18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eb1a:	6013      	str	r3, [r2, #0]
 800eb1c:	4650      	mov	r0, sl
 800eb1e:	b019      	add	sp, #100	@ 0x64
 800eb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	f77f ae37 	ble.w	800e79a <_dtoa_r+0x7b2>
 800eb2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb30:	2001      	movs	r0, #1
 800eb32:	e655      	b.n	800e7e0 <_dtoa_r+0x7f8>
 800eb34:	9b00      	ldr	r3, [sp, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f77f aed6 	ble.w	800e8e8 <_dtoa_r+0x900>
 800eb3c:	4656      	mov	r6, sl
 800eb3e:	4621      	mov	r1, r4
 800eb40:	4648      	mov	r0, r9
 800eb42:	f7ff f9c6 	bl	800ded2 <quorem>
 800eb46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb4a:	f806 8b01 	strb.w	r8, [r6], #1
 800eb4e:	9b00      	ldr	r3, [sp, #0]
 800eb50:	eba6 020a 	sub.w	r2, r6, sl
 800eb54:	4293      	cmp	r3, r2
 800eb56:	ddb3      	ble.n	800eac0 <_dtoa_r+0xad8>
 800eb58:	4649      	mov	r1, r9
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	220a      	movs	r2, #10
 800eb5e:	4658      	mov	r0, fp
 800eb60:	f000 f968 	bl	800ee34 <__multadd>
 800eb64:	4681      	mov	r9, r0
 800eb66:	e7ea      	b.n	800eb3e <_dtoa_r+0xb56>
 800eb68:	08010d40 	.word	0x08010d40
 800eb6c:	08010cc4 	.word	0x08010cc4

0800eb70 <_free_r>:
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	4605      	mov	r5, r0
 800eb74:	2900      	cmp	r1, #0
 800eb76:	d041      	beq.n	800ebfc <_free_r+0x8c>
 800eb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb7c:	1f0c      	subs	r4, r1, #4
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	bfb8      	it	lt
 800eb82:	18e4      	addlt	r4, r4, r3
 800eb84:	f000 f8e8 	bl	800ed58 <__malloc_lock>
 800eb88:	4a1d      	ldr	r2, [pc, #116]	@ (800ec00 <_free_r+0x90>)
 800eb8a:	6813      	ldr	r3, [r2, #0]
 800eb8c:	b933      	cbnz	r3, 800eb9c <_free_r+0x2c>
 800eb8e:	6063      	str	r3, [r4, #4]
 800eb90:	6014      	str	r4, [r2, #0]
 800eb92:	4628      	mov	r0, r5
 800eb94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb98:	f000 b8e4 	b.w	800ed64 <__malloc_unlock>
 800eb9c:	42a3      	cmp	r3, r4
 800eb9e:	d908      	bls.n	800ebb2 <_free_r+0x42>
 800eba0:	6820      	ldr	r0, [r4, #0]
 800eba2:	1821      	adds	r1, r4, r0
 800eba4:	428b      	cmp	r3, r1
 800eba6:	bf01      	itttt	eq
 800eba8:	6819      	ldreq	r1, [r3, #0]
 800ebaa:	685b      	ldreq	r3, [r3, #4]
 800ebac:	1809      	addeq	r1, r1, r0
 800ebae:	6021      	streq	r1, [r4, #0]
 800ebb0:	e7ed      	b.n	800eb8e <_free_r+0x1e>
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	b10b      	cbz	r3, 800ebbc <_free_r+0x4c>
 800ebb8:	42a3      	cmp	r3, r4
 800ebba:	d9fa      	bls.n	800ebb2 <_free_r+0x42>
 800ebbc:	6811      	ldr	r1, [r2, #0]
 800ebbe:	1850      	adds	r0, r2, r1
 800ebc0:	42a0      	cmp	r0, r4
 800ebc2:	d10b      	bne.n	800ebdc <_free_r+0x6c>
 800ebc4:	6820      	ldr	r0, [r4, #0]
 800ebc6:	4401      	add	r1, r0
 800ebc8:	1850      	adds	r0, r2, r1
 800ebca:	4283      	cmp	r3, r0
 800ebcc:	6011      	str	r1, [r2, #0]
 800ebce:	d1e0      	bne.n	800eb92 <_free_r+0x22>
 800ebd0:	6818      	ldr	r0, [r3, #0]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	6053      	str	r3, [r2, #4]
 800ebd6:	4408      	add	r0, r1
 800ebd8:	6010      	str	r0, [r2, #0]
 800ebda:	e7da      	b.n	800eb92 <_free_r+0x22>
 800ebdc:	d902      	bls.n	800ebe4 <_free_r+0x74>
 800ebde:	230c      	movs	r3, #12
 800ebe0:	602b      	str	r3, [r5, #0]
 800ebe2:	e7d6      	b.n	800eb92 <_free_r+0x22>
 800ebe4:	6820      	ldr	r0, [r4, #0]
 800ebe6:	1821      	adds	r1, r4, r0
 800ebe8:	428b      	cmp	r3, r1
 800ebea:	bf04      	itt	eq
 800ebec:	6819      	ldreq	r1, [r3, #0]
 800ebee:	685b      	ldreq	r3, [r3, #4]
 800ebf0:	6063      	str	r3, [r4, #4]
 800ebf2:	bf04      	itt	eq
 800ebf4:	1809      	addeq	r1, r1, r0
 800ebf6:	6021      	streq	r1, [r4, #0]
 800ebf8:	6054      	str	r4, [r2, #4]
 800ebfa:	e7ca      	b.n	800eb92 <_free_r+0x22>
 800ebfc:	bd38      	pop	{r3, r4, r5, pc}
 800ebfe:	bf00      	nop
 800ec00:	20006500 	.word	0x20006500

0800ec04 <malloc>:
 800ec04:	4b02      	ldr	r3, [pc, #8]	@ (800ec10 <malloc+0xc>)
 800ec06:	4601      	mov	r1, r0
 800ec08:	6818      	ldr	r0, [r3, #0]
 800ec0a:	f000 b825 	b.w	800ec58 <_malloc_r>
 800ec0e:	bf00      	nop
 800ec10:	20000110 	.word	0x20000110

0800ec14 <sbrk_aligned>:
 800ec14:	b570      	push	{r4, r5, r6, lr}
 800ec16:	4e0f      	ldr	r6, [pc, #60]	@ (800ec54 <sbrk_aligned+0x40>)
 800ec18:	460c      	mov	r4, r1
 800ec1a:	6831      	ldr	r1, [r6, #0]
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	b911      	cbnz	r1, 800ec26 <sbrk_aligned+0x12>
 800ec20:	f001 f80c 	bl	800fc3c <_sbrk_r>
 800ec24:	6030      	str	r0, [r6, #0]
 800ec26:	4621      	mov	r1, r4
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f001 f807 	bl	800fc3c <_sbrk_r>
 800ec2e:	1c43      	adds	r3, r0, #1
 800ec30:	d103      	bne.n	800ec3a <sbrk_aligned+0x26>
 800ec32:	f04f 34ff 	mov.w	r4, #4294967295
 800ec36:	4620      	mov	r0, r4
 800ec38:	bd70      	pop	{r4, r5, r6, pc}
 800ec3a:	1cc4      	adds	r4, r0, #3
 800ec3c:	f024 0403 	bic.w	r4, r4, #3
 800ec40:	42a0      	cmp	r0, r4
 800ec42:	d0f8      	beq.n	800ec36 <sbrk_aligned+0x22>
 800ec44:	1a21      	subs	r1, r4, r0
 800ec46:	4628      	mov	r0, r5
 800ec48:	f000 fff8 	bl	800fc3c <_sbrk_r>
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d1f2      	bne.n	800ec36 <sbrk_aligned+0x22>
 800ec50:	e7ef      	b.n	800ec32 <sbrk_aligned+0x1e>
 800ec52:	bf00      	nop
 800ec54:	200064fc 	.word	0x200064fc

0800ec58 <_malloc_r>:
 800ec58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec5c:	1ccd      	adds	r5, r1, #3
 800ec5e:	f025 0503 	bic.w	r5, r5, #3
 800ec62:	3508      	adds	r5, #8
 800ec64:	2d0c      	cmp	r5, #12
 800ec66:	bf38      	it	cc
 800ec68:	250c      	movcc	r5, #12
 800ec6a:	2d00      	cmp	r5, #0
 800ec6c:	4606      	mov	r6, r0
 800ec6e:	db01      	blt.n	800ec74 <_malloc_r+0x1c>
 800ec70:	42a9      	cmp	r1, r5
 800ec72:	d904      	bls.n	800ec7e <_malloc_r+0x26>
 800ec74:	230c      	movs	r3, #12
 800ec76:	6033      	str	r3, [r6, #0]
 800ec78:	2000      	movs	r0, #0
 800ec7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed54 <_malloc_r+0xfc>
 800ec82:	f000 f869 	bl	800ed58 <__malloc_lock>
 800ec86:	f8d8 3000 	ldr.w	r3, [r8]
 800ec8a:	461c      	mov	r4, r3
 800ec8c:	bb44      	cbnz	r4, 800ece0 <_malloc_r+0x88>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4630      	mov	r0, r6
 800ec92:	f7ff ffbf 	bl	800ec14 <sbrk_aligned>
 800ec96:	1c43      	adds	r3, r0, #1
 800ec98:	4604      	mov	r4, r0
 800ec9a:	d158      	bne.n	800ed4e <_malloc_r+0xf6>
 800ec9c:	f8d8 4000 	ldr.w	r4, [r8]
 800eca0:	4627      	mov	r7, r4
 800eca2:	2f00      	cmp	r7, #0
 800eca4:	d143      	bne.n	800ed2e <_malloc_r+0xd6>
 800eca6:	2c00      	cmp	r4, #0
 800eca8:	d04b      	beq.n	800ed42 <_malloc_r+0xea>
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	4639      	mov	r1, r7
 800ecae:	4630      	mov	r0, r6
 800ecb0:	eb04 0903 	add.w	r9, r4, r3
 800ecb4:	f000 ffc2 	bl	800fc3c <_sbrk_r>
 800ecb8:	4581      	cmp	r9, r0
 800ecba:	d142      	bne.n	800ed42 <_malloc_r+0xea>
 800ecbc:	6821      	ldr	r1, [r4, #0]
 800ecbe:	1a6d      	subs	r5, r5, r1
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	f7ff ffa6 	bl	800ec14 <sbrk_aligned>
 800ecc8:	3001      	adds	r0, #1
 800ecca:	d03a      	beq.n	800ed42 <_malloc_r+0xea>
 800eccc:	6823      	ldr	r3, [r4, #0]
 800ecce:	442b      	add	r3, r5
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	f8d8 3000 	ldr.w	r3, [r8]
 800ecd6:	685a      	ldr	r2, [r3, #4]
 800ecd8:	bb62      	cbnz	r2, 800ed34 <_malloc_r+0xdc>
 800ecda:	f8c8 7000 	str.w	r7, [r8]
 800ecde:	e00f      	b.n	800ed00 <_malloc_r+0xa8>
 800ece0:	6822      	ldr	r2, [r4, #0]
 800ece2:	1b52      	subs	r2, r2, r5
 800ece4:	d420      	bmi.n	800ed28 <_malloc_r+0xd0>
 800ece6:	2a0b      	cmp	r2, #11
 800ece8:	d917      	bls.n	800ed1a <_malloc_r+0xc2>
 800ecea:	1961      	adds	r1, r4, r5
 800ecec:	42a3      	cmp	r3, r4
 800ecee:	6025      	str	r5, [r4, #0]
 800ecf0:	bf18      	it	ne
 800ecf2:	6059      	strne	r1, [r3, #4]
 800ecf4:	6863      	ldr	r3, [r4, #4]
 800ecf6:	bf08      	it	eq
 800ecf8:	f8c8 1000 	streq.w	r1, [r8]
 800ecfc:	5162      	str	r2, [r4, r5]
 800ecfe:	604b      	str	r3, [r1, #4]
 800ed00:	4630      	mov	r0, r6
 800ed02:	f000 f82f 	bl	800ed64 <__malloc_unlock>
 800ed06:	f104 000b 	add.w	r0, r4, #11
 800ed0a:	1d23      	adds	r3, r4, #4
 800ed0c:	f020 0007 	bic.w	r0, r0, #7
 800ed10:	1ac2      	subs	r2, r0, r3
 800ed12:	bf1c      	itt	ne
 800ed14:	1a1b      	subne	r3, r3, r0
 800ed16:	50a3      	strne	r3, [r4, r2]
 800ed18:	e7af      	b.n	800ec7a <_malloc_r+0x22>
 800ed1a:	6862      	ldr	r2, [r4, #4]
 800ed1c:	42a3      	cmp	r3, r4
 800ed1e:	bf0c      	ite	eq
 800ed20:	f8c8 2000 	streq.w	r2, [r8]
 800ed24:	605a      	strne	r2, [r3, #4]
 800ed26:	e7eb      	b.n	800ed00 <_malloc_r+0xa8>
 800ed28:	4623      	mov	r3, r4
 800ed2a:	6864      	ldr	r4, [r4, #4]
 800ed2c:	e7ae      	b.n	800ec8c <_malloc_r+0x34>
 800ed2e:	463c      	mov	r4, r7
 800ed30:	687f      	ldr	r7, [r7, #4]
 800ed32:	e7b6      	b.n	800eca2 <_malloc_r+0x4a>
 800ed34:	461a      	mov	r2, r3
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	42a3      	cmp	r3, r4
 800ed3a:	d1fb      	bne.n	800ed34 <_malloc_r+0xdc>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	6053      	str	r3, [r2, #4]
 800ed40:	e7de      	b.n	800ed00 <_malloc_r+0xa8>
 800ed42:	230c      	movs	r3, #12
 800ed44:	6033      	str	r3, [r6, #0]
 800ed46:	4630      	mov	r0, r6
 800ed48:	f000 f80c 	bl	800ed64 <__malloc_unlock>
 800ed4c:	e794      	b.n	800ec78 <_malloc_r+0x20>
 800ed4e:	6005      	str	r5, [r0, #0]
 800ed50:	e7d6      	b.n	800ed00 <_malloc_r+0xa8>
 800ed52:	bf00      	nop
 800ed54:	20006500 	.word	0x20006500

0800ed58 <__malloc_lock>:
 800ed58:	4801      	ldr	r0, [pc, #4]	@ (800ed60 <__malloc_lock+0x8>)
 800ed5a:	f7ff b8aa 	b.w	800deb2 <__retarget_lock_acquire_recursive>
 800ed5e:	bf00      	nop
 800ed60:	200064f8 	.word	0x200064f8

0800ed64 <__malloc_unlock>:
 800ed64:	4801      	ldr	r0, [pc, #4]	@ (800ed6c <__malloc_unlock+0x8>)
 800ed66:	f7ff b8a5 	b.w	800deb4 <__retarget_lock_release_recursive>
 800ed6a:	bf00      	nop
 800ed6c:	200064f8 	.word	0x200064f8

0800ed70 <_Balloc>:
 800ed70:	b570      	push	{r4, r5, r6, lr}
 800ed72:	69c6      	ldr	r6, [r0, #28]
 800ed74:	4604      	mov	r4, r0
 800ed76:	460d      	mov	r5, r1
 800ed78:	b976      	cbnz	r6, 800ed98 <_Balloc+0x28>
 800ed7a:	2010      	movs	r0, #16
 800ed7c:	f7ff ff42 	bl	800ec04 <malloc>
 800ed80:	4602      	mov	r2, r0
 800ed82:	61e0      	str	r0, [r4, #28]
 800ed84:	b920      	cbnz	r0, 800ed90 <_Balloc+0x20>
 800ed86:	4b18      	ldr	r3, [pc, #96]	@ (800ede8 <_Balloc+0x78>)
 800ed88:	4818      	ldr	r0, [pc, #96]	@ (800edec <_Balloc+0x7c>)
 800ed8a:	216b      	movs	r1, #107	@ 0x6b
 800ed8c:	f000 ff66 	bl	800fc5c <__assert_func>
 800ed90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed94:	6006      	str	r6, [r0, #0]
 800ed96:	60c6      	str	r6, [r0, #12]
 800ed98:	69e6      	ldr	r6, [r4, #28]
 800ed9a:	68f3      	ldr	r3, [r6, #12]
 800ed9c:	b183      	cbz	r3, 800edc0 <_Balloc+0x50>
 800ed9e:	69e3      	ldr	r3, [r4, #28]
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eda6:	b9b8      	cbnz	r0, 800edd8 <_Balloc+0x68>
 800eda8:	2101      	movs	r1, #1
 800edaa:	fa01 f605 	lsl.w	r6, r1, r5
 800edae:	1d72      	adds	r2, r6, #5
 800edb0:	0092      	lsls	r2, r2, #2
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 ff70 	bl	800fc98 <_calloc_r>
 800edb8:	b160      	cbz	r0, 800edd4 <_Balloc+0x64>
 800edba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800edbe:	e00e      	b.n	800edde <_Balloc+0x6e>
 800edc0:	2221      	movs	r2, #33	@ 0x21
 800edc2:	2104      	movs	r1, #4
 800edc4:	4620      	mov	r0, r4
 800edc6:	f000 ff67 	bl	800fc98 <_calloc_r>
 800edca:	69e3      	ldr	r3, [r4, #28]
 800edcc:	60f0      	str	r0, [r6, #12]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d1e4      	bne.n	800ed9e <_Balloc+0x2e>
 800edd4:	2000      	movs	r0, #0
 800edd6:	bd70      	pop	{r4, r5, r6, pc}
 800edd8:	6802      	ldr	r2, [r0, #0]
 800edda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edde:	2300      	movs	r3, #0
 800ede0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ede4:	e7f7      	b.n	800edd6 <_Balloc+0x66>
 800ede6:	bf00      	nop
 800ede8:	08010cd1 	.word	0x08010cd1
 800edec:	08010d51 	.word	0x08010d51

0800edf0 <_Bfree>:
 800edf0:	b570      	push	{r4, r5, r6, lr}
 800edf2:	69c6      	ldr	r6, [r0, #28]
 800edf4:	4605      	mov	r5, r0
 800edf6:	460c      	mov	r4, r1
 800edf8:	b976      	cbnz	r6, 800ee18 <_Bfree+0x28>
 800edfa:	2010      	movs	r0, #16
 800edfc:	f7ff ff02 	bl	800ec04 <malloc>
 800ee00:	4602      	mov	r2, r0
 800ee02:	61e8      	str	r0, [r5, #28]
 800ee04:	b920      	cbnz	r0, 800ee10 <_Bfree+0x20>
 800ee06:	4b09      	ldr	r3, [pc, #36]	@ (800ee2c <_Bfree+0x3c>)
 800ee08:	4809      	ldr	r0, [pc, #36]	@ (800ee30 <_Bfree+0x40>)
 800ee0a:	218f      	movs	r1, #143	@ 0x8f
 800ee0c:	f000 ff26 	bl	800fc5c <__assert_func>
 800ee10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee14:	6006      	str	r6, [r0, #0]
 800ee16:	60c6      	str	r6, [r0, #12]
 800ee18:	b13c      	cbz	r4, 800ee2a <_Bfree+0x3a>
 800ee1a:	69eb      	ldr	r3, [r5, #28]
 800ee1c:	6862      	ldr	r2, [r4, #4]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee24:	6021      	str	r1, [r4, #0]
 800ee26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
 800ee2c:	08010cd1 	.word	0x08010cd1
 800ee30:	08010d51 	.word	0x08010d51

0800ee34 <__multadd>:
 800ee34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee38:	690d      	ldr	r5, [r1, #16]
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	460c      	mov	r4, r1
 800ee3e:	461e      	mov	r6, r3
 800ee40:	f101 0c14 	add.w	ip, r1, #20
 800ee44:	2000      	movs	r0, #0
 800ee46:	f8dc 3000 	ldr.w	r3, [ip]
 800ee4a:	b299      	uxth	r1, r3
 800ee4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ee50:	0c1e      	lsrs	r6, r3, #16
 800ee52:	0c0b      	lsrs	r3, r1, #16
 800ee54:	fb02 3306 	mla	r3, r2, r6, r3
 800ee58:	b289      	uxth	r1, r1
 800ee5a:	3001      	adds	r0, #1
 800ee5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee60:	4285      	cmp	r5, r0
 800ee62:	f84c 1b04 	str.w	r1, [ip], #4
 800ee66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee6a:	dcec      	bgt.n	800ee46 <__multadd+0x12>
 800ee6c:	b30e      	cbz	r6, 800eeb2 <__multadd+0x7e>
 800ee6e:	68a3      	ldr	r3, [r4, #8]
 800ee70:	42ab      	cmp	r3, r5
 800ee72:	dc19      	bgt.n	800eea8 <__multadd+0x74>
 800ee74:	6861      	ldr	r1, [r4, #4]
 800ee76:	4638      	mov	r0, r7
 800ee78:	3101      	adds	r1, #1
 800ee7a:	f7ff ff79 	bl	800ed70 <_Balloc>
 800ee7e:	4680      	mov	r8, r0
 800ee80:	b928      	cbnz	r0, 800ee8e <__multadd+0x5a>
 800ee82:	4602      	mov	r2, r0
 800ee84:	4b0c      	ldr	r3, [pc, #48]	@ (800eeb8 <__multadd+0x84>)
 800ee86:	480d      	ldr	r0, [pc, #52]	@ (800eebc <__multadd+0x88>)
 800ee88:	21ba      	movs	r1, #186	@ 0xba
 800ee8a:	f000 fee7 	bl	800fc5c <__assert_func>
 800ee8e:	6922      	ldr	r2, [r4, #16]
 800ee90:	3202      	adds	r2, #2
 800ee92:	f104 010c 	add.w	r1, r4, #12
 800ee96:	0092      	lsls	r2, r2, #2
 800ee98:	300c      	adds	r0, #12
 800ee9a:	f7ff f80c 	bl	800deb6 <memcpy>
 800ee9e:	4621      	mov	r1, r4
 800eea0:	4638      	mov	r0, r7
 800eea2:	f7ff ffa5 	bl	800edf0 <_Bfree>
 800eea6:	4644      	mov	r4, r8
 800eea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eeac:	3501      	adds	r5, #1
 800eeae:	615e      	str	r6, [r3, #20]
 800eeb0:	6125      	str	r5, [r4, #16]
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	08010d40 	.word	0x08010d40
 800eebc:	08010d51 	.word	0x08010d51

0800eec0 <__hi0bits>:
 800eec0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eec4:	4603      	mov	r3, r0
 800eec6:	bf36      	itet	cc
 800eec8:	0403      	lslcc	r3, r0, #16
 800eeca:	2000      	movcs	r0, #0
 800eecc:	2010      	movcc	r0, #16
 800eece:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eed2:	bf3c      	itt	cc
 800eed4:	021b      	lslcc	r3, r3, #8
 800eed6:	3008      	addcc	r0, #8
 800eed8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eedc:	bf3c      	itt	cc
 800eede:	011b      	lslcc	r3, r3, #4
 800eee0:	3004      	addcc	r0, #4
 800eee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eee6:	bf3c      	itt	cc
 800eee8:	009b      	lslcc	r3, r3, #2
 800eeea:	3002      	addcc	r0, #2
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	db05      	blt.n	800eefc <__hi0bits+0x3c>
 800eef0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eef4:	f100 0001 	add.w	r0, r0, #1
 800eef8:	bf08      	it	eq
 800eefa:	2020      	moveq	r0, #32
 800eefc:	4770      	bx	lr

0800eefe <__lo0bits>:
 800eefe:	6803      	ldr	r3, [r0, #0]
 800ef00:	4602      	mov	r2, r0
 800ef02:	f013 0007 	ands.w	r0, r3, #7
 800ef06:	d00b      	beq.n	800ef20 <__lo0bits+0x22>
 800ef08:	07d9      	lsls	r1, r3, #31
 800ef0a:	d421      	bmi.n	800ef50 <__lo0bits+0x52>
 800ef0c:	0798      	lsls	r0, r3, #30
 800ef0e:	bf49      	itett	mi
 800ef10:	085b      	lsrmi	r3, r3, #1
 800ef12:	089b      	lsrpl	r3, r3, #2
 800ef14:	2001      	movmi	r0, #1
 800ef16:	6013      	strmi	r3, [r2, #0]
 800ef18:	bf5c      	itt	pl
 800ef1a:	6013      	strpl	r3, [r2, #0]
 800ef1c:	2002      	movpl	r0, #2
 800ef1e:	4770      	bx	lr
 800ef20:	b299      	uxth	r1, r3
 800ef22:	b909      	cbnz	r1, 800ef28 <__lo0bits+0x2a>
 800ef24:	0c1b      	lsrs	r3, r3, #16
 800ef26:	2010      	movs	r0, #16
 800ef28:	b2d9      	uxtb	r1, r3
 800ef2a:	b909      	cbnz	r1, 800ef30 <__lo0bits+0x32>
 800ef2c:	3008      	adds	r0, #8
 800ef2e:	0a1b      	lsrs	r3, r3, #8
 800ef30:	0719      	lsls	r1, r3, #28
 800ef32:	bf04      	itt	eq
 800ef34:	091b      	lsreq	r3, r3, #4
 800ef36:	3004      	addeq	r0, #4
 800ef38:	0799      	lsls	r1, r3, #30
 800ef3a:	bf04      	itt	eq
 800ef3c:	089b      	lsreq	r3, r3, #2
 800ef3e:	3002      	addeq	r0, #2
 800ef40:	07d9      	lsls	r1, r3, #31
 800ef42:	d403      	bmi.n	800ef4c <__lo0bits+0x4e>
 800ef44:	085b      	lsrs	r3, r3, #1
 800ef46:	f100 0001 	add.w	r0, r0, #1
 800ef4a:	d003      	beq.n	800ef54 <__lo0bits+0x56>
 800ef4c:	6013      	str	r3, [r2, #0]
 800ef4e:	4770      	bx	lr
 800ef50:	2000      	movs	r0, #0
 800ef52:	4770      	bx	lr
 800ef54:	2020      	movs	r0, #32
 800ef56:	4770      	bx	lr

0800ef58 <__i2b>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	2101      	movs	r1, #1
 800ef5e:	f7ff ff07 	bl	800ed70 <_Balloc>
 800ef62:	4602      	mov	r2, r0
 800ef64:	b928      	cbnz	r0, 800ef72 <__i2b+0x1a>
 800ef66:	4b05      	ldr	r3, [pc, #20]	@ (800ef7c <__i2b+0x24>)
 800ef68:	4805      	ldr	r0, [pc, #20]	@ (800ef80 <__i2b+0x28>)
 800ef6a:	f240 1145 	movw	r1, #325	@ 0x145
 800ef6e:	f000 fe75 	bl	800fc5c <__assert_func>
 800ef72:	2301      	movs	r3, #1
 800ef74:	6144      	str	r4, [r0, #20]
 800ef76:	6103      	str	r3, [r0, #16]
 800ef78:	bd10      	pop	{r4, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08010d40 	.word	0x08010d40
 800ef80:	08010d51 	.word	0x08010d51

0800ef84 <__multiply>:
 800ef84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef88:	4614      	mov	r4, r2
 800ef8a:	690a      	ldr	r2, [r1, #16]
 800ef8c:	6923      	ldr	r3, [r4, #16]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	bfa8      	it	ge
 800ef92:	4623      	movge	r3, r4
 800ef94:	460f      	mov	r7, r1
 800ef96:	bfa4      	itt	ge
 800ef98:	460c      	movge	r4, r1
 800ef9a:	461f      	movge	r7, r3
 800ef9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800efa0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800efa4:	68a3      	ldr	r3, [r4, #8]
 800efa6:	6861      	ldr	r1, [r4, #4]
 800efa8:	eb0a 0609 	add.w	r6, sl, r9
 800efac:	42b3      	cmp	r3, r6
 800efae:	b085      	sub	sp, #20
 800efb0:	bfb8      	it	lt
 800efb2:	3101      	addlt	r1, #1
 800efb4:	f7ff fedc 	bl	800ed70 <_Balloc>
 800efb8:	b930      	cbnz	r0, 800efc8 <__multiply+0x44>
 800efba:	4602      	mov	r2, r0
 800efbc:	4b44      	ldr	r3, [pc, #272]	@ (800f0d0 <__multiply+0x14c>)
 800efbe:	4845      	ldr	r0, [pc, #276]	@ (800f0d4 <__multiply+0x150>)
 800efc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800efc4:	f000 fe4a 	bl	800fc5c <__assert_func>
 800efc8:	f100 0514 	add.w	r5, r0, #20
 800efcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800efd0:	462b      	mov	r3, r5
 800efd2:	2200      	movs	r2, #0
 800efd4:	4543      	cmp	r3, r8
 800efd6:	d321      	bcc.n	800f01c <__multiply+0x98>
 800efd8:	f107 0114 	add.w	r1, r7, #20
 800efdc:	f104 0214 	add.w	r2, r4, #20
 800efe0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800efe4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800efe8:	9302      	str	r3, [sp, #8]
 800efea:	1b13      	subs	r3, r2, r4
 800efec:	3b15      	subs	r3, #21
 800efee:	f023 0303 	bic.w	r3, r3, #3
 800eff2:	3304      	adds	r3, #4
 800eff4:	f104 0715 	add.w	r7, r4, #21
 800eff8:	42ba      	cmp	r2, r7
 800effa:	bf38      	it	cc
 800effc:	2304      	movcc	r3, #4
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	9b02      	ldr	r3, [sp, #8]
 800f002:	9103      	str	r1, [sp, #12]
 800f004:	428b      	cmp	r3, r1
 800f006:	d80c      	bhi.n	800f022 <__multiply+0x9e>
 800f008:	2e00      	cmp	r6, #0
 800f00a:	dd03      	ble.n	800f014 <__multiply+0x90>
 800f00c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f010:	2b00      	cmp	r3, #0
 800f012:	d05b      	beq.n	800f0cc <__multiply+0x148>
 800f014:	6106      	str	r6, [r0, #16]
 800f016:	b005      	add	sp, #20
 800f018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01c:	f843 2b04 	str.w	r2, [r3], #4
 800f020:	e7d8      	b.n	800efd4 <__multiply+0x50>
 800f022:	f8b1 a000 	ldrh.w	sl, [r1]
 800f026:	f1ba 0f00 	cmp.w	sl, #0
 800f02a:	d024      	beq.n	800f076 <__multiply+0xf2>
 800f02c:	f104 0e14 	add.w	lr, r4, #20
 800f030:	46a9      	mov	r9, r5
 800f032:	f04f 0c00 	mov.w	ip, #0
 800f036:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f03a:	f8d9 3000 	ldr.w	r3, [r9]
 800f03e:	fa1f fb87 	uxth.w	fp, r7
 800f042:	b29b      	uxth	r3, r3
 800f044:	fb0a 330b 	mla	r3, sl, fp, r3
 800f048:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f04c:	f8d9 7000 	ldr.w	r7, [r9]
 800f050:	4463      	add	r3, ip
 800f052:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f056:	fb0a c70b 	mla	r7, sl, fp, ip
 800f05a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f05e:	b29b      	uxth	r3, r3
 800f060:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f064:	4572      	cmp	r2, lr
 800f066:	f849 3b04 	str.w	r3, [r9], #4
 800f06a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f06e:	d8e2      	bhi.n	800f036 <__multiply+0xb2>
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	f845 c003 	str.w	ip, [r5, r3]
 800f076:	9b03      	ldr	r3, [sp, #12]
 800f078:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f07c:	3104      	adds	r1, #4
 800f07e:	f1b9 0f00 	cmp.w	r9, #0
 800f082:	d021      	beq.n	800f0c8 <__multiply+0x144>
 800f084:	682b      	ldr	r3, [r5, #0]
 800f086:	f104 0c14 	add.w	ip, r4, #20
 800f08a:	46ae      	mov	lr, r5
 800f08c:	f04f 0a00 	mov.w	sl, #0
 800f090:	f8bc b000 	ldrh.w	fp, [ip]
 800f094:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f098:	fb09 770b 	mla	r7, r9, fp, r7
 800f09c:	4457      	add	r7, sl
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f0a4:	f84e 3b04 	str.w	r3, [lr], #4
 800f0a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f0ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f0b0:	f8be 3000 	ldrh.w	r3, [lr]
 800f0b4:	fb09 330a 	mla	r3, r9, sl, r3
 800f0b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f0bc:	4562      	cmp	r2, ip
 800f0be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f0c2:	d8e5      	bhi.n	800f090 <__multiply+0x10c>
 800f0c4:	9f01      	ldr	r7, [sp, #4]
 800f0c6:	51eb      	str	r3, [r5, r7]
 800f0c8:	3504      	adds	r5, #4
 800f0ca:	e799      	b.n	800f000 <__multiply+0x7c>
 800f0cc:	3e01      	subs	r6, #1
 800f0ce:	e79b      	b.n	800f008 <__multiply+0x84>
 800f0d0:	08010d40 	.word	0x08010d40
 800f0d4:	08010d51 	.word	0x08010d51

0800f0d8 <__pow5mult>:
 800f0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0dc:	4615      	mov	r5, r2
 800f0de:	f012 0203 	ands.w	r2, r2, #3
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	460e      	mov	r6, r1
 800f0e6:	d007      	beq.n	800f0f8 <__pow5mult+0x20>
 800f0e8:	4c25      	ldr	r4, [pc, #148]	@ (800f180 <__pow5mult+0xa8>)
 800f0ea:	3a01      	subs	r2, #1
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0f2:	f7ff fe9f 	bl	800ee34 <__multadd>
 800f0f6:	4606      	mov	r6, r0
 800f0f8:	10ad      	asrs	r5, r5, #2
 800f0fa:	d03d      	beq.n	800f178 <__pow5mult+0xa0>
 800f0fc:	69fc      	ldr	r4, [r7, #28]
 800f0fe:	b97c      	cbnz	r4, 800f120 <__pow5mult+0x48>
 800f100:	2010      	movs	r0, #16
 800f102:	f7ff fd7f 	bl	800ec04 <malloc>
 800f106:	4602      	mov	r2, r0
 800f108:	61f8      	str	r0, [r7, #28]
 800f10a:	b928      	cbnz	r0, 800f118 <__pow5mult+0x40>
 800f10c:	4b1d      	ldr	r3, [pc, #116]	@ (800f184 <__pow5mult+0xac>)
 800f10e:	481e      	ldr	r0, [pc, #120]	@ (800f188 <__pow5mult+0xb0>)
 800f110:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f114:	f000 fda2 	bl	800fc5c <__assert_func>
 800f118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f11c:	6004      	str	r4, [r0, #0]
 800f11e:	60c4      	str	r4, [r0, #12]
 800f120:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f124:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f128:	b94c      	cbnz	r4, 800f13e <__pow5mult+0x66>
 800f12a:	f240 2171 	movw	r1, #625	@ 0x271
 800f12e:	4638      	mov	r0, r7
 800f130:	f7ff ff12 	bl	800ef58 <__i2b>
 800f134:	2300      	movs	r3, #0
 800f136:	f8c8 0008 	str.w	r0, [r8, #8]
 800f13a:	4604      	mov	r4, r0
 800f13c:	6003      	str	r3, [r0, #0]
 800f13e:	f04f 0900 	mov.w	r9, #0
 800f142:	07eb      	lsls	r3, r5, #31
 800f144:	d50a      	bpl.n	800f15c <__pow5mult+0x84>
 800f146:	4631      	mov	r1, r6
 800f148:	4622      	mov	r2, r4
 800f14a:	4638      	mov	r0, r7
 800f14c:	f7ff ff1a 	bl	800ef84 <__multiply>
 800f150:	4631      	mov	r1, r6
 800f152:	4680      	mov	r8, r0
 800f154:	4638      	mov	r0, r7
 800f156:	f7ff fe4b 	bl	800edf0 <_Bfree>
 800f15a:	4646      	mov	r6, r8
 800f15c:	106d      	asrs	r5, r5, #1
 800f15e:	d00b      	beq.n	800f178 <__pow5mult+0xa0>
 800f160:	6820      	ldr	r0, [r4, #0]
 800f162:	b938      	cbnz	r0, 800f174 <__pow5mult+0x9c>
 800f164:	4622      	mov	r2, r4
 800f166:	4621      	mov	r1, r4
 800f168:	4638      	mov	r0, r7
 800f16a:	f7ff ff0b 	bl	800ef84 <__multiply>
 800f16e:	6020      	str	r0, [r4, #0]
 800f170:	f8c0 9000 	str.w	r9, [r0]
 800f174:	4604      	mov	r4, r0
 800f176:	e7e4      	b.n	800f142 <__pow5mult+0x6a>
 800f178:	4630      	mov	r0, r6
 800f17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f17e:	bf00      	nop
 800f180:	08010dac 	.word	0x08010dac
 800f184:	08010cd1 	.word	0x08010cd1
 800f188:	08010d51 	.word	0x08010d51

0800f18c <__lshift>:
 800f18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f190:	460c      	mov	r4, r1
 800f192:	6849      	ldr	r1, [r1, #4]
 800f194:	6923      	ldr	r3, [r4, #16]
 800f196:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f19a:	68a3      	ldr	r3, [r4, #8]
 800f19c:	4607      	mov	r7, r0
 800f19e:	4691      	mov	r9, r2
 800f1a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f1a4:	f108 0601 	add.w	r6, r8, #1
 800f1a8:	42b3      	cmp	r3, r6
 800f1aa:	db0b      	blt.n	800f1c4 <__lshift+0x38>
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	f7ff fddf 	bl	800ed70 <_Balloc>
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	b948      	cbnz	r0, 800f1ca <__lshift+0x3e>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	4b28      	ldr	r3, [pc, #160]	@ (800f25c <__lshift+0xd0>)
 800f1ba:	4829      	ldr	r0, [pc, #164]	@ (800f260 <__lshift+0xd4>)
 800f1bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f1c0:	f000 fd4c 	bl	800fc5c <__assert_func>
 800f1c4:	3101      	adds	r1, #1
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	e7ee      	b.n	800f1a8 <__lshift+0x1c>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	f100 0114 	add.w	r1, r0, #20
 800f1d0:	f100 0210 	add.w	r2, r0, #16
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	4553      	cmp	r3, sl
 800f1d8:	db33      	blt.n	800f242 <__lshift+0xb6>
 800f1da:	6920      	ldr	r0, [r4, #16]
 800f1dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1e0:	f104 0314 	add.w	r3, r4, #20
 800f1e4:	f019 091f 	ands.w	r9, r9, #31
 800f1e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1f0:	d02b      	beq.n	800f24a <__lshift+0xbe>
 800f1f2:	f1c9 0e20 	rsb	lr, r9, #32
 800f1f6:	468a      	mov	sl, r1
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	6818      	ldr	r0, [r3, #0]
 800f1fc:	fa00 f009 	lsl.w	r0, r0, r9
 800f200:	4310      	orrs	r0, r2
 800f202:	f84a 0b04 	str.w	r0, [sl], #4
 800f206:	f853 2b04 	ldr.w	r2, [r3], #4
 800f20a:	459c      	cmp	ip, r3
 800f20c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f210:	d8f3      	bhi.n	800f1fa <__lshift+0x6e>
 800f212:	ebac 0304 	sub.w	r3, ip, r4
 800f216:	3b15      	subs	r3, #21
 800f218:	f023 0303 	bic.w	r3, r3, #3
 800f21c:	3304      	adds	r3, #4
 800f21e:	f104 0015 	add.w	r0, r4, #21
 800f222:	4584      	cmp	ip, r0
 800f224:	bf38      	it	cc
 800f226:	2304      	movcc	r3, #4
 800f228:	50ca      	str	r2, [r1, r3]
 800f22a:	b10a      	cbz	r2, 800f230 <__lshift+0xa4>
 800f22c:	f108 0602 	add.w	r6, r8, #2
 800f230:	3e01      	subs	r6, #1
 800f232:	4638      	mov	r0, r7
 800f234:	612e      	str	r6, [r5, #16]
 800f236:	4621      	mov	r1, r4
 800f238:	f7ff fdda 	bl	800edf0 <_Bfree>
 800f23c:	4628      	mov	r0, r5
 800f23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f242:	f842 0f04 	str.w	r0, [r2, #4]!
 800f246:	3301      	adds	r3, #1
 800f248:	e7c5      	b.n	800f1d6 <__lshift+0x4a>
 800f24a:	3904      	subs	r1, #4
 800f24c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f250:	f841 2f04 	str.w	r2, [r1, #4]!
 800f254:	459c      	cmp	ip, r3
 800f256:	d8f9      	bhi.n	800f24c <__lshift+0xc0>
 800f258:	e7ea      	b.n	800f230 <__lshift+0xa4>
 800f25a:	bf00      	nop
 800f25c:	08010d40 	.word	0x08010d40
 800f260:	08010d51 	.word	0x08010d51

0800f264 <__mcmp>:
 800f264:	690a      	ldr	r2, [r1, #16]
 800f266:	4603      	mov	r3, r0
 800f268:	6900      	ldr	r0, [r0, #16]
 800f26a:	1a80      	subs	r0, r0, r2
 800f26c:	b530      	push	{r4, r5, lr}
 800f26e:	d10e      	bne.n	800f28e <__mcmp+0x2a>
 800f270:	3314      	adds	r3, #20
 800f272:	3114      	adds	r1, #20
 800f274:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f278:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f27c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f280:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f284:	4295      	cmp	r5, r2
 800f286:	d003      	beq.n	800f290 <__mcmp+0x2c>
 800f288:	d205      	bcs.n	800f296 <__mcmp+0x32>
 800f28a:	f04f 30ff 	mov.w	r0, #4294967295
 800f28e:	bd30      	pop	{r4, r5, pc}
 800f290:	42a3      	cmp	r3, r4
 800f292:	d3f3      	bcc.n	800f27c <__mcmp+0x18>
 800f294:	e7fb      	b.n	800f28e <__mcmp+0x2a>
 800f296:	2001      	movs	r0, #1
 800f298:	e7f9      	b.n	800f28e <__mcmp+0x2a>
	...

0800f29c <__mdiff>:
 800f29c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a0:	4689      	mov	r9, r1
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	4648      	mov	r0, r9
 800f2a8:	4614      	mov	r4, r2
 800f2aa:	f7ff ffdb 	bl	800f264 <__mcmp>
 800f2ae:	1e05      	subs	r5, r0, #0
 800f2b0:	d112      	bne.n	800f2d8 <__mdiff+0x3c>
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	f7ff fd5b 	bl	800ed70 <_Balloc>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	b928      	cbnz	r0, 800f2ca <__mdiff+0x2e>
 800f2be:	4b3f      	ldr	r3, [pc, #252]	@ (800f3bc <__mdiff+0x120>)
 800f2c0:	f240 2137 	movw	r1, #567	@ 0x237
 800f2c4:	483e      	ldr	r0, [pc, #248]	@ (800f3c0 <__mdiff+0x124>)
 800f2c6:	f000 fcc9 	bl	800fc5c <__assert_func>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2d0:	4610      	mov	r0, r2
 800f2d2:	b003      	add	sp, #12
 800f2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d8:	bfbc      	itt	lt
 800f2da:	464b      	movlt	r3, r9
 800f2dc:	46a1      	movlt	r9, r4
 800f2de:	4630      	mov	r0, r6
 800f2e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f2e4:	bfba      	itte	lt
 800f2e6:	461c      	movlt	r4, r3
 800f2e8:	2501      	movlt	r5, #1
 800f2ea:	2500      	movge	r5, #0
 800f2ec:	f7ff fd40 	bl	800ed70 <_Balloc>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	b918      	cbnz	r0, 800f2fc <__mdiff+0x60>
 800f2f4:	4b31      	ldr	r3, [pc, #196]	@ (800f3bc <__mdiff+0x120>)
 800f2f6:	f240 2145 	movw	r1, #581	@ 0x245
 800f2fa:	e7e3      	b.n	800f2c4 <__mdiff+0x28>
 800f2fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f300:	6926      	ldr	r6, [r4, #16]
 800f302:	60c5      	str	r5, [r0, #12]
 800f304:	f109 0310 	add.w	r3, r9, #16
 800f308:	f109 0514 	add.w	r5, r9, #20
 800f30c:	f104 0e14 	add.w	lr, r4, #20
 800f310:	f100 0b14 	add.w	fp, r0, #20
 800f314:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f318:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f31c:	9301      	str	r3, [sp, #4]
 800f31e:	46d9      	mov	r9, fp
 800f320:	f04f 0c00 	mov.w	ip, #0
 800f324:	9b01      	ldr	r3, [sp, #4]
 800f326:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f32a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f32e:	9301      	str	r3, [sp, #4]
 800f330:	fa1f f38a 	uxth.w	r3, sl
 800f334:	4619      	mov	r1, r3
 800f336:	b283      	uxth	r3, r0
 800f338:	1acb      	subs	r3, r1, r3
 800f33a:	0c00      	lsrs	r0, r0, #16
 800f33c:	4463      	add	r3, ip
 800f33e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f342:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f346:	b29b      	uxth	r3, r3
 800f348:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f34c:	4576      	cmp	r6, lr
 800f34e:	f849 3b04 	str.w	r3, [r9], #4
 800f352:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f356:	d8e5      	bhi.n	800f324 <__mdiff+0x88>
 800f358:	1b33      	subs	r3, r6, r4
 800f35a:	3b15      	subs	r3, #21
 800f35c:	f023 0303 	bic.w	r3, r3, #3
 800f360:	3415      	adds	r4, #21
 800f362:	3304      	adds	r3, #4
 800f364:	42a6      	cmp	r6, r4
 800f366:	bf38      	it	cc
 800f368:	2304      	movcc	r3, #4
 800f36a:	441d      	add	r5, r3
 800f36c:	445b      	add	r3, fp
 800f36e:	461e      	mov	r6, r3
 800f370:	462c      	mov	r4, r5
 800f372:	4544      	cmp	r4, r8
 800f374:	d30e      	bcc.n	800f394 <__mdiff+0xf8>
 800f376:	f108 0103 	add.w	r1, r8, #3
 800f37a:	1b49      	subs	r1, r1, r5
 800f37c:	f021 0103 	bic.w	r1, r1, #3
 800f380:	3d03      	subs	r5, #3
 800f382:	45a8      	cmp	r8, r5
 800f384:	bf38      	it	cc
 800f386:	2100      	movcc	r1, #0
 800f388:	440b      	add	r3, r1
 800f38a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f38e:	b191      	cbz	r1, 800f3b6 <__mdiff+0x11a>
 800f390:	6117      	str	r7, [r2, #16]
 800f392:	e79d      	b.n	800f2d0 <__mdiff+0x34>
 800f394:	f854 1b04 	ldr.w	r1, [r4], #4
 800f398:	46e6      	mov	lr, ip
 800f39a:	0c08      	lsrs	r0, r1, #16
 800f39c:	fa1c fc81 	uxtah	ip, ip, r1
 800f3a0:	4471      	add	r1, lr
 800f3a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f3a6:	b289      	uxth	r1, r1
 800f3a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f3ac:	f846 1b04 	str.w	r1, [r6], #4
 800f3b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f3b4:	e7dd      	b.n	800f372 <__mdiff+0xd6>
 800f3b6:	3f01      	subs	r7, #1
 800f3b8:	e7e7      	b.n	800f38a <__mdiff+0xee>
 800f3ba:	bf00      	nop
 800f3bc:	08010d40 	.word	0x08010d40
 800f3c0:	08010d51 	.word	0x08010d51

0800f3c4 <__d2b>:
 800f3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3c8:	460f      	mov	r7, r1
 800f3ca:	2101      	movs	r1, #1
 800f3cc:	ec59 8b10 	vmov	r8, r9, d0
 800f3d0:	4616      	mov	r6, r2
 800f3d2:	f7ff fccd 	bl	800ed70 <_Balloc>
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	b930      	cbnz	r0, 800f3e8 <__d2b+0x24>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	4b23      	ldr	r3, [pc, #140]	@ (800f46c <__d2b+0xa8>)
 800f3de:	4824      	ldr	r0, [pc, #144]	@ (800f470 <__d2b+0xac>)
 800f3e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800f3e4:	f000 fc3a 	bl	800fc5c <__assert_func>
 800f3e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f3ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3f0:	b10d      	cbz	r5, 800f3f6 <__d2b+0x32>
 800f3f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	f1b8 0300 	subs.w	r3, r8, #0
 800f3fc:	d023      	beq.n	800f446 <__d2b+0x82>
 800f3fe:	4668      	mov	r0, sp
 800f400:	9300      	str	r3, [sp, #0]
 800f402:	f7ff fd7c 	bl	800eefe <__lo0bits>
 800f406:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f40a:	b1d0      	cbz	r0, 800f442 <__d2b+0x7e>
 800f40c:	f1c0 0320 	rsb	r3, r0, #32
 800f410:	fa02 f303 	lsl.w	r3, r2, r3
 800f414:	430b      	orrs	r3, r1
 800f416:	40c2      	lsrs	r2, r0
 800f418:	6163      	str	r3, [r4, #20]
 800f41a:	9201      	str	r2, [sp, #4]
 800f41c:	9b01      	ldr	r3, [sp, #4]
 800f41e:	61a3      	str	r3, [r4, #24]
 800f420:	2b00      	cmp	r3, #0
 800f422:	bf0c      	ite	eq
 800f424:	2201      	moveq	r2, #1
 800f426:	2202      	movne	r2, #2
 800f428:	6122      	str	r2, [r4, #16]
 800f42a:	b1a5      	cbz	r5, 800f456 <__d2b+0x92>
 800f42c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f430:	4405      	add	r5, r0
 800f432:	603d      	str	r5, [r7, #0]
 800f434:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f438:	6030      	str	r0, [r6, #0]
 800f43a:	4620      	mov	r0, r4
 800f43c:	b003      	add	sp, #12
 800f43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f442:	6161      	str	r1, [r4, #20]
 800f444:	e7ea      	b.n	800f41c <__d2b+0x58>
 800f446:	a801      	add	r0, sp, #4
 800f448:	f7ff fd59 	bl	800eefe <__lo0bits>
 800f44c:	9b01      	ldr	r3, [sp, #4]
 800f44e:	6163      	str	r3, [r4, #20]
 800f450:	3020      	adds	r0, #32
 800f452:	2201      	movs	r2, #1
 800f454:	e7e8      	b.n	800f428 <__d2b+0x64>
 800f456:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f45a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f45e:	6038      	str	r0, [r7, #0]
 800f460:	6918      	ldr	r0, [r3, #16]
 800f462:	f7ff fd2d 	bl	800eec0 <__hi0bits>
 800f466:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f46a:	e7e5      	b.n	800f438 <__d2b+0x74>
 800f46c:	08010d40 	.word	0x08010d40
 800f470:	08010d51 	.word	0x08010d51

0800f474 <__ssputs_r>:
 800f474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f478:	688e      	ldr	r6, [r1, #8]
 800f47a:	461f      	mov	r7, r3
 800f47c:	42be      	cmp	r6, r7
 800f47e:	680b      	ldr	r3, [r1, #0]
 800f480:	4682      	mov	sl, r0
 800f482:	460c      	mov	r4, r1
 800f484:	4690      	mov	r8, r2
 800f486:	d82d      	bhi.n	800f4e4 <__ssputs_r+0x70>
 800f488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f48c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f490:	d026      	beq.n	800f4e0 <__ssputs_r+0x6c>
 800f492:	6965      	ldr	r5, [r4, #20]
 800f494:	6909      	ldr	r1, [r1, #16]
 800f496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f49a:	eba3 0901 	sub.w	r9, r3, r1
 800f49e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4a2:	1c7b      	adds	r3, r7, #1
 800f4a4:	444b      	add	r3, r9
 800f4a6:	106d      	asrs	r5, r5, #1
 800f4a8:	429d      	cmp	r5, r3
 800f4aa:	bf38      	it	cc
 800f4ac:	461d      	movcc	r5, r3
 800f4ae:	0553      	lsls	r3, r2, #21
 800f4b0:	d527      	bpl.n	800f502 <__ssputs_r+0x8e>
 800f4b2:	4629      	mov	r1, r5
 800f4b4:	f7ff fbd0 	bl	800ec58 <_malloc_r>
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	b360      	cbz	r0, 800f516 <__ssputs_r+0xa2>
 800f4bc:	6921      	ldr	r1, [r4, #16]
 800f4be:	464a      	mov	r2, r9
 800f4c0:	f7fe fcf9 	bl	800deb6 <memcpy>
 800f4c4:	89a3      	ldrh	r3, [r4, #12]
 800f4c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f4ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4ce:	81a3      	strh	r3, [r4, #12]
 800f4d0:	6126      	str	r6, [r4, #16]
 800f4d2:	6165      	str	r5, [r4, #20]
 800f4d4:	444e      	add	r6, r9
 800f4d6:	eba5 0509 	sub.w	r5, r5, r9
 800f4da:	6026      	str	r6, [r4, #0]
 800f4dc:	60a5      	str	r5, [r4, #8]
 800f4de:	463e      	mov	r6, r7
 800f4e0:	42be      	cmp	r6, r7
 800f4e2:	d900      	bls.n	800f4e6 <__ssputs_r+0x72>
 800f4e4:	463e      	mov	r6, r7
 800f4e6:	6820      	ldr	r0, [r4, #0]
 800f4e8:	4632      	mov	r2, r6
 800f4ea:	4641      	mov	r1, r8
 800f4ec:	f000 fb6a 	bl	800fbc4 <memmove>
 800f4f0:	68a3      	ldr	r3, [r4, #8]
 800f4f2:	1b9b      	subs	r3, r3, r6
 800f4f4:	60a3      	str	r3, [r4, #8]
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	4433      	add	r3, r6
 800f4fa:	6023      	str	r3, [r4, #0]
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f502:	462a      	mov	r2, r5
 800f504:	f000 fbee 	bl	800fce4 <_realloc_r>
 800f508:	4606      	mov	r6, r0
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d1e0      	bne.n	800f4d0 <__ssputs_r+0x5c>
 800f50e:	6921      	ldr	r1, [r4, #16]
 800f510:	4650      	mov	r0, sl
 800f512:	f7ff fb2d 	bl	800eb70 <_free_r>
 800f516:	230c      	movs	r3, #12
 800f518:	f8ca 3000 	str.w	r3, [sl]
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f522:	81a3      	strh	r3, [r4, #12]
 800f524:	f04f 30ff 	mov.w	r0, #4294967295
 800f528:	e7e9      	b.n	800f4fe <__ssputs_r+0x8a>
	...

0800f52c <_svfiprintf_r>:
 800f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f530:	4698      	mov	r8, r3
 800f532:	898b      	ldrh	r3, [r1, #12]
 800f534:	061b      	lsls	r3, r3, #24
 800f536:	b09d      	sub	sp, #116	@ 0x74
 800f538:	4607      	mov	r7, r0
 800f53a:	460d      	mov	r5, r1
 800f53c:	4614      	mov	r4, r2
 800f53e:	d510      	bpl.n	800f562 <_svfiprintf_r+0x36>
 800f540:	690b      	ldr	r3, [r1, #16]
 800f542:	b973      	cbnz	r3, 800f562 <_svfiprintf_r+0x36>
 800f544:	2140      	movs	r1, #64	@ 0x40
 800f546:	f7ff fb87 	bl	800ec58 <_malloc_r>
 800f54a:	6028      	str	r0, [r5, #0]
 800f54c:	6128      	str	r0, [r5, #16]
 800f54e:	b930      	cbnz	r0, 800f55e <_svfiprintf_r+0x32>
 800f550:	230c      	movs	r3, #12
 800f552:	603b      	str	r3, [r7, #0]
 800f554:	f04f 30ff 	mov.w	r0, #4294967295
 800f558:	b01d      	add	sp, #116	@ 0x74
 800f55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f55e:	2340      	movs	r3, #64	@ 0x40
 800f560:	616b      	str	r3, [r5, #20]
 800f562:	2300      	movs	r3, #0
 800f564:	9309      	str	r3, [sp, #36]	@ 0x24
 800f566:	2320      	movs	r3, #32
 800f568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f56c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f570:	2330      	movs	r3, #48	@ 0x30
 800f572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f710 <_svfiprintf_r+0x1e4>
 800f576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f57a:	f04f 0901 	mov.w	r9, #1
 800f57e:	4623      	mov	r3, r4
 800f580:	469a      	mov	sl, r3
 800f582:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f586:	b10a      	cbz	r2, 800f58c <_svfiprintf_r+0x60>
 800f588:	2a25      	cmp	r2, #37	@ 0x25
 800f58a:	d1f9      	bne.n	800f580 <_svfiprintf_r+0x54>
 800f58c:	ebba 0b04 	subs.w	fp, sl, r4
 800f590:	d00b      	beq.n	800f5aa <_svfiprintf_r+0x7e>
 800f592:	465b      	mov	r3, fp
 800f594:	4622      	mov	r2, r4
 800f596:	4629      	mov	r1, r5
 800f598:	4638      	mov	r0, r7
 800f59a:	f7ff ff6b 	bl	800f474 <__ssputs_r>
 800f59e:	3001      	adds	r0, #1
 800f5a0:	f000 80a7 	beq.w	800f6f2 <_svfiprintf_r+0x1c6>
 800f5a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5a6:	445a      	add	r2, fp
 800f5a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f000 809f 	beq.w	800f6f2 <_svfiprintf_r+0x1c6>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5be:	f10a 0a01 	add.w	sl, sl, #1
 800f5c2:	9304      	str	r3, [sp, #16]
 800f5c4:	9307      	str	r3, [sp, #28]
 800f5c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5cc:	4654      	mov	r4, sl
 800f5ce:	2205      	movs	r2, #5
 800f5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5d4:	484e      	ldr	r0, [pc, #312]	@ (800f710 <_svfiprintf_r+0x1e4>)
 800f5d6:	f7f0 fe03 	bl	80001e0 <memchr>
 800f5da:	9a04      	ldr	r2, [sp, #16]
 800f5dc:	b9d8      	cbnz	r0, 800f616 <_svfiprintf_r+0xea>
 800f5de:	06d0      	lsls	r0, r2, #27
 800f5e0:	bf44      	itt	mi
 800f5e2:	2320      	movmi	r3, #32
 800f5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5e8:	0711      	lsls	r1, r2, #28
 800f5ea:	bf44      	itt	mi
 800f5ec:	232b      	movmi	r3, #43	@ 0x2b
 800f5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f5f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5f8:	d015      	beq.n	800f626 <_svfiprintf_r+0xfa>
 800f5fa:	9a07      	ldr	r2, [sp, #28]
 800f5fc:	4654      	mov	r4, sl
 800f5fe:	2000      	movs	r0, #0
 800f600:	f04f 0c0a 	mov.w	ip, #10
 800f604:	4621      	mov	r1, r4
 800f606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f60a:	3b30      	subs	r3, #48	@ 0x30
 800f60c:	2b09      	cmp	r3, #9
 800f60e:	d94b      	bls.n	800f6a8 <_svfiprintf_r+0x17c>
 800f610:	b1b0      	cbz	r0, 800f640 <_svfiprintf_r+0x114>
 800f612:	9207      	str	r2, [sp, #28]
 800f614:	e014      	b.n	800f640 <_svfiprintf_r+0x114>
 800f616:	eba0 0308 	sub.w	r3, r0, r8
 800f61a:	fa09 f303 	lsl.w	r3, r9, r3
 800f61e:	4313      	orrs	r3, r2
 800f620:	9304      	str	r3, [sp, #16]
 800f622:	46a2      	mov	sl, r4
 800f624:	e7d2      	b.n	800f5cc <_svfiprintf_r+0xa0>
 800f626:	9b03      	ldr	r3, [sp, #12]
 800f628:	1d19      	adds	r1, r3, #4
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	9103      	str	r1, [sp, #12]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	bfbb      	ittet	lt
 800f632:	425b      	neglt	r3, r3
 800f634:	f042 0202 	orrlt.w	r2, r2, #2
 800f638:	9307      	strge	r3, [sp, #28]
 800f63a:	9307      	strlt	r3, [sp, #28]
 800f63c:	bfb8      	it	lt
 800f63e:	9204      	strlt	r2, [sp, #16]
 800f640:	7823      	ldrb	r3, [r4, #0]
 800f642:	2b2e      	cmp	r3, #46	@ 0x2e
 800f644:	d10a      	bne.n	800f65c <_svfiprintf_r+0x130>
 800f646:	7863      	ldrb	r3, [r4, #1]
 800f648:	2b2a      	cmp	r3, #42	@ 0x2a
 800f64a:	d132      	bne.n	800f6b2 <_svfiprintf_r+0x186>
 800f64c:	9b03      	ldr	r3, [sp, #12]
 800f64e:	1d1a      	adds	r2, r3, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	9203      	str	r2, [sp, #12]
 800f654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f658:	3402      	adds	r4, #2
 800f65a:	9305      	str	r3, [sp, #20]
 800f65c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f720 <_svfiprintf_r+0x1f4>
 800f660:	7821      	ldrb	r1, [r4, #0]
 800f662:	2203      	movs	r2, #3
 800f664:	4650      	mov	r0, sl
 800f666:	f7f0 fdbb 	bl	80001e0 <memchr>
 800f66a:	b138      	cbz	r0, 800f67c <_svfiprintf_r+0x150>
 800f66c:	9b04      	ldr	r3, [sp, #16]
 800f66e:	eba0 000a 	sub.w	r0, r0, sl
 800f672:	2240      	movs	r2, #64	@ 0x40
 800f674:	4082      	lsls	r2, r0
 800f676:	4313      	orrs	r3, r2
 800f678:	3401      	adds	r4, #1
 800f67a:	9304      	str	r3, [sp, #16]
 800f67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f680:	4824      	ldr	r0, [pc, #144]	@ (800f714 <_svfiprintf_r+0x1e8>)
 800f682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f686:	2206      	movs	r2, #6
 800f688:	f7f0 fdaa 	bl	80001e0 <memchr>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d036      	beq.n	800f6fe <_svfiprintf_r+0x1d2>
 800f690:	4b21      	ldr	r3, [pc, #132]	@ (800f718 <_svfiprintf_r+0x1ec>)
 800f692:	bb1b      	cbnz	r3, 800f6dc <_svfiprintf_r+0x1b0>
 800f694:	9b03      	ldr	r3, [sp, #12]
 800f696:	3307      	adds	r3, #7
 800f698:	f023 0307 	bic.w	r3, r3, #7
 800f69c:	3308      	adds	r3, #8
 800f69e:	9303      	str	r3, [sp, #12]
 800f6a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6a2:	4433      	add	r3, r6
 800f6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6a6:	e76a      	b.n	800f57e <_svfiprintf_r+0x52>
 800f6a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6ac:	460c      	mov	r4, r1
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	e7a8      	b.n	800f604 <_svfiprintf_r+0xd8>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	3401      	adds	r4, #1
 800f6b6:	9305      	str	r3, [sp, #20]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	f04f 0c0a 	mov.w	ip, #10
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6c4:	3a30      	subs	r2, #48	@ 0x30
 800f6c6:	2a09      	cmp	r2, #9
 800f6c8:	d903      	bls.n	800f6d2 <_svfiprintf_r+0x1a6>
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d0c6      	beq.n	800f65c <_svfiprintf_r+0x130>
 800f6ce:	9105      	str	r1, [sp, #20]
 800f6d0:	e7c4      	b.n	800f65c <_svfiprintf_r+0x130>
 800f6d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e7f0      	b.n	800f6be <_svfiprintf_r+0x192>
 800f6dc:	ab03      	add	r3, sp, #12
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f71c <_svfiprintf_r+0x1f0>)
 800f6e4:	a904      	add	r1, sp, #16
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	f7fd fd2e 	bl	800d148 <_printf_float>
 800f6ec:	1c42      	adds	r2, r0, #1
 800f6ee:	4606      	mov	r6, r0
 800f6f0:	d1d6      	bne.n	800f6a0 <_svfiprintf_r+0x174>
 800f6f2:	89ab      	ldrh	r3, [r5, #12]
 800f6f4:	065b      	lsls	r3, r3, #25
 800f6f6:	f53f af2d 	bmi.w	800f554 <_svfiprintf_r+0x28>
 800f6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6fc:	e72c      	b.n	800f558 <_svfiprintf_r+0x2c>
 800f6fe:	ab03      	add	r3, sp, #12
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	462a      	mov	r2, r5
 800f704:	4b05      	ldr	r3, [pc, #20]	@ (800f71c <_svfiprintf_r+0x1f0>)
 800f706:	a904      	add	r1, sp, #16
 800f708:	4638      	mov	r0, r7
 800f70a:	f7fd ffb5 	bl	800d678 <_printf_i>
 800f70e:	e7ed      	b.n	800f6ec <_svfiprintf_r+0x1c0>
 800f710:	08010ea8 	.word	0x08010ea8
 800f714:	08010eb2 	.word	0x08010eb2
 800f718:	0800d149 	.word	0x0800d149
 800f71c:	0800f475 	.word	0x0800f475
 800f720:	08010eae 	.word	0x08010eae

0800f724 <__sfputc_r>:
 800f724:	6893      	ldr	r3, [r2, #8]
 800f726:	3b01      	subs	r3, #1
 800f728:	2b00      	cmp	r3, #0
 800f72a:	b410      	push	{r4}
 800f72c:	6093      	str	r3, [r2, #8]
 800f72e:	da08      	bge.n	800f742 <__sfputc_r+0x1e>
 800f730:	6994      	ldr	r4, [r2, #24]
 800f732:	42a3      	cmp	r3, r4
 800f734:	db01      	blt.n	800f73a <__sfputc_r+0x16>
 800f736:	290a      	cmp	r1, #10
 800f738:	d103      	bne.n	800f742 <__sfputc_r+0x1e>
 800f73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f73e:	f7fe ba50 	b.w	800dbe2 <__swbuf_r>
 800f742:	6813      	ldr	r3, [r2, #0]
 800f744:	1c58      	adds	r0, r3, #1
 800f746:	6010      	str	r0, [r2, #0]
 800f748:	7019      	strb	r1, [r3, #0]
 800f74a:	4608      	mov	r0, r1
 800f74c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <__sfputs_r>:
 800f752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f754:	4606      	mov	r6, r0
 800f756:	460f      	mov	r7, r1
 800f758:	4614      	mov	r4, r2
 800f75a:	18d5      	adds	r5, r2, r3
 800f75c:	42ac      	cmp	r4, r5
 800f75e:	d101      	bne.n	800f764 <__sfputs_r+0x12>
 800f760:	2000      	movs	r0, #0
 800f762:	e007      	b.n	800f774 <__sfputs_r+0x22>
 800f764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f768:	463a      	mov	r2, r7
 800f76a:	4630      	mov	r0, r6
 800f76c:	f7ff ffda 	bl	800f724 <__sfputc_r>
 800f770:	1c43      	adds	r3, r0, #1
 800f772:	d1f3      	bne.n	800f75c <__sfputs_r+0xa>
 800f774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f778 <_vfiprintf_r>:
 800f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	460d      	mov	r5, r1
 800f77e:	b09d      	sub	sp, #116	@ 0x74
 800f780:	4614      	mov	r4, r2
 800f782:	4698      	mov	r8, r3
 800f784:	4606      	mov	r6, r0
 800f786:	b118      	cbz	r0, 800f790 <_vfiprintf_r+0x18>
 800f788:	6a03      	ldr	r3, [r0, #32]
 800f78a:	b90b      	cbnz	r3, 800f790 <_vfiprintf_r+0x18>
 800f78c:	f7fe f920 	bl	800d9d0 <__sinit>
 800f790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f792:	07d9      	lsls	r1, r3, #31
 800f794:	d405      	bmi.n	800f7a2 <_vfiprintf_r+0x2a>
 800f796:	89ab      	ldrh	r3, [r5, #12]
 800f798:	059a      	lsls	r2, r3, #22
 800f79a:	d402      	bmi.n	800f7a2 <_vfiprintf_r+0x2a>
 800f79c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f79e:	f7fe fb88 	bl	800deb2 <__retarget_lock_acquire_recursive>
 800f7a2:	89ab      	ldrh	r3, [r5, #12]
 800f7a4:	071b      	lsls	r3, r3, #28
 800f7a6:	d501      	bpl.n	800f7ac <_vfiprintf_r+0x34>
 800f7a8:	692b      	ldr	r3, [r5, #16]
 800f7aa:	b99b      	cbnz	r3, 800f7d4 <_vfiprintf_r+0x5c>
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f7fe fa56 	bl	800dc60 <__swsetup_r>
 800f7b4:	b170      	cbz	r0, 800f7d4 <_vfiprintf_r+0x5c>
 800f7b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7b8:	07dc      	lsls	r4, r3, #31
 800f7ba:	d504      	bpl.n	800f7c6 <_vfiprintf_r+0x4e>
 800f7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c0:	b01d      	add	sp, #116	@ 0x74
 800f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c6:	89ab      	ldrh	r3, [r5, #12]
 800f7c8:	0598      	lsls	r0, r3, #22
 800f7ca:	d4f7      	bmi.n	800f7bc <_vfiprintf_r+0x44>
 800f7cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ce:	f7fe fb71 	bl	800deb4 <__retarget_lock_release_recursive>
 800f7d2:	e7f3      	b.n	800f7bc <_vfiprintf_r+0x44>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7d8:	2320      	movs	r3, #32
 800f7da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7e2:	2330      	movs	r3, #48	@ 0x30
 800f7e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f994 <_vfiprintf_r+0x21c>
 800f7e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7ec:	f04f 0901 	mov.w	r9, #1
 800f7f0:	4623      	mov	r3, r4
 800f7f2:	469a      	mov	sl, r3
 800f7f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7f8:	b10a      	cbz	r2, 800f7fe <_vfiprintf_r+0x86>
 800f7fa:	2a25      	cmp	r2, #37	@ 0x25
 800f7fc:	d1f9      	bne.n	800f7f2 <_vfiprintf_r+0x7a>
 800f7fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f802:	d00b      	beq.n	800f81c <_vfiprintf_r+0xa4>
 800f804:	465b      	mov	r3, fp
 800f806:	4622      	mov	r2, r4
 800f808:	4629      	mov	r1, r5
 800f80a:	4630      	mov	r0, r6
 800f80c:	f7ff ffa1 	bl	800f752 <__sfputs_r>
 800f810:	3001      	adds	r0, #1
 800f812:	f000 80a7 	beq.w	800f964 <_vfiprintf_r+0x1ec>
 800f816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f818:	445a      	add	r2, fp
 800f81a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f81c:	f89a 3000 	ldrb.w	r3, [sl]
 800f820:	2b00      	cmp	r3, #0
 800f822:	f000 809f 	beq.w	800f964 <_vfiprintf_r+0x1ec>
 800f826:	2300      	movs	r3, #0
 800f828:	f04f 32ff 	mov.w	r2, #4294967295
 800f82c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f830:	f10a 0a01 	add.w	sl, sl, #1
 800f834:	9304      	str	r3, [sp, #16]
 800f836:	9307      	str	r3, [sp, #28]
 800f838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f83c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f83e:	4654      	mov	r4, sl
 800f840:	2205      	movs	r2, #5
 800f842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f846:	4853      	ldr	r0, [pc, #332]	@ (800f994 <_vfiprintf_r+0x21c>)
 800f848:	f7f0 fcca 	bl	80001e0 <memchr>
 800f84c:	9a04      	ldr	r2, [sp, #16]
 800f84e:	b9d8      	cbnz	r0, 800f888 <_vfiprintf_r+0x110>
 800f850:	06d1      	lsls	r1, r2, #27
 800f852:	bf44      	itt	mi
 800f854:	2320      	movmi	r3, #32
 800f856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f85a:	0713      	lsls	r3, r2, #28
 800f85c:	bf44      	itt	mi
 800f85e:	232b      	movmi	r3, #43	@ 0x2b
 800f860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f864:	f89a 3000 	ldrb.w	r3, [sl]
 800f868:	2b2a      	cmp	r3, #42	@ 0x2a
 800f86a:	d015      	beq.n	800f898 <_vfiprintf_r+0x120>
 800f86c:	9a07      	ldr	r2, [sp, #28]
 800f86e:	4654      	mov	r4, sl
 800f870:	2000      	movs	r0, #0
 800f872:	f04f 0c0a 	mov.w	ip, #10
 800f876:	4621      	mov	r1, r4
 800f878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f87c:	3b30      	subs	r3, #48	@ 0x30
 800f87e:	2b09      	cmp	r3, #9
 800f880:	d94b      	bls.n	800f91a <_vfiprintf_r+0x1a2>
 800f882:	b1b0      	cbz	r0, 800f8b2 <_vfiprintf_r+0x13a>
 800f884:	9207      	str	r2, [sp, #28]
 800f886:	e014      	b.n	800f8b2 <_vfiprintf_r+0x13a>
 800f888:	eba0 0308 	sub.w	r3, r0, r8
 800f88c:	fa09 f303 	lsl.w	r3, r9, r3
 800f890:	4313      	orrs	r3, r2
 800f892:	9304      	str	r3, [sp, #16]
 800f894:	46a2      	mov	sl, r4
 800f896:	e7d2      	b.n	800f83e <_vfiprintf_r+0xc6>
 800f898:	9b03      	ldr	r3, [sp, #12]
 800f89a:	1d19      	adds	r1, r3, #4
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	9103      	str	r1, [sp, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	bfbb      	ittet	lt
 800f8a4:	425b      	neglt	r3, r3
 800f8a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f8aa:	9307      	strge	r3, [sp, #28]
 800f8ac:	9307      	strlt	r3, [sp, #28]
 800f8ae:	bfb8      	it	lt
 800f8b0:	9204      	strlt	r2, [sp, #16]
 800f8b2:	7823      	ldrb	r3, [r4, #0]
 800f8b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8b6:	d10a      	bne.n	800f8ce <_vfiprintf_r+0x156>
 800f8b8:	7863      	ldrb	r3, [r4, #1]
 800f8ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8bc:	d132      	bne.n	800f924 <_vfiprintf_r+0x1ac>
 800f8be:	9b03      	ldr	r3, [sp, #12]
 800f8c0:	1d1a      	adds	r2, r3, #4
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	9203      	str	r2, [sp, #12]
 800f8c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8ca:	3402      	adds	r4, #2
 800f8cc:	9305      	str	r3, [sp, #20]
 800f8ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f9a4 <_vfiprintf_r+0x22c>
 800f8d2:	7821      	ldrb	r1, [r4, #0]
 800f8d4:	2203      	movs	r2, #3
 800f8d6:	4650      	mov	r0, sl
 800f8d8:	f7f0 fc82 	bl	80001e0 <memchr>
 800f8dc:	b138      	cbz	r0, 800f8ee <_vfiprintf_r+0x176>
 800f8de:	9b04      	ldr	r3, [sp, #16]
 800f8e0:	eba0 000a 	sub.w	r0, r0, sl
 800f8e4:	2240      	movs	r2, #64	@ 0x40
 800f8e6:	4082      	lsls	r2, r0
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	3401      	adds	r4, #1
 800f8ec:	9304      	str	r3, [sp, #16]
 800f8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8f2:	4829      	ldr	r0, [pc, #164]	@ (800f998 <_vfiprintf_r+0x220>)
 800f8f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8f8:	2206      	movs	r2, #6
 800f8fa:	f7f0 fc71 	bl	80001e0 <memchr>
 800f8fe:	2800      	cmp	r0, #0
 800f900:	d03f      	beq.n	800f982 <_vfiprintf_r+0x20a>
 800f902:	4b26      	ldr	r3, [pc, #152]	@ (800f99c <_vfiprintf_r+0x224>)
 800f904:	bb1b      	cbnz	r3, 800f94e <_vfiprintf_r+0x1d6>
 800f906:	9b03      	ldr	r3, [sp, #12]
 800f908:	3307      	adds	r3, #7
 800f90a:	f023 0307 	bic.w	r3, r3, #7
 800f90e:	3308      	adds	r3, #8
 800f910:	9303      	str	r3, [sp, #12]
 800f912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f914:	443b      	add	r3, r7
 800f916:	9309      	str	r3, [sp, #36]	@ 0x24
 800f918:	e76a      	b.n	800f7f0 <_vfiprintf_r+0x78>
 800f91a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f91e:	460c      	mov	r4, r1
 800f920:	2001      	movs	r0, #1
 800f922:	e7a8      	b.n	800f876 <_vfiprintf_r+0xfe>
 800f924:	2300      	movs	r3, #0
 800f926:	3401      	adds	r4, #1
 800f928:	9305      	str	r3, [sp, #20]
 800f92a:	4619      	mov	r1, r3
 800f92c:	f04f 0c0a 	mov.w	ip, #10
 800f930:	4620      	mov	r0, r4
 800f932:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f936:	3a30      	subs	r2, #48	@ 0x30
 800f938:	2a09      	cmp	r2, #9
 800f93a:	d903      	bls.n	800f944 <_vfiprintf_r+0x1cc>
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d0c6      	beq.n	800f8ce <_vfiprintf_r+0x156>
 800f940:	9105      	str	r1, [sp, #20]
 800f942:	e7c4      	b.n	800f8ce <_vfiprintf_r+0x156>
 800f944:	fb0c 2101 	mla	r1, ip, r1, r2
 800f948:	4604      	mov	r4, r0
 800f94a:	2301      	movs	r3, #1
 800f94c:	e7f0      	b.n	800f930 <_vfiprintf_r+0x1b8>
 800f94e:	ab03      	add	r3, sp, #12
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	462a      	mov	r2, r5
 800f954:	4b12      	ldr	r3, [pc, #72]	@ (800f9a0 <_vfiprintf_r+0x228>)
 800f956:	a904      	add	r1, sp, #16
 800f958:	4630      	mov	r0, r6
 800f95a:	f7fd fbf5 	bl	800d148 <_printf_float>
 800f95e:	4607      	mov	r7, r0
 800f960:	1c78      	adds	r0, r7, #1
 800f962:	d1d6      	bne.n	800f912 <_vfiprintf_r+0x19a>
 800f964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f966:	07d9      	lsls	r1, r3, #31
 800f968:	d405      	bmi.n	800f976 <_vfiprintf_r+0x1fe>
 800f96a:	89ab      	ldrh	r3, [r5, #12]
 800f96c:	059a      	lsls	r2, r3, #22
 800f96e:	d402      	bmi.n	800f976 <_vfiprintf_r+0x1fe>
 800f970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f972:	f7fe fa9f 	bl	800deb4 <__retarget_lock_release_recursive>
 800f976:	89ab      	ldrh	r3, [r5, #12]
 800f978:	065b      	lsls	r3, r3, #25
 800f97a:	f53f af1f 	bmi.w	800f7bc <_vfiprintf_r+0x44>
 800f97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f980:	e71e      	b.n	800f7c0 <_vfiprintf_r+0x48>
 800f982:	ab03      	add	r3, sp, #12
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	462a      	mov	r2, r5
 800f988:	4b05      	ldr	r3, [pc, #20]	@ (800f9a0 <_vfiprintf_r+0x228>)
 800f98a:	a904      	add	r1, sp, #16
 800f98c:	4630      	mov	r0, r6
 800f98e:	f7fd fe73 	bl	800d678 <_printf_i>
 800f992:	e7e4      	b.n	800f95e <_vfiprintf_r+0x1e6>
 800f994:	08010ea8 	.word	0x08010ea8
 800f998:	08010eb2 	.word	0x08010eb2
 800f99c:	0800d149 	.word	0x0800d149
 800f9a0:	0800f753 	.word	0x0800f753
 800f9a4:	08010eae 	.word	0x08010eae

0800f9a8 <__sflush_r>:
 800f9a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b0:	0716      	lsls	r6, r2, #28
 800f9b2:	4605      	mov	r5, r0
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	d454      	bmi.n	800fa62 <__sflush_r+0xba>
 800f9b8:	684b      	ldr	r3, [r1, #4]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	dc02      	bgt.n	800f9c4 <__sflush_r+0x1c>
 800f9be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	dd48      	ble.n	800fa56 <__sflush_r+0xae>
 800f9c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9c6:	2e00      	cmp	r6, #0
 800f9c8:	d045      	beq.n	800fa56 <__sflush_r+0xae>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f9d0:	682f      	ldr	r7, [r5, #0]
 800f9d2:	6a21      	ldr	r1, [r4, #32]
 800f9d4:	602b      	str	r3, [r5, #0]
 800f9d6:	d030      	beq.n	800fa3a <__sflush_r+0x92>
 800f9d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f9da:	89a3      	ldrh	r3, [r4, #12]
 800f9dc:	0759      	lsls	r1, r3, #29
 800f9de:	d505      	bpl.n	800f9ec <__sflush_r+0x44>
 800f9e0:	6863      	ldr	r3, [r4, #4]
 800f9e2:	1ad2      	subs	r2, r2, r3
 800f9e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f9e6:	b10b      	cbz	r3, 800f9ec <__sflush_r+0x44>
 800f9e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f9ea:	1ad2      	subs	r2, r2, r3
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9f0:	6a21      	ldr	r1, [r4, #32]
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	47b0      	blx	r6
 800f9f6:	1c43      	adds	r3, r0, #1
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	d106      	bne.n	800fa0a <__sflush_r+0x62>
 800f9fc:	6829      	ldr	r1, [r5, #0]
 800f9fe:	291d      	cmp	r1, #29
 800fa00:	d82b      	bhi.n	800fa5a <__sflush_r+0xb2>
 800fa02:	4a2a      	ldr	r2, [pc, #168]	@ (800faac <__sflush_r+0x104>)
 800fa04:	410a      	asrs	r2, r1
 800fa06:	07d6      	lsls	r6, r2, #31
 800fa08:	d427      	bmi.n	800fa5a <__sflush_r+0xb2>
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	6062      	str	r2, [r4, #4]
 800fa0e:	04d9      	lsls	r1, r3, #19
 800fa10:	6922      	ldr	r2, [r4, #16]
 800fa12:	6022      	str	r2, [r4, #0]
 800fa14:	d504      	bpl.n	800fa20 <__sflush_r+0x78>
 800fa16:	1c42      	adds	r2, r0, #1
 800fa18:	d101      	bne.n	800fa1e <__sflush_r+0x76>
 800fa1a:	682b      	ldr	r3, [r5, #0]
 800fa1c:	b903      	cbnz	r3, 800fa20 <__sflush_r+0x78>
 800fa1e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa22:	602f      	str	r7, [r5, #0]
 800fa24:	b1b9      	cbz	r1, 800fa56 <__sflush_r+0xae>
 800fa26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa2a:	4299      	cmp	r1, r3
 800fa2c:	d002      	beq.n	800fa34 <__sflush_r+0x8c>
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f7ff f89e 	bl	800eb70 <_free_r>
 800fa34:	2300      	movs	r3, #0
 800fa36:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa38:	e00d      	b.n	800fa56 <__sflush_r+0xae>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	47b0      	blx	r6
 800fa40:	4602      	mov	r2, r0
 800fa42:	1c50      	adds	r0, r2, #1
 800fa44:	d1c9      	bne.n	800f9da <__sflush_r+0x32>
 800fa46:	682b      	ldr	r3, [r5, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d0c6      	beq.n	800f9da <__sflush_r+0x32>
 800fa4c:	2b1d      	cmp	r3, #29
 800fa4e:	d001      	beq.n	800fa54 <__sflush_r+0xac>
 800fa50:	2b16      	cmp	r3, #22
 800fa52:	d11e      	bne.n	800fa92 <__sflush_r+0xea>
 800fa54:	602f      	str	r7, [r5, #0]
 800fa56:	2000      	movs	r0, #0
 800fa58:	e022      	b.n	800faa0 <__sflush_r+0xf8>
 800fa5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa5e:	b21b      	sxth	r3, r3
 800fa60:	e01b      	b.n	800fa9a <__sflush_r+0xf2>
 800fa62:	690f      	ldr	r7, [r1, #16]
 800fa64:	2f00      	cmp	r7, #0
 800fa66:	d0f6      	beq.n	800fa56 <__sflush_r+0xae>
 800fa68:	0793      	lsls	r3, r2, #30
 800fa6a:	680e      	ldr	r6, [r1, #0]
 800fa6c:	bf08      	it	eq
 800fa6e:	694b      	ldreq	r3, [r1, #20]
 800fa70:	600f      	str	r7, [r1, #0]
 800fa72:	bf18      	it	ne
 800fa74:	2300      	movne	r3, #0
 800fa76:	eba6 0807 	sub.w	r8, r6, r7
 800fa7a:	608b      	str	r3, [r1, #8]
 800fa7c:	f1b8 0f00 	cmp.w	r8, #0
 800fa80:	dde9      	ble.n	800fa56 <__sflush_r+0xae>
 800fa82:	6a21      	ldr	r1, [r4, #32]
 800fa84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fa86:	4643      	mov	r3, r8
 800fa88:	463a      	mov	r2, r7
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	47b0      	blx	r6
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	dc08      	bgt.n	800faa4 <__sflush_r+0xfc>
 800fa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa9a:	81a3      	strh	r3, [r4, #12]
 800fa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800faa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa4:	4407      	add	r7, r0
 800faa6:	eba8 0800 	sub.w	r8, r8, r0
 800faaa:	e7e7      	b.n	800fa7c <__sflush_r+0xd4>
 800faac:	dfbffffe 	.word	0xdfbffffe

0800fab0 <_fflush_r>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	690b      	ldr	r3, [r1, #16]
 800fab4:	4605      	mov	r5, r0
 800fab6:	460c      	mov	r4, r1
 800fab8:	b913      	cbnz	r3, 800fac0 <_fflush_r+0x10>
 800faba:	2500      	movs	r5, #0
 800fabc:	4628      	mov	r0, r5
 800fabe:	bd38      	pop	{r3, r4, r5, pc}
 800fac0:	b118      	cbz	r0, 800faca <_fflush_r+0x1a>
 800fac2:	6a03      	ldr	r3, [r0, #32]
 800fac4:	b90b      	cbnz	r3, 800faca <_fflush_r+0x1a>
 800fac6:	f7fd ff83 	bl	800d9d0 <__sinit>
 800faca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d0f3      	beq.n	800faba <_fflush_r+0xa>
 800fad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fad4:	07d0      	lsls	r0, r2, #31
 800fad6:	d404      	bmi.n	800fae2 <_fflush_r+0x32>
 800fad8:	0599      	lsls	r1, r3, #22
 800fada:	d402      	bmi.n	800fae2 <_fflush_r+0x32>
 800fadc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fade:	f7fe f9e8 	bl	800deb2 <__retarget_lock_acquire_recursive>
 800fae2:	4628      	mov	r0, r5
 800fae4:	4621      	mov	r1, r4
 800fae6:	f7ff ff5f 	bl	800f9a8 <__sflush_r>
 800faea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800faec:	07da      	lsls	r2, r3, #31
 800faee:	4605      	mov	r5, r0
 800faf0:	d4e4      	bmi.n	800fabc <_fflush_r+0xc>
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	059b      	lsls	r3, r3, #22
 800faf6:	d4e1      	bmi.n	800fabc <_fflush_r+0xc>
 800faf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fafa:	f7fe f9db 	bl	800deb4 <__retarget_lock_release_recursive>
 800fafe:	e7dd      	b.n	800fabc <_fflush_r+0xc>

0800fb00 <__swhatbuf_r>:
 800fb00:	b570      	push	{r4, r5, r6, lr}
 800fb02:	460c      	mov	r4, r1
 800fb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb08:	2900      	cmp	r1, #0
 800fb0a:	b096      	sub	sp, #88	@ 0x58
 800fb0c:	4615      	mov	r5, r2
 800fb0e:	461e      	mov	r6, r3
 800fb10:	da0d      	bge.n	800fb2e <__swhatbuf_r+0x2e>
 800fb12:	89a3      	ldrh	r3, [r4, #12]
 800fb14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb18:	f04f 0100 	mov.w	r1, #0
 800fb1c:	bf14      	ite	ne
 800fb1e:	2340      	movne	r3, #64	@ 0x40
 800fb20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb24:	2000      	movs	r0, #0
 800fb26:	6031      	str	r1, [r6, #0]
 800fb28:	602b      	str	r3, [r5, #0]
 800fb2a:	b016      	add	sp, #88	@ 0x58
 800fb2c:	bd70      	pop	{r4, r5, r6, pc}
 800fb2e:	466a      	mov	r2, sp
 800fb30:	f000 f862 	bl	800fbf8 <_fstat_r>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	dbec      	blt.n	800fb12 <__swhatbuf_r+0x12>
 800fb38:	9901      	ldr	r1, [sp, #4]
 800fb3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb42:	4259      	negs	r1, r3
 800fb44:	4159      	adcs	r1, r3
 800fb46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb4a:	e7eb      	b.n	800fb24 <__swhatbuf_r+0x24>

0800fb4c <__smakebuf_r>:
 800fb4c:	898b      	ldrh	r3, [r1, #12]
 800fb4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb50:	079d      	lsls	r5, r3, #30
 800fb52:	4606      	mov	r6, r0
 800fb54:	460c      	mov	r4, r1
 800fb56:	d507      	bpl.n	800fb68 <__smakebuf_r+0x1c>
 800fb58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	6123      	str	r3, [r4, #16]
 800fb60:	2301      	movs	r3, #1
 800fb62:	6163      	str	r3, [r4, #20]
 800fb64:	b003      	add	sp, #12
 800fb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb68:	ab01      	add	r3, sp, #4
 800fb6a:	466a      	mov	r2, sp
 800fb6c:	f7ff ffc8 	bl	800fb00 <__swhatbuf_r>
 800fb70:	9f00      	ldr	r7, [sp, #0]
 800fb72:	4605      	mov	r5, r0
 800fb74:	4639      	mov	r1, r7
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7ff f86e 	bl	800ec58 <_malloc_r>
 800fb7c:	b948      	cbnz	r0, 800fb92 <__smakebuf_r+0x46>
 800fb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb82:	059a      	lsls	r2, r3, #22
 800fb84:	d4ee      	bmi.n	800fb64 <__smakebuf_r+0x18>
 800fb86:	f023 0303 	bic.w	r3, r3, #3
 800fb8a:	f043 0302 	orr.w	r3, r3, #2
 800fb8e:	81a3      	strh	r3, [r4, #12]
 800fb90:	e7e2      	b.n	800fb58 <__smakebuf_r+0xc>
 800fb92:	89a3      	ldrh	r3, [r4, #12]
 800fb94:	6020      	str	r0, [r4, #0]
 800fb96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	9b01      	ldr	r3, [sp, #4]
 800fb9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fba2:	b15b      	cbz	r3, 800fbbc <__smakebuf_r+0x70>
 800fba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fba8:	4630      	mov	r0, r6
 800fbaa:	f000 f837 	bl	800fc1c <_isatty_r>
 800fbae:	b128      	cbz	r0, 800fbbc <__smakebuf_r+0x70>
 800fbb0:	89a3      	ldrh	r3, [r4, #12]
 800fbb2:	f023 0303 	bic.w	r3, r3, #3
 800fbb6:	f043 0301 	orr.w	r3, r3, #1
 800fbba:	81a3      	strh	r3, [r4, #12]
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	431d      	orrs	r5, r3
 800fbc0:	81a5      	strh	r5, [r4, #12]
 800fbc2:	e7cf      	b.n	800fb64 <__smakebuf_r+0x18>

0800fbc4 <memmove>:
 800fbc4:	4288      	cmp	r0, r1
 800fbc6:	b510      	push	{r4, lr}
 800fbc8:	eb01 0402 	add.w	r4, r1, r2
 800fbcc:	d902      	bls.n	800fbd4 <memmove+0x10>
 800fbce:	4284      	cmp	r4, r0
 800fbd0:	4623      	mov	r3, r4
 800fbd2:	d807      	bhi.n	800fbe4 <memmove+0x20>
 800fbd4:	1e43      	subs	r3, r0, #1
 800fbd6:	42a1      	cmp	r1, r4
 800fbd8:	d008      	beq.n	800fbec <memmove+0x28>
 800fbda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbe2:	e7f8      	b.n	800fbd6 <memmove+0x12>
 800fbe4:	4402      	add	r2, r0
 800fbe6:	4601      	mov	r1, r0
 800fbe8:	428a      	cmp	r2, r1
 800fbea:	d100      	bne.n	800fbee <memmove+0x2a>
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbf6:	e7f7      	b.n	800fbe8 <memmove+0x24>

0800fbf8 <_fstat_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d07      	ldr	r5, [pc, #28]	@ (800fc18 <_fstat_r+0x20>)
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	4611      	mov	r1, r2
 800fc04:	602b      	str	r3, [r5, #0]
 800fc06:	f7f2 fc3b 	bl	8002480 <_fstat>
 800fc0a:	1c43      	adds	r3, r0, #1
 800fc0c:	d102      	bne.n	800fc14 <_fstat_r+0x1c>
 800fc0e:	682b      	ldr	r3, [r5, #0]
 800fc10:	b103      	cbz	r3, 800fc14 <_fstat_r+0x1c>
 800fc12:	6023      	str	r3, [r4, #0]
 800fc14:	bd38      	pop	{r3, r4, r5, pc}
 800fc16:	bf00      	nop
 800fc18:	200064f4 	.word	0x200064f4

0800fc1c <_isatty_r>:
 800fc1c:	b538      	push	{r3, r4, r5, lr}
 800fc1e:	4d06      	ldr	r5, [pc, #24]	@ (800fc38 <_isatty_r+0x1c>)
 800fc20:	2300      	movs	r3, #0
 800fc22:	4604      	mov	r4, r0
 800fc24:	4608      	mov	r0, r1
 800fc26:	602b      	str	r3, [r5, #0]
 800fc28:	f7f2 fc3a 	bl	80024a0 <_isatty>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_isatty_r+0x1a>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_isatty_r+0x1a>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	200064f4 	.word	0x200064f4

0800fc3c <_sbrk_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d06      	ldr	r5, [pc, #24]	@ (800fc58 <_sbrk_r+0x1c>)
 800fc40:	2300      	movs	r3, #0
 800fc42:	4604      	mov	r4, r0
 800fc44:	4608      	mov	r0, r1
 800fc46:	602b      	str	r3, [r5, #0]
 800fc48:	f7f2 fc42 	bl	80024d0 <_sbrk>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d102      	bne.n	800fc56 <_sbrk_r+0x1a>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	b103      	cbz	r3, 800fc56 <_sbrk_r+0x1a>
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	bd38      	pop	{r3, r4, r5, pc}
 800fc58:	200064f4 	.word	0x200064f4

0800fc5c <__assert_func>:
 800fc5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc5e:	4614      	mov	r4, r2
 800fc60:	461a      	mov	r2, r3
 800fc62:	4b09      	ldr	r3, [pc, #36]	@ (800fc88 <__assert_func+0x2c>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4605      	mov	r5, r0
 800fc68:	68d8      	ldr	r0, [r3, #12]
 800fc6a:	b954      	cbnz	r4, 800fc82 <__assert_func+0x26>
 800fc6c:	4b07      	ldr	r3, [pc, #28]	@ (800fc8c <__assert_func+0x30>)
 800fc6e:	461c      	mov	r4, r3
 800fc70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc74:	9100      	str	r1, [sp, #0]
 800fc76:	462b      	mov	r3, r5
 800fc78:	4905      	ldr	r1, [pc, #20]	@ (800fc90 <__assert_func+0x34>)
 800fc7a:	f000 f86f 	bl	800fd5c <fiprintf>
 800fc7e:	f000 f87f 	bl	800fd80 <abort>
 800fc82:	4b04      	ldr	r3, [pc, #16]	@ (800fc94 <__assert_func+0x38>)
 800fc84:	e7f4      	b.n	800fc70 <__assert_func+0x14>
 800fc86:	bf00      	nop
 800fc88:	20000110 	.word	0x20000110
 800fc8c:	08010efe 	.word	0x08010efe
 800fc90:	08010ed0 	.word	0x08010ed0
 800fc94:	08010ec3 	.word	0x08010ec3

0800fc98 <_calloc_r>:
 800fc98:	b570      	push	{r4, r5, r6, lr}
 800fc9a:	fba1 5402 	umull	r5, r4, r1, r2
 800fc9e:	b93c      	cbnz	r4, 800fcb0 <_calloc_r+0x18>
 800fca0:	4629      	mov	r1, r5
 800fca2:	f7fe ffd9 	bl	800ec58 <_malloc_r>
 800fca6:	4606      	mov	r6, r0
 800fca8:	b928      	cbnz	r0, 800fcb6 <_calloc_r+0x1e>
 800fcaa:	2600      	movs	r6, #0
 800fcac:	4630      	mov	r0, r6
 800fcae:	bd70      	pop	{r4, r5, r6, pc}
 800fcb0:	220c      	movs	r2, #12
 800fcb2:	6002      	str	r2, [r0, #0]
 800fcb4:	e7f9      	b.n	800fcaa <_calloc_r+0x12>
 800fcb6:	462a      	mov	r2, r5
 800fcb8:	4621      	mov	r1, r4
 800fcba:	f7fe f827 	bl	800dd0c <memset>
 800fcbe:	e7f5      	b.n	800fcac <_calloc_r+0x14>

0800fcc0 <__ascii_mbtowc>:
 800fcc0:	b082      	sub	sp, #8
 800fcc2:	b901      	cbnz	r1, 800fcc6 <__ascii_mbtowc+0x6>
 800fcc4:	a901      	add	r1, sp, #4
 800fcc6:	b142      	cbz	r2, 800fcda <__ascii_mbtowc+0x1a>
 800fcc8:	b14b      	cbz	r3, 800fcde <__ascii_mbtowc+0x1e>
 800fcca:	7813      	ldrb	r3, [r2, #0]
 800fccc:	600b      	str	r3, [r1, #0]
 800fcce:	7812      	ldrb	r2, [r2, #0]
 800fcd0:	1e10      	subs	r0, r2, #0
 800fcd2:	bf18      	it	ne
 800fcd4:	2001      	movne	r0, #1
 800fcd6:	b002      	add	sp, #8
 800fcd8:	4770      	bx	lr
 800fcda:	4610      	mov	r0, r2
 800fcdc:	e7fb      	b.n	800fcd6 <__ascii_mbtowc+0x16>
 800fcde:	f06f 0001 	mvn.w	r0, #1
 800fce2:	e7f8      	b.n	800fcd6 <__ascii_mbtowc+0x16>

0800fce4 <_realloc_r>:
 800fce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce8:	4680      	mov	r8, r0
 800fcea:	4615      	mov	r5, r2
 800fcec:	460c      	mov	r4, r1
 800fcee:	b921      	cbnz	r1, 800fcfa <_realloc_r+0x16>
 800fcf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	f7fe bfaf 	b.w	800ec58 <_malloc_r>
 800fcfa:	b92a      	cbnz	r2, 800fd08 <_realloc_r+0x24>
 800fcfc:	f7fe ff38 	bl	800eb70 <_free_r>
 800fd00:	2400      	movs	r4, #0
 800fd02:	4620      	mov	r0, r4
 800fd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd08:	f000 f841 	bl	800fd8e <_malloc_usable_size_r>
 800fd0c:	4285      	cmp	r5, r0
 800fd0e:	4606      	mov	r6, r0
 800fd10:	d802      	bhi.n	800fd18 <_realloc_r+0x34>
 800fd12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fd16:	d8f4      	bhi.n	800fd02 <_realloc_r+0x1e>
 800fd18:	4629      	mov	r1, r5
 800fd1a:	4640      	mov	r0, r8
 800fd1c:	f7fe ff9c 	bl	800ec58 <_malloc_r>
 800fd20:	4607      	mov	r7, r0
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d0ec      	beq.n	800fd00 <_realloc_r+0x1c>
 800fd26:	42b5      	cmp	r5, r6
 800fd28:	462a      	mov	r2, r5
 800fd2a:	4621      	mov	r1, r4
 800fd2c:	bf28      	it	cs
 800fd2e:	4632      	movcs	r2, r6
 800fd30:	f7fe f8c1 	bl	800deb6 <memcpy>
 800fd34:	4621      	mov	r1, r4
 800fd36:	4640      	mov	r0, r8
 800fd38:	f7fe ff1a 	bl	800eb70 <_free_r>
 800fd3c:	463c      	mov	r4, r7
 800fd3e:	e7e0      	b.n	800fd02 <_realloc_r+0x1e>

0800fd40 <__ascii_wctomb>:
 800fd40:	4603      	mov	r3, r0
 800fd42:	4608      	mov	r0, r1
 800fd44:	b141      	cbz	r1, 800fd58 <__ascii_wctomb+0x18>
 800fd46:	2aff      	cmp	r2, #255	@ 0xff
 800fd48:	d904      	bls.n	800fd54 <__ascii_wctomb+0x14>
 800fd4a:	228a      	movs	r2, #138	@ 0x8a
 800fd4c:	601a      	str	r2, [r3, #0]
 800fd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd52:	4770      	bx	lr
 800fd54:	700a      	strb	r2, [r1, #0]
 800fd56:	2001      	movs	r0, #1
 800fd58:	4770      	bx	lr
	...

0800fd5c <fiprintf>:
 800fd5c:	b40e      	push	{r1, r2, r3}
 800fd5e:	b503      	push	{r0, r1, lr}
 800fd60:	4601      	mov	r1, r0
 800fd62:	ab03      	add	r3, sp, #12
 800fd64:	4805      	ldr	r0, [pc, #20]	@ (800fd7c <fiprintf+0x20>)
 800fd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd6a:	6800      	ldr	r0, [r0, #0]
 800fd6c:	9301      	str	r3, [sp, #4]
 800fd6e:	f7ff fd03 	bl	800f778 <_vfiprintf_r>
 800fd72:	b002      	add	sp, #8
 800fd74:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd78:	b003      	add	sp, #12
 800fd7a:	4770      	bx	lr
 800fd7c:	20000110 	.word	0x20000110

0800fd80 <abort>:
 800fd80:	b508      	push	{r3, lr}
 800fd82:	2006      	movs	r0, #6
 800fd84:	f000 f834 	bl	800fdf0 <raise>
 800fd88:	2001      	movs	r0, #1
 800fd8a:	f7f2 fb29 	bl	80023e0 <_exit>

0800fd8e <_malloc_usable_size_r>:
 800fd8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd92:	1f18      	subs	r0, r3, #4
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	bfbc      	itt	lt
 800fd98:	580b      	ldrlt	r3, [r1, r0]
 800fd9a:	18c0      	addlt	r0, r0, r3
 800fd9c:	4770      	bx	lr

0800fd9e <_raise_r>:
 800fd9e:	291f      	cmp	r1, #31
 800fda0:	b538      	push	{r3, r4, r5, lr}
 800fda2:	4605      	mov	r5, r0
 800fda4:	460c      	mov	r4, r1
 800fda6:	d904      	bls.n	800fdb2 <_raise_r+0x14>
 800fda8:	2316      	movs	r3, #22
 800fdaa:	6003      	str	r3, [r0, #0]
 800fdac:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb0:	bd38      	pop	{r3, r4, r5, pc}
 800fdb2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fdb4:	b112      	cbz	r2, 800fdbc <_raise_r+0x1e>
 800fdb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdba:	b94b      	cbnz	r3, 800fdd0 <_raise_r+0x32>
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	f000 f831 	bl	800fe24 <_getpid_r>
 800fdc2:	4622      	mov	r2, r4
 800fdc4:	4601      	mov	r1, r0
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdcc:	f000 b818 	b.w	800fe00 <_kill_r>
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d00a      	beq.n	800fdea <_raise_r+0x4c>
 800fdd4:	1c59      	adds	r1, r3, #1
 800fdd6:	d103      	bne.n	800fde0 <_raise_r+0x42>
 800fdd8:	2316      	movs	r3, #22
 800fdda:	6003      	str	r3, [r0, #0]
 800fddc:	2001      	movs	r0, #1
 800fdde:	e7e7      	b.n	800fdb0 <_raise_r+0x12>
 800fde0:	2100      	movs	r1, #0
 800fde2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fde6:	4620      	mov	r0, r4
 800fde8:	4798      	blx	r3
 800fdea:	2000      	movs	r0, #0
 800fdec:	e7e0      	b.n	800fdb0 <_raise_r+0x12>
	...

0800fdf0 <raise>:
 800fdf0:	4b02      	ldr	r3, [pc, #8]	@ (800fdfc <raise+0xc>)
 800fdf2:	4601      	mov	r1, r0
 800fdf4:	6818      	ldr	r0, [r3, #0]
 800fdf6:	f7ff bfd2 	b.w	800fd9e <_raise_r>
 800fdfa:	bf00      	nop
 800fdfc:	20000110 	.word	0x20000110

0800fe00 <_kill_r>:
 800fe00:	b538      	push	{r3, r4, r5, lr}
 800fe02:	4d07      	ldr	r5, [pc, #28]	@ (800fe20 <_kill_r+0x20>)
 800fe04:	2300      	movs	r3, #0
 800fe06:	4604      	mov	r4, r0
 800fe08:	4608      	mov	r0, r1
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	602b      	str	r3, [r5, #0]
 800fe0e:	f7f2 fad7 	bl	80023c0 <_kill>
 800fe12:	1c43      	adds	r3, r0, #1
 800fe14:	d102      	bne.n	800fe1c <_kill_r+0x1c>
 800fe16:	682b      	ldr	r3, [r5, #0]
 800fe18:	b103      	cbz	r3, 800fe1c <_kill_r+0x1c>
 800fe1a:	6023      	str	r3, [r4, #0]
 800fe1c:	bd38      	pop	{r3, r4, r5, pc}
 800fe1e:	bf00      	nop
 800fe20:	200064f4 	.word	0x200064f4

0800fe24 <_getpid_r>:
 800fe24:	f7f2 bac4 	b.w	80023b0 <_getpid>

0800fe28 <asinf>:
 800fe28:	b508      	push	{r3, lr}
 800fe2a:	ed2d 8b02 	vpush	{d8}
 800fe2e:	eeb0 8a40 	vmov.f32	s16, s0
 800fe32:	f000 f895 	bl	800ff60 <__ieee754_asinf>
 800fe36:	eeb4 8a48 	vcmp.f32	s16, s16
 800fe3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe3e:	eef0 8a40 	vmov.f32	s17, s0
 800fe42:	d615      	bvs.n	800fe70 <asinf+0x48>
 800fe44:	eeb0 0a48 	vmov.f32	s0, s16
 800fe48:	f000 f873 	bl	800ff32 <fabsf>
 800fe4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fe50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fe54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe58:	dd0a      	ble.n	800fe70 <asinf+0x48>
 800fe5a:	f7fd ffff 	bl	800de5c <__errno>
 800fe5e:	ecbd 8b02 	vpop	{d8}
 800fe62:	2321      	movs	r3, #33	@ 0x21
 800fe64:	6003      	str	r3, [r0, #0]
 800fe66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fe6a:	4804      	ldr	r0, [pc, #16]	@ (800fe7c <asinf+0x54>)
 800fe6c:	f000 b872 	b.w	800ff54 <nanf>
 800fe70:	eeb0 0a68 	vmov.f32	s0, s17
 800fe74:	ecbd 8b02 	vpop	{d8}
 800fe78:	bd08      	pop	{r3, pc}
 800fe7a:	bf00      	nop
 800fe7c:	08010efe 	.word	0x08010efe

0800fe80 <atan2f>:
 800fe80:	f000 b954 	b.w	801012c <__ieee754_atan2f>

0800fe84 <powf>:
 800fe84:	b508      	push	{r3, lr}
 800fe86:	ed2d 8b04 	vpush	{d8-d9}
 800fe8a:	eeb0 8a60 	vmov.f32	s16, s1
 800fe8e:	eeb0 9a40 	vmov.f32	s18, s0
 800fe92:	f000 f9eb 	bl	801026c <__ieee754_powf>
 800fe96:	eeb4 8a48 	vcmp.f32	s16, s16
 800fe9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9e:	eef0 8a40 	vmov.f32	s17, s0
 800fea2:	d63e      	bvs.n	800ff22 <powf+0x9e>
 800fea4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feac:	d112      	bne.n	800fed4 <powf+0x50>
 800feae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800feb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb6:	d039      	beq.n	800ff2c <powf+0xa8>
 800feb8:	eeb0 0a48 	vmov.f32	s0, s16
 800febc:	f000 f840 	bl	800ff40 <finitef>
 800fec0:	b378      	cbz	r0, 800ff22 <powf+0x9e>
 800fec2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feca:	d52a      	bpl.n	800ff22 <powf+0x9e>
 800fecc:	f7fd ffc6 	bl	800de5c <__errno>
 800fed0:	2322      	movs	r3, #34	@ 0x22
 800fed2:	e014      	b.n	800fefe <powf+0x7a>
 800fed4:	f000 f834 	bl	800ff40 <finitef>
 800fed8:	b998      	cbnz	r0, 800ff02 <powf+0x7e>
 800feda:	eeb0 0a49 	vmov.f32	s0, s18
 800fede:	f000 f82f 	bl	800ff40 <finitef>
 800fee2:	b170      	cbz	r0, 800ff02 <powf+0x7e>
 800fee4:	eeb0 0a48 	vmov.f32	s0, s16
 800fee8:	f000 f82a 	bl	800ff40 <finitef>
 800feec:	b148      	cbz	r0, 800ff02 <powf+0x7e>
 800feee:	eef4 8a68 	vcmp.f32	s17, s17
 800fef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef6:	d7e9      	bvc.n	800fecc <powf+0x48>
 800fef8:	f7fd ffb0 	bl	800de5c <__errno>
 800fefc:	2321      	movs	r3, #33	@ 0x21
 800fefe:	6003      	str	r3, [r0, #0]
 800ff00:	e00f      	b.n	800ff22 <powf+0x9e>
 800ff02:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ff06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0a:	d10a      	bne.n	800ff22 <powf+0x9e>
 800ff0c:	eeb0 0a49 	vmov.f32	s0, s18
 800ff10:	f000 f816 	bl	800ff40 <finitef>
 800ff14:	b128      	cbz	r0, 800ff22 <powf+0x9e>
 800ff16:	eeb0 0a48 	vmov.f32	s0, s16
 800ff1a:	f000 f811 	bl	800ff40 <finitef>
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d1d4      	bne.n	800fecc <powf+0x48>
 800ff22:	eeb0 0a68 	vmov.f32	s0, s17
 800ff26:	ecbd 8b04 	vpop	{d8-d9}
 800ff2a:	bd08      	pop	{r3, pc}
 800ff2c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ff30:	e7f7      	b.n	800ff22 <powf+0x9e>

0800ff32 <fabsf>:
 800ff32:	ee10 3a10 	vmov	r3, s0
 800ff36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff3a:	ee00 3a10 	vmov	s0, r3
 800ff3e:	4770      	bx	lr

0800ff40 <finitef>:
 800ff40:	ee10 3a10 	vmov	r3, s0
 800ff44:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ff48:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ff4c:	bfac      	ite	ge
 800ff4e:	2000      	movge	r0, #0
 800ff50:	2001      	movlt	r0, #1
 800ff52:	4770      	bx	lr

0800ff54 <nanf>:
 800ff54:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ff5c <nanf+0x8>
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	7fc00000 	.word	0x7fc00000

0800ff60 <__ieee754_asinf>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	ee10 5a10 	vmov	r5, s0
 800ff66:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ff6a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800ff6e:	ed2d 8b04 	vpush	{d8-d9}
 800ff72:	d10c      	bne.n	800ff8e <__ieee754_asinf+0x2e>
 800ff74:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80100ec <__ieee754_asinf+0x18c>
 800ff78:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80100f0 <__ieee754_asinf+0x190>
 800ff7c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ff80:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ff84:	eeb0 0a67 	vmov.f32	s0, s15
 800ff88:	ecbd 8b04 	vpop	{d8-d9}
 800ff8c:	bd38      	pop	{r3, r4, r5, pc}
 800ff8e:	d904      	bls.n	800ff9a <__ieee754_asinf+0x3a>
 800ff90:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ff94:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ff98:	e7f6      	b.n	800ff88 <__ieee754_asinf+0x28>
 800ff9a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ff9e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ffa2:	d20b      	bcs.n	800ffbc <__ieee754_asinf+0x5c>
 800ffa4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800ffa8:	d252      	bcs.n	8010050 <__ieee754_asinf+0xf0>
 800ffaa:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80100f4 <__ieee754_asinf+0x194>
 800ffae:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ffb2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ffb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffba:	dce5      	bgt.n	800ff88 <__ieee754_asinf+0x28>
 800ffbc:	f7ff ffb9 	bl	800ff32 <fabsf>
 800ffc0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800ffc4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ffc8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ffcc:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80100f8 <__ieee754_asinf+0x198>
 800ffd0:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80100fc <__ieee754_asinf+0x19c>
 800ffd4:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8010100 <__ieee754_asinf+0x1a0>
 800ffd8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800ffdc:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8010104 <__ieee754_asinf+0x1a4>
 800ffe0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ffe4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8010108 <__ieee754_asinf+0x1a8>
 800ffe8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ffec:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801010c <__ieee754_asinf+0x1ac>
 800fff0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800fff4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8010110 <__ieee754_asinf+0x1b0>
 800fff8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800fffc:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8010114 <__ieee754_asinf+0x1b4>
 8010000:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010004:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8010118 <__ieee754_asinf+0x1b8>
 8010008:	eea7 7a88 	vfma.f32	s14, s15, s16
 801000c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801011c <__ieee754_asinf+0x1bc>
 8010010:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010014:	eeb0 0a48 	vmov.f32	s0, s16
 8010018:	eee7 8a88 	vfma.f32	s17, s15, s16
 801001c:	f000 fd56 	bl	8010acc <__ieee754_sqrtf>
 8010020:	4b3f      	ldr	r3, [pc, #252]	@ (8010120 <__ieee754_asinf+0x1c0>)
 8010022:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010026:	429c      	cmp	r4, r3
 8010028:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801002c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010030:	d93d      	bls.n	80100ae <__ieee754_asinf+0x14e>
 8010032:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010036:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010124 <__ieee754_asinf+0x1c4>
 801003a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801003e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80100f0 <__ieee754_asinf+0x190>
 8010042:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010046:	2d00      	cmp	r5, #0
 8010048:	bfd8      	it	le
 801004a:	eeb1 0a40 	vnegle.f32	s0, s0
 801004e:	e79b      	b.n	800ff88 <__ieee754_asinf+0x28>
 8010050:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010054:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80100fc <__ieee754_asinf+0x19c>
 8010058:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80100f8 <__ieee754_asinf+0x198>
 801005c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8010110 <__ieee754_asinf+0x1b0>
 8010060:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010064:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010104 <__ieee754_asinf+0x1a4>
 8010068:	eee7 6a27 	vfma.f32	s13, s14, s15
 801006c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010108 <__ieee754_asinf+0x1a8>
 8010070:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010074:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801010c <__ieee754_asinf+0x1ac>
 8010078:	eee7 6a27 	vfma.f32	s13, s14, s15
 801007c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8010100 <__ieee754_asinf+0x1a0>
 8010080:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010084:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8010114 <__ieee754_asinf+0x1b4>
 8010088:	eee7 6a86 	vfma.f32	s13, s15, s12
 801008c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010118 <__ieee754_asinf+0x1b8>
 8010090:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010094:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801011c <__ieee754_asinf+0x1bc>
 8010098:	eee6 6a27 	vfma.f32	s13, s12, s15
 801009c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80100a0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80100a4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80100a8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80100ac:	e76c      	b.n	800ff88 <__ieee754_asinf+0x28>
 80100ae:	ee10 3a10 	vmov	r3, s0
 80100b2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80100b6:	f023 030f 	bic.w	r3, r3, #15
 80100ba:	ee07 3a10 	vmov	s14, r3
 80100be:	eea7 8a47 	vfms.f32	s16, s14, s14
 80100c2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80100c6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80100ca:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80100ec <__ieee754_asinf+0x18c>
 80100ce:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80100d2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8010128 <__ieee754_asinf+0x1c8>
 80100d6:	eee5 7a66 	vfms.f32	s15, s10, s13
 80100da:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80100de:	eeb0 6a40 	vmov.f32	s12, s0
 80100e2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80100e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80100ea:	e7aa      	b.n	8010042 <__ieee754_asinf+0xe2>
 80100ec:	b33bbd2e 	.word	0xb33bbd2e
 80100f0:	3fc90fdb 	.word	0x3fc90fdb
 80100f4:	7149f2ca 	.word	0x7149f2ca
 80100f8:	3a4f7f04 	.word	0x3a4f7f04
 80100fc:	3811ef08 	.word	0x3811ef08
 8010100:	3e2aaaab 	.word	0x3e2aaaab
 8010104:	bd241146 	.word	0xbd241146
 8010108:	3e4e0aa8 	.word	0x3e4e0aa8
 801010c:	bea6b090 	.word	0xbea6b090
 8010110:	3d9dc62e 	.word	0x3d9dc62e
 8010114:	bf303361 	.word	0xbf303361
 8010118:	4001572d 	.word	0x4001572d
 801011c:	c019d139 	.word	0xc019d139
 8010120:	3f799999 	.word	0x3f799999
 8010124:	333bbd2e 	.word	0x333bbd2e
 8010128:	3f490fdb 	.word	0x3f490fdb

0801012c <__ieee754_atan2f>:
 801012c:	ee10 2a90 	vmov	r2, s1
 8010130:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010134:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010138:	b510      	push	{r4, lr}
 801013a:	eef0 7a40 	vmov.f32	s15, s0
 801013e:	d806      	bhi.n	801014e <__ieee754_atan2f+0x22>
 8010140:	ee10 0a10 	vmov	r0, s0
 8010144:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010148:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801014c:	d904      	bls.n	8010158 <__ieee754_atan2f+0x2c>
 801014e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010152:	eeb0 0a67 	vmov.f32	s0, s15
 8010156:	bd10      	pop	{r4, pc}
 8010158:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801015c:	d103      	bne.n	8010166 <__ieee754_atan2f+0x3a>
 801015e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010162:	f000 bb53 	b.w	801080c <atanf>
 8010166:	1794      	asrs	r4, r2, #30
 8010168:	f004 0402 	and.w	r4, r4, #2
 801016c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010170:	b943      	cbnz	r3, 8010184 <__ieee754_atan2f+0x58>
 8010172:	2c02      	cmp	r4, #2
 8010174:	d05e      	beq.n	8010234 <__ieee754_atan2f+0x108>
 8010176:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010248 <__ieee754_atan2f+0x11c>
 801017a:	2c03      	cmp	r4, #3
 801017c:	bf08      	it	eq
 801017e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010182:	e7e6      	b.n	8010152 <__ieee754_atan2f+0x26>
 8010184:	b941      	cbnz	r1, 8010198 <__ieee754_atan2f+0x6c>
 8010186:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801024c <__ieee754_atan2f+0x120>
 801018a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010250 <__ieee754_atan2f+0x124>
 801018e:	2800      	cmp	r0, #0
 8010190:	bfb8      	it	lt
 8010192:	eef0 7a47 	vmovlt.f32	s15, s14
 8010196:	e7dc      	b.n	8010152 <__ieee754_atan2f+0x26>
 8010198:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801019c:	d110      	bne.n	80101c0 <__ieee754_atan2f+0x94>
 801019e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80101a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80101a6:	d107      	bne.n	80101b8 <__ieee754_atan2f+0x8c>
 80101a8:	2c02      	cmp	r4, #2
 80101aa:	d846      	bhi.n	801023a <__ieee754_atan2f+0x10e>
 80101ac:	4b29      	ldr	r3, [pc, #164]	@ (8010254 <__ieee754_atan2f+0x128>)
 80101ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80101b2:	edd3 7a00 	vldr	s15, [r3]
 80101b6:	e7cc      	b.n	8010152 <__ieee754_atan2f+0x26>
 80101b8:	2c02      	cmp	r4, #2
 80101ba:	d841      	bhi.n	8010240 <__ieee754_atan2f+0x114>
 80101bc:	4b26      	ldr	r3, [pc, #152]	@ (8010258 <__ieee754_atan2f+0x12c>)
 80101be:	e7f6      	b.n	80101ae <__ieee754_atan2f+0x82>
 80101c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80101c4:	d0df      	beq.n	8010186 <__ieee754_atan2f+0x5a>
 80101c6:	1a5b      	subs	r3, r3, r1
 80101c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80101cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80101d0:	da1a      	bge.n	8010208 <__ieee754_atan2f+0xdc>
 80101d2:	2a00      	cmp	r2, #0
 80101d4:	da01      	bge.n	80101da <__ieee754_atan2f+0xae>
 80101d6:	313c      	adds	r1, #60	@ 0x3c
 80101d8:	db19      	blt.n	801020e <__ieee754_atan2f+0xe2>
 80101da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80101de:	f7ff fea8 	bl	800ff32 <fabsf>
 80101e2:	f000 fb13 	bl	801080c <atanf>
 80101e6:	eef0 7a40 	vmov.f32	s15, s0
 80101ea:	2c01      	cmp	r4, #1
 80101ec:	d012      	beq.n	8010214 <__ieee754_atan2f+0xe8>
 80101ee:	2c02      	cmp	r4, #2
 80101f0:	d017      	beq.n	8010222 <__ieee754_atan2f+0xf6>
 80101f2:	2c00      	cmp	r4, #0
 80101f4:	d0ad      	beq.n	8010152 <__ieee754_atan2f+0x26>
 80101f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801025c <__ieee754_atan2f+0x130>
 80101fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010260 <__ieee754_atan2f+0x134>
 8010202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010206:	e7a4      	b.n	8010152 <__ieee754_atan2f+0x26>
 8010208:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801024c <__ieee754_atan2f+0x120>
 801020c:	e7ed      	b.n	80101ea <__ieee754_atan2f+0xbe>
 801020e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010264 <__ieee754_atan2f+0x138>
 8010212:	e7ea      	b.n	80101ea <__ieee754_atan2f+0xbe>
 8010214:	ee17 3a90 	vmov	r3, s15
 8010218:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801021c:	ee07 3a90 	vmov	s15, r3
 8010220:	e797      	b.n	8010152 <__ieee754_atan2f+0x26>
 8010222:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801025c <__ieee754_atan2f+0x130>
 8010226:	ee77 7a87 	vadd.f32	s15, s15, s14
 801022a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010260 <__ieee754_atan2f+0x134>
 801022e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010232:	e78e      	b.n	8010152 <__ieee754_atan2f+0x26>
 8010234:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010260 <__ieee754_atan2f+0x134>
 8010238:	e78b      	b.n	8010152 <__ieee754_atan2f+0x26>
 801023a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010268 <__ieee754_atan2f+0x13c>
 801023e:	e788      	b.n	8010152 <__ieee754_atan2f+0x26>
 8010240:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010264 <__ieee754_atan2f+0x138>
 8010244:	e785      	b.n	8010152 <__ieee754_atan2f+0x26>
 8010246:	bf00      	nop
 8010248:	c0490fdb 	.word	0xc0490fdb
 801024c:	3fc90fdb 	.word	0x3fc90fdb
 8010250:	bfc90fdb 	.word	0xbfc90fdb
 8010254:	0801100c 	.word	0x0801100c
 8010258:	08011000 	.word	0x08011000
 801025c:	33bbbd2e 	.word	0x33bbbd2e
 8010260:	40490fdb 	.word	0x40490fdb
 8010264:	00000000 	.word	0x00000000
 8010268:	3f490fdb 	.word	0x3f490fdb

0801026c <__ieee754_powf>:
 801026c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010270:	ee10 4a90 	vmov	r4, s1
 8010274:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010278:	ed2d 8b02 	vpush	{d8}
 801027c:	ee10 6a10 	vmov	r6, s0
 8010280:	eeb0 8a40 	vmov.f32	s16, s0
 8010284:	eef0 8a60 	vmov.f32	s17, s1
 8010288:	d10c      	bne.n	80102a4 <__ieee754_powf+0x38>
 801028a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801028e:	0076      	lsls	r6, r6, #1
 8010290:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8010294:	f240 829c 	bls.w	80107d0 <__ieee754_powf+0x564>
 8010298:	ee38 0a28 	vadd.f32	s0, s16, s17
 801029c:	ecbd 8b02 	vpop	{d8}
 80102a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102a4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80102a8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80102ac:	d802      	bhi.n	80102b4 <__ieee754_powf+0x48>
 80102ae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80102b2:	d908      	bls.n	80102c6 <__ieee754_powf+0x5a>
 80102b4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80102b8:	d1ee      	bne.n	8010298 <__ieee754_powf+0x2c>
 80102ba:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80102be:	0064      	lsls	r4, r4, #1
 80102c0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80102c4:	e7e6      	b.n	8010294 <__ieee754_powf+0x28>
 80102c6:	2e00      	cmp	r6, #0
 80102c8:	da1e      	bge.n	8010308 <__ieee754_powf+0x9c>
 80102ca:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80102ce:	d22b      	bcs.n	8010328 <__ieee754_powf+0xbc>
 80102d0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80102d4:	d332      	bcc.n	801033c <__ieee754_powf+0xd0>
 80102d6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80102da:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80102de:	fa49 f503 	asr.w	r5, r9, r3
 80102e2:	fa05 f303 	lsl.w	r3, r5, r3
 80102e6:	454b      	cmp	r3, r9
 80102e8:	d126      	bne.n	8010338 <__ieee754_powf+0xcc>
 80102ea:	f005 0501 	and.w	r5, r5, #1
 80102ee:	f1c5 0502 	rsb	r5, r5, #2
 80102f2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80102f6:	d122      	bne.n	801033e <__ieee754_powf+0xd2>
 80102f8:	2c00      	cmp	r4, #0
 80102fa:	f280 826f 	bge.w	80107dc <__ieee754_powf+0x570>
 80102fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010302:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010306:	e7c9      	b.n	801029c <__ieee754_powf+0x30>
 8010308:	2500      	movs	r5, #0
 801030a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801030e:	d1f0      	bne.n	80102f2 <__ieee754_powf+0x86>
 8010310:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010314:	f000 825c 	beq.w	80107d0 <__ieee754_powf+0x564>
 8010318:	d908      	bls.n	801032c <__ieee754_powf+0xc0>
 801031a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801067c <__ieee754_powf+0x410>
 801031e:	2c00      	cmp	r4, #0
 8010320:	bfa8      	it	ge
 8010322:	eeb0 0a68 	vmovge.f32	s0, s17
 8010326:	e7b9      	b.n	801029c <__ieee754_powf+0x30>
 8010328:	2502      	movs	r5, #2
 801032a:	e7ee      	b.n	801030a <__ieee754_powf+0x9e>
 801032c:	2c00      	cmp	r4, #0
 801032e:	f280 8252 	bge.w	80107d6 <__ieee754_powf+0x56a>
 8010332:	eeb1 0a68 	vneg.f32	s0, s17
 8010336:	e7b1      	b.n	801029c <__ieee754_powf+0x30>
 8010338:	2500      	movs	r5, #0
 801033a:	e7da      	b.n	80102f2 <__ieee754_powf+0x86>
 801033c:	2500      	movs	r5, #0
 801033e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010342:	d102      	bne.n	801034a <__ieee754_powf+0xde>
 8010344:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010348:	e7a8      	b.n	801029c <__ieee754_powf+0x30>
 801034a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801034e:	d109      	bne.n	8010364 <__ieee754_powf+0xf8>
 8010350:	2e00      	cmp	r6, #0
 8010352:	db07      	blt.n	8010364 <__ieee754_powf+0xf8>
 8010354:	eeb0 0a48 	vmov.f32	s0, s16
 8010358:	ecbd 8b02 	vpop	{d8}
 801035c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010360:	f000 bbb4 	b.w	8010acc <__ieee754_sqrtf>
 8010364:	eeb0 0a48 	vmov.f32	s0, s16
 8010368:	f7ff fde3 	bl	800ff32 <fabsf>
 801036c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010370:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010374:	4647      	mov	r7, r8
 8010376:	d002      	beq.n	801037e <__ieee754_powf+0x112>
 8010378:	f1b8 0f00 	cmp.w	r8, #0
 801037c:	d117      	bne.n	80103ae <__ieee754_powf+0x142>
 801037e:	2c00      	cmp	r4, #0
 8010380:	bfbc      	itt	lt
 8010382:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8010386:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801038a:	2e00      	cmp	r6, #0
 801038c:	da86      	bge.n	801029c <__ieee754_powf+0x30>
 801038e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8010392:	ea58 0805 	orrs.w	r8, r8, r5
 8010396:	d104      	bne.n	80103a2 <__ieee754_powf+0x136>
 8010398:	ee70 7a40 	vsub.f32	s15, s0, s0
 801039c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80103a0:	e77c      	b.n	801029c <__ieee754_powf+0x30>
 80103a2:	2d01      	cmp	r5, #1
 80103a4:	f47f af7a 	bne.w	801029c <__ieee754_powf+0x30>
 80103a8:	eeb1 0a40 	vneg.f32	s0, s0
 80103ac:	e776      	b.n	801029c <__ieee754_powf+0x30>
 80103ae:	0ff0      	lsrs	r0, r6, #31
 80103b0:	3801      	subs	r0, #1
 80103b2:	ea55 0300 	orrs.w	r3, r5, r0
 80103b6:	d104      	bne.n	80103c2 <__ieee754_powf+0x156>
 80103b8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80103bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80103c0:	e76c      	b.n	801029c <__ieee754_powf+0x30>
 80103c2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80103c6:	d973      	bls.n	80104b0 <__ieee754_powf+0x244>
 80103c8:	4bad      	ldr	r3, [pc, #692]	@ (8010680 <__ieee754_powf+0x414>)
 80103ca:	4598      	cmp	r8, r3
 80103cc:	d808      	bhi.n	80103e0 <__ieee754_powf+0x174>
 80103ce:	2c00      	cmp	r4, #0
 80103d0:	da0b      	bge.n	80103ea <__ieee754_powf+0x17e>
 80103d2:	2000      	movs	r0, #0
 80103d4:	ecbd 8b02 	vpop	{d8}
 80103d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103dc:	f000 bb70 	b.w	8010ac0 <__math_oflowf>
 80103e0:	4ba8      	ldr	r3, [pc, #672]	@ (8010684 <__ieee754_powf+0x418>)
 80103e2:	4598      	cmp	r8, r3
 80103e4:	d908      	bls.n	80103f8 <__ieee754_powf+0x18c>
 80103e6:	2c00      	cmp	r4, #0
 80103e8:	dcf3      	bgt.n	80103d2 <__ieee754_powf+0x166>
 80103ea:	2000      	movs	r0, #0
 80103ec:	ecbd 8b02 	vpop	{d8}
 80103f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103f4:	f000 bb5e 	b.w	8010ab4 <__math_uflowf>
 80103f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80103fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010400:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8010688 <__ieee754_powf+0x41c>
 8010404:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010408:	eee0 6a67 	vfms.f32	s13, s0, s15
 801040c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010410:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010414:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010418:	ee27 7a27 	vmul.f32	s14, s14, s15
 801041c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801068c <__ieee754_powf+0x420>
 8010420:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010424:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8010690 <__ieee754_powf+0x424>
 8010428:	eee0 7a07 	vfma.f32	s15, s0, s14
 801042c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8010694 <__ieee754_powf+0x428>
 8010430:	eef0 6a67 	vmov.f32	s13, s15
 8010434:	eee0 6a07 	vfma.f32	s13, s0, s14
 8010438:	ee16 3a90 	vmov	r3, s13
 801043c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010440:	f023 030f 	bic.w	r3, r3, #15
 8010444:	ee06 3a90 	vmov	s13, r3
 8010448:	eee0 6a47 	vfms.f32	s13, s0, s14
 801044c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010450:	3d01      	subs	r5, #1
 8010452:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8010456:	4305      	orrs	r5, r0
 8010458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801045c:	f024 040f 	bic.w	r4, r4, #15
 8010460:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010464:	bf18      	it	ne
 8010466:	eeb0 8a47 	vmovne.f32	s16, s14
 801046a:	ee07 4a10 	vmov	s14, r4
 801046e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010472:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8010476:	ee07 3a90 	vmov	s15, r3
 801047a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801047e:	ee07 4a10 	vmov	s14, r4
 8010482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010486:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801048a:	ee17 1a10 	vmov	r1, s14
 801048e:	2900      	cmp	r1, #0
 8010490:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010494:	f340 80dd 	ble.w	8010652 <__ieee754_powf+0x3e6>
 8010498:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801049c:	f240 80ca 	bls.w	8010634 <__ieee754_powf+0x3c8>
 80104a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a8:	bf4c      	ite	mi
 80104aa:	2001      	movmi	r0, #1
 80104ac:	2000      	movpl	r0, #0
 80104ae:	e791      	b.n	80103d4 <__ieee754_powf+0x168>
 80104b0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80104b4:	bf01      	itttt	eq
 80104b6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010698 <__ieee754_powf+0x42c>
 80104ba:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80104be:	f06f 0317 	mvneq.w	r3, #23
 80104c2:	ee17 7a90 	vmoveq	r7, s15
 80104c6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80104ca:	bf18      	it	ne
 80104cc:	2300      	movne	r3, #0
 80104ce:	3a7f      	subs	r2, #127	@ 0x7f
 80104d0:	441a      	add	r2, r3
 80104d2:	4b72      	ldr	r3, [pc, #456]	@ (801069c <__ieee754_powf+0x430>)
 80104d4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80104d8:	429f      	cmp	r7, r3
 80104da:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80104de:	dd06      	ble.n	80104ee <__ieee754_powf+0x282>
 80104e0:	4b6f      	ldr	r3, [pc, #444]	@ (80106a0 <__ieee754_powf+0x434>)
 80104e2:	429f      	cmp	r7, r3
 80104e4:	f340 80a4 	ble.w	8010630 <__ieee754_powf+0x3c4>
 80104e8:	3201      	adds	r2, #1
 80104ea:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80104ee:	2600      	movs	r6, #0
 80104f0:	4b6c      	ldr	r3, [pc, #432]	@ (80106a4 <__ieee754_powf+0x438>)
 80104f2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80104f6:	ee07 1a10 	vmov	s14, r1
 80104fa:	edd3 5a00 	vldr	s11, [r3]
 80104fe:	4b6a      	ldr	r3, [pc, #424]	@ (80106a8 <__ieee754_powf+0x43c>)
 8010500:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010504:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010508:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801050c:	1049      	asrs	r1, r1, #1
 801050e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010512:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010516:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801051a:	ee37 6a65 	vsub.f32	s12, s14, s11
 801051e:	ee07 1a90 	vmov	s15, r1
 8010522:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010526:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801052a:	ee15 7a10 	vmov	r7, s10
 801052e:	401f      	ands	r7, r3
 8010530:	ee06 7a90 	vmov	s13, r7
 8010534:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010538:	ee37 7a65 	vsub.f32	s14, s14, s11
 801053c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010540:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010544:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80106ac <__ieee754_powf+0x440>
 8010548:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80106b0 <__ieee754_powf+0x444>
 801054c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010550:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80106b4 <__ieee754_powf+0x448>
 8010554:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010558:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010688 <__ieee754_powf+0x41c>
 801055c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010560:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80106b8 <__ieee754_powf+0x44c>
 8010564:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010568:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80106bc <__ieee754_powf+0x450>
 801056c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010570:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010574:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010578:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801057c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010580:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010584:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010588:	eef0 5a67 	vmov.f32	s11, s15
 801058c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010590:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010594:	ee15 1a90 	vmov	r1, s11
 8010598:	4019      	ands	r1, r3
 801059a:	ee05 1a90 	vmov	s11, r1
 801059e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80105a2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80105a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80105ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80105b2:	eeb0 6a67 	vmov.f32	s12, s15
 80105b6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80105ba:	ee16 1a10 	vmov	r1, s12
 80105be:	4019      	ands	r1, r3
 80105c0:	ee06 1a10 	vmov	s12, r1
 80105c4:	eeb0 7a46 	vmov.f32	s14, s12
 80105c8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80105cc:	493c      	ldr	r1, [pc, #240]	@ (80106c0 <__ieee754_powf+0x454>)
 80105ce:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80105d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80105d6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80106c4 <__ieee754_powf+0x458>
 80105da:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80106c8 <__ieee754_powf+0x45c>
 80105de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105e2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80106cc <__ieee754_powf+0x460>
 80105e6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80105ea:	ed91 7a00 	vldr	s14, [r1]
 80105ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105f2:	ee07 2a10 	vmov	s14, r2
 80105f6:	eef0 6a67 	vmov.f32	s13, s15
 80105fa:	4a35      	ldr	r2, [pc, #212]	@ (80106d0 <__ieee754_powf+0x464>)
 80105fc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010600:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010604:	ed92 5a00 	vldr	s10, [r2]
 8010608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801060c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010610:	ee76 6a87 	vadd.f32	s13, s13, s14
 8010614:	ee16 2a90 	vmov	r2, s13
 8010618:	4013      	ands	r3, r2
 801061a:	ee06 3a90 	vmov	s13, r3
 801061e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010622:	ee37 7a45 	vsub.f32	s14, s14, s10
 8010626:	eea6 7a65 	vfms.f32	s14, s12, s11
 801062a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801062e:	e70f      	b.n	8010450 <__ieee754_powf+0x1e4>
 8010630:	2601      	movs	r6, #1
 8010632:	e75d      	b.n	80104f0 <__ieee754_powf+0x284>
 8010634:	d152      	bne.n	80106dc <__ieee754_powf+0x470>
 8010636:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80106d4 <__ieee754_powf+0x468>
 801063a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801063e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010642:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801064a:	f73f af29 	bgt.w	80104a0 <__ieee754_powf+0x234>
 801064e:	2386      	movs	r3, #134	@ 0x86
 8010650:	e048      	b.n	80106e4 <__ieee754_powf+0x478>
 8010652:	4a21      	ldr	r2, [pc, #132]	@ (80106d8 <__ieee754_powf+0x46c>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d907      	bls.n	8010668 <__ieee754_powf+0x3fc>
 8010658:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010660:	bf4c      	ite	mi
 8010662:	2001      	movmi	r0, #1
 8010664:	2000      	movpl	r0, #0
 8010666:	e6c1      	b.n	80103ec <__ieee754_powf+0x180>
 8010668:	d138      	bne.n	80106dc <__ieee754_powf+0x470>
 801066a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801066e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010676:	dbea      	blt.n	801064e <__ieee754_powf+0x3e2>
 8010678:	e7ee      	b.n	8010658 <__ieee754_powf+0x3ec>
 801067a:	bf00      	nop
 801067c:	00000000 	.word	0x00000000
 8010680:	3f7ffff3 	.word	0x3f7ffff3
 8010684:	3f800007 	.word	0x3f800007
 8010688:	3eaaaaab 	.word	0x3eaaaaab
 801068c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010690:	36eca570 	.word	0x36eca570
 8010694:	3fb8aa00 	.word	0x3fb8aa00
 8010698:	4b800000 	.word	0x4b800000
 801069c:	001cc471 	.word	0x001cc471
 80106a0:	005db3d6 	.word	0x005db3d6
 80106a4:	08011028 	.word	0x08011028
 80106a8:	fffff000 	.word	0xfffff000
 80106ac:	3e6c3255 	.word	0x3e6c3255
 80106b0:	3e53f142 	.word	0x3e53f142
 80106b4:	3e8ba305 	.word	0x3e8ba305
 80106b8:	3edb6db7 	.word	0x3edb6db7
 80106bc:	3f19999a 	.word	0x3f19999a
 80106c0:	08011018 	.word	0x08011018
 80106c4:	3f76384f 	.word	0x3f76384f
 80106c8:	3f763800 	.word	0x3f763800
 80106cc:	369dc3a0 	.word	0x369dc3a0
 80106d0:	08011020 	.word	0x08011020
 80106d4:	3338aa3c 	.word	0x3338aa3c
 80106d8:	43160000 	.word	0x43160000
 80106dc:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80106e0:	d971      	bls.n	80107c6 <__ieee754_powf+0x55a>
 80106e2:	15db      	asrs	r3, r3, #23
 80106e4:	3b7e      	subs	r3, #126	@ 0x7e
 80106e6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80106ea:	4118      	asrs	r0, r3
 80106ec:	4408      	add	r0, r1
 80106ee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80106f2:	4a3c      	ldr	r2, [pc, #240]	@ (80107e4 <__ieee754_powf+0x578>)
 80106f4:	3b7f      	subs	r3, #127	@ 0x7f
 80106f6:	411a      	asrs	r2, r3
 80106f8:	4002      	ands	r2, r0
 80106fa:	ee07 2a10 	vmov	s14, r2
 80106fe:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010702:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010706:	f1c3 0317 	rsb	r3, r3, #23
 801070a:	4118      	asrs	r0, r3
 801070c:	2900      	cmp	r1, #0
 801070e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010712:	bfb8      	it	lt
 8010714:	4240      	neglt	r0, r0
 8010716:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801071a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80107e8 <__ieee754_powf+0x57c>
 801071e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80107ec <__ieee754_powf+0x580>
 8010722:	ee17 3a10 	vmov	r3, s14
 8010726:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801072a:	f023 030f 	bic.w	r3, r3, #15
 801072e:	ee07 3a10 	vmov	s14, r3
 8010732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010736:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801073a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801073e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80107f0 <__ieee754_powf+0x584>
 8010742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010746:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801074a:	eef0 6a67 	vmov.f32	s13, s15
 801074e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010752:	eef0 5a66 	vmov.f32	s11, s13
 8010756:	eee7 5a46 	vfms.f32	s11, s14, s12
 801075a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801075e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010762:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80107f4 <__ieee754_powf+0x588>
 8010766:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80107f8 <__ieee754_powf+0x58c>
 801076a:	eea7 6a25 	vfma.f32	s12, s14, s11
 801076e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80107fc <__ieee754_powf+0x590>
 8010772:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010776:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010800 <__ieee754_powf+0x594>
 801077a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801077e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8010804 <__ieee754_powf+0x598>
 8010782:	eee6 5a07 	vfma.f32	s11, s12, s14
 8010786:	eeb0 6a66 	vmov.f32	s12, s13
 801078a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801078e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010792:	ee66 5a86 	vmul.f32	s11, s13, s12
 8010796:	ee36 6a47 	vsub.f32	s12, s12, s14
 801079a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801079e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80107a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80107aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80107ae:	ee10 3a10 	vmov	r3, s0
 80107b2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80107b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80107ba:	da06      	bge.n	80107ca <__ieee754_powf+0x55e>
 80107bc:	f000 f8fa 	bl	80109b4 <scalbnf>
 80107c0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80107c4:	e56a      	b.n	801029c <__ieee754_powf+0x30>
 80107c6:	2000      	movs	r0, #0
 80107c8:	e7a5      	b.n	8010716 <__ieee754_powf+0x4aa>
 80107ca:	ee00 3a10 	vmov	s0, r3
 80107ce:	e7f7      	b.n	80107c0 <__ieee754_powf+0x554>
 80107d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80107d4:	e562      	b.n	801029c <__ieee754_powf+0x30>
 80107d6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8010808 <__ieee754_powf+0x59c>
 80107da:	e55f      	b.n	801029c <__ieee754_powf+0x30>
 80107dc:	eeb0 0a48 	vmov.f32	s0, s16
 80107e0:	e55c      	b.n	801029c <__ieee754_powf+0x30>
 80107e2:	bf00      	nop
 80107e4:	ff800000 	.word	0xff800000
 80107e8:	3f317218 	.word	0x3f317218
 80107ec:	3f317200 	.word	0x3f317200
 80107f0:	35bfbe8c 	.word	0x35bfbe8c
 80107f4:	b5ddea0e 	.word	0xb5ddea0e
 80107f8:	3331bb4c 	.word	0x3331bb4c
 80107fc:	388ab355 	.word	0x388ab355
 8010800:	bb360b61 	.word	0xbb360b61
 8010804:	3e2aaaab 	.word	0x3e2aaaab
 8010808:	00000000 	.word	0x00000000

0801080c <atanf>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	ee10 5a10 	vmov	r5, s0
 8010812:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010816:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801081a:	eef0 7a40 	vmov.f32	s15, s0
 801081e:	d310      	bcc.n	8010842 <atanf+0x36>
 8010820:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010824:	d904      	bls.n	8010830 <atanf+0x24>
 8010826:	ee70 7a00 	vadd.f32	s15, s0, s0
 801082a:	eeb0 0a67 	vmov.f32	s0, s15
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010968 <atanf+0x15c>
 8010834:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801096c <atanf+0x160>
 8010838:	2d00      	cmp	r5, #0
 801083a:	bfc8      	it	gt
 801083c:	eef0 7a47 	vmovgt.f32	s15, s14
 8010840:	e7f3      	b.n	801082a <atanf+0x1e>
 8010842:	4b4b      	ldr	r3, [pc, #300]	@ (8010970 <atanf+0x164>)
 8010844:	429c      	cmp	r4, r3
 8010846:	d810      	bhi.n	801086a <atanf+0x5e>
 8010848:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801084c:	d20a      	bcs.n	8010864 <atanf+0x58>
 801084e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010974 <atanf+0x168>
 8010852:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801085a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010862:	dce2      	bgt.n	801082a <atanf+0x1e>
 8010864:	f04f 33ff 	mov.w	r3, #4294967295
 8010868:	e013      	b.n	8010892 <atanf+0x86>
 801086a:	f7ff fb62 	bl	800ff32 <fabsf>
 801086e:	4b42      	ldr	r3, [pc, #264]	@ (8010978 <atanf+0x16c>)
 8010870:	429c      	cmp	r4, r3
 8010872:	d84f      	bhi.n	8010914 <atanf+0x108>
 8010874:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010878:	429c      	cmp	r4, r3
 801087a:	d841      	bhi.n	8010900 <atanf+0xf4>
 801087c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010880:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010884:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010888:	2300      	movs	r3, #0
 801088a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801088e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010892:	1c5a      	adds	r2, r3, #1
 8010894:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010898:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801097c <atanf+0x170>
 801089c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010980 <atanf+0x174>
 80108a0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010984 <atanf+0x178>
 80108a4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80108a8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80108ac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010988 <atanf+0x17c>
 80108b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80108b4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801098c <atanf+0x180>
 80108b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80108bc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010990 <atanf+0x184>
 80108c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80108c4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010994 <atanf+0x188>
 80108c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80108cc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010998 <atanf+0x18c>
 80108d0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80108d4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801099c <atanf+0x190>
 80108d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80108dc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80109a0 <atanf+0x194>
 80108e0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80108e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80109a4 <atanf+0x198>
 80108e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80108ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80108f0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80108f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80108f8:	d121      	bne.n	801093e <atanf+0x132>
 80108fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80108fe:	e794      	b.n	801082a <atanf+0x1e>
 8010900:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010904:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010908:	ee30 0a27 	vadd.f32	s0, s0, s15
 801090c:	2301      	movs	r3, #1
 801090e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010912:	e7be      	b.n	8010892 <atanf+0x86>
 8010914:	4b24      	ldr	r3, [pc, #144]	@ (80109a8 <atanf+0x19c>)
 8010916:	429c      	cmp	r4, r3
 8010918:	d80b      	bhi.n	8010932 <atanf+0x126>
 801091a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801091e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010922:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010926:	2302      	movs	r3, #2
 8010928:	ee70 6a67 	vsub.f32	s13, s0, s15
 801092c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010930:	e7af      	b.n	8010892 <atanf+0x86>
 8010932:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010936:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801093a:	2303      	movs	r3, #3
 801093c:	e7a9      	b.n	8010892 <atanf+0x86>
 801093e:	4a1b      	ldr	r2, [pc, #108]	@ (80109ac <atanf+0x1a0>)
 8010940:	491b      	ldr	r1, [pc, #108]	@ (80109b0 <atanf+0x1a4>)
 8010942:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010946:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801094a:	edd3 6a00 	vldr	s13, [r3]
 801094e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010952:	2d00      	cmp	r5, #0
 8010954:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010958:	edd2 7a00 	vldr	s15, [r2]
 801095c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010960:	bfb8      	it	lt
 8010962:	eef1 7a67 	vneglt.f32	s15, s15
 8010966:	e760      	b.n	801082a <atanf+0x1e>
 8010968:	bfc90fdb 	.word	0xbfc90fdb
 801096c:	3fc90fdb 	.word	0x3fc90fdb
 8010970:	3edfffff 	.word	0x3edfffff
 8010974:	7149f2ca 	.word	0x7149f2ca
 8010978:	3f97ffff 	.word	0x3f97ffff
 801097c:	3c8569d7 	.word	0x3c8569d7
 8010980:	3d4bda59 	.word	0x3d4bda59
 8010984:	bd6ef16b 	.word	0xbd6ef16b
 8010988:	3d886b35 	.word	0x3d886b35
 801098c:	3dba2e6e 	.word	0x3dba2e6e
 8010990:	3e124925 	.word	0x3e124925
 8010994:	3eaaaaab 	.word	0x3eaaaaab
 8010998:	bd15a221 	.word	0xbd15a221
 801099c:	bd9d8795 	.word	0xbd9d8795
 80109a0:	bde38e38 	.word	0xbde38e38
 80109a4:	be4ccccd 	.word	0xbe4ccccd
 80109a8:	401bffff 	.word	0x401bffff
 80109ac:	08011040 	.word	0x08011040
 80109b0:	08011030 	.word	0x08011030

080109b4 <scalbnf>:
 80109b4:	ee10 3a10 	vmov	r3, s0
 80109b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80109bc:	d02b      	beq.n	8010a16 <scalbnf+0x62>
 80109be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80109c2:	d302      	bcc.n	80109ca <scalbnf+0x16>
 80109c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80109c8:	4770      	bx	lr
 80109ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80109ce:	d123      	bne.n	8010a18 <scalbnf+0x64>
 80109d0:	4b24      	ldr	r3, [pc, #144]	@ (8010a64 <scalbnf+0xb0>)
 80109d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010a68 <scalbnf+0xb4>
 80109d6:	4298      	cmp	r0, r3
 80109d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80109dc:	db17      	blt.n	8010a0e <scalbnf+0x5a>
 80109de:	ee10 3a10 	vmov	r3, s0
 80109e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80109e6:	3a19      	subs	r2, #25
 80109e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80109ec:	4288      	cmp	r0, r1
 80109ee:	dd15      	ble.n	8010a1c <scalbnf+0x68>
 80109f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010a6c <scalbnf+0xb8>
 80109f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010a70 <scalbnf+0xbc>
 80109f8:	ee10 3a10 	vmov	r3, s0
 80109fc:	eeb0 7a67 	vmov.f32	s14, s15
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	bfb8      	it	lt
 8010a04:	eef0 7a66 	vmovlt.f32	s15, s13
 8010a08:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010a0c:	4770      	bx	lr
 8010a0e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010a74 <scalbnf+0xc0>
 8010a12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010a16:	4770      	bx	lr
 8010a18:	0dd2      	lsrs	r2, r2, #23
 8010a1a:	e7e5      	b.n	80109e8 <scalbnf+0x34>
 8010a1c:	4410      	add	r0, r2
 8010a1e:	28fe      	cmp	r0, #254	@ 0xfe
 8010a20:	dce6      	bgt.n	80109f0 <scalbnf+0x3c>
 8010a22:	2800      	cmp	r0, #0
 8010a24:	dd06      	ble.n	8010a34 <scalbnf+0x80>
 8010a26:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a2a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010a2e:	ee00 3a10 	vmov	s0, r3
 8010a32:	4770      	bx	lr
 8010a34:	f110 0f16 	cmn.w	r0, #22
 8010a38:	da09      	bge.n	8010a4e <scalbnf+0x9a>
 8010a3a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010a74 <scalbnf+0xc0>
 8010a3e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010a78 <scalbnf+0xc4>
 8010a42:	ee10 3a10 	vmov	r3, s0
 8010a46:	eeb0 7a67 	vmov.f32	s14, s15
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	e7d9      	b.n	8010a02 <scalbnf+0x4e>
 8010a4e:	3019      	adds	r0, #25
 8010a50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a54:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010a58:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010a7c <scalbnf+0xc8>
 8010a5c:	ee07 3a90 	vmov	s15, r3
 8010a60:	e7d7      	b.n	8010a12 <scalbnf+0x5e>
 8010a62:	bf00      	nop
 8010a64:	ffff3cb0 	.word	0xffff3cb0
 8010a68:	4c000000 	.word	0x4c000000
 8010a6c:	7149f2ca 	.word	0x7149f2ca
 8010a70:	f149f2ca 	.word	0xf149f2ca
 8010a74:	0da24260 	.word	0x0da24260
 8010a78:	8da24260 	.word	0x8da24260
 8010a7c:	33000000 	.word	0x33000000

08010a80 <with_errnof>:
 8010a80:	b510      	push	{r4, lr}
 8010a82:	ed2d 8b02 	vpush	{d8}
 8010a86:	eeb0 8a40 	vmov.f32	s16, s0
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	f7fd f9e6 	bl	800de5c <__errno>
 8010a90:	eeb0 0a48 	vmov.f32	s0, s16
 8010a94:	ecbd 8b02 	vpop	{d8}
 8010a98:	6004      	str	r4, [r0, #0]
 8010a9a:	bd10      	pop	{r4, pc}

08010a9c <xflowf>:
 8010a9c:	b130      	cbz	r0, 8010aac <xflowf+0x10>
 8010a9e:	eef1 7a40 	vneg.f32	s15, s0
 8010aa2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010aa6:	2022      	movs	r0, #34	@ 0x22
 8010aa8:	f7ff bfea 	b.w	8010a80 <with_errnof>
 8010aac:	eef0 7a40 	vmov.f32	s15, s0
 8010ab0:	e7f7      	b.n	8010aa2 <xflowf+0x6>
	...

08010ab4 <__math_uflowf>:
 8010ab4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010abc <__math_uflowf+0x8>
 8010ab8:	f7ff bff0 	b.w	8010a9c <xflowf>
 8010abc:	10000000 	.word	0x10000000

08010ac0 <__math_oflowf>:
 8010ac0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010ac8 <__math_oflowf+0x8>
 8010ac4:	f7ff bfea 	b.w	8010a9c <xflowf>
 8010ac8:	70000000 	.word	0x70000000

08010acc <__ieee754_sqrtf>:
 8010acc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ad0:	4770      	bx	lr
	...

08010ad4 <_init>:
 8010ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad6:	bf00      	nop
 8010ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ada:	bc08      	pop	{r3}
 8010adc:	469e      	mov	lr, r3
 8010ade:	4770      	bx	lr

08010ae0 <_fini>:
 8010ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ae2:	bf00      	nop
 8010ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ae6:	bc08      	pop	{r3}
 8010ae8:	469e      	mov	lr, r3
 8010aea:	4770      	bx	lr
